/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 117);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(438);


/***/ }),

/***/ 420:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(3);

/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 438:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(jQuery) {(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(420)], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "core",
	    name: "Core",
	    category: "framework",
	    description: "The core of the Kendo framework."
	};

	/*jshint eqnull: true, loopfunc: true, evil: true, boss: true, freeze: false*/
	(function($, window, undefined) {
	    var kendo = window.kendo = window.kendo || { cultures: {} },
	        extend = $.extend,
	        each = $.each,
	        isArray = $.isArray,
	        proxy = $.proxy,
	        noop = $.noop,
	        math = Math,
	        Template,
	        JSON = window.JSON || {},
	        support = {},
	        percentRegExp = /%/,
	        formatRegExp = /\{(\d+)(:[^\}]+)?\}/g,
	        boxShadowRegExp = /(\d+(?:\.?)\d*)px\s*(\d+(?:\.?)\d*)px\s*(\d+(?:\.?)\d*)px\s*(\d+)?/i,
	        numberRegExp = /^(\+|-?)\d+(\.?)\d*$/,
	        FUNCTION = "function",
	        STRING = "string",
	        NUMBER = "number",
	        OBJECT = "object",
	        NULL = "null",
	        BOOLEAN = "boolean",
	        UNDEFINED = "undefined",
	        getterCache = {},
	        setterCache = {},
	        slice = [].slice;

	    kendo.version = "$KENDO_VERSION".replace(/^\s+|\s+$/g, '');

	    function Class() {}

	    Class.extend = function(proto) {
	        var base = function() {},
	            member,
	            that = this,
	            subclass = proto && proto.init ? proto.init : function () {
	                that.apply(this, arguments);
	            },
	            fn;

	        base.prototype = that.prototype;
	        fn = subclass.fn = subclass.prototype = new base();

	        for (member in proto) {
	            if (proto[member] != null && proto[member].constructor === Object) {
	                // Merge object members
	                fn[member] = extend(true, {}, base.prototype[member], proto[member]);
	            } else {
	                fn[member] = proto[member];
	            }
	        }

	        fn.constructor = subclass;
	        subclass.extend = that.extend;

	        return subclass;
	    };

	    Class.prototype._initOptions = function(options) {
	        this.options = deepExtend({}, this.options, options);
	    };

	    var isFunction = kendo.isFunction = function(fn) {
	        return typeof fn === "function";
	    };

	    var preventDefault = function() {
	        this._defaultPrevented = true;
	    };

	    var isDefaultPrevented = function() {
	        return this._defaultPrevented === true;
	    };

	    var Observable = Class.extend({
	        init: function() {
	            this._events = {};
	        },

	        bind: function(eventName, handlers, one) {
	            var that = this,
	                idx,
	                eventNames = typeof eventName === STRING ? [eventName] : eventName,
	                length,
	                original,
	                handler,
	                handlersIsFunction = typeof handlers === FUNCTION,
	                events;

	            if (handlers === undefined) {
	                for (idx in eventName) {
	                    that.bind(idx, eventName[idx]);
	                }
	                return that;
	            }

	            for (idx = 0, length = eventNames.length; idx < length; idx++) {
	                eventName = eventNames[idx];

	                handler = handlersIsFunction ? handlers : handlers[eventName];

	                if (handler) {
	                    if (one) {
	                        original = handler;
	                        handler = function() {
	                            that.unbind(eventName, handler);
	                            original.apply(that, arguments);
	                        };
	                        handler.original = original;
	                    }
	                    events = that._events[eventName] = that._events[eventName] || [];
	                    events.push(handler);
	                }
	            }

	            return that;
	        },

	        one: function(eventNames, handlers) {
	            return this.bind(eventNames, handlers, true);
	        },

	        first: function(eventName, handlers) {
	            var that = this,
	                idx,
	                eventNames = typeof eventName === STRING ? [eventName] : eventName,
	                length,
	                handler,
	                handlersIsFunction = typeof handlers === FUNCTION,
	                events;

	            for (idx = 0, length = eventNames.length; idx < length; idx++) {
	                eventName = eventNames[idx];

	                handler = handlersIsFunction ? handlers : handlers[eventName];

	                if (handler) {
	                    events = that._events[eventName] = that._events[eventName] || [];
	                    events.unshift(handler);
	                }
	            }

	            return that;
	        },

	        trigger: function(eventName, e) {
	            var that = this,
	                events = that._events[eventName],
	                idx,
	                length;

	            if (events) {
	                e = e || {};

	                e.sender = that;

	                e._defaultPrevented = false;

	                e.preventDefault = preventDefault;

	                e.isDefaultPrevented = isDefaultPrevented;

	                events = events.slice();

	                for (idx = 0, length = events.length; idx < length; idx++) {
	                    events[idx].call(that, e);
	                }

	                return e._defaultPrevented === true;
	            }

	            return false;
	        },

	        unbind: function(eventName, handler) {
	            var that = this,
	                events = that._events[eventName],
	                idx;

	            if (eventName === undefined) {
	                that._events = {};
	            } else if (events) {
	                if (handler) {
	                    for (idx = events.length - 1; idx >= 0; idx--) {
	                        if (events[idx] === handler || events[idx].original === handler) {
	                            events.splice(idx, 1);
	                        }
	                    }
	                } else {
	                    that._events[eventName] = [];
	                }
	            }

	            return that;
	        }
	    });


	     function compilePart(part, stringPart) {
	         if (stringPart) {
	             return "'" +
	                 part.split("'").join("\\'")
	                     .split('\\"').join('\\\\\\"')
	                     .replace(/\n/g, "\\n")
	                     .replace(/\r/g, "\\r")
	                     .replace(/\t/g, "\\t") + "'";
	         } else {
	             var first = part.charAt(0),
	                 rest = part.substring(1);

	             if (first === "=") {
	                 return "+(" + rest + ")+";
	             } else if (first === ":") {
	                 return "+$kendoHtmlEncode(" + rest + ")+";
	             } else {
	                 return ";" + part + ";$kendoOutput+=";
	             }
	         }
	     }

	    var argumentNameRegExp = /^\w+/,
	        encodeRegExp = /\$\{([^}]*)\}/g,
	        escapedCurlyRegExp = /\\\}/g,
	        curlyRegExp = /__CURLY__/g,
	        escapedSharpRegExp = /\\#/g,
	        sharpRegExp = /__SHARP__/g,
	        zeros = ["", "0", "00", "000", "0000"];

	    Template = {
	        paramName: "data", // name of the parameter of the generated template
	        useWithBlock: true, // whether to wrap the template in a with() block
	        render: function(template, data) {
	            var idx,
	                length,
	                html = "";

	            for (idx = 0, length = data.length; idx < length; idx++) {
	                html += template(data[idx]);
	            }

	            return html;
	        },
	        compile: function(template, options) {
	            var settings = extend({}, this, options),
	                paramName = settings.paramName,
	                argumentName = paramName.match(argumentNameRegExp)[0],
	                useWithBlock = settings.useWithBlock,
	                functionBody = "var $kendoOutput, $kendoHtmlEncode = kendo.htmlEncode;",
	                fn,
	                parts,
	                idx;

	            if (isFunction(template)) {
	                return template;
	            }

	            functionBody += useWithBlock ? "with(" + paramName + "){" : "";

	            functionBody += "$kendoOutput=";

	            parts = template
	                .replace(escapedCurlyRegExp, "__CURLY__")
	                .replace(encodeRegExp, "#=$kendoHtmlEncode($1)#")
	                .replace(curlyRegExp, "}")
	                .replace(escapedSharpRegExp, "__SHARP__")
	                .split("#");

	            for (idx = 0; idx < parts.length; idx ++) {
	                functionBody += compilePart(parts[idx], idx % 2 === 0);
	            }

	            functionBody += useWithBlock ? ";}" : ";";

	            functionBody += "return $kendoOutput;";

	            functionBody = functionBody.replace(sharpRegExp, "#");

	            try {
	                fn = new Function(argumentName, functionBody);
	                fn._slotCount = Math.floor(parts.length / 2);
	                return fn;
	            } catch(e) {
	                throw new Error(kendo.format("Invalid template:'{0}' Generated code:'{1}'", template, functionBody));
	            }
	        }
	    };

	function pad(number, digits, end) {
	    number = number + "";
	    digits = digits || 2;
	    end = digits - number.length;

	    if (end) {
	        return zeros[digits].substring(0, end) + number;
	    }

	    return number;
	}

	    //JSON stringify
	(function() {
	    var escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
	        gap,
	        indent,
	        meta = {
	            "\b": "\\b",
	            "\t": "\\t",
	            "\n": "\\n",
	            "\f": "\\f",
	            "\r": "\\r",
	            "\"" : '\\"',
	            "\\": "\\\\"
	        },
	        rep,
	        toString = {}.toString;


	    if (typeof Date.prototype.toJSON !== FUNCTION) {

	        Date.prototype.toJSON = function () {
	            var that = this;

	            return isFinite(that.valueOf()) ?
	                pad(that.getUTCFullYear(), 4) + "-" +
	                pad(that.getUTCMonth() + 1)   + "-" +
	                pad(that.getUTCDate())        + "T" +
	                pad(that.getUTCHours())       + ":" +
	                pad(that.getUTCMinutes())     + ":" +
	                pad(that.getUTCSeconds())     + "Z" : null;
	        };

	        String.prototype.toJSON = Number.prototype.toJSON = Boolean.prototype.toJSON = function () {
	            return this.valueOf();
	        };
	    }

	    function quote(string) {
	        escapable.lastIndex = 0;
	        return escapable.test(string) ? "\"" + string.replace(escapable, function (a) {
	            var c = meta[a];
	            return typeof c === STRING ? c :
	                "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4);
	        }) + "\"" : "\"" + string + "\"";
	    }

	    function str(key, holder) {
	        var i,
	            k,
	            v,
	            length,
	            mind = gap,
	            partial,
	            value = holder[key],
	            type;

	        if (value && typeof value === OBJECT && typeof value.toJSON === FUNCTION) {
	            value = value.toJSON(key);
	        }

	        if (typeof rep === FUNCTION) {
	            value = rep.call(holder, key, value);
	        }

	        type = typeof value;
	        if (type === STRING) {
	            return quote(value);
	        } else if (type === NUMBER) {
	            return isFinite(value) ? String(value) : NULL;
	        } else if (type === BOOLEAN || type === NULL) {
	            return String(value);
	        } else if (type === OBJECT) {
	            if (!value) {
	                return NULL;
	            }
	            gap += indent;
	            partial = [];
	            if (toString.apply(value) === "[object Array]") {
	                length = value.length;
	                for (i = 0; i < length; i++) {
	                    partial[i] = str(i, value) || NULL;
	                }
	                v = partial.length === 0 ? "[]" : gap ?
	                    "[\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "]" :
	                    "[" + partial.join(",") + "]";
	                gap = mind;
	                return v;
	            }
	            if (rep && typeof rep === OBJECT) {
	                length = rep.length;
	                for (i = 0; i < length; i++) {
	                    if (typeof rep[i] === STRING) {
	                        k = rep[i];
	                        v = str(k, value);
	                        if (v) {
	                            partial.push(quote(k) + (gap ? ": " : ":") + v);
	                        }
	                    }
	                }
	            } else {
	                for (k in value) {
	                    if (Object.hasOwnProperty.call(value, k)) {
	                        v = str(k, value);
	                        if (v) {
	                            partial.push(quote(k) + (gap ? ": " : ":") + v);
	                        }
	                    }
	                }
	            }

	            v = partial.length === 0 ? "{}" : gap ?
	                "{\n" + gap + partial.join(",\n" + gap) + "\n" + mind + "}" :
	                "{" + partial.join(",") + "}";
	            gap = mind;
	            return v;
	        }
	    }

	    if (typeof JSON.stringify !== FUNCTION) {
	        JSON.stringify = function (value, replacer, space) {
	            var i;
	            gap = "";
	            indent = "";

	            if (typeof space === NUMBER) {
	                for (i = 0; i < space; i += 1) {
	                    indent += " ";
	                }

	            } else if (typeof space === STRING) {
	                indent = space;
	            }

	            rep = replacer;
	            if (replacer && typeof replacer !== FUNCTION && (typeof replacer !== OBJECT || typeof replacer.length !== NUMBER)) {
	                throw new Error("JSON.stringify");
	            }

	            return str("", {"": value});
	        };
	    }
	})();

	// Date and Number formatting
	(function() {
	    var dateFormatRegExp = /dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|HH|H|hh|h|mm|m|fff|ff|f|tt|ss|s|zzz|zz|z|"[^"]*"|'[^']*'/g,
	        standardFormatRegExp =  /^(n|c|p|e)(\d*)$/i,
	        literalRegExp = /(\\.)|(['][^']*[']?)|(["][^"]*["]?)/g,
	        commaRegExp = /\,/g,
	        EMPTY = "",
	        POINT = ".",
	        COMMA = ",",
	        SHARP = "#",
	        ZERO = "0",
	        PLACEHOLDER = "??",
	        EN = "en-US",
	        objectToString = {}.toString;

	    //cultures
	    kendo.cultures["en-US"] = {
	        name: EN,
	        numberFormat: {
	            pattern: ["-n"],
	            decimals: 2,
	            ",": ",",
	            ".": ".",
	            groupSize: [3],
	            percent: {
	                pattern: ["-n %", "n %"],
	                decimals: 2,
	                ",": ",",
	                ".": ".",
	                groupSize: [3],
	                symbol: "%"
	            },
	            currency: {
	                name: "US Dollar",
	                abbr: "USD",
	                pattern: ["($n)", "$n"],
	                decimals: 2,
	                ",": ",",
	                ".": ".",
	                groupSize: [3],
	                symbol: "$"
	            }
	        },
	        calendars: {
	            standard: {
	                days: {
	                    names: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
	                    namesAbbr: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
	                    namesShort: [ "Su", "Mo", "Tu", "We", "Th", "Fr", "Sa" ]
	                },
	                months: {
	                    names: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
	                    namesAbbr: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
	                },
	                AM: [ "AM", "am", "AM" ],
	                PM: [ "PM", "pm", "PM" ],
	                patterns: {
	                    d: "M/d/yyyy",
	                    D: "dddd, MMMM dd, yyyy",
	                    F: "dddd, MMMM dd, yyyy h:mm:ss tt",
	                    g: "M/d/yyyy h:mm tt",
	                    G: "M/d/yyyy h:mm:ss tt",
	                    m: "MMMM dd",
	                    M: "MMMM dd",
	                    s: "yyyy'-'MM'-'ddTHH':'mm':'ss",
	                    t: "h:mm tt",
	                    T: "h:mm:ss tt",
	                    u: "yyyy'-'MM'-'dd HH':'mm':'ss'Z'",
	                    y: "MMMM, yyyy",
	                    Y: "MMMM, yyyy"
	                },
	                "/": "/",
	                ":": ":",
	                firstDay: 0,
	                twoDigitYearMax: 2029
	            }
	        }
	    };


	     function findCulture(culture) {
	        if (culture) {
	            if (culture.numberFormat) {
	                return culture;
	            }

	            if (typeof culture === STRING) {
	                var cultures = kendo.cultures;
	                return cultures[culture] || cultures[culture.split("-")[0]] || null;
	            }

	            return null;
	        }

	        return null;
	    }

	    function getCulture(culture) {
	        if (culture) {
	            culture = findCulture(culture);
	        }

	        return culture || kendo.cultures.current;
	    }

	    kendo.culture = function(cultureName) {
	        var cultures = kendo.cultures, culture;

	        if (cultureName !== undefined) {
	            culture = findCulture(cultureName) || cultures[EN];
	            culture.calendar = culture.calendars.standard;
	            cultures.current = culture;
	        } else {
	            return cultures.current;
	        }
	    };

	    kendo.findCulture = findCulture;
	    kendo.getCulture = getCulture;

	    //set current culture to en-US.
	    kendo.culture(EN);

	    function formatDate(date, format, culture) {
	        culture = getCulture(culture);

	        var calendar = culture.calendars.standard,
	            days = calendar.days,
	            months = calendar.months;

	        format = calendar.patterns[format] || format;

	        return format.replace(dateFormatRegExp, function (match) {
	            var minutes;
	            var result;
	            var sign;

	            if (match === "d") {
	                result = date.getDate();
	            } else if (match === "dd") {
	                result = pad(date.getDate());
	            } else if (match === "ddd") {
	                result = days.namesAbbr[date.getDay()];
	            } else if (match === "dddd") {
	                result = days.names[date.getDay()];
	            } else if (match === "M") {
	                result = date.getMonth() + 1;
	            } else if (match === "MM") {
	                result = pad(date.getMonth() + 1);
	            } else if (match === "MMM") {
	                result = months.namesAbbr[date.getMonth()];
	            } else if (match === "MMMM") {
	                result = months.names[date.getMonth()];
	            } else if (match === "yy") {
	                result = pad(date.getFullYear() % 100);
	            } else if (match === "yyyy") {
	                result = pad(date.getFullYear(), 4);
	            } else if (match === "h" ) {
	                result = date.getHours() % 12 || 12;
	            } else if (match === "hh") {
	                result = pad(date.getHours() % 12 || 12);
	            } else if (match === "H") {
	                result = date.getHours();
	            } else if (match === "HH") {
	                result = pad(date.getHours());
	            } else if (match === "m") {
	                result = date.getMinutes();
	            } else if (match === "mm") {
	                result = pad(date.getMinutes());
	            } else if (match === "s") {
	                result = date.getSeconds();
	            } else if (match === "ss") {
	                result = pad(date.getSeconds());
	            } else if (match === "f") {
	                result = math.floor(date.getMilliseconds() / 100);
	            } else if (match === "ff") {
	                result = date.getMilliseconds();
	                if (result > 99) {
	                    result = math.floor(result / 10);
	                }
	                result = pad(result);
	            } else if (match === "fff") {
	                result = pad(date.getMilliseconds(), 3);
	            } else if (match === "tt") {
	                result = date.getHours() < 12 ? calendar.AM[0] : calendar.PM[0];
	            } else if (match === "zzz") {
	                minutes = date.getTimezoneOffset();
	                sign = minutes < 0;

	                result = math.abs(minutes / 60).toString().split(".")[0];
	                minutes = math.abs(minutes) - (result * 60);

	                result = (sign ? "+" : "-") + pad(result);
	                result += ":" + pad(minutes);
	            } else if (match === "zz" || match === "z") {
	                result = date.getTimezoneOffset() / 60;
	                sign = result < 0;

	                result = math.abs(result).toString().split(".")[0];
	                result = (sign ? "+" : "-") + (match === "zz" ? pad(result) : result);
	            }

	            return result !== undefined ? result : match.slice(1, match.length - 1);
	        });
	    }

	    //number formatting
	    function formatNumber(number, format, culture) {
	        culture = getCulture(culture);

	        var numberFormat = culture.numberFormat,
	            decimal = numberFormat[POINT],
	            precision = numberFormat.decimals,
	            pattern = numberFormat.pattern[0],
	            literals = [],
	            symbol,
	            isCurrency, isPercent,
	            customPrecision,
	            formatAndPrecision,
	            negative = number < 0,
	            integer,
	            fraction,
	            integerLength,
	            fractionLength,
	            replacement = EMPTY,
	            value = EMPTY,
	            idx,
	            length,
	            ch,
	            hasGroup,
	            hasNegativeFormat,
	            decimalIndex,
	            sharpIndex,
	            zeroIndex,
	            hasZero, hasSharp,
	            percentIndex,
	            currencyIndex,
	            startZeroIndex,
	            start = -1,
	            end;

	        //return empty string if no number
	        if (number === undefined) {
	            return EMPTY;
	        }

	        if (!isFinite(number)) {
	            return number;
	        }

	        //if no format then return number.toString() or number.toLocaleString() if culture.name is not defined
	        if (!format) {
	            return culture.name.length ? number.toLocaleString() : number.toString();
	        }

	        formatAndPrecision = standardFormatRegExp.exec(format);

	        // standard formatting
	        if (formatAndPrecision) {
	            format = formatAndPrecision[1].toLowerCase();

	            isCurrency = format === "c";
	            isPercent = format === "p";

	            if (isCurrency || isPercent) {
	                //get specific number format information if format is currency or percent
	                numberFormat = isCurrency ? numberFormat.currency : numberFormat.percent;
	                decimal = numberFormat[POINT];
	                precision = numberFormat.decimals;
	                symbol = numberFormat.symbol;
	                pattern = numberFormat.pattern[negative ? 0 : 1];
	            }

	            customPrecision = formatAndPrecision[2];

	            if (customPrecision) {
	                precision = +customPrecision;
	            }

	            //return number in exponential format
	            if (format === "e") {
	                return customPrecision ? number.toExponential(precision) : number.toExponential(); // toExponential() and toExponential(undefined) differ in FF #653438.
	            }

	            // multiply if format is percent
	            if (isPercent) {
	                number *= 100;
	            }

	            number = round(number, precision);
	            negative = number < 0;
	            number = number.split(POINT);

	            integer = number[0];
	            fraction = number[1];

	            //exclude "-" if number is negative.
	            if (negative) {
	                integer = integer.substring(1);
	            }

	            value = groupInteger(integer, 0, integer.length, numberFormat);

	            if (fraction) {
	                value += decimal + fraction;
	            }

	            if (format === "n" && !negative) {
	                return value;
	            }

	            number = EMPTY;

	            for (idx = 0, length = pattern.length; idx < length; idx++) {
	                ch = pattern.charAt(idx);

	                if (ch === "n") {
	                    number += value;
	                } else if (ch === "$" || ch === "%") {
	                    number += symbol;
	                } else {
	                    number += ch;
	                }
	            }

	            return number;
	        }

	        //custom formatting
	        //
	        //separate format by sections.

	        //make number positive
	        if (negative) {
	            number = -number;
	        }

	        if (format.indexOf("'") > -1 || format.indexOf("\"") > -1 || format.indexOf("\\") > -1) {
	            format = format.replace(literalRegExp, function (match) {
	                var quoteChar = match.charAt(0).replace("\\", ""),
	                    literal = match.slice(1).replace(quoteChar, "");

	                literals.push(literal);

	                return PLACEHOLDER;
	            });
	        }

	        format = format.split(";");
	        if (negative && format[1]) {
	            //get negative format
	            format = format[1];
	            hasNegativeFormat = true;
	        } else if (number === 0) {
	            //format for zeros
	            format = format[2] || format[0];
	            if (format.indexOf(SHARP) == -1 && format.indexOf(ZERO) == -1) {
	                //return format if it is string constant.
	                return format;
	            }
	        } else {
	            format = format[0];
	        }

	        percentIndex = format.indexOf("%");
	        currencyIndex = format.indexOf("$");

	        isPercent = percentIndex != -1;
	        isCurrency = currencyIndex != -1;

	        //multiply number if the format has percent
	        if (isPercent) {
	            number *= 100;
	        }

	        if (isCurrency && format[currencyIndex - 1] === "\\") {
	            format = format.split("\\").join("");
	            isCurrency = false;
	        }

	        if (isCurrency || isPercent) {
	            //get specific number format information if format is currency or percent
	            numberFormat = isCurrency ? numberFormat.currency : numberFormat.percent;
	            decimal = numberFormat[POINT];
	            precision = numberFormat.decimals;
	            symbol = numberFormat.symbol;
	        }

	        hasGroup = format.indexOf(COMMA) > -1;
	        if (hasGroup) {
	            format = format.replace(commaRegExp, EMPTY);
	        }

	        decimalIndex = format.indexOf(POINT);
	        length = format.length;

	        if (decimalIndex != -1) {
	            fraction = number.toString().split("e");
	            if (fraction[1]) {
	                fraction = round(number, Math.abs(fraction[1]));
	            } else {
	                fraction = fraction[0];
	            }
	            fraction = fraction.split(POINT)[1] || EMPTY;
	            zeroIndex = format.lastIndexOf(ZERO) - decimalIndex;
	            sharpIndex = format.lastIndexOf(SHARP) - decimalIndex;
	            hasZero = zeroIndex > -1;
	            hasSharp = sharpIndex > -1;
	            idx = fraction.length;

	            if (!hasZero && !hasSharp) {
	                format = format.substring(0, decimalIndex) + format.substring(decimalIndex + 1);
	                length = format.length;
	                decimalIndex = -1;
	                idx = 0;
	            } if (hasZero && zeroIndex > sharpIndex) {
	                idx = zeroIndex;
	            } else if (sharpIndex > zeroIndex) {
	                if (hasSharp && idx > sharpIndex) {
	                    idx = sharpIndex;
	                } else if (hasZero && idx < zeroIndex) {
	                    idx = zeroIndex;
	                }
	            }

	            if (idx > -1) {
	                number = round(number, idx);
	            }
	        } else {
	            number = round(number);
	        }

	        sharpIndex = format.indexOf(SHARP);
	        startZeroIndex = zeroIndex = format.indexOf(ZERO);

	        //define the index of the first digit placeholder
	        if (sharpIndex == -1 && zeroIndex != -1) {
	            start = zeroIndex;
	        } else if (sharpIndex != -1 && zeroIndex == -1) {
	            start = sharpIndex;
	        } else {
	            start = sharpIndex > zeroIndex ? zeroIndex : sharpIndex;
	        }

	        sharpIndex = format.lastIndexOf(SHARP);
	        zeroIndex = format.lastIndexOf(ZERO);

	        //define the index of the last digit placeholder
	        if (sharpIndex == -1 && zeroIndex != -1) {
	            end = zeroIndex;
	        } else if (sharpIndex != -1 && zeroIndex == -1) {
	            end = sharpIndex;
	        } else {
	            end = sharpIndex > zeroIndex ? sharpIndex : zeroIndex;
	        }

	        if (start == length) {
	            end = start;
	        }

	        if (start != -1) {
	            value = number.toString().split(POINT);
	            integer = value[0];
	            fraction = value[1] || EMPTY;

	            integerLength = integer.length;
	            fractionLength = fraction.length;

	            if (negative && (number * -1) >= 0) {
	                negative = false;
	            }

	            number = format.substring(0, start);

	            if (negative && !hasNegativeFormat) {
	                number += "-";
	            }

	            for (idx = start; idx < length; idx++) {
	                ch = format.charAt(idx);

	                if (decimalIndex == -1) {
	                    if (end - idx < integerLength) {
	                        number += integer;
	                        break;
	                    }
	                } else {
	                    if (zeroIndex != -1 && zeroIndex < idx) {
	                        replacement = EMPTY;
	                    }

	                    if ((decimalIndex - idx) <= integerLength && decimalIndex - idx > -1) {
	                        number += integer;
	                        idx = decimalIndex;
	                    }

	                    if (decimalIndex === idx) {
	                        number += (fraction ? decimal : EMPTY) + fraction;
	                        idx += end - decimalIndex + 1;
	                        continue;
	                    }
	                }

	                if (ch === ZERO) {
	                    number += ch;
	                    replacement = ch;
	                } else if (ch === SHARP) {
	                    number += replacement;
	                }
	            }

	            if (hasGroup) {
	                number = groupInteger(number, start + (negative && !hasNegativeFormat ? 1 : 0), Math.max(end, (integerLength + start)), numberFormat);
	            }

	            if (end >= start) {
	                number += format.substring(end + 1);
	            }

	            //replace symbol placeholders
	            if (isCurrency || isPercent) {
	                value = EMPTY;
	                for (idx = 0, length = number.length; idx < length; idx++) {
	                    ch = number.charAt(idx);
	                    value += (ch === "$" || ch === "%") ? symbol : ch;
	                }
	                number = value;
	            }

	            length = literals.length;

	            if (length) {
	                for (idx = 0; idx < length; idx++) {
	                    number = number.replace(PLACEHOLDER, literals[idx]);
	                }
	            }
	        }

	        return number;
	    }

	    var groupInteger = function(number, start, end, numberFormat) {
	        var decimalIndex = number.indexOf(numberFormat[POINT]);
	        var groupSizes = numberFormat.groupSize.slice();
	        var groupSize = groupSizes.shift();
	        var integer, integerLength;
	        var idx, parts, value;
	        var newGroupSize;

	        end = decimalIndex !== -1 ? decimalIndex : end + 1;

	        integer = number.substring(start, end);
	        integerLength = integer.length;

	        if (integerLength >= groupSize) {
	            idx = integerLength;
	            parts = [];

	            while (idx > -1) {
	                value = integer.substring(idx - groupSize, idx);
	                if (value) {
	                    parts.push(value);
	                }
	                idx -= groupSize;
	                newGroupSize = groupSizes.shift();
	                groupSize = newGroupSize !== undefined ? newGroupSize : groupSize;

	                if (groupSize === 0) {
	                    parts.push(integer.substring(0, idx));
	                    break;
	                }
	            }

	            integer = parts.reverse().join(numberFormat[COMMA]);
	            number = number.substring(0, start) + integer + number.substring(end);
	        }

	        return number;
	    };

	    var round = function(value, precision) {
	        precision = precision || 0;

	        value = value.toString().split('e');
	        value = Math.round(+(value[0] + 'e' + (value[1] ? (+value[1] + precision) : precision)));

	        value = value.toString().split('e');
	        value = +(value[0] + 'e' + (value[1] ? (+value[1] - precision) : -precision));

	        return value.toFixed(Math.min(precision, 20));
	    };

	    var toString = function(value, fmt, culture) {
	        if (fmt) {
	            if (objectToString.call(value) === "[object Date]") {
	                return formatDate(value, fmt, culture);
	            } else if (typeof value === NUMBER) {
	                return formatNumber(value, fmt, culture);
	            }
	        }

	        return value !== undefined ? value : "";
	    };

	    kendo.format = function(fmt) {
	        var values = arguments;

	        return fmt.replace(formatRegExp, function(match, index, placeholderFormat) {
	            var value = values[parseInt(index, 10) + 1];

	            return toString(value, placeholderFormat ? placeholderFormat.substring(1) : "");
	        });
	    };

	    kendo._extractFormat = function (format) {
	        if (format.slice(0,3) === "{0:") {
	            format = format.slice(3, format.length - 1);
	        }

	        return format;
	    };

	    kendo._activeElement = function() {
	        try {
	            return document.activeElement;
	        } catch(e) {
	            return document.documentElement.activeElement;
	        }
	    };

	    kendo._round = round;
	    kendo._outerWidth = function (element, includeMargin) { return $(element).outerWidth(includeMargin || false) || 0; };
	    kendo._outerHeight = function (element, includeMargin) { return $(element).outerHeight(includeMargin || false) || 0; };
	    kendo.toString = toString;
	})();


	(function() {
	    var nonBreakingSpaceRegExp = /\u00A0/g,
	        exponentRegExp = /[eE][\-+]?[0-9]+/,
	        shortTimeZoneRegExp = /[+|\-]\d{1,2}/,
	        longTimeZoneRegExp = /[+|\-]\d{1,2}:?\d{2}/,
	        dateRegExp = /^\/Date\((.*?)\)\/$/,
	        offsetRegExp = /[+-]\d*/,
	        FORMATS_SEQUENCE = [ [], [ "G", "g", "F" ], [ "D", "d", "y", "m", "T", "t" ] ],
	        STANDARD_FORMATS = [
	            [
	            "yyyy-MM-ddTHH:mm:ss.fffffffzzz",
	            "yyyy-MM-ddTHH:mm:ss.fffffff",
	            "yyyy-MM-ddTHH:mm:ss.fffzzz",
	            "yyyy-MM-ddTHH:mm:ss.fff",
	            "ddd MMM dd yyyy HH:mm:ss",
	            "yyyy-MM-ddTHH:mm:sszzz",
	            "yyyy-MM-ddTHH:mmzzz",
	            "yyyy-MM-ddTHH:mmzz",
	            "yyyy-MM-ddTHH:mm:ss",
	            "yyyy-MM-dd HH:mm:ss",
	            "yyyy/MM/dd HH:mm:ss"
	            ], [
	            "yyyy-MM-ddTHH:mm",
	            "yyyy-MM-dd HH:mm",
	            "yyyy/MM/dd HH:mm"
	            ], [
	            "yyyy/MM/dd",
	            "yyyy-MM-dd",
	            "HH:mm:ss",
	            "HH:mm"
	            ]
	        ],
	        numberRegExp = {
	            2: /^\d{1,2}/,
	            3: /^\d{1,3}/,
	            4: /^\d{4}/
	        },
	        objectToString = {}.toString;

	    function outOfRange(value, start, end) {
	        return !(value >= start && value <= end);
	    }

	    function designatorPredicate(designator) {
	        return designator.charAt(0);
	    }

	    function mapDesignators(designators) {
	        return $.map(designators, designatorPredicate);
	    }

	    //if date's day is different than the typed one - adjust
	    function adjustDST(date, hours) {
	        if (!hours && date.getHours() === 23) {
	            date.setHours(date.getHours() + 2);
	        }
	    }

	    function lowerArray(data) {
	        var idx = 0,
	            length = data.length,
	            array = [];

	        for (; idx < length; idx++) {
	            array[idx] = (data[idx] + "").toLowerCase();
	        }

	        return array;
	    }

	    function lowerLocalInfo(localInfo) {
	        var newLocalInfo = {}, property;

	        for (property in localInfo) {
	            newLocalInfo[property] = lowerArray(localInfo[property]);
	        }

	        return newLocalInfo;
	    }

	    function parseExact(value, format, culture) {
	        if (!value) {
	            return null;
	        }

	        var lookAhead = function (match) {
	                var i = 0;
	                while (format[idx] === match) {
	                    i++;
	                    idx++;
	                }
	                if (i > 0) {
	                    idx -= 1;
	                }
	                return i;
	            },
	            getNumber = function(size) {
	                var rg = numberRegExp[size] || new RegExp('^\\d{1,' + size + '}'),
	                    match = value.substr(valueIdx, size).match(rg);

	                if (match) {
	                    match = match[0];
	                    valueIdx += match.length;
	                    return parseInt(match, 10);
	                }
	                return null;
	            },
	            getIndexByName = function (names, lower) {
	                var i = 0,
	                    length = names.length,
	                    name, nameLength,
	                    matchLength = 0,
	                    matchIdx = 0,
	                    subValue;

	                for (; i < length; i++) {
	                    name = names[i];
	                    nameLength = name.length;
	                    subValue = value.substr(valueIdx, nameLength);

	                    if (lower) {
	                        subValue = subValue.toLowerCase();
	                    }

	                    if (subValue == name && nameLength > matchLength) {
	                        matchLength = nameLength;
	                        matchIdx = i;
	                    }
	                }

	                if (matchLength) {
	                    valueIdx += matchLength;
	                    return matchIdx + 1;
	                }

	                return null;
	            },
	            checkLiteral = function() {
	                var result = false;
	                if (value.charAt(valueIdx) === format[idx]) {
	                    valueIdx++;
	                    result = true;
	                }
	                return result;
	            },
	            calendar = culture.calendars.standard,
	            year = null,
	            month = null,
	            day = null,
	            hours = null,
	            minutes = null,
	            seconds = null,
	            milliseconds = null,
	            idx = 0,
	            valueIdx = 0,
	            literal = false,
	            date = new Date(),
	            twoDigitYearMax = calendar.twoDigitYearMax || 2029,
	            defaultYear = date.getFullYear(),
	            ch, count, length, pattern,
	            pmHour, UTC, matches,
	            amDesignators, pmDesignators,
	            hoursOffset, minutesOffset,
	            hasTime, match;

	        if (!format) {
	            format = "d"; //shord date format
	        }

	        //if format is part of the patterns get real format
	        pattern = calendar.patterns[format];
	        if (pattern) {
	            format = pattern;
	        }

	        format = format.split("");
	        length = format.length;

	        for (; idx < length; idx++) {
	            ch = format[idx];

	            if (literal) {
	                if (ch === "'") {
	                    literal = false;
	                } else {
	                    checkLiteral();
	                }
	            } else {
	                if (ch === "d") {
	                    count = lookAhead("d");
	                    if (!calendar._lowerDays) {
	                        calendar._lowerDays = lowerLocalInfo(calendar.days);
	                    }

	                    if (day !== null && count > 2) {
	                        continue;
	                    }

	                    day = count < 3 ? getNumber(2) : getIndexByName(calendar._lowerDays[count == 3 ? "namesAbbr" : "names"], true);

	                    if (day === null || outOfRange(day, 1, 31)) {
	                        return null;
	                    }
	                } else if (ch === "M") {
	                    count = lookAhead("M");
	                    if (!calendar._lowerMonths) {
	                        calendar._lowerMonths = lowerLocalInfo(calendar.months);
	                    }
	                    month = count < 3 ? getNumber(2) : getIndexByName(calendar._lowerMonths[count == 3 ? 'namesAbbr' : 'names'], true);

	                    if (month === null || outOfRange(month, 1, 12)) {
	                        return null;
	                    }
	                    month -= 1; //because month is zero based
	                } else if (ch === "y") {
	                    count = lookAhead("y");
	                    year = getNumber(count);

	                    if (year === null) {
	                        return null;
	                    }

	                    if (count == 2) {
	                        if (typeof twoDigitYearMax === "string") {
	                            twoDigitYearMax = defaultYear + parseInt(twoDigitYearMax, 10);
	                        }

	                        year = (defaultYear - defaultYear % 100) + year;
	                        if (year > twoDigitYearMax) {
	                            year -= 100;
	                        }
	                    }
	                } else if (ch === "h" ) {
	                    lookAhead("h");
	                    hours = getNumber(2);
	                    if (hours == 12) {
	                        hours = 0;
	                    }
	                    if (hours === null || outOfRange(hours, 0, 11)) {
	                        return null;
	                    }
	                } else if (ch === "H") {
	                    lookAhead("H");
	                    hours = getNumber(2);
	                    if (hours === null || outOfRange(hours, 0, 23)) {
	                        return null;
	                    }
	                } else if (ch === "m") {
	                    lookAhead("m");
	                    minutes = getNumber(2);
	                    if (minutes === null || outOfRange(minutes, 0, 59)) {
	                        return null;
	                    }
	                } else if (ch === "s") {
	                    lookAhead("s");
	                    seconds = getNumber(2);
	                    if (seconds === null || outOfRange(seconds, 0, 59)) {
	                        return null;
	                    }
	                } else if (ch === "f") {
	                    count = lookAhead("f");

	                    match = value.substr(valueIdx, count).match(numberRegExp[3]);
	                    milliseconds = getNumber(count); //move value index position

	                    if (milliseconds !== null) {
	                        milliseconds = parseFloat("0." + match[0], 10);
	                        milliseconds = kendo._round(milliseconds, 3);
	                        milliseconds *= 1000;
	                    }

	                    if (milliseconds === null || outOfRange(milliseconds, 0, 999)) {
	                        return null;
	                    }

	                } else if (ch === "t") {
	                    count = lookAhead("t");
	                    amDesignators = calendar.AM;
	                    pmDesignators = calendar.PM;

	                    if (count === 1) {
	                        amDesignators = mapDesignators(amDesignators);
	                        pmDesignators = mapDesignators(pmDesignators);
	                    }

	                    pmHour = getIndexByName(pmDesignators);
	                    if (!pmHour && !getIndexByName(amDesignators)) {
	                        return null;
	                    }
	                }
	                else if (ch === "z") {
	                    UTC = true;
	                    count = lookAhead("z");

	                    if (value.substr(valueIdx, 1) === "Z") {
	                        checkLiteral();
	                        continue;
	                    }

	                    matches = value.substr(valueIdx, 6)
	                                   .match(count > 2 ? longTimeZoneRegExp : shortTimeZoneRegExp);

	                    if (!matches) {
	                        return null;
	                    }

	                    matches = matches[0].split(":");

	                    hoursOffset = matches[0];
	                    minutesOffset = matches[1];

	                    if (!minutesOffset && hoursOffset.length > 3) { //(+|-)[hh][mm] format is used
	                        valueIdx = hoursOffset.length - 2;
	                        minutesOffset = hoursOffset.substring(valueIdx);
	                        hoursOffset = hoursOffset.substring(0, valueIdx);
	                    }

	                    hoursOffset = parseInt(hoursOffset, 10);
	                    if (outOfRange(hoursOffset, -12, 13)) {
	                        return null;
	                    }

	                    if (count > 2) {
	                        minutesOffset = parseInt(minutesOffset, 10);
	                        if (isNaN(minutesOffset) || outOfRange(minutesOffset, 0, 59)) {
	                            return null;
	                        }
	                    }
	                } else if (ch === "'") {
	                    literal = true;
	                    checkLiteral();
	                } else if (!checkLiteral()) {
	                    return null;
	                }
	            }
	        }

	        hasTime = hours !== null || minutes !== null || seconds || null;

	        if (year === null && month === null && day === null && hasTime) {
	            year = defaultYear;
	            month = date.getMonth();
	            day = date.getDate();
	        } else {
	            if (year === null) {
	                year = defaultYear;
	            }

	            if (day === null) {
	                day = 1;
	            }
	        }

	        if (pmHour && hours < 12) {
	            hours += 12;
	        }

	        if (UTC) {
	            if (hoursOffset) {
	                hours += -hoursOffset;
	            }

	            if (minutesOffset) {
	                minutes += -minutesOffset;
	            }

	            value = new Date(Date.UTC(year, month, day, hours, minutes, seconds, milliseconds));
	        } else {
	            value = new Date(year, month, day, hours, minutes, seconds, milliseconds);
	            adjustDST(value, hours);
	        }

	        if (year < 100) {
	            value.setFullYear(year);
	        }

	        if (value.getDate() !== day && UTC === undefined) {
	            return null;
	        }

	        return value;
	    }

	    function parseMicrosoftFormatOffset(offset) {
	        var sign = offset.substr(0, 1) === "-" ? -1 : 1;

	        offset = offset.substring(1);
	        offset = (parseInt(offset.substr(0, 2), 10) * 60) + parseInt(offset.substring(2), 10);

	        return sign * offset;
	    }

	    function getDefaultFormats(culture) {
	        var length = math.max(FORMATS_SEQUENCE.length, STANDARD_FORMATS.length);
	        var patterns = culture.calendar.patterns;
	        var cultureFormats, formatIdx, idx;
	        var formats = [];

	        for (idx = 0; idx < length; idx++) {
	            cultureFormats = FORMATS_SEQUENCE[idx];
	            for (formatIdx = 0; formatIdx < cultureFormats.length; formatIdx++) {
	                formats.push(patterns[cultureFormats[formatIdx]]);
	            }
	            formats = formats.concat(STANDARD_FORMATS[idx]);
	        }

	        return formats;
	    }

	    kendo.parseDate = function(value, formats, culture) {
	        if (objectToString.call(value) === "[object Date]") {
	            return value;
	        }

	        var idx = 0;
	        var date = null;
	        var length;
	        var tzoffset;

	        if (value && value.indexOf("/D") === 0) {
	            date = dateRegExp.exec(value);
	            if (date) {
	                date = date[1];
	                tzoffset = offsetRegExp.exec(date.substring(1));

	                date = new Date(parseInt(date, 10));

	                if (tzoffset) {
	                    tzoffset = parseMicrosoftFormatOffset(tzoffset[0]);
	                    date = kendo.timezone.apply(date, 0);
	                    date = kendo.timezone.convert(date, 0, -1 * tzoffset);
	                }

	                return date;
	            }
	        }

	        culture = kendo.getCulture(culture);

	        if (!formats) {
	            formats = getDefaultFormats(culture);
	        }

	        formats = isArray(formats) ? formats: [formats];
	        length = formats.length;

	        for (; idx < length; idx++) {
	            date = parseExact(value, formats[idx], culture);
	            if (date) {
	                return date;
	            }
	        }

	        return date;
	    };

	    kendo.parseInt = function(value, culture) {
	        var result = kendo.parseFloat(value, culture);
	        if (result) {
	            result = result | 0;
	        }
	        return result;
	    };

	    kendo.parseFloat = function(value, culture, format) {
	        if (!value && value !== 0) {
	           return null;
	        }

	        if (typeof value === NUMBER) {
	           return value;
	        }

	        value = value.toString();
	        culture = kendo.getCulture(culture);

	        var number = culture.numberFormat,
	            percent = number.percent,
	            currency = number.currency,
	            symbol = currency.symbol,
	            percentSymbol = percent.symbol,
	            negative = value.indexOf("-"),
	            parts, isPercent;

	        //handle exponential number
	        if (exponentRegExp.test(value)) {
	            value = parseFloat(value.replace(number["."], "."));
	            if (isNaN(value)) {
	                value = null;
	            }
	            return value;
	        }

	        if (negative > 0) {
	            return null;
	        } else {
	            negative = negative > -1;
	        }

	        if (value.indexOf(symbol) > -1 || (format && format.toLowerCase().indexOf("c") > -1)) {
	            number = currency;
	            parts = number.pattern[0].replace("$", symbol).split("n");
	            if (value.indexOf(parts[0]) > -1 && value.indexOf(parts[1]) > -1) {
	                value = value.replace(parts[0], "").replace(parts[1], "");
	                negative = true;
	            }
	        } else if (value.indexOf(percentSymbol) > -1) {
	            isPercent = true;
	            number = percent;
	            symbol = percentSymbol;
	        }

	        value = value.replace("-", "")
	                     .replace(symbol, "")
	                     .replace(nonBreakingSpaceRegExp, " ")
	                     .split(number[","].replace(nonBreakingSpaceRegExp, " ")).join("")
	                     .replace(number["."], ".");

	        value = parseFloat(value);

	        if (isNaN(value)) {
	            value = null;
	        } else if (negative) {
	            value *= -1;
	        }

	        if (value && isPercent) {
	            value /= 100;
	        }

	        return value;
	    };
	})();

	    function getShadows(element) {
	        var shadow = element.css(kendo.support.transitions.css + "box-shadow") || element.css("box-shadow"),
	            radius = shadow ? shadow.match(boxShadowRegExp) || [ 0, 0, 0, 0, 0 ] : [ 0, 0, 0, 0, 0 ],
	            blur = math.max((+radius[3]), +(radius[4] || 0));

	        return {
	            left: (-radius[1]) + blur,
	            right: (+radius[1]) + blur,
	            bottom: (+radius[2]) + blur
	        };
	    }

	    function wrap(element, autosize) {
	        var browser = support.browser,
	            percentage,
	            outerWidth = kendo._outerWidth,
	            outerHeight = kendo._outerHeight;

	        if (!element.parent().hasClass("k-animation-container")) {
	            var width = element[0].style.width,
	                height = element[0].style.height,
	                percentWidth = percentRegExp.test(width),
	                percentHeight = percentRegExp.test(height);

	            percentage = percentWidth || percentHeight;

	            if (!percentWidth && (!autosize || (autosize && width))) { width = autosize ? outerWidth(element) + 1 : outerWidth(element); }
	            if (!percentHeight && (!autosize || (autosize && height))) { height = outerHeight(element); }

	            element.wrap(
	                         $("<div/>")
	                         .addClass("k-animation-container")
	                         .css({
	                             width: width,
	                             height: height
	                         }));

	            if (percentage) {
	                element.css({
	                    width: "100%",
	                    height: "100%",
	                    boxSizing: "border-box",
	                    mozBoxSizing: "border-box",
	                    webkitBoxSizing: "border-box"
	                });
	            }
	        } else {
	            var wrapper = element.parent(".k-animation-container"),
	                wrapperStyle = wrapper[0].style;

	            if (wrapper.is(":hidden")) {
	                wrapper.show();
	            }

	            percentage = percentRegExp.test(wrapperStyle.width) || percentRegExp.test(wrapperStyle.height);

	            if (!percentage) {
	                wrapper.css({
	                    width: autosize ? outerWidth(element) + 1 : outerWidth(element),
	                    height: outerHeight(element),
	                    boxSizing: "content-box",
	                    mozBoxSizing: "content-box",
	                    webkitBoxSizing: "content-box"
	                });
	            }
	        }

	        if (browser.msie && math.floor(browser.version) <= 7) {
	            element.css({ zoom: 1 });
	            element.children(".k-menu").width(element.width());
	        }

	        return element.parent();
	    }

	    function deepExtend(destination) {
	        var i = 1,
	            length = arguments.length;

	        for (i = 1; i < length; i++) {
	            deepExtendOne(destination, arguments[i]);
	        }

	        return destination;
	    }

	    function deepExtendOne(destination, source) {
	        var ObservableArray = kendo.data.ObservableArray,
	            LazyObservableArray = kendo.data.LazyObservableArray,
	            DataSource = kendo.data.DataSource,
	            HierarchicalDataSource = kendo.data.HierarchicalDataSource,
	            property,
	            propValue,
	            propType,
	            propInit,
	            destProp;

	        for (property in source) {
	            propValue = source[property];
	            propType = typeof propValue;

	            if (propType === OBJECT && propValue !== null) {
	                propInit = propValue.constructor;
	            } else {
	                propInit = null;
	            }

	            if (propInit &&
	                propInit !== Array && propInit !== ObservableArray && propInit !== LazyObservableArray &&
	                propInit !== DataSource && propInit !== HierarchicalDataSource && propInit !== RegExp) {

	                if (propValue instanceof Date) {
	                    destination[property] = new Date(propValue.getTime());
	                } else if (isFunction(propValue.clone)) {
	                    destination[property] = propValue.clone();
	                } else {
	                    destProp = destination[property];
	                    if (typeof (destProp) === OBJECT) {
	                        destination[property] = destProp || {};
	                    } else {
	                        destination[property] = {};
	                    }
	                    deepExtendOne(destination[property], propValue);
	                }
	            } else if (propType !== UNDEFINED) {
	                destination[property] = propValue;
	            }
	        }

	        return destination;
	    }

	    function testRx(agent, rxs, dflt) {
	        for (var rx in rxs) {
	            if (rxs.hasOwnProperty(rx) && rxs[rx].test(agent)) {
	                return rx;
	            }
	        }
	        return dflt !== undefined ? dflt : agent;
	    }

	    function toHyphens(str) {
	        return str.replace(/([a-z][A-Z])/g, function (g) {
	            return g.charAt(0) + '-' + g.charAt(1).toLowerCase();
	        });
	    }

	    function toCamelCase(str) {
	        return str.replace(/\-(\w)/g, function (strMatch, g1) {
	            return g1.toUpperCase();
	        });
	    }

	    function getComputedStyles(element, properties) {
	        var styles = {}, computedStyle;

	        if (document.defaultView && document.defaultView.getComputedStyle) {
	            computedStyle = document.defaultView.getComputedStyle(element, "");

	            if (properties) {
	                $.each(properties, function(idx, value) {
	                    styles[value] = computedStyle.getPropertyValue(value);
	                });
	            }
	        } else {
	            computedStyle = element.currentStyle;

	            if (properties) {
	                $.each(properties, function(idx, value) {
	                    styles[value] = computedStyle[toCamelCase(value)];
	                });
	            }
	        }

	        if (!kendo.size(styles)) {
	            styles = computedStyle;
	        }

	        return styles;
	    }

	    function isScrollable(element) {
	        if (element && element.className && typeof(element.className) === "string" && element.className.indexOf("k-auto-scrollable") > -1) {
	            return true;
	        }

	        var overflow = getComputedStyles(element, ["overflow"]).overflow;
	        return overflow == "auto" || overflow == "scroll";
	    }

	    function scrollLeft(element, value) {
	        var webkit = support.browser.webkit;
	        var mozila = support.browser.mozilla;
	        var el = element instanceof $ ? element[0] : element;
	        var isRtl;

	        if (!element) {
	            return;
	        }

	        isRtl = support.isRtl(element);

	        if (value !== undefined) {
	            if (isRtl && webkit) {
	                el.scrollLeft = el.scrollWidth - el.clientWidth - value;
	            } else if (isRtl && mozila) {
	                el.scrollLeft = -value;
	            } else {
	                el.scrollLeft = value;
	            }
	        } else {
	            if (isRtl && webkit) {
	                return el.scrollWidth - el.clientWidth - el.scrollLeft;
	            } else {
	                return Math.abs(el.scrollLeft);
	            }
	        }
	    }

	    (function () {
	        support._scrollbar = undefined;

	        support.scrollbar = function (refresh) {
	            if (!isNaN(support._scrollbar) && !refresh) {
	                return support._scrollbar;
	            } else {
	                var div = document.createElement("div"),
	                    result;

	                div.style.cssText = "overflow:scroll;overflow-x:hidden;zoom:1;clear:both;display:block";
	                div.innerHTML = "&nbsp;";
	                document.body.appendChild(div);

	                support._scrollbar = result = div.offsetWidth - div.scrollWidth;

	                document.body.removeChild(div);

	                return result;
	            }
	        };

	        support.isRtl = function(element) {
	            return $(element).closest(".k-rtl").length > 0;
	        };

	        var table = document.createElement("table");

	        // Internet Explorer does not support setting the innerHTML of TBODY and TABLE elements
	        try {
	            table.innerHTML = "<tr><td></td></tr>";

	            support.tbodyInnerHtml = true;
	        } catch (e) {
	            support.tbodyInnerHtml = false;
	        }

	        support.touch = "ontouchstart" in window;

	        var docStyle = document.documentElement.style;
	        var transitions = support.transitions = false,
	            transforms = support.transforms = false,
	            elementProto = "HTMLElement" in window ? HTMLElement.prototype : [];

	        support.hasHW3D = ("WebKitCSSMatrix" in window && "m11" in new window.WebKitCSSMatrix()) || "MozPerspective" in docStyle || "msPerspective" in docStyle;
	        support.cssFlexbox = ("flexWrap" in docStyle) || ("WebkitFlexWrap" in docStyle) || ("msFlexWrap" in docStyle);

	        each([ "Moz", "webkit", "O", "ms" ], function () {
	            var prefix = this.toString(),
	                hasTransitions = typeof table.style[prefix + "Transition"] === STRING;

	            if (hasTransitions || typeof table.style[prefix + "Transform"] === STRING) {
	                var lowPrefix = prefix.toLowerCase();

	                transforms = {
	                    css: (lowPrefix != "ms") ? "-" + lowPrefix + "-" : "",
	                    prefix: prefix,
	                    event: (lowPrefix === "o" || lowPrefix === "webkit") ? lowPrefix : ""
	                };

	                if (hasTransitions) {
	                    transitions = transforms;
	                    transitions.event = transitions.event ? transitions.event + "TransitionEnd" : "transitionend";
	                }

	                return false;
	            }
	        });

	        table = null;

	        support.transforms = transforms;
	        support.transitions = transitions;

	        support.devicePixelRatio = window.devicePixelRatio === undefined ? 1 : window.devicePixelRatio;

	        try {
	            support.screenWidth = window.outerWidth || window.screen ? window.screen.availWidth : window.innerWidth;
	            support.screenHeight = window.outerHeight || window.screen ? window.screen.availHeight : window.innerHeight;
	        } catch(e) {
	            //window.outerWidth throws error when in IE showModalDialog.
	            support.screenWidth = window.screen.availWidth;
	            support.screenHeight = window.screen.availHeight;
	        }

	        support.detectOS = function (ua) {
	            var os = false, minorVersion, match = [],
	                notAndroidPhone = !/mobile safari/i.test(ua),
	                agentRxs = {
	                    wp: /(Windows Phone(?: OS)?)\s(\d+)\.(\d+(\.\d+)?)/,
	                    fire: /(Silk)\/(\d+)\.(\d+(\.\d+)?)/,
	                    android: /(Android|Android.*(?:Opera|Firefox).*?\/)\s*(\d+)\.(\d+(\.\d+)?)/,
	                    iphone: /(iPhone|iPod).*OS\s+(\d+)[\._]([\d\._]+)/,
	                    ipad: /(iPad).*OS\s+(\d+)[\._]([\d_]+)/,
	                    meego: /(MeeGo).+NokiaBrowser\/(\d+)\.([\d\._]+)/,
	                    webos: /(webOS)\/(\d+)\.(\d+(\.\d+)?)/,
	                    blackberry: /(BlackBerry|BB10).*?Version\/(\d+)\.(\d+(\.\d+)?)/,
	                    playbook: /(PlayBook).*?Tablet\s*OS\s*(\d+)\.(\d+(\.\d+)?)/,
	                    windows: /(MSIE)\s+(\d+)\.(\d+(\.\d+)?)/,
	                    tizen: /(tizen).*?Version\/(\d+)\.(\d+(\.\d+)?)/i,
	                    sailfish: /(sailfish).*rv:(\d+)\.(\d+(\.\d+)?).*firefox/i,
	                    ffos: /(Mobile).*rv:(\d+)\.(\d+(\.\d+)?).*Firefox/
	                },
	                osRxs = {
	                    ios: /^i(phone|pad|pod)$/i,
	                    android: /^android|fire$/i,
	                    blackberry: /^blackberry|playbook/i,
	                    windows: /windows/,
	                    wp: /wp/,
	                    flat: /sailfish|ffos|tizen/i,
	                    meego: /meego/
	                },
	                formFactorRxs = {
	                    tablet: /playbook|ipad|fire/i
	                },
	                browserRxs = {
	                    omini: /Opera\sMini/i,
	                    omobile: /Opera\sMobi/i,
	                    firefox: /Firefox|Fennec/i,
	                    mobilesafari: /version\/.*safari/i,
	                    ie: /MSIE|Windows\sPhone/i,
	                    chrome: /chrome|crios/i,
	                    webkit: /webkit/i
	                };

	            for (var agent in agentRxs) {
	                if (agentRxs.hasOwnProperty(agent)) {
	                    match = ua.match(agentRxs[agent]);
	                    if (match) {
	                        if (agent == "windows" && "plugins" in navigator) { return false; } // Break if not Metro/Mobile Windows

	                        os = {};
	                        os.device = agent;
	                        os.tablet = testRx(agent, formFactorRxs, false);
	                        os.browser = testRx(ua, browserRxs, "default");
	                        os.name = testRx(agent, osRxs);
	                        os[os.name] = true;
	                        os.majorVersion = match[2];
	                        os.minorVersion = match[3].replace("_", ".");
	                        minorVersion = os.minorVersion.replace(".", "").substr(0, 2);
	                        os.flatVersion = os.majorVersion + minorVersion + (new Array(3 - (minorVersion.length < 3 ? minorVersion.length : 2)).join("0"));
	                        os.cordova = typeof window.PhoneGap !== UNDEFINED || typeof window.cordova !== UNDEFINED; // Use file protocol to detect appModes.
	                        os.appMode = window.navigator.standalone || (/file|local|wmapp/).test(window.location.protocol) || os.cordova; // Use file protocol to detect appModes.

	                        if (os.android && (support.devicePixelRatio < 1.5 && os.flatVersion < 400 || notAndroidPhone) && (support.screenWidth > 800 || support.screenHeight > 800)) {
	                            os.tablet = agent;
	                        }

	                        break;
	                    }
	                }
	            }
	            return os;
	        };

	        var mobileOS = support.mobileOS = support.detectOS(navigator.userAgent);

	        support.wpDevicePixelRatio = mobileOS.wp ? screen.width / 320 : 0;

	        support.hasNativeScrolling = false;

	        if (mobileOS.ios || (mobileOS.android && mobileOS.majorVersion > 2) || mobileOS.wp) {
	            support.hasNativeScrolling = mobileOS;
	        }

	        support.delayedClick = function() {

	            // only the mobile devices with touch events do this.
	            if (support.touch) {
	                // All iOS devices so far (by the time I am writing this, iOS 9.0.2 is the latest),
	                // delay their click events.
	                if (mobileOS.ios) {
	                    return true;
	                }

	                if (mobileOS.android) {

	                    if (!support.browser.chrome) { // older webkits and webviews delay the click
	                        return true;
	                    }

	                    // from here on, we deal with Chrome on Android.
	                    if (support.browser.version < 32) {
	                        return false;
	                    }

	                    // Chrome 32+ does conditional fast clicks if the view port is not user scalable.
	                    return !($("meta[name=viewport]").attr("content") || "").match(/user-scalable=no/i);
	                }
	            }

	            return false;
	        };

	        support.mouseAndTouchPresent = support.touch && !(support.mobileOS.ios || support.mobileOS.android);

	        support.detectBrowser = function(ua) {
	            var browser = false, match = [],
	                browserRxs = {
	                    edge: /(edge)[ \/]([\w.]+)/i,
	                    webkit: /(chrome)[ \/]([\w.]+)/i,
	                    safari: /(webkit)[ \/]([\w.]+)/i,
	                    opera: /(opera)(?:.*version|)[ \/]([\w.]+)/i,
	                    msie: /(msie\s|trident.*? rv:)([\w.]+)/i,
	                    mozilla: /(mozilla)(?:.*? rv:([\w.]+)|)/i
	                };

	            for (var agent in browserRxs) {
	                if (browserRxs.hasOwnProperty(agent)) {
	                    match = ua.match(browserRxs[agent]);
	                    if (match) {
	                        browser = {};
	                        browser[agent] = true;
	                        browser[match[1].toLowerCase().split(" ")[0].split("/")[0]] = true;
	                        browser.version = parseInt(document.documentMode || match[2], 10);

	                        break;
	                    }
	                }
	            }

	            return browser;
	        };

	        support.browser = support.detectBrowser(navigator.userAgent);

	        support.detectClipboardAccess = function() {
	            var commands = {
	                copy: document.queryCommandSupported ? document.queryCommandSupported("copy") : false,
	                cut: document.queryCommandSupported ? document.queryCommandSupported("cut") : false,
	                paste : document.queryCommandSupported ? document.queryCommandSupported("paste") : false
	            };

	            if (support.browser.chrome) {
	                //not using queryCommandSupported due to chromium issues 476508 and 542948
	                commands.paste = false;
	                if(support.browser.version >= 43) {
	                    commands.copy = true;
	                    commands.cut = true;
	                }
	            }

	            return commands;
	        };

	        support.clipboard = support.detectClipboardAccess();

	        support.zoomLevel = function() {
	            try {
	                var browser = support.browser;
	                var ie11WidthCorrection = 0;
	                var docEl = document.documentElement;

	                if (browser.msie && browser.version == 11 && docEl.scrollHeight > docEl.clientHeight && !support.touch) {
	                    ie11WidthCorrection = support.scrollbar();
	                }

	                return support.touch ? (docEl.clientWidth / window.innerWidth) :
	                       browser.msie && browser.version >= 10 ? (((top || window).document.documentElement.offsetWidth + ie11WidthCorrection) / (top || window).innerWidth) : 1;
	            } catch(e) {
	                return 1;
	            }
	        };

	        support.cssBorderSpacing = typeof docStyle.borderSpacing != "undefined" && !(support.browser.msie && support.browser.version < 8);

	        (function(browser) {
	            // add browser-specific CSS class
	            var cssClass = "",
	                docElement = $(document.documentElement),
	                majorVersion = parseInt(browser.version, 10);

	            if (browser.msie) {
	                cssClass = "ie";
	            } else if (browser.mozilla) {
	                cssClass = "ff";
	            } else if (browser.safari) {
	                cssClass = "safari";
	            } else if (browser.webkit) {
	                cssClass = "webkit";
	            } else if (browser.opera) {
	                cssClass = "opera";
	            } else if (browser.edge) {
	                cssClass = "edge";
	            }

	            if (cssClass) {
	                cssClass = "k-" + cssClass + " k-" + cssClass + majorVersion;
	            }
	            if (support.mobileOS) {
	                cssClass += " k-mobile";
	            }

	            if (!support.cssFlexbox) {
	                cssClass += " k-no-flexbox";
	            }

	            docElement.addClass(cssClass);
	        })(support.browser);

	        support.eventCapture = document.documentElement.addEventListener;

	        var input = document.createElement("input");

	        support.placeholder = "placeholder" in input;
	        support.propertyChangeEvent = "onpropertychange" in input;

	        support.input = (function() {
	            var types = ["number", "date", "time", "month", "week", "datetime", "datetime-local"];
	            var length = types.length;
	            var value = "test";
	            var result = {};
	            var idx = 0;
	            var type;

	            for (;idx < length; idx++) {
	                type = types[idx];
	                input.setAttribute("type", type);
	                input.value = value;

	                result[type.replace("-", "")] = input.type !== "text" && input.value !== value;
	            }

	            return result;
	        })();

	        input.style.cssText = "float:left;";

	        support.cssFloat = !!input.style.cssFloat;

	        input = null;

	        support.stableSort = (function() {
	            // Chrome sort is not stable for more than *10* items
	            // IE9+ sort is not stable for than *512* items
	            var threshold = 513;

	            var sorted = [{
	                index: 0,
	                field: "b"
	            }];

	            for (var i = 1; i < threshold; i++) {
	                sorted.push({
	                    index: i,
	                    field: "a"
	                });
	            }

	            sorted.sort(function(a, b) {
	                return a.field > b.field ? 1 : (a.field < b.field ? -1 : 0);
	            });

	            return sorted[0].index === 1;
	        })();

	        support.matchesSelector = elementProto.webkitMatchesSelector || elementProto.mozMatchesSelector ||
	                                  elementProto.msMatchesSelector || elementProto.oMatchesSelector ||
	                                  elementProto.matchesSelector || elementProto.matches ||
	          function( selector ) {
	              var nodeList = document.querySelectorAll ? ( this.parentNode || document ).querySelectorAll( selector ) || [] : $(selector),
	                  i = nodeList.length;

	              while (i--) {
	                  if (nodeList[i] == this) {
	                      return true;
	                  }
	              }

	              return false;
	          };

	        support.pushState = window.history && window.history.pushState;

	        var documentMode = document.documentMode;

	        support.hashChange = ("onhashchange" in window) && !(support.browser.msie && (!documentMode || documentMode <= 8)); // old IE detection

	        support.customElements = ("registerElement" in window.document);

	        var chrome = support.browser.chrome;
	        support.msPointers = !chrome && window.MSPointerEvent;
	        support.pointers = !chrome && window.PointerEvent;
	        support.kineticScrollNeeded = mobileOS && (support.touch || support.msPointers || support.pointers);
	    })();


	    function size(obj) {
	        var result = 0, key;
	        for (key in obj) {
	            if (obj.hasOwnProperty(key) && key != "toJSON") { // Ignore fake IE7 toJSON.
	                result++;
	            }
	        }

	        return result;
	    }

	    function getOffset(element, type, positioned) {
	        if (!type) {
	            type = "offset";
	        }

	        var offset = element[type]();
	        // clone ClientRect object to JS object (jQuery3)
	        var result = {
	            top: offset.top,
	            right: offset.right,
	            bottom: offset.bottom,
	            left: offset.left
	        };

	        // IE10 touch zoom is living in a separate viewport
	        if (support.browser.msie && (support.pointers || support.msPointers) && !positioned) {
	            var sign = support.isRtl(element) ? 1 : -1;

	            result.top -= (window.pageYOffset - (document.documentElement.scrollTop));
	            result.left -= (window.pageXOffset + (sign * document.documentElement.scrollLeft));
	        }

	        return result;
	    }

	    var directions = {
	        left: { reverse: "right" },
	        right: { reverse: "left" },
	        down: { reverse: "up" },
	        up: { reverse: "down" },
	        top: { reverse: "bottom" },
	        bottom: { reverse: "top" },
	        "in": { reverse: "out" },
	        out: { reverse: "in" }
	    };

	    function parseEffects(input) {
	        var effects = {};

	        each((typeof input === "string" ? input.split(" ") : input), function(idx) {
	            effects[idx] = this;
	        });

	        return effects;
	    }

	    function fx(element) {
	        return new kendo.effects.Element(element);
	    }

	    var effects = {};

	    $.extend(effects, {
	        enabled: true,
	        Element: function(element) {
	            this.element = $(element);
	        },

	        promise: function(element, options) {
	            if (!element.is(":visible")) {
	                element.css({ display: element.data("olddisplay") || "block" }).css("display");
	            }

	            if (options.hide) {
	                element.data("olddisplay", element.css("display")).hide();
	            }

	            if (options.init) {
	                options.init();
	            }

	            if (options.completeCallback) {
	                options.completeCallback(element); // call the external complete callback with the element
	            }

	            element.dequeue();
	        },

	        disable: function() {
	            this.enabled = false;
	            this.promise = this.promiseShim;
	        },

	        enable: function() {
	            this.enabled = true;
	            this.promise = this.animatedPromise;
	        }
	    });

	    effects.promiseShim = effects.promise;

	    function prepareAnimationOptions(options, duration, reverse, complete) {
	        if (typeof options === STRING) {
	            // options is the list of effect names separated by space e.g. animate(element, "fadeIn slideDown")

	            // only callback is provided e.g. animate(element, options, function() {});
	            if (isFunction(duration)) {
	                complete = duration;
	                duration = 400;
	                reverse = false;
	            }

	            if (isFunction(reverse)) {
	                complete = reverse;
	                reverse = false;
	            }

	            if (typeof duration === BOOLEAN){
	                reverse = duration;
	                duration = 400;
	            }

	            options = {
	                effects: options,
	                duration: duration,
	                reverse: reverse,
	                complete: complete
	            };
	        }

	        return extend({
	            //default options
	            effects: {},
	            duration: 400, //jQuery default duration
	            reverse: false,
	            init: noop,
	            teardown: noop,
	            hide: false
	        }, options, { completeCallback: options.complete, complete: noop }); // Move external complete callback, so deferred.resolve can be always executed.

	    }

	    function animate(element, options, duration, reverse, complete) {
	        var idx = 0,
	            length = element.length,
	            instance;

	        for (; idx < length; idx ++) {
	            instance = $(element[idx]);
	            instance.queue(function() {
	                effects.promise(instance, prepareAnimationOptions(options, duration, reverse, complete));
	            });
	        }

	        return element;
	    }

	    function toggleClass(element, classes, options, add) {
	        if (classes) {
	            classes = classes.split(" ");

	            each(classes, function(idx, value) {
	                element.toggleClass(value, add);
	            });
	        }

	        return element;
	    }

	    if (!("kendoAnimate" in $.fn)) {
	        extend($.fn, {
	            kendoStop: function(clearQueue, gotoEnd) {
	                return this.stop(clearQueue, gotoEnd);
	            },

	            kendoAnimate: function(options, duration, reverse, complete) {
	                return animate(this, options, duration, reverse, complete);
	            },

	            kendoAddClass: function(classes, options){
	                return kendo.toggleClass(this, classes, options, true);
	            },

	            kendoRemoveClass: function(classes, options){
	                return kendo.toggleClass(this, classes, options, false);
	            },
	            kendoToggleClass: function(classes, options, toggle){
	                return kendo.toggleClass(this, classes, options, toggle);
	            }
	        });
	    }

	    var ampRegExp = /&/g,
	        ltRegExp = /</g,
	        quoteRegExp = /"/g,
	        aposRegExp = /'/g,
	        gtRegExp = />/g;
	    function htmlEncode(value) {
	        return ("" + value).replace(ampRegExp, "&amp;").replace(ltRegExp, "&lt;").replace(gtRegExp, "&gt;").replace(quoteRegExp, "&quot;").replace(aposRegExp, "&#39;");
	    }

	    var eventTarget = function (e) {
	        return e.target;
	    };

	    if (support.touch) {

	        eventTarget = function(e) {
	            var touches = "originalEvent" in e ? e.originalEvent.changedTouches : "changedTouches" in e ? e.changedTouches : null;

	            return touches ? document.elementFromPoint(touches[0].clientX, touches[0].clientY) : e.target;
	        };

	        each(["swipe", "swipeLeft", "swipeRight", "swipeUp", "swipeDown", "doubleTap", "tap"], function(m, value) {
	            $.fn[value] = function(callback) {
	                return this.bind(value, callback);
	            };
	        });
	    }

	    if (support.touch) {
	        if (!support.mobileOS) {
	            support.mousedown = "mousedown touchstart";
	            support.mouseup = "mouseup touchend";
	            support.mousemove = "mousemove touchmove";
	            support.mousecancel = "mouseleave touchcancel";
	            support.click = "click";
	            support.resize = "resize";
	        } else {
	            support.mousedown = "touchstart";
	            support.mouseup = "touchend";
	            support.mousemove = "touchmove";
	            support.mousecancel = "touchcancel";
	            support.click = "touchend";
	            support.resize = "orientationchange";
	        }
	    } else if (support.pointers) {
	        support.mousemove = "pointermove";
	        support.mousedown = "pointerdown";
	        support.mouseup = "pointerup";
	        support.mousecancel = "pointercancel";
	        support.click = "pointerup";
	        support.resize = "orientationchange resize";
	    } else if (support.msPointers) {
	        support.mousemove = "MSPointerMove";
	        support.mousedown = "MSPointerDown";
	        support.mouseup = "MSPointerUp";
	        support.mousecancel = "MSPointerCancel";
	        support.click = "MSPointerUp";
	        support.resize = "orientationchange resize";
	    } else {
	        support.mousemove = "mousemove";
	        support.mousedown = "mousedown";
	        support.mouseup = "mouseup";
	        support.mousecancel = "mouseleave";
	        support.click = "click";
	        support.resize = "resize";
	    }

	    var wrapExpression = function(members, paramName) {
	        var result = paramName || "d",
	            index,
	            idx,
	            length,
	            member,
	            count = 1;

	        for (idx = 0, length = members.length; idx < length; idx++) {
	            member = members[idx];
	            if (member !== "") {
	                index = member.indexOf("[");

	                if (index !== 0) {
	                    if (index == -1) {
	                        member = "." + member;
	                    } else {
	                        count++;
	                        member = "." + member.substring(0, index) + " || {})" + member.substring(index);
	                    }
	                }

	                count++;
	                result += member + ((idx < length - 1) ? " || {})" : ")");
	            }
	        }
	        return new Array(count).join("(") + result;
	    },
	    localUrlRe = /^([a-z]+:)?\/\//i;

	    extend(kendo, {
	        widgets: [],
	        _widgetRegisteredCallbacks: [],
	        ui: kendo.ui || {},
	        fx: kendo.fx || fx,
	        effects: kendo.effects || effects,
	        mobile: kendo.mobile || { },
	        data: kendo.data || {},
	        dataviz: kendo.dataviz || {},
	        drawing: kendo.drawing || {},
	        spreadsheet: { messages: {} },
	        keys: {
	            INSERT: 45,
	            DELETE: 46,
	            BACKSPACE: 8,
	            TAB: 9,
	            ENTER: 13,
	            ESC: 27,
	            LEFT: 37,
	            UP: 38,
	            RIGHT: 39,
	            DOWN: 40,
	            END: 35,
	            HOME: 36,
	            SPACEBAR: 32,
	            PAGEUP: 33,
	            PAGEDOWN: 34,
	            F2: 113,
	            F10: 121,
	            F12: 123,
	            NUMPAD_PLUS: 107,
	            NUMPAD_MINUS: 109,
	            NUMPAD_DOT: 110
	        },
	        support: kendo.support || support,
	        animate: kendo.animate || animate,
	        ns: "",
	        attr: function(value) {
	            return "data-" + kendo.ns + value;
	        },
	        getShadows: getShadows,
	        wrap: wrap,
	        deepExtend: deepExtend,
	        getComputedStyles: getComputedStyles,
	        webComponents: kendo.webComponents || [],
	        isScrollable: isScrollable,
	        scrollLeft: scrollLeft,
	        size: size,
	        toCamelCase: toCamelCase,
	        toHyphens: toHyphens,
	        getOffset: kendo.getOffset || getOffset,
	        parseEffects: kendo.parseEffects || parseEffects,
	        toggleClass: kendo.toggleClass || toggleClass,
	        directions: kendo.directions || directions,
	        Observable: Observable,
	        Class: Class,
	        Template: Template,
	        template: proxy(Template.compile, Template),
	        render: proxy(Template.render, Template),
	        stringify: proxy(JSON.stringify, JSON),
	        eventTarget: eventTarget,
	        htmlEncode: htmlEncode,
	        isLocalUrl: function(url) {
	            return url && !localUrlRe.test(url);
	        },

	        expr: function(expression, safe, paramName) {
	            expression = expression || "";

	            if (typeof safe == STRING) {
	                paramName = safe;
	                safe = false;
	            }

	            paramName = paramName || "d";

	            if (expression && expression.charAt(0) !== "[") {
	                expression = "." + expression;
	            }

	            if (safe) {
	                expression = expression.replace(/"([^.]*)\.([^"]*)"/g,'"$1_$DOT$_$2"');
	                expression = expression.replace(/'([^.]*)\.([^']*)'/g,"'$1_$DOT$_$2'");
	                expression = wrapExpression(expression.split("."), paramName);
	                expression = expression.replace(/_\$DOT\$_/g, ".");
	            } else {
	                expression = paramName + expression;
	            }

	            return expression;
	        },

	        getter: function(expression, safe) {
	            var key = expression + safe;
	            return getterCache[key] = getterCache[key] || new Function("d", "return " + kendo.expr(expression, safe));
	        },

	        setter: function(expression) {
	            return setterCache[expression] = setterCache[expression] || new Function("d,value", kendo.expr(expression) + "=value");
	        },

	        accessor: function(expression) {
	            return {
	                get: kendo.getter(expression),
	                set: kendo.setter(expression)
	            };
	        },

	        guid: function() {
	            var id = "", i, random;

	            for (i = 0; i < 32; i++) {
	                random = math.random() * 16 | 0;

	                if (i == 8 || i == 12 || i == 16 || i == 20) {
	                    id += "-";
	                }
	                id += (i == 12 ? 4 : (i == 16 ? (random & 3 | 8) : random)).toString(16);
	            }

	            return id;
	        },

	        roleSelector: function(role) {
	            return role.replace(/(\S+)/g, "[" + kendo.attr("role") + "=$1],").slice(0, -1);
	        },

	        directiveSelector: function(directives) {
	            var selectors = directives.split(" ");

	            if (selectors) {
	                for (var i = 0; i < selectors.length; i++) {
	                    if (selectors[i] != "view") {
	                        selectors[i] = selectors[i].replace(/(\w*)(view|bar|strip|over)$/, "$1-$2");
	                    }
	                }
	            }

	            return selectors.join(" ").replace(/(\S+)/g, "kendo-mobile-$1,").slice(0, -1);
	        },

	        triggeredByInput: function(e) {
	            return (/^(label|input|textarea|select)$/i).test(e.target.tagName);
	        },

	        onWidgetRegistered: function(callback) {
	            for (var i = 0, len = kendo.widgets.length; i < len; i++) {
	                callback(kendo.widgets[i]);
	            }

	            kendo._widgetRegisteredCallbacks.push(callback);
	        },

	        logToConsole: function(message, type) {
	            var console = window.console;

	            if (!kendo.suppressLog && typeof(console) != "undefined" && console.log) {
	                console[type || "log"](message);
	            }
	        }
	    });

	    var Widget = Observable.extend( {
	        init: function(element, options) {
	            var that = this;

	            that.element = kendo.jQuery(element).handler(that);

	            that.angular("init", options);

	            Observable.fn.init.call(that);

	            var dataSource = options ? options.dataSource : null;

	            if (dataSource) {
	                // avoid deep cloning the data source
	                options = extend({}, options, { dataSource: {} });
	            }

	            options = that.options = extend(true, {}, that.options, options);

	            if (dataSource) {
	                options.dataSource = dataSource;
	            }

	            if (!that.element.attr(kendo.attr("role"))) {
	                that.element.attr(kendo.attr("role"), (options.name || "").toLowerCase());
	            }

	            that.element.data("kendo" + options.prefix + options.name, that);

	            that.bind(that.events, options);
	        },

	        events: [],

	        options: {
	            prefix: ""
	        },

	        _hasBindingTarget: function() {
	            return !!this.element[0].kendoBindingTarget;
	        },

	        _tabindex: function(target) {
	            target = target || this.wrapper;

	            var element = this.element,
	                TABINDEX = "tabindex",
	                tabindex = target.attr(TABINDEX) || element.attr(TABINDEX);

	            element.removeAttr(TABINDEX);

	            target.attr(TABINDEX, !isNaN(tabindex) ? tabindex : 0);
	        },

	        setOptions: function(options) {
	            this._setEvents(options);
	            $.extend(this.options, options);
	        },

	        _setEvents: function(options) {
	            var that = this,
	                idx = 0,
	                length = that.events.length,
	                e;

	            for (; idx < length; idx ++) {
	                e = that.events[idx];
	                if (that.options[e] && options[e]) {
	                    that.unbind(e, that.options[e]);
	                }
	            }

	            that.bind(that.events, options);
	        },

	        resize: function(force) {
	            var size = this.getSize(),
	                currentSize = this._size;

	            if (force || (size.width > 0 || size.height > 0) && (!currentSize || size.width !== currentSize.width || size.height !== currentSize.height)) {
	                this._size = size;
	                this._resize(size, force);
	                this.trigger("resize", size);
	            }
	        },

	        getSize: function() {
	            return kendo.dimensions(this.element);
	        },

	        size: function(size) {
	            if (!size) {
	                return this.getSize();
	            } else {
	                this.setSize(size);
	            }
	        },

	        setSize: $.noop,
	        _resize: $.noop,

	        destroy: function() {
	            var that = this;

	            that.element.removeData("kendo" + that.options.prefix + that.options.name);
	            that.element.removeData("handler");
	            that.unbind();
	        },
	        _destroy: function() {
	            this.destroy();
	        },
	        angular: function(){},

	        _muteAngularRebind: function(callback) {
	            this._muteRebind = true;

	            callback.call(this);

	            this._muteRebind = false;
	        }
	    });

	    var DataBoundWidget = Widget.extend({
	        // Angular consumes these.
	        dataItems: function() {
	            return this.dataSource.flatView();
	        },

	        _angularItems: function(cmd) {
	            var that = this;
	            that.angular(cmd, function(){
	                return {
	                    elements: that.items(),
	                    data: $.map(that.dataItems(), function(dataItem){
	                        return { dataItem: dataItem };
	                    })
	                };
	            });
	        }
	    });

	    kendo.dimensions = function(element, dimensions) {
	        var domElement = element[0];

	        if (dimensions) {
	            element.css(dimensions);
	        }

	        return { width: domElement.offsetWidth, height: domElement.offsetHeight };
	    };

	    kendo.notify = noop;

	    var templateRegExp = /template$/i,
	        jsonRegExp = /^\s*(?:\{(?:.|\r\n|\n)*\}|\[(?:.|\r\n|\n)*\])\s*$/,
	        jsonFormatRegExp = /^\{(\d+)(:[^\}]+)?\}|^\[[A-Za-z_]+\]$/,
	        dashRegExp = /([A-Z])/g;

	    function parseOption(element, option) {
	        var value;

	        if (option.indexOf("data") === 0) {
	            option = option.substring(4);
	            option = option.charAt(0).toLowerCase() + option.substring(1);
	        }

	        option = option.replace(dashRegExp, "-$1");
	        value = element.getAttribute("data-" + kendo.ns + option);

	        if (value === null) {
	            value = undefined;
	        } else if (value === "null") {
	            value = null;
	        } else if (value === "true") {
	            value = true;
	        } else if (value === "false") {
	            value = false;
	        } else if (numberRegExp.test(value)) {
	            value = parseFloat(value);
	        } else if (jsonRegExp.test(value) && !jsonFormatRegExp.test(value)) {
	            value = new Function("return (" + value + ")")();
	        }

	        return value;
	    }

	    function parseOptions(element, options) {
	        var result = {},
	            option,
	            value;

	        for (option in options) {
	            value = parseOption(element, option);

	            if (value !== undefined) {

	                if (templateRegExp.test(option)) {
	                    if(typeof value === "string") {
	                        value = kendo.template($("#" + value).html());
	                    } else {
	                        value = element.getAttribute(option);
	                    }
	                }

	                result[option] = value;
	            }
	        }

	        return result;
	    }

	    kendo.initWidget = function(element, options, roles) {
	        var result,
	            option,
	            widget,
	            idx,
	            length,
	            role,
	            value,
	            dataSource,
	            fullPath,
	            widgetKeyRegExp;

	        // Preserve backwards compatibility with (element, options, namespace) signature, where namespace was kendo.ui
	        if (!roles) {
	            roles = kendo.ui.roles;
	        } else if (roles.roles) {
	            roles = roles.roles;
	        }

	        element = element.nodeType ? element : element[0];

	        role = element.getAttribute("data-" + kendo.ns + "role");

	        if (!role) {
	            return;
	        }

	        fullPath = role.indexOf(".") === -1;

	        // look for any widget that may be already instantiated based on this role.
	        // The prefix used is unknown, hence the regexp
	        //

	        if (fullPath) {
	            widget = roles[role];
	        } else { // full namespace path - like kendo.ui.Widget
	            widget = kendo.getter(role)(window);
	        }

	        var data = $(element).data(),
	            widgetKey = widget ? "kendo" + widget.fn.options.prefix + widget.fn.options.name : "";

	        if (fullPath) {
	            widgetKeyRegExp = new RegExp("^kendo.*" + role + "$", "i");
	        } else { // full namespace path - like kendo.ui.Widget
	            widgetKeyRegExp = new RegExp("^" + widgetKey + "$", "i");
	        }

	        for(var key in data) {
	            if (key.match(widgetKeyRegExp)) {
	                // we have detected a widget of the same kind - save its reference, we will set its options
	                if (key === widgetKey) {
	                    result = data[key];
	                } else {
	                    return data[key];
	                }
	            }
	        }

	        if (!widget) {
	            return;
	        }

	        dataSource = parseOption(element, "dataSource");

	        options = $.extend({}, parseOptions(element, widget.fn.options), options);

	        if (dataSource) {
	            if (typeof dataSource === STRING) {
	                options.dataSource = kendo.getter(dataSource)(window);
	            } else {
	                options.dataSource = dataSource;
	            }
	        }

	        for (idx = 0, length = widget.fn.events.length; idx < length; idx++) {
	            option = widget.fn.events[idx];

	            value = parseOption(element, option);

	            if (value !== undefined) {
	                options[option] = kendo.getter(value)(window);
	            }
	        }

	        if (!result) {
	            result = new widget(element, options);
	        } else if (!$.isEmptyObject(options)) {
	            result.setOptions(options);
	        }

	        return result;
	    };

	    kendo.rolesFromNamespaces = function(namespaces) {
	        var roles = [],
	            idx,
	            length;

	        if (!namespaces[0]) {
	            namespaces = [kendo.ui, kendo.dataviz.ui];
	        }

	        for (idx = 0, length = namespaces.length; idx < length; idx ++) {
	            roles[idx] = namespaces[idx].roles;
	        }

	        return extend.apply(null, [{}].concat(roles.reverse()));
	    };

	    kendo.init = function(element) {
	        var roles = kendo.rolesFromNamespaces(slice.call(arguments, 1));

	        $(element).find("[data-" + kendo.ns + "role]").addBack().each(function(){
	            kendo.initWidget(this, {}, roles);
	        });
	    };

	    kendo.destroy = function(element) {
	        $(element).find("[data-" + kendo.ns + "role]").addBack().each(function(){
	            var data = $(this).data();

	            for (var key in data) {
	                if (key.indexOf("kendo") === 0 && typeof data[key].destroy === FUNCTION) {
	                    data[key].destroy();
	                }
	            }
	        });
	    };

	    function containmentComparer(a, b) {
	        return $.contains(a, b) ? -1 : 1;
	    }

	    function resizableWidget() {
	        var widget = $(this);
	        return ($.inArray(widget.attr("data-" + kendo.ns + "role"), ["slider", "rangeslider"]) > -1) || widget.is(":visible");
	    }

	    kendo.resize = function(element, force) {
	        var widgets = $(element).find("[data-" + kendo.ns + "role]").addBack().filter(resizableWidget);

	        if (!widgets.length) {
	            return;
	        }

	        // sort widgets based on their parent-child relation
	        var widgetsArray = $.makeArray(widgets);
	        widgetsArray.sort(containmentComparer);

	        // resize widgets
	        $.each(widgetsArray, function () {
	            var widget = kendo.widgetInstance($(this));
	            if (widget) {
	                widget.resize(force);
	            }
	        });
	    };

	    kendo.parseOptions = parseOptions;

	    extend(kendo.ui, {
	        Widget: Widget,
	        DataBoundWidget: DataBoundWidget,
	        roles: {},
	        progress: function(container, toggle) {
	            var mask = container.find(".k-loading-mask"),
	                support = kendo.support,
	                browser = support.browser,
	                isRtl, leftRight, webkitCorrection, containerScrollLeft;

	            if (toggle) {
	                if (!mask.length) {
	                    isRtl = support.isRtl(container);
	                    leftRight = isRtl ? "right" : "left";
	                    containerScrollLeft = container.scrollLeft();
	                    webkitCorrection = browser.webkit ? (!isRtl ? 0 : container[0].scrollWidth - container.width() - 2 * containerScrollLeft) : 0;

	                    mask = $("<div class='k-loading-mask'><span class='k-loading-text'>" + kendo.ui.progress.messages.loading + "</span><div class='k-loading-image'/><div class='k-loading-color'/></div>")
	                        .width("100%").height("100%")
	                        .css("top", container.scrollTop())
	                        .css(leftRight, Math.abs(containerScrollLeft) + webkitCorrection)
	                        .prependTo(container);
	                }
	            } else if (mask) {
	                mask.remove();
	            }
	        },
	        plugin: function(widget, register, prefix) {
	            var name = widget.fn.options.name,
	                getter;

	            register = register || kendo.ui;
	            prefix = prefix || "";

	            register[name] = widget;

	            register.roles[name.toLowerCase()] = widget;

	            getter = "getKendo" + prefix + name;
	            name = "kendo" + prefix + name;

	            var widgetEntry = { name: name, widget: widget, prefix: prefix || "" };
	            kendo.widgets.push(widgetEntry);

	            for (var i = 0, len = kendo._widgetRegisteredCallbacks.length; i < len; i++) {
	                kendo._widgetRegisteredCallbacks[i](widgetEntry);
	            }

	            $.fn[name] = function(options) {
	                var value = this,
	                    args;

	                if (typeof options === STRING) {
	                    args = slice.call(arguments, 1);

	                    this.each(function(){
	                        var widget = $.data(this, name),
	                            method,
	                            result;

	                        if (!widget) {
	                            throw new Error(kendo.format("Cannot call method '{0}' of {1} before it is initialized", options, name));
	                        }

	                        method = widget[options];

	                        if (typeof method !== FUNCTION) {
	                            throw new Error(kendo.format("Cannot find method '{0}' of {1}", options, name));
	                        }

	                        result = method.apply(widget, args);

	                        if (result !== undefined) {
	                            value = result;
	                            return false;
	                        }
	                    });
	                } else {
	                    this.each(function() {
	                        return new widget(this, options);
	                    });
	                }

	                return value;
	            };

	            $.fn[name].widget = widget;

	            $.fn[getter] = function() {
	                return this.data(name);
	            };
	        }
	    });

	    kendo.ui.progress.messages = {
	        loading: "Loading..."
	    };

	    var ContainerNullObject = { bind: function () { return this; }, nullObject: true, options: {} };

	    var MobileWidget = Widget.extend({
	        init: function(element, options) {
	            Widget.fn.init.call(this, element, options);
	            this.element.autoApplyNS();
	            this.wrapper = this.element;
	            this.element.addClass("km-widget");
	        },

	        destroy: function() {
	            Widget.fn.destroy.call(this);
	            this.element.kendoDestroy();
	        },

	        options: {
	            prefix: "Mobile"
	        },

	        events: [],

	        view: function() {
	            var viewElement = this.element.closest(kendo.roleSelector("view splitview modalview drawer"));
	            return kendo.widgetInstance(viewElement, kendo.mobile.ui) || ContainerNullObject;
	        },

	        viewHasNativeScrolling: function() {
	            var view = this.view();
	            return view && view.options.useNativeScrolling;
	        },

	        container: function() {
	            var element = this.element.closest(kendo.roleSelector("view layout modalview drawer splitview"));
	            return kendo.widgetInstance(element.eq(0), kendo.mobile.ui) || ContainerNullObject;
	        }
	    });

	    extend(kendo.mobile, {
	        init: function(element) {
	            kendo.init(element, kendo.mobile.ui, kendo.ui, kendo.dataviz.ui);
	        },

	        appLevelNativeScrolling: function() {
	            return kendo.mobile.application && kendo.mobile.application.options && kendo.mobile.application.options.useNativeScrolling;
	        },

	        roles: {},

	        ui: {
	            Widget: MobileWidget,
	            DataBoundWidget: DataBoundWidget.extend(MobileWidget.prototype),
	            roles: {},
	            plugin: function(widget) {
	                kendo.ui.plugin(widget, kendo.mobile.ui, "Mobile");
	            }
	        }
	    });

	    deepExtend(kendo.dataviz, {
	        init: function(element) {
	            kendo.init(element, kendo.dataviz.ui);
	        },
	        ui: {
	            roles: {},
	            themes: {},
	            views: [],
	            plugin: function(widget) {
	                kendo.ui.plugin(widget, kendo.dataviz.ui);
	            }
	        },
	        roles: {}
	    });

	    kendo.touchScroller = function(elements, options) {
	        // return the first touch scroller
	        if (!options){ options = {}; }

	        options.useNative = true;

	        return $(elements).map(function(idx, element) {
	            element = $(element);
	            if (support.kineticScrollNeeded && kendo.mobile.ui.Scroller && !element.data("kendoMobileScroller")) {
	                element.kendoMobileScroller(options);
	                return element.data("kendoMobileScroller");
	            } else {
	                return false;
	            }
	        })[0];
	    };

	    kendo.preventDefault = function(e) {
	        e.preventDefault();
	    };

	    kendo.widgetInstance = function(element, suites) {
	        var role = element.data(kendo.ns + "role"),
	            widgets = [], i, length;

	        if (role) {
	            // HACK!!! mobile view scroller widgets are instantiated on data-role="content" elements. We need to discover them when resizing.
	            if (role === "content") {
	                role = "scroller";
	            }

	            if (suites) {
	                if (suites[0]) {
	                    for (i = 0, length = suites.length; i < length; i ++) {
	                        widgets.push(suites[i].roles[role]);
	                    }
	                } else {
	                    widgets.push(suites.roles[role]);
	                }
	            }
	            else {
	                widgets = [ kendo.ui.roles[role], kendo.dataviz.ui.roles[role],  kendo.mobile.ui.roles[role] ];
	            }

	            if (role.indexOf(".") >= 0) {
	                widgets = [ kendo.getter(role)(window) ];
	            }

	            for (i = 0, length = widgets.length; i < length; i ++) {
	                var widget = widgets[i];
	                if (widget) {
	                    var instance = element.data("kendo" + widget.fn.options.prefix + widget.fn.options.name);
	                    if (instance) {
	                        return instance;
	                    }
	                }
	            }
	        }
	    };

	    kendo.onResize = function(callback) {
	        var handler = callback;
	        if (support.mobileOS.android) {
	            handler = function() { setTimeout(callback, 600); };
	        }

	        $(window).on(support.resize, handler);
	        return handler;
	    };

	    kendo.unbindResize = function(callback) {
	        $(window).off(support.resize, callback);
	    };

	    kendo.attrValue = function(element, key) {
	        return element.data(kendo.ns + key);
	    };

	    kendo.days = {
	        Sunday: 0,
	        Monday: 1,
	        Tuesday: 2,
	        Wednesday: 3,
	        Thursday: 4,
	        Friday: 5,
	        Saturday: 6
	    };

	    function focusable(element, isTabIndexNotNaN) {
	        var nodeName = element.nodeName.toLowerCase();

	        return (/input|select|textarea|button|object/.test(nodeName) ?
	                !element.disabled :
	                "a" === nodeName ?
	                element.href || isTabIndexNotNaN :
	                isTabIndexNotNaN
	               ) &&
	            visible(element);
	    }

	    function visible(element) {
	        return $.expr.filters.visible(element) &&
	            !$(element).parents().addBack().filter(function() {
	                return $.css(this,"visibility") === "hidden";
	            }).length;
	    }

	    $.extend($.expr[ ":" ], {
	        kendoFocusable: function(element) {
	            var idx = $.attr(element, "tabindex");
	            return focusable(element, !isNaN(idx) && idx > -1);
	        }
	    });

	    var MOUSE_EVENTS = ["mousedown", "mousemove", "mouseenter", "mouseleave", "mouseover", "mouseout", "mouseup", "click"];
	    var EXCLUDE_BUST_CLICK_SELECTOR = "label, input, [data-rel=external]";

	    var MouseEventNormalizer = {
	        setupMouseMute: function() {
	            var idx = 0,
	                length = MOUSE_EVENTS.length,
	                element = document.documentElement;

	            if (MouseEventNormalizer.mouseTrap || !support.eventCapture) {
	                return;
	            }

	            MouseEventNormalizer.mouseTrap = true;

	            MouseEventNormalizer.bustClick = false;
	            MouseEventNormalizer.captureMouse = false;

	            var handler = function(e) {
	                if (MouseEventNormalizer.captureMouse) {
	                    if (e.type === "click") {
	                        if (MouseEventNormalizer.bustClick && !$(e.target).is(EXCLUDE_BUST_CLICK_SELECTOR)) {
	                            e.preventDefault();
	                            e.stopPropagation();
	                        }
	                    } else {
	                        e.stopPropagation();
	                    }
	                }
	            };

	            for (; idx < length; idx++) {
	                element.addEventListener(MOUSE_EVENTS[idx], handler, true);
	            }
	        },

	        muteMouse: function(e) {
	            MouseEventNormalizer.captureMouse = true;
	            if (e.data.bustClick) {
	                MouseEventNormalizer.bustClick = true;
	            }
	            clearTimeout(MouseEventNormalizer.mouseTrapTimeoutID);
	        },

	        unMuteMouse: function() {
	            clearTimeout(MouseEventNormalizer.mouseTrapTimeoutID);
	            MouseEventNormalizer.mouseTrapTimeoutID = setTimeout(function() {
	                MouseEventNormalizer.captureMouse = false;
	                MouseEventNormalizer.bustClick = false;
	            }, 400);
	        }
	    };

	    var eventMap = {
	        down: "touchstart mousedown",
	        move: "mousemove touchmove",
	        up: "mouseup touchend touchcancel",
	        cancel: "mouseleave touchcancel"
	    };

	    if (support.touch && (support.mobileOS.ios || support.mobileOS.android)) {
	        eventMap = {
	            down: "touchstart",
	            move: "touchmove",
	            up: "touchend touchcancel",
	            cancel: "touchcancel"
	        };
	    } else if (support.pointers) {
	        eventMap = {
	            down: "pointerdown",
	            move: "pointermove",
	            up: "pointerup",
	            cancel: "pointercancel pointerleave"
	        };
	    } else if (support.msPointers) {
	        eventMap = {
	            down: "MSPointerDown",
	            move: "MSPointerMove",
	            up: "MSPointerUp",
	            cancel: "MSPointerCancel MSPointerLeave"
	        };
	    }

	    if (support.msPointers && !("onmspointerenter" in window)) { // IE10
	        // Create MSPointerEnter/MSPointerLeave events using mouseover/out and event-time checks
	        $.each({
	            MSPointerEnter: "MSPointerOver",
	            MSPointerLeave: "MSPointerOut"
	        }, function( orig, fix ) {
	            $.event.special[ orig ] = {
	                delegateType: fix,
	                bindType: fix,

	                handle: function( event ) {
	                    var ret,
	                        target = this,
	                        related = event.relatedTarget,
	                        handleObj = event.handleObj;

	                    // For mousenter/leave call the handler if related is outside the target.
	                    // NB: No relatedTarget if the mouse left/entered the browser window
	                    if ( !related || (related !== target && !$.contains( target, related )) ) {
	                        event.type = handleObj.origType;
	                        ret = handleObj.handler.apply( this, arguments );
	                        event.type = fix;
	                    }
	                    return ret;
	                }
	            };
	        });
	    }


	    var getEventMap = function(e) { return (eventMap[e] || e); },
	        eventRegEx = /([^ ]+)/g;

	    kendo.applyEventMap = function(events, ns) {
	        events = events.replace(eventRegEx, getEventMap);

	        if (ns) {
	            events = events.replace(eventRegEx, "$1." + ns);
	        }

	        return events;
	    };

	    var on = $.fn.on;

	    function kendoJQuery(selector, context) {
	        return new kendoJQuery.fn.init(selector, context);
	    }

	    extend(true, kendoJQuery, $);

	    kendoJQuery.fn = kendoJQuery.prototype = new $();

	    kendoJQuery.fn.constructor = kendoJQuery;

	    kendoJQuery.fn.init = function(selector, context) {
	        if (context && context instanceof $ && !(context instanceof kendoJQuery)) {
	            context = kendoJQuery(context);
	        }

	        return $.fn.init.call(this, selector, context, rootjQuery);
	    };

	    kendoJQuery.fn.init.prototype = kendoJQuery.fn;

	    var rootjQuery = kendoJQuery(document);

	    extend(kendoJQuery.fn, {
	        handler: function(handler) {
	            this.data("handler", handler);
	            return this;
	        },

	        autoApplyNS: function(ns) {
	            this.data("kendoNS", ns || kendo.guid());
	            return this;
	        },

	        on: function() {
	            var that = this,
	                ns = that.data("kendoNS");

	            // support for event map signature
	            if (arguments.length === 1) {
	                return on.call(that, arguments[0]);
	            }

	            var context = that,
	                args = slice.call(arguments);

	            if (typeof args[args.length -1] === UNDEFINED) {
	                args.pop();
	            }

	            var callback =  args[args.length - 1],
	                events = kendo.applyEventMap(args[0], ns);

	            // setup mouse trap
	            if (support.mouseAndTouchPresent && events.search(/mouse|click/) > -1 && this[0] !== document.documentElement) {
	                MouseEventNormalizer.setupMouseMute();

	                var selector = args.length === 2 ? null : args[1],
	                    bustClick = events.indexOf("click") > -1 && events.indexOf("touchend") > -1;

	                on.call(this,
	                    {
	                        touchstart: MouseEventNormalizer.muteMouse,
	                        touchend: MouseEventNormalizer.unMuteMouse
	                    },
	                    selector,
	                    {
	                        bustClick: bustClick
	                    });
	            }

	            if (typeof callback === STRING) {
	                context = that.data("handler");
	                callback = context[callback];

	                args[args.length - 1] = function(e) {
	                    callback.call(context, e);
	                };
	            }

	            args[0] = events;

	            on.apply(that, args);

	            return that;
	        },

	        kendoDestroy: function(ns) {
	            ns = ns || this.data("kendoNS");

	            if (ns) {
	                this.off("." + ns);
	            }

	            return this;
	        }
	    });

	    kendo.jQuery = kendoJQuery;
	    kendo.eventMap = eventMap;

	    kendo.timezone = (function(){
	        var months =  { Jan: 0, Feb: 1, Mar: 2, Apr: 3, May: 4, Jun: 5, Jul: 6, Aug: 7, Sep: 8, Oct: 9, Nov: 10, Dec: 11 };
	        var days = { Sun: 0, Mon: 1, Tue: 2, Wed: 3, Thu: 4, Fri: 5, Sat: 6 };

	        function ruleToDate(year, rule) {
	            var date;
	            var targetDay;
	            var ourDay;
	            var month = rule[3];
	            var on = rule[4];
	            var time = rule[5];
	            var cache = rule[8];

	            if (!cache) {
	                rule[8] = cache = {};
	            }

	            if (cache[year]) {
	                return cache[year];
	            }

	            if (!isNaN(on)) {
	                date = new Date(Date.UTC(year, months[month], on, time[0], time[1], time[2], 0));
	            } else if (on.indexOf("last") === 0) {
	                date = new Date(Date.UTC(year, months[month] + 1, 1, time[0] - 24, time[1], time[2], 0));

	                targetDay = days[on.substr(4, 3)];
	                ourDay = date.getUTCDay();

	                date.setUTCDate(date.getUTCDate() + targetDay - ourDay - (targetDay > ourDay ? 7 : 0));
	            } else if (on.indexOf(">=") >= 0) {
	                date = new Date(Date.UTC(year, months[month], on.substr(5), time[0], time[1], time[2], 0));

	                targetDay = days[on.substr(0, 3)];
	                ourDay = date.getUTCDay();

	                date.setUTCDate(date.getUTCDate() + targetDay - ourDay + (targetDay < ourDay ? 7 : 0));
	            }

	            return cache[year] = date;
	        }

	        function findRule(utcTime, rules, zone) {
	            rules = rules[zone];

	            if (!rules) {
	                var time = zone.split(":");
	                var offset = 0;

	                if (time.length > 1) {
	                    offset = time[0] * 60 + Number(time[1]);
	                }

	                return [-1000000, 'max', '-', 'Jan', 1, [0, 0, 0], offset, '-'];
	            }

	            var year = new Date(utcTime).getUTCFullYear();

	            rules = jQuery.grep(rules, function(rule) {
	                var from = rule[0];
	                var to = rule[1];

	                return from <= year && (to >= year || (from == year && to == "only") || to == "max");
	            });

	            rules.push(utcTime);

	            rules.sort(function(a, b) {
	                if (typeof a != "number") {
	                    a = Number(ruleToDate(year, a));
	                }

	                if (typeof b != "number") {
	                    b = Number(ruleToDate(year, b));
	                }

	                return a - b;
	            });

	            var rule = rules[jQuery.inArray(utcTime, rules) - 1] || rules[rules.length - 1];

	            return isNaN(rule) ? rule : null;
	        }

	        function findZone(utcTime, zones, timezone) {
	            var zoneRules = zones[timezone];

	            if (typeof zoneRules === "string") {
	                zoneRules = zones[zoneRules];
	            }

	            if (!zoneRules) {
	                throw new Error('Timezone "' + timezone + '" is either incorrect, or kendo.timezones.min.js is not included.');
	            }

	            for (var idx = zoneRules.length - 1; idx >= 0; idx--) {
	                var until = zoneRules[idx][3];

	                if (until && utcTime > until) {
	                    break;
	                }
	            }

	            var zone = zoneRules[idx + 1];

	            if (!zone) {
	                throw new Error('Timezone "' + timezone + '" not found on ' + utcTime + ".");
	            }

	            return zone;
	        }

	        function zoneAndRule(utcTime, zones, rules, timezone) {
	            if (typeof utcTime != NUMBER) {
	                utcTime = Date.UTC(utcTime.getFullYear(), utcTime.getMonth(),
	                    utcTime.getDate(), utcTime.getHours(), utcTime.getMinutes(),
	                    utcTime.getSeconds(), utcTime.getMilliseconds());
	            }

	            var zone = findZone(utcTime, zones, timezone);

	            return {
	                zone: zone,
	                rule: findRule(utcTime, rules, zone[1])
	            };
	        }

	        function offset(utcTime, timezone) {
	            if (timezone == "Etc/UTC" || timezone == "Etc/GMT") {
	                return 0;
	            }

	            var info = zoneAndRule(utcTime, this.zones, this.rules, timezone);
	            var zone = info.zone;
	            var rule = info.rule;

	            return kendo.parseFloat(rule? zone[0] - rule[6] : zone[0]);
	        }

	        function abbr(utcTime, timezone) {
	            var info = zoneAndRule(utcTime, this.zones, this.rules, timezone);
	            var zone = info.zone;
	            var rule = info.rule;

	            var base = zone[2];

	            if (base.indexOf("/") >= 0) {
	                return base.split("/")[rule && +rule[6] ? 1 : 0];
	            } else if (base.indexOf("%s") >= 0) {
	                return base.replace("%s", (!rule || rule[7] == "-") ? '' : rule[7]);
	            }

	            return base;
	        }

	        function convert(date, fromOffset, toOffset) {
	            if (typeof fromOffset == STRING) {
	                fromOffset = this.offset(date, fromOffset);
	            }

	            if (typeof toOffset == STRING) {
	                toOffset = this.offset(date, toOffset);
	            }

	            var fromLocalOffset = date.getTimezoneOffset();

	            date = new Date(date.getTime() + (fromOffset - toOffset) * 60000);

	            var toLocalOffset = date.getTimezoneOffset();

	            return new Date(date.getTime() + (toLocalOffset - fromLocalOffset) * 60000);
	        }

	        function apply(date, timezone) {
	           return this.convert(date, date.getTimezoneOffset(), timezone);
	        }

	        function remove(date, timezone) {
	           return this.convert(date, timezone, date.getTimezoneOffset());
	        }

	        function toLocalDate(time) {
	            return this.apply(new Date(time), "Etc/UTC");
	        }

	        return {
	           zones: {},
	           rules: {},
	           offset: offset,
	           convert: convert,
	           apply: apply,
	           remove: remove,
	           abbr: abbr,
	           toLocalDate: toLocalDate
	        };
	    })();

	    kendo.date = (function(){
	        var MS_PER_MINUTE = 60000,
	            MS_PER_DAY = 86400000;

	        function adjustDST(date, hours) {
	            if (hours === 0 && date.getHours() === 23) {
	                date.setHours(date.getHours() + 2);
	                return true;
	            }

	            return false;
	        }

	        function setDayOfWeek(date, day, dir) {
	            var hours = date.getHours();

	            dir = dir || 1;
	            day = ((day - date.getDay()) + (7 * dir)) % 7;

	            date.setDate(date.getDate() + day);
	            adjustDST(date, hours);
	        }

	        function dayOfWeek(date, day, dir) {
	            date = new Date(date);
	            setDayOfWeek(date, day, dir);
	            return date;
	        }

	        function firstDayOfMonth(date) {
	            return new Date(
	                date.getFullYear(),
	                date.getMonth(),
	                1
	            );
	        }

	        function lastDayOfMonth(date) {
	            var last = new Date(date.getFullYear(), date.getMonth() + 1, 0),
	                first = firstDayOfMonth(date),
	                timeOffset = Math.abs(last.getTimezoneOffset() - first.getTimezoneOffset());

	            if (timeOffset) {
	                last.setHours(first.getHours() + (timeOffset / 60));
	            }

	            return last;
	        }

	        function moveDateToWeekStart(date, weekStartDay) {
	            if (weekStartDay !== 1) {
	                return addDays(dayOfWeek(date, weekStartDay, -1), 4);
	            }

	            return addDays(date, (4 - (date.getDay() || 7)));
	        }

	        function calcWeekInYear(date, weekStartDay) {
	            var firstWeekInYear = new Date(date.getFullYear(), 0, 1, -6);

	            var newDate = moveDateToWeekStart(date, weekStartDay);

	            var diffInMS = newDate.getTime() - firstWeekInYear.getTime();

	            var days = Math.floor(diffInMS / MS_PER_DAY);

	            return 1 + Math.floor(days / 7);
	        }

	        function weekInYear(date, weekStartDay){   
	            var prevWeekDate = addDays(date, -7);
	            var nextWeekDate = addDays(date, 7);

	            var weekNumber = calcWeekInYear(date, weekStartDay);

	            if (weekNumber === 0) {
	                return calcWeekInYear(prevWeekDate, weekStartDay) + 1;
	            }

	            if (weekNumber === 53 && calcWeekInYear(nextWeekDate, weekStartDay) > 1) {
	                return 1;
	            }

	            return weekNumber;
	        }

	        function getDate(date) {
	            date = new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0);
	            adjustDST(date, 0);
	            return date;
	        }

	        function toUtcTime(date) {
	            return Date.UTC(date.getFullYear(), date.getMonth(),
	                        date.getDate(), date.getHours(), date.getMinutes(),
	                        date.getSeconds(), date.getMilliseconds());
	        }

	        function getMilliseconds(date) {
	            return date.getTime() - getDate(date);
	        }

	        function isInTimeRange(value, min, max) {
	            var msMin = getMilliseconds(min),
	                msMax = getMilliseconds(max),
	                msValue;

	            if (!value || msMin == msMax) {
	                return true;
	            }

	            if (min >= max) {
	                max += MS_PER_DAY;
	            }

	            msValue = getMilliseconds(value);

	            if (msMin > msValue) {
	                msValue += MS_PER_DAY;
	            }

	            if (msMax < msMin) {
	                msMax += MS_PER_DAY;
	            }

	            return msValue >= msMin && msValue <= msMax;
	        }

	        function isInDateRange(value, min, max) {
	            var msMin = min.getTime(),
	                msMax = max.getTime(),
	                msValue;

	            if (msMin >= msMax) {
	                msMax += MS_PER_DAY;
	            }

	            msValue = value.getTime();

	            return msValue >= msMin && msValue <= msMax;
	        }

	        function addDays(date, offset) {
	            var hours = date.getHours();
	                date = new Date(date);

	            setTime(date, offset * MS_PER_DAY);
	            adjustDST(date, hours);
	            return date;
	        }

	        function setTime(date, milliseconds, ignoreDST) {
	            var offset = date.getTimezoneOffset();
	            var difference;

	            date.setTime(date.getTime() + milliseconds);

	            if (!ignoreDST) {
	                difference = date.getTimezoneOffset() - offset;
	                date.setTime(date.getTime() + difference * MS_PER_MINUTE);
	            }
	        }

	        function setHours(date, time) {
	            date = new Date(kendo.date.getDate(date).getTime() + kendo.date.getMilliseconds(time));
	            adjustDST(date, time.getHours());
	            return date;
	        }

	        function today() {
	            return getDate(new Date());
	        }

	        function isToday(date) {
	           return getDate(date).getTime() == today().getTime();
	        }

	        function toInvariantTime(date) {
	            var staticDate = new Date(1980, 1, 1, 0, 0, 0);

	            if (date) {
	                staticDate.setHours(date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());
	            }

	            return staticDate;
	        }

	        return {
	            adjustDST: adjustDST,
	            dayOfWeek: dayOfWeek,
	            setDayOfWeek: setDayOfWeek,
	            getDate: getDate,
	            isInDateRange: isInDateRange,
	            isInTimeRange: isInTimeRange,
	            isToday: isToday,
	            nextDay: function(date) {
	                return addDays(date, 1);
	            },
	            previousDay: function(date) {
	                return addDays(date, -1);
	            },
	            toUtcTime: toUtcTime,
	            MS_PER_DAY: MS_PER_DAY,
	            MS_PER_HOUR: 60 * MS_PER_MINUTE,
	            MS_PER_MINUTE: MS_PER_MINUTE,
	            setTime: setTime,
	            setHours: setHours,
	            addDays: addDays,
	            today: today,
	            toInvariantTime: toInvariantTime,
	            firstDayOfMonth: firstDayOfMonth,
	            lastDayOfMonth: lastDayOfMonth,
	            weekInYear: weekInYear,
	            getMilliseconds: getMilliseconds
	        };
	    })();


	    kendo.stripWhitespace = function(element) {
	        if (document.createNodeIterator) {
	            var iterator = document.createNodeIterator(element, NodeFilter.SHOW_TEXT, function(node) {
	                    return node.parentNode == element ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_REJECT;
	                }, false);

	            while (iterator.nextNode()) {
	                if (iterator.referenceNode && !iterator.referenceNode.textContent.trim()) {
	                    iterator.referenceNode.parentNode.removeChild(iterator.referenceNode);
	                }
	            }
	        } else { // IE7/8 support
	            for (var i = 0; i < element.childNodes.length; i++) {
	                var child = element.childNodes[i];

	                if (child.nodeType == 3 && !/\S/.test(child.nodeValue)) {
	                    element.removeChild(child);
	                    i--;
	                }

	                if (child.nodeType == 1) {
	                    kendo.stripWhitespace(child);
	                }
	            }
	        }
	    };

	    var animationFrame  = window.requestAnimationFrame       ||
	                          window.webkitRequestAnimationFrame ||
	                          window.mozRequestAnimationFrame    ||
	                          window.oRequestAnimationFrame      ||
	                          window.msRequestAnimationFrame     ||
	                          function(callback){ setTimeout(callback, 1000 / 60); };

	    kendo.animationFrame = function(callback) {
	        animationFrame.call(window, callback);
	    };

	    var animationQueue = [];

	    kendo.queueAnimation = function(callback) {
	        animationQueue[animationQueue.length] = callback;
	        if (animationQueue.length === 1) {
	            kendo.runNextAnimation();
	        }
	    };

	    kendo.runNextAnimation = function() {
	        kendo.animationFrame(function() {
	            if (animationQueue[0]) {
	                animationQueue.shift()();
	                if (animationQueue[0]) {
	                    kendo.runNextAnimation();
	                }
	            }
	        });
	    };

	    kendo.parseQueryStringParams = function(url) {
	        var queryString = url.split('?')[1] || "",
	            params = {},
	            paramParts = queryString.split(/&|=/),
	            length = paramParts.length,
	            idx = 0;

	        for (; idx < length; idx += 2) {
	            if(paramParts[idx] !== "") {
	                params[decodeURIComponent(paramParts[idx])] = decodeURIComponent(paramParts[idx + 1]);
	            }
	        }

	        return params;
	    };

	    kendo.elementUnderCursor = function(e) {
	        if (typeof e.x.client != "undefined") {
	            return document.elementFromPoint(e.x.client, e.y.client);
	        }
	    };

	    kendo.wheelDeltaY = function(jQueryEvent) {
	        var e = jQueryEvent.originalEvent,
	            deltaY = e.wheelDeltaY,
	            delta;

	            if (e.wheelDelta) { // Webkit and IE
	                if (deltaY === undefined || deltaY) { // IE does not have deltaY, thus always scroll (horizontal scrolling is treated as vertical)
	                    delta = e.wheelDelta;
	                }
	            } else if (e.detail && e.axis === e.VERTICAL_AXIS) { // Firefox and Opera
	                delta = (-e.detail) * 10;
	            }

	        return delta;
	    };

	    kendo.throttle = function(fn, delay) {
	        var timeout;
	        var lastExecTime = 0;

	        if (!delay || delay <= 0) {
	            return fn;
	        }

	        var throttled = function() {
	            var that = this;
	            var elapsed = +new Date() - lastExecTime;
	            var args = arguments;

	            function exec() {
	                fn.apply(that, args);
	                lastExecTime = +new Date();
	            }

	            // first execution
	            if (!lastExecTime) {
	                return exec();
	            }

	            if (timeout) {
	                clearTimeout(timeout);
	            }

	            if (elapsed > delay) {
	                exec();
	            } else {
	                timeout = setTimeout(exec, delay - elapsed);
	            }
	        };

	        throttled.cancel = function() {
	            clearTimeout(timeout);
	        };

	        return throttled;
	    };


	    kendo.caret = function (element, start, end) {
	        var rangeElement;
	        var isPosition = start !== undefined;

	        if (end === undefined) {
	            end = start;
	        }

	        if (element[0]) {
	            element = element[0];
	        }

	        if (isPosition && element.disabled) {
	            return;
	        }

	        try {
	            if (element.selectionStart !== undefined) {
	                if (isPosition) {
	                    element.focus();
	                    var mobile = support.mobileOS;
	                    if(mobile.wp || mobile.android) {// without the timeout the caret is at the end of the input
	                        setTimeout(function() { element.setSelectionRange(start, end); }, 0);
	                    }
	                    else {
	                        element.setSelectionRange(start, end);
	                    }
	                } else {
	                    start = [element.selectionStart, element.selectionEnd];
	                }
	            } else if (document.selection) {
	                if ($(element).is(":visible")) {
	                    element.focus();
	                }

	                rangeElement = element.createTextRange();

	                if (isPosition) {
	                    rangeElement.collapse(true);
	                    rangeElement.moveStart("character", start);
	                    rangeElement.moveEnd("character", end - start);
	                    rangeElement.select();
	                } else {
	                    var rangeDuplicated = rangeElement.duplicate(),
	                        selectionStart, selectionEnd;

	                        rangeElement.moveToBookmark(document.selection.createRange().getBookmark());
	                        rangeDuplicated.setEndPoint('EndToStart', rangeElement);
	                        selectionStart = rangeDuplicated.text.length;
	                        selectionEnd = selectionStart + rangeElement.text.length;

	                    start = [selectionStart, selectionEnd];
	                }
	            }
	        } catch(e) {
	            /* element is not focused or it is not in the DOM */
	            start = [];
	        }

	        return start;
	    };

	    kendo.compileMobileDirective = function(element, scope) {
	        var angular = window.angular;

	        element.attr("data-" + kendo.ns + "role", element[0].tagName.toLowerCase().replace('kendo-mobile-', '').replace('-', ''));

	        angular.element(element).injector().invoke(["$compile", function($compile) {
	            $compile(element)(scope);

	            if (!/^\$(digest|apply)$/.test(scope.$$phase)) {
	                scope.$digest();
	            }
	        }]);

	        return kendo.widgetInstance(element, kendo.mobile.ui);
	    };

	    kendo.antiForgeryTokens = function() {
	        var tokens = { },
	            csrf_token = $("meta[name=csrf-token],meta[name=_csrf]").attr("content"),
	            csrf_param = $("meta[name=csrf-param],meta[name=_csrf_header]").attr("content");

	        $("input[name^='__RequestVerificationToken']").each(function() {
	            tokens[this.name] = this.value;
	        });

	        if (csrf_param !== undefined && csrf_token !== undefined) {
	          tokens[csrf_param] = csrf_token;
	        }

	        return tokens;
	    };

	    kendo.cycleForm = function(form) {
	        var firstElement = form.find("input, .k-widget").first();
	        var lastElement = form.find("button, .k-button").last();

	        function focus(el) {
	            var widget = kendo.widgetInstance(el);

	            if (widget && widget.focus) {
	              widget.focus();
	            } else {
	              el.focus();
	            }
	        }

	        lastElement.on("keydown", function(e) {
	          if (e.keyCode == kendo.keys.TAB && !e.shiftKey) {
	            e.preventDefault();
	            focus(firstElement);
	          }
	        });

	        firstElement.on("keydown", function(e) {
	          if (e.keyCode == kendo.keys.TAB && e.shiftKey) {
	            e.preventDefault();
	            focus(lastElement);
	          }
	        });
	    };

	    // kendo.saveAs -----------------------------------------------
	    (function() {
	        function postToProxy(dataURI, fileName, proxyURL, proxyTarget) {
	            var form = $("<form>").attr({
	                action: proxyURL,
	                method: "POST",
	                target: proxyTarget
	            });

	            var data = kendo.antiForgeryTokens();
	            data.fileName = fileName;

	            var parts = dataURI.split(";base64,");
	            data.contentType = parts[0].replace("data:", "");
	            data.base64 = parts[1];

	            for (var name in data) {
	                if (data.hasOwnProperty(name)) {
	                    $('<input>').attr({
	                        value: data[name],
	                        name: name,
	                        type: "hidden"
	                    }).appendTo(form);
	                }
	            }

	            form.appendTo("body").submit().remove();
	        }

	        var fileSaver = document.createElement("a");
	        var downloadAttribute = "download" in fileSaver && !kendo.support.browser.edge;

	        function saveAsBlob(dataURI, fileName) {
	            var blob = dataURI; // could be a Blob object

	            if (typeof dataURI == "string") {
	                var parts = dataURI.split(";base64,");
	                var contentType = parts[0];
	                var base64 = atob(parts[1]);
	                var array = new Uint8Array(base64.length);

	                for (var idx = 0; idx < base64.length; idx++) {
	                    array[idx] = base64.charCodeAt(idx);
	                }
	                blob = new Blob([array.buffer], { type: contentType });
	            }

	            navigator.msSaveBlob(blob, fileName);
	        }

	        function saveAsDataURI(dataURI, fileName) {
	            if (window.Blob && dataURI instanceof Blob) {
	                dataURI = URL.createObjectURL(dataURI);
	            }

	            fileSaver.download = fileName;
	            fileSaver.href = dataURI;

	            var e = document.createEvent("MouseEvents");
	            e.initMouseEvent("click", true, false, window,
	                0, 0, 0, 0, 0, false, false, false, false, 0, null);

	            fileSaver.dispatchEvent(e);
	            setTimeout(function(){
	                URL.revokeObjectURL(dataURI);
	            });
	        }

	        kendo.saveAs = function(options) {
	            var save = postToProxy;

	            if (!options.forceProxy) {
	                if (downloadAttribute) {
	                    save = saveAsDataURI;
	                } else if (navigator.msSaveBlob) {
	                    save = saveAsBlob;
	                }
	            }

	            save(options.dataURI, options.fileName, options.proxyURL, options.proxyTarget);
	        };
	    })();

	    // kendo proxySetters
	    kendo.proxyModelSetters = function proxyModelSetters(data) {
	        var observable = {};

	        Object.keys(data || {}).forEach(function(property) {
	          Object.defineProperty(observable, property, {
	            get: function() {
	              return data[property];
	            },
	            set: function(value) {
	              data[property] = value;
	              data.dirty = true;
	            }
	          });
	        });

	        return observable;
	    };

	})(jQuery, window);

	return window.kendo;

	}, __webpack_require__(422));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(420)))

/***/ })

/******/ });

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(500);


/***/ }),

/***/ 421:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(0);

/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 500:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(421) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "popup",
	    name: "Pop-up",
	    category: "framework",
	    depends: [ "core" ],
	    advanced: true
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        ui = kendo.ui,
	        Widget = ui.Widget,
	        Class = kendo.Class,
	        support = kendo.support,
	        getOffset = kendo.getOffset,
	        outerWidth = kendo._outerWidth,
	        outerHeight = kendo._outerHeight,
	        OPEN = "open",
	        CLOSE = "close",
	        DEACTIVATE = "deactivate",
	        ACTIVATE = "activate",
	        CENTER = "center",
	        LEFT = "left",
	        RIGHT = "right",
	        TOP = "top",
	        BOTTOM = "bottom",
	        ABSOLUTE = "absolute",
	        HIDDEN = "hidden",
	        BODY = "body",
	        LOCATION = "location",
	        POSITION = "position",
	        VISIBLE = "visible",
	        EFFECTS = "effects",
	        ACTIVE = "k-state-active",
	        ACTIVEBORDER = "k-state-border",
	        ACTIVEBORDERREGEXP = /k-state-border-(\w+)/,
	        ACTIVECHILDREN = ".k-picker-wrap, .k-dropdown-wrap, .k-link",
	        MOUSEDOWN = "down",
	        DOCUMENT_ELEMENT = $(document.documentElement),
	        proxy = $.proxy,
	        WINDOW = $(window),
	        SCROLL = "scroll",
	        cssPrefix = support.transitions.css,
	        TRANSFORM = cssPrefix + "transform",
	        extend = $.extend,
	        NS = ".kendoPopup",
	        styles = ["font-size",
	                  "font-family",
	                  "font-stretch",
	                  "font-style",
	                  "font-weight",
	                  "line-height"];

	    function contains(container, target) {
	        if (!container || !target) {
	            return false;
	        }
	        return container === target || $.contains(container, target);
	    }

	    var Popup = Widget.extend({
	        init: function(element, options) {
	            var that = this, parentPopup;

	            options = options || {};

	            if (options.isRtl) {
	                options.origin = options.origin || BOTTOM + " " + RIGHT;
	                options.position = options.position || TOP + " " + RIGHT;
	            }

	            Widget.fn.init.call(that, element, options);

	            element = that.element;
	            options = that.options;

	            that.collisions = options.collision ? options.collision.split(" ") : [];
	            that.downEvent = kendo.applyEventMap(MOUSEDOWN, kendo.guid());

	            if (that.collisions.length === 1) {
	                that.collisions.push(that.collisions[0]);
	            }

	            parentPopup = $(that.options.anchor).closest(".k-popup,.k-group").filter(":not([class^=km-])"); // When popup is in another popup, make it relative.

	            options.appendTo = $($(options.appendTo)[0] || parentPopup[0] || document.body);

	            that.element.hide()
	                .addClass("k-popup k-group k-reset")
	                .toggleClass("k-rtl", !!options.isRtl)
	                .css({ position : ABSOLUTE })
	                .appendTo(options.appendTo)
	                .on("mouseenter" + NS, function() {
	                    that._hovered = true;
	                })
	                .on("mouseleave" + NS, function() {
	                    that._hovered = false;
	                });

	            that.wrapper = $();

	            if (options.animation === false) {
	                options.animation = { open: { effects: {} }, close: { hide: true, effects: {} } };
	            }

	            extend(options.animation.open, {
	                complete: function() {
	                    that.wrapper.css({ overflow: VISIBLE }); // Forcing refresh causes flickering in mobile.
	                    that._activated = true;
	                    that._trigger(ACTIVATE);
	                }
	            });

	            extend(options.animation.close, {
	                complete: function() {
	                    that._animationClose();
	                }
	            });

	            that._mousedownProxy = function(e) {
	                that._mousedown(e);
	            };

	            if (support.mobileOS.android) {
	                that._resizeProxy = function(e) {
	                    setTimeout(function() {
	                        that._resize(e);
	                    }, 600); //Logic from kendo.onResize
	                };
	            } else {
	                that._resizeProxy = function(e) {
	                    that._resize(e);
	                };
	            }

	            if (options.toggleTarget) {
	                $(options.toggleTarget).on(options.toggleEvent + NS, $.proxy(that.toggle, that));
	            }
	        },

	        events: [
	            OPEN,
	            ACTIVATE,
	            CLOSE,
	            DEACTIVATE
	        ],

	        options: {
	            name: "Popup",
	            toggleEvent: "click",
	            origin: BOTTOM + " " + LEFT,
	            position: TOP + " " + LEFT,
	            anchor: BODY,
	            appendTo: null,
	            collision: "flip fit",
	            viewport: window,
	            copyAnchorStyles: true,
	            autosize: false,
	            modal: false,
	            adjustSize: {
	                width: 0,
	                height: 0
	            },
	            animation: {
	                open: {
	                    effects: "slideIn:down",
	                    transition: true,
	                    duration: 200
	                },
	                close: { // if close animation effects are defined, they will be used instead of open.reverse
	                    duration: 100,
	                    hide: true
	                }
	            }
	        },

	        _animationClose: function() {
	            var that = this;
	            var location = that.wrapper.data(LOCATION);

	            that.wrapper.hide();

	            if (location) {
	                that.wrapper.css(location);
	            }

	            if (that.options.anchor != BODY) {
	                that._hideDirClass();
	            }

	            that._closing = false;
	            that._trigger(DEACTIVATE);
	        },

	        destroy: function() {
	            var that = this,
	                options = that.options,
	                element = that.element.off(NS),
	                parent;

	            Widget.fn.destroy.call(that);

	            if (options.toggleTarget) {
	                $(options.toggleTarget).off(NS);
	            }

	            if (!options.modal) {
	                DOCUMENT_ELEMENT.unbind(that.downEvent, that._mousedownProxy);
	                that._toggleResize(false);
	            }

	            kendo.destroy(that.element.children());
	            element.removeData();

	            if (options.appendTo[0] === document.body) {
	                parent = element.parent(".k-animation-container");

	                if (parent[0]) {
	                    parent.remove();
	                } else {
	                    element.remove();
	                }
	            }
	        },

	        open: function(x, y) {
	            var that = this,
	                fixed = { isFixed: !isNaN(parseInt(y,10)), x: x, y: y },
	                element = that.element,
	                options = that.options,
	                animation, wrapper,
	                anchor = $(options.anchor),
	                mobile = element[0] && element.hasClass("km-widget");

	            if (!that.visible()) {
	                if (options.copyAnchorStyles) {
	                    if (mobile && styles[0] == "font-size") {
	                        styles.shift();
	                    }
	                    element.css(kendo.getComputedStyles(anchor[0], styles));
	                }

	                if (element.data("animating") || that._trigger(OPEN)) {
	                    return;
	                }

	                that._activated = false;

	                if (!options.modal) {
	                    DOCUMENT_ELEMENT.unbind(that.downEvent, that._mousedownProxy)
	                                .bind(that.downEvent, that._mousedownProxy);

	                    // this binding hangs iOS in editor
	                    // all elements in IE7/8 fire resize event, causing mayhem
	                    that._toggleResize(false);
	                    that._toggleResize(true);
	                }

	                that.wrapper = wrapper = kendo.wrap(element, options.autosize)
	                                        .css({
	                                            overflow: HIDDEN,
	                                            display: "block",
	                                            position: ABSOLUTE
	                                        });

	                if (support.mobileOS.android) {
	                    wrapper.css(TRANSFORM, "translatez(0)"); // Android is VERY slow otherwise. Should be tested in other droids as well since it may cause blur.
	                }

	                wrapper.css(POSITION);

	                if ($(options.appendTo)[0] == document.body) {
	                    wrapper.css(TOP, "-10000px");
	                }

	                that.flipped = that._position(fixed);
	                animation = that._openAnimation();

	                if (options.anchor != BODY) {
	                    that._showDirClass(animation);
	                }

	                element.data(EFFECTS, animation.effects)
	                       .kendoStop(true)
	                       .kendoAnimate(animation);
	            }
	        },

	        _location: function(isFixed) {
	            var that = this,
	                element = that.element,
	                options = that.options,
	                wrapper,
	                anchor = $(options.anchor),
	                mobile = element[0] && element.hasClass("km-widget");

	            if (options.copyAnchorStyles) {
	                if (mobile && styles[0] == "font-size") {
	                    styles.shift();
	                }
	                element.css(kendo.getComputedStyles(anchor[0], styles));
	            }

	            that.wrapper = wrapper = kendo.wrap(element, options.autosize)
	                                    .css({
	                                        overflow: HIDDEN,
	                                        display: "block",
	                                        position: ABSOLUTE
	                                    });

	            if (support.mobileOS.android) {
	                wrapper.css(TRANSFORM, "translatez(0)"); // Android is VERY slow otherwise. Should be tested in other droids as well since it may cause blur.
	            }

	            wrapper.css(POSITION);

	            if ($(options.appendTo)[0] == document.body) {
	                wrapper.css(TOP, "-10000px");
	            }

	            that._position(isFixed || {});

	            var offset = wrapper.offset();
	            return {
	                width: kendo._outerWidth(wrapper),
	                height: kendo._outerHeight(wrapper),
	                left: offset.left,
	                top: offset.top
	            };
	        },

	        _openAnimation: function() {
	            var animation = extend(true, {}, this.options.animation.open);
	            animation.effects = kendo.parseEffects(animation.effects, this.flipped);

	            return animation;
	        },

	        _hideDirClass: function() {
	            var anchor = $(this.options.anchor);
	            var direction = ((anchor.attr("class") || "").match(ACTIVEBORDERREGEXP) || ["", "down"])[1];
	            var dirClass = ACTIVEBORDER + "-" + direction;

	            anchor
	                .removeClass(dirClass)
	                .children(ACTIVECHILDREN)
	                .removeClass(ACTIVE)
	                .removeClass(dirClass);

	            this.element.removeClass(ACTIVEBORDER + "-" + kendo.directions[direction].reverse);
	        },

	        _showDirClass: function(animation) {
	            var direction = animation.effects.slideIn ? animation.effects.slideIn.direction : "down";
	            var dirClass = ACTIVEBORDER + "-" + direction;

	            $(this.options.anchor)
	                .addClass(dirClass)
	                .children(ACTIVECHILDREN)
	                .addClass(ACTIVE)
	                .addClass(dirClass);

	            this.element.addClass(ACTIVEBORDER + "-" + kendo.directions[direction].reverse);
	        },

	        position: function() {
	            if (this.visible()) {
	                this.flipped = this._position();
	                //this._hideDirClass();
	                //this._showDirClass(this._openAnimation());
	            }
	        },

	        toggle: function() {
	            var that = this;

	            that[that.visible() ? CLOSE : OPEN]();
	        },

	        visible: function() {
	            return this.element.is(":" + VISIBLE);
	        },

	        close: function(skipEffects) {
	            var that = this,
	                options = that.options, wrap,
	                animation, openEffects, closeEffects;

	            if (that.visible()) {
	                wrap = (that.wrapper[0] ? that.wrapper : kendo.wrap(that.element).hide());

	                that._toggleResize(false);

	                if (that._closing || that._trigger(CLOSE)) {
	                    that._toggleResize(true);
	                    return;
	                }

	                // Close all inclusive popups.
	                that.element.find(".k-popup").each(function () {
	                    var that = $(this),
	                        popup = that.data("kendoPopup");

	                    if (popup) {
	                        popup.close(skipEffects);
	                    }
	                });

	                DOCUMENT_ELEMENT.unbind(that.downEvent, that._mousedownProxy);

	                if (skipEffects) {
	                    animation = { hide: true, effects: {} };
	                } else {
	                    animation = extend(true, {}, options.animation.close);
	                    openEffects = that.element.data(EFFECTS);
	                    closeEffects = animation.effects;

	                    if (!closeEffects && !kendo.size(closeEffects) && openEffects && kendo.size(openEffects)) {
	                        animation.effects = openEffects;
	                        animation.reverse = true;
	                    }

	                    that._closing = true;
	                }

	                that.element.kendoStop(true);
	                wrap.css({ overflow: HIDDEN }); // stop callback will remove hidden overflow
	                that.element.kendoAnimate(animation);

	                if (skipEffects) {
	                    that._animationClose();
	                }
	            }
	        },

	        _trigger: function(ev) {
	            return this.trigger(ev, { type: ev });
	        },

	        _resize: function(e) {
	            var that = this;

	            if (support.resize.indexOf(e.type) !== -1) {
	                clearTimeout(that._resizeTimeout);
	                that._resizeTimeout = setTimeout(function() {
	                    that._position();
	                    that._resizeTimeout = null;
	                }, 50);
	            } else {
	                if (!that._hovered || (that._activated && that.element.hasClass("k-list-container"))) {
	                    that.close();
	                }
	            }
	        },

	        _toggleResize: function(toggle) {
	            var method = toggle ? "on" : "off";
	            var eventNames = support.resize;

	            if (!(support.mobileOS.ios || support.mobileOS.android)) {
	                eventNames += " " + SCROLL;
	            }

	            this._scrollableParents()[method](SCROLL, this._resizeProxy);
	            WINDOW[method](eventNames, this._resizeProxy);
	        },

	        _mousedown: function(e) {
	            var that = this,
	                container = that.element[0],
	                options = that.options,
	                anchor = $(options.anchor)[0],
	                toggleTarget = options.toggleTarget,
	                target = kendo.eventTarget(e),
	                popup = $(target).closest(".k-popup"),
	                mobile = popup.parent().parent(".km-shim").length;

	            popup = popup[0];
	            if (!mobile && popup && popup !== that.element[0]){
	                return;
	            }

	            // This MAY result in popup not closing in certain cases.
	            if ($(e.target).closest("a").data("rel") === "popover") {
	                return;
	            }

	            if (!contains(container, target) && !contains(anchor, target) && !(toggleTarget && contains($(toggleTarget)[0], target))) {
	                that.close();
	            }
	        },

	        _fit: function(position, size, viewPortSize) {
	            var output = 0;

	            if (position + size > viewPortSize) {
	                output = viewPortSize - (position + size);
	            }

	            if (position < 0) {
	                output = -position;
	            }

	            return output;
	        },

	        _flip: function(offset, size, anchorSize, viewPortSize, origin, position, boxSize) {
	            var output = 0;
	                boxSize = boxSize || size;

	            if (position !== origin && position !== CENTER && origin !== CENTER) {
	                if (offset + boxSize > viewPortSize) {
	                    output += -(anchorSize + size);
	                }

	                if (offset + output < 0) {
	                    output += anchorSize + size;
	                }
	            }
	            return output;
	        },

	        _scrollableParents: function() {
	            return $(this.options.anchor)
	                       .parentsUntil("body")
	                       .filter(function(index, element) {
	                           return kendo.isScrollable(element);
	                       });
	        },

	        _position: function(fixed) {
	            var that = this,
	                //element = that.element.css(POSITION, ""), /* fixes telerik/kendo-ui-core#790, comes from telerik/kendo#615 */
	                element = that.element,
	                wrapper = that.wrapper,
	                options = that.options,
	                viewport = $(options.viewport),
	                zoomLevel = support.zoomLevel(),
	                isWindow = !!((viewport[0] == window) && window.innerWidth && (zoomLevel <= 1.02)),
	                anchor = $(options.anchor),
	                origins = options.origin.toLowerCase().split(" "),
	                positions = options.position.toLowerCase().split(" "),
	                collisions = that.collisions,
	                siblingContainer, parents,
	                parentZIndex, zIndex = 10002,
	                idx = 0,
	                docEl = document.documentElement,
	                length, viewportOffset, viewportWidth, viewportHeight;

	            if (options.viewport === window) {
	                viewportOffset = {
	                    top: (window.pageYOffset || document.documentElement.scrollTop || 0),
	                    left: (window.pageXOffset || document.documentElement.scrollLeft || 0)
	                };
	            } else {
	                viewportOffset = viewport.offset();
	            }

	            if (isWindow) {
	                viewportWidth = window.innerWidth;
	                viewportHeight = window.innerHeight;
	            } else {
	                viewportWidth = viewport.width();
	                viewportHeight = viewport.height();
	            }

	            if (isWindow && docEl.scrollHeight - docEl.clientHeight > 0) {
	                 var sign = options.isRtl ? -1 : 1;

	                 viewportWidth -= sign * kendo.support.scrollbar();
	            }

	            siblingContainer = anchor.parents().filter(wrapper.siblings());

	            if (siblingContainer[0]) {
	                parentZIndex = Math.max(Number(siblingContainer.css("zIndex")), 0);

	                // set z-index to be more than that of the container/sibling
	                // compensate with more units for window z-stack
	                if (parentZIndex) {
	                    zIndex = parentZIndex + 10;
	                } else {
	                    parents = anchor.parentsUntil(siblingContainer);
	                    for (length = parents.length; idx < length; idx++) {
	                        parentZIndex = Number($(parents[idx]).css("zIndex"));
	                        if (parentZIndex && zIndex < parentZIndex) {
	                            zIndex = parentZIndex + 10;
	                        }
	                    }
	                }
	            }

	            wrapper.css("zIndex", zIndex);

	            if (fixed && fixed.isFixed) {
	                wrapper.css({ left: fixed.x, top: fixed.y });
	            } else {
	                wrapper.css(that._align(origins, positions));
	            }

	            var pos = getOffset(wrapper, POSITION, anchor[0] === wrapper.offsetParent()[0]),
	                offset = getOffset(wrapper),
	                anchorParent = anchor.offsetParent().parent(".k-animation-container,.k-popup,.k-group"); // If the parent is positioned, get the current positions

	            if (anchorParent.length) {
	                pos = getOffset(wrapper, POSITION, true);
	                offset = getOffset(wrapper);
	            }

	            offset.top -= viewportOffset.top;
	            offset.left -= viewportOffset.left;

	            if (!that.wrapper.data(LOCATION)) { // Needed to reset the popup location after every closure - fixes the resize bugs.
	                wrapper.data(LOCATION, extend({}, pos));
	            }

	            var offsets = extend({}, offset),
	                location = extend({}, pos),
	                adjustSize = options.adjustSize;

	            if (collisions[0] === "fit") {
	                location.top += that._fit(offsets.top, outerHeight(wrapper) + adjustSize.height, viewportHeight / zoomLevel);
	            }

	            if (collisions[1] === "fit") {
	                location.left += that._fit(offsets.left, outerWidth(wrapper) + adjustSize.width, viewportWidth / zoomLevel);
	            }

	            var flipPos = extend({}, location);
	            var elementHeight = outerHeight(element);
	            var wrapperHeight =  outerHeight(wrapper);

	            if (!wrapper.height() && elementHeight) {
	                wrapperHeight = wrapperHeight + elementHeight;
	            }

	            if (collisions[0] === "flip") {
	                location.top += that._flip(offsets.top, elementHeight, outerHeight(anchor), viewportHeight / zoomLevel, origins[0], positions[0], wrapperHeight);
	            }

	            if (collisions[1] === "flip") {
	                location.left += that._flip(offsets.left, outerWidth(element), outerWidth(anchor), viewportWidth / zoomLevel, origins[1], positions[1], outerWidth(wrapper));
	            }

	            element.css(POSITION, ABSOLUTE);
	            wrapper.css(location);

	            return (location.left != flipPos.left || location.top != flipPos.top);
	        },

	        _align: function(origin, position) {
	            var that = this,
	                element = that.wrapper,
	                anchor = $(that.options.anchor),
	                verticalOrigin = origin[0],
	                horizontalOrigin = origin[1],
	                verticalPosition = position[0],
	                horizontalPosition = position[1],
	                anchorOffset = getOffset(anchor),
	                appendTo = $(that.options.appendTo),
	                appendToOffset,
	                width = outerWidth(element),
	                height = outerHeight(element),
	                anchorWidth = outerWidth(anchor),
	                anchorHeight = outerHeight(anchor),
	                top = anchorOffset.top,
	                left = anchorOffset.left,
	                round = Math.round;

	            if (appendTo[0] != document.body) {
	                appendToOffset = getOffset(appendTo);
	                top -= appendToOffset.top;
	                left -= appendToOffset.left;
	            }


	            if (verticalOrigin === BOTTOM) {
	                top += anchorHeight;
	            }

	            if (verticalOrigin === CENTER) {
	                top += round(anchorHeight / 2);
	            }

	            if (verticalPosition === BOTTOM) {
	                top -= height;
	            }

	            if (verticalPosition === CENTER) {
	                top -= round(height / 2);
	            }

	            if (horizontalOrigin === RIGHT) {
	                left += anchorWidth;
	            }

	            if (horizontalOrigin === CENTER) {
	                left += round(anchorWidth / 2);
	            }

	            if (horizontalPosition === RIGHT) {
	                left -= width;
	            }

	            if (horizontalPosition === CENTER) {
	                left -= round(width / 2);
	            }

	            return {
	                top: top,
	                left: left
	            };
	        }
	    });

	    ui.plugin(Popup);

	    var tabKeyTrapNS = "kendoTabKeyTrap";
	    var focusableNodesSelector = "a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, [tabindex], *[contenteditable]";
	    var TabKeyTrap = Class.extend({
	        init: function(element) {
	            this.element = $(element);
	            this.element.autoApplyNS(tabKeyTrapNS);
	        },

	        trap: function() {
	            this.element.on("keydown", proxy(this._keepInTrap, this));
	        },

	        removeTrap: function() {
	            this.element.kendoDestroy(tabKeyTrapNS);
	        },

	        destroy: function() {
	            this.element.kendoDestroy(tabKeyTrapNS);
	            this.element = undefined;
	        },

	        shouldTrap: function () {
	            return true;
	        },

	        _keepInTrap: function(e) {
	            if (e.which !== 9 || !this.shouldTrap()) {
	                return;
	            }
	            var target = e.target;
	            var elements = this.element.find(focusableNodesSelector).filter(':visible[tabindex!=-1]');
	            var focusableItems = elements.sort(function(prevEl,nextEl) {
	                return prevEl.tabIndex - nextEl.tabIndex;
	            });
	            var focusableItemsCount = focusableItems.length;
	            var lastIndex = focusableItemsCount - 1;
	            var focusedItemIndex = focusableItems.index(target);

	            if (e.shiftKey) {
	                if (focusedItemIndex === 0) {
	                    focusableItems.get(lastIndex).focus();
	                }
	                else {
	                    focusableItems.get(focusedItemIndex - 1).focus();
	                }
	            }
	            else {
	                if (focusedItemIndex === lastIndex) {
	                    focusableItems.get(0).focus();
	                }
	                else {
	                    focusableItems.get(focusedItemIndex + 1).focus();
	                }
	            }
	            e.preventDefault();
	        }
	    });
	    ui.Popup.TabKeyTrap = TabKeyTrap;
	})(window.kendo.jQuery);



	return window.kendo;

	}, __webpack_require__(422));


/***/ })

/******/ });

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var bind = __webpack_require__(22);
var isBuffer = __webpack_require__(67);

/*global toString:true*/

// utils is a library of generic helper functions non-specific to axios

var toString = Object.prototype.toString;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */
function isArray(val) {
  return toString.call(val) === '[object Array]';
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
function isArrayBuffer(val) {
  return toString.call(val) === '[object ArrayBuffer]';
}

/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */
function isFormData(val) {
  return (typeof FormData !== 'undefined') && (val instanceof FormData);
}

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  var result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */
function isString(val) {
  return typeof val === 'string';
}

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */
function isNumber(val) {
  return typeof val === 'number';
}

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */
function isUndefined(val) {
  return typeof val === 'undefined';
}

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */
function isObject(val) {
  return val !== null && typeof val === 'object';
}

/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */
function isDate(val) {
  return toString.call(val) === '[object Date]';
}

/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */
function isFile(val) {
  return toString.call(val) === '[object File]';
}

/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */
function isBlob(val) {
  return toString.call(val) === '[object Blob]';
}

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
function isFunction(val) {
  return toString.call(val) === '[object Function]';
}

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */
function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
function isURLSearchParams(val) {
  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
}

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */
function trim(str) {
  return str.replace(/^\s*/, '').replace(/\s*$/, '');
}

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 */
function isStandardBrowserEnv() {
  if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {
    return false;
  }
  return (
    typeof window !== 'undefined' &&
    typeof document !== 'undefined'
  );
}

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */
function forEach(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  // Force an array if not already something iterable
  if (typeof obj !== 'object' && !isArray(obj)) {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */) {
  var result = {};
  function assignValue(val, key) {
    if (typeof result[key] === 'object' && typeof val === 'object') {
      result[key] = merge(result[key], val);
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */
function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}

module.exports = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isObject: isObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach,
  merge: merge,
  extend: extend,
  trim: trim
};


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * jQuery JavaScript Library v2.1.4
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2015-04-28T16:01Z
 */

(function( global, factory ) {

	if ( typeof module === "object" && typeof module.exports === "object" ) {
		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Support: Firefox 18+
// Can't be in strict mode, several libs including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
//

var arr = [];

var slice = arr.slice;

var concat = arr.concat;

var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var support = {};



var
	// Use the correct document accordingly with window argument (sandbox)
	document = window.document,

	version = "2.1.4",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {
		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android<4.1
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	};

jQuery.fn = jQuery.prototype = {
	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// Start with an empty selector
	selector: "",

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num != null ?

			// Return just the one element from the set
			( num < 0 ? this[ num + this.length ] : this[ num ] ) :

			// Return all the elements in a clean array
			slice.call( this );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;
		ret.context = this.context;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	// (You can seed the arguments with an array of args, but this is
	// only used internally.)
	each: function( callback, args ) {
		return jQuery.each( this, callback, args );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map(this, function( elem, i ) {
			return callback.call( elem, i, elem );
		}));
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor(null);
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray(src) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend({
	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isFunction: function( obj ) {
		return jQuery.type(obj) === "function";
	},

	isArray: Array.isArray,

	isWindow: function( obj ) {
		return obj != null && obj === obj.window;
	},

	isNumeric: function( obj ) {
		// parseFloat NaNs numeric-cast false positives (null|true|false|"")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		// adding 1 corrects loss of precision from parseFloat (#15100)
		return !jQuery.isArray( obj ) && (obj - parseFloat( obj ) + 1) >= 0;
	},

	isPlainObject: function( obj ) {
		// Not plain objects:
		// - Any object or value whose internal [[Class]] property is not "[object Object]"
		// - DOM nodes
		// - window
		if ( jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		if ( obj.constructor &&
				!hasOwn.call( obj.constructor.prototype, "isPrototypeOf" ) ) {
			return false;
		}

		// If the function hasn't returned already, we're confident that
		// |obj| is a plain object, created by {} or constructed with new Object
		return true;
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	type: function( obj ) {
		if ( obj == null ) {
			return obj + "";
		}
		// Support: Android<4.0, iOS<6 (functionish RegExp)
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ toString.call(obj) ] || "object" :
			typeof obj;
	},

	// Evaluates a script in a global context
	globalEval: function( code ) {
		var script,
			indirect = eval;

		code = jQuery.trim( code );

		if ( code ) {
			// If the code includes a valid, prologue position
			// strict mode pragma, execute code by injecting a
			// script tag into the document.
			if ( code.indexOf("use strict") === 1 ) {
				script = document.createElement("script");
				script.text = code;
				document.head.appendChild( script ).parentNode.removeChild( script );
			} else {
			// Otherwise, avoid the DOM node creation, insertion
			// and removal by using an indirect global eval
				indirect( code );
			}
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Support: IE9-11+
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	// args is for internal usage only
	each: function( obj, callback, args ) {
		var value,
			i = 0,
			length = obj.length,
			isArray = isArraylike( obj );

		if ( args ) {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			}

		// A special, fast, case for the most common use of each
		} else {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			}
		}

		return obj;
	},

	// Support: Android<4.1
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArraylike( Object(arr) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var value,
			i = 0,
			length = elems.length,
			isArray = isArraylike( elems ),
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArray ) {
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var tmp, args, proxy;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	now: Date.now,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
});

// Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
});

function isArraylike( obj ) {

	// Support: iOS 8.2 (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = "length" in obj && obj.length,
		type = jQuery.type( obj );

	if ( type === "function" || jQuery.isWindow( obj ) ) {
		return false;
	}

	if ( obj.nodeType === 1 && length ) {
		return true;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.2.0-pre
 * http://sizzlejs.com/
 *
 * Copyright 2008, 2014 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2014-12-16
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// General-purpose constants
	MAX_NEGATIVE = 1 << 31,

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// http://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",
	// http://www.w3.org/TR/css3-syntax/#characters
	characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

	// Loosely modeled on CSS identifier characters
	// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
	// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = characterEncoding.replace( "w", "w#" ),

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + characterEncoding + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + characterEncoding + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + characterEncoding + ")" ),
		"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
		"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,
	rescape = /'|\\/g,

	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	};

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var match, elem, m, nodeType,
		// QSA vars
		i, groups, old, nid, newContext, newSelector;

	if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
		setDocument( context );
	}

	context = context || document;
	results = results || [];
	nodeType = context.nodeType;

	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	if ( !seed && documentIsHTML ) {

		// Try to shortcut find operations when possible (e.g., not under DocumentFragment)
		if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {
			// Speed-up: Sizzle("#ID")
			if ( (m = match[1]) ) {
				if ( nodeType === 9 ) {
					elem = context.getElementById( m );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document (jQuery #6963)
					if ( elem && elem.parentNode ) {
						// Handle the case where IE, Opera, and Webkit return items
						// by name instead of ID
						if ( elem.id === m ) {
							results.push( elem );
							return results;
						}
					} else {
						return results;
					}
				} else {
					// Context is not a document
					if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
						contains( context, elem ) && elem.id === m ) {
						results.push( elem );
						return results;
					}
				}

			// Speed-up: Sizzle("TAG")
			} else if ( match[2] ) {
				push.apply( results, context.getElementsByTagName( selector ) );
				return results;

			// Speed-up: Sizzle(".CLASS")
			} else if ( (m = match[3]) && support.getElementsByClassName ) {
				push.apply( results, context.getElementsByClassName( m ) );
				return results;
			}
		}

		// QSA path
		if ( support.qsa && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
			nid = old = expando;
			newContext = context;
			newSelector = nodeType !== 1 && selector;

			// qSA works strangely on Element-rooted queries
			// We can work around this by specifying an extra ID on the root
			// and working up from there (Thanks to Andrew Dupont for the technique)
			// IE 8 doesn't work on object elements
			if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
				groups = tokenize( selector );

				if ( (old = context.getAttribute("id")) ) {
					nid = old.replace( rescape, "\\$&" );
				} else {
					context.setAttribute( "id", nid );
				}
				nid = "[id='" + nid + "'] ";

				i = groups.length;
				while ( i-- ) {
					groups[i] = nid + toSelector( groups[i] );
				}
				newContext = rsibling.test( selector ) && testContext( context.parentNode ) || context;
				newSelector = groups.join(",");
			}

			if ( newSelector ) {
				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch(qsaError) {
				} finally {
					if ( !old ) {
						context.removeAttribute("id");
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
	var div = document.createElement("div");

	try {
		return !!fn( div );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( div.parentNode ) {
			div.parentNode.removeChild( div );
		}
		// release memory in IE
		div = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = attrs.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			( ~b.sourceIndex || MAX_NEGATIVE ) -
			( ~a.sourceIndex || MAX_NEGATIVE );

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, parent,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// If no document and documentElement is available, return
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Set our document
	document = doc;
	docElem = doc.documentElement;
	parent = doc.defaultView;

	// Support: IE>8
	// If iframe document is assigned to "document" variable and if iframe has been reloaded,
	// IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
	// IE6-8 do not support the defaultView property so parent will be undefined
	if ( parent && parent !== parent.top ) {
		// IE11 does not have attachEvent, so all must suffer
		if ( parent.addEventListener ) {
			parent.addEventListener( "unload", unloadHandler, false );
		} else if ( parent.attachEvent ) {
			parent.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Support tests
	---------------------------------------------------------------------- */
	documentIsHTML = !isXML( doc );

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( div ) {
		div.className = "i";
		return !div.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( div ) {
		div.appendChild( doc.createComment("") );
		return !div.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( doc.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( div ) {
		docElem.appendChild( div ).id = expando;
		return !doc.getElementsByName || !doc.getElementsByName( expando ).length;
	});

	// ID find and filter
	if ( support.getById ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var m = context.getElementById( id );
				// Check parentNode to catch when Blackberry 4.6 returns
				// nodes that are no longer in the document #6963
				return m && m.parentNode ? [ m ] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		// Support: IE6/7
		// getElementById is not reliable as a find shortcut
		delete Expr.find["ID"];

		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See http://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( doc.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			docElem.appendChild( div ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\f]' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( div.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.2+, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.7+
			if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibing-combinator selector` fails
			if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( div ) {
			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = doc.createElement("input");
			input.setAttribute( "type", "hidden" );
			div.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( div.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			div.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( div, "div" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( div, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully does not implement inclusive descendent
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === doc ? -1 :
				b === doc ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return doc;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, outerCache, node, diff, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {
							// Seek `elem` from a previously-cached index
							outerCache = parent[ expando ] || (parent[ expando ] = {});
							cache = outerCache[ type ] || [];
							nodeIndex = cache[0] === dirruns && cache[1];
							diff = cache[0] === dirruns && cache[2];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									outerCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						// Use previously-cached element index if available
						} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
							diff = cache[1];

						// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
						} else {
							// Use the same loop as above to seek `elem` from the start
							while ( (node = ++nodeIndex && node && node[ dir ] ||
								(diff = nodeIndex = 0) || start.pop()) ) {

								if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
									// Cache the index of each encountered element
									if ( useCache ) {
										(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
									}

									if ( node === elem ) {
										break;
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});
						if ( (oldCache = outerCache[ dir ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							outerCache[ dir ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context !== document && context;
			}

			// Add elements passing elementMatchers directly to results
			// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// Apply set filters to unmatched elements
			matchedCount += i;
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is no seed and only one group
	if ( match.length === 1 ) {

		// Take a shortcut and set the context if the root selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				support.getById && context.nodeType === 9 && documentIsHTML &&
				Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( div1 ) {
	// Should return 1, but returns 4 (following)
	return div1.compareDocumentPosition( document.createElement("div") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( div ) {
	div.innerHTML = "<a href='#'></a>";
	return div.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( div ) {
	div.innerHTML = "<input/>";
	div.firstChild.setAttribute( "value", "" );
	return div.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( div ) {
	return div.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[":"] = jQuery.expr.pseudos;
jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;



var rneedsContext = jQuery.expr.match.needsContext;

var rsingleTag = (/^<(\w+)\s*\/?>(?:<\/\1>|)$/);



var risSimple = /^.[^:#\[\.,]*$/;

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			/* jshint -W018 */
			return !!qualifier.call( elem, i, elem ) !== not;
		});

	}

	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		});

	}

	if ( typeof qualifier === "string" ) {
		if ( risSimple.test( qualifier ) ) {
			return jQuery.filter( qualifier, elements, not );
		}

		qualifier = jQuery.filter( qualifier, elements );
	}

	return jQuery.grep( elements, function( elem ) {
		return ( indexOf.call( qualifier, elem ) >= 0 ) !== not;
	});
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	return elems.length === 1 && elem.nodeType === 1 ?
		jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
		jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
			return elem.nodeType === 1;
		}));
};

jQuery.fn.extend({
	find: function( selector ) {
		var i,
			len = this.length,
			ret = [],
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter(function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			}) );
		}

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		// Needed because $( selector, context ) becomes $( context ).find( selector )
		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
		ret.selector = this.selector ? this.selector + " " + selector : selector;
		return ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow(this, selector || [], false) );
	},
	not: function( selector ) {
		return this.pushStack( winnow(this, selector || [], true) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
});


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

	init = jQuery.fn.init = function( selector, context ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[0] === "<" && selector[ selector.length - 1 ] === ">" && selector.length >= 3 ) {
				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && (match[1] || !context) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[1] ) {
					context = context instanceof jQuery ? context[0] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[1],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {
							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[2] );

					// Support: Blackberry 4.6
					// gEBID returns nodes no longer in the document (#6963)
					if ( elem && elem.parentNode ) {
						// Inject the element directly into the jQuery object
						this.length = 1;
						this[0] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || rootjQuery ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this.context = this[0] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return typeof rootjQuery.ready !== "undefined" ?
				rootjQuery.ready( selector ) :
				// Execute immediately if ready is not present
				selector( jQuery );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,
	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.extend({
	dir: function( elem, dir, until ) {
		var matched = [],
			truncate = until !== undefined;

		while ( (elem = elem[ dir ]) && elem.nodeType !== 9 ) {
			if ( elem.nodeType === 1 ) {
				if ( truncate && jQuery( elem ).is( until ) ) {
					break;
				}
				matched.push( elem );
			}
		}
		return matched;
	},

	sibling: function( n, elem ) {
		var matched = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				matched.push( n );
			}
		}

		return matched;
	}
});

jQuery.fn.extend({
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter(function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[i] ) ) {
					return true;
				}
			}
		});
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( ; i < l; i++ ) {
			for ( cur = this[i]; cur && cur !== context; cur = cur.parentNode ) {
				// Always skip document fragments
				if ( cur.nodeType < 11 && (pos ?
					pos.index(cur) > -1 :

					// Don't pass non-elements to Sizzle
					cur.nodeType === 1 &&
						jQuery.find.matchesSelector(cur, selectors)) ) {

					matched.push( cur );
					break;
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.unique( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.unique(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter(selector)
		);
	}
});

function sibling( cur, dir ) {
	while ( (cur = cur[dir]) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each({
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return jQuery.dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return jQuery.dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return jQuery.dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return jQuery.sibling( elem.firstChild );
	},
	contents: function( elem ) {
		return elem.contentDocument || jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {
			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.unique( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
});
var rnotwhite = (/\S+/g);



// String to Object options format cache
var optionsCache = {};

// Convert String-formatted options into Object-formatted ones and store in cache
function createOptions( options ) {
	var object = optionsCache[ options ] = {};
	jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	});
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		( optionsCache[ options ] || createOptions( options ) ) :
		jQuery.extend( {}, options );

	var // Last fire value (for non-forgettable lists)
		memory,
		// Flag to know if list was already fired
		fired,
		// Flag to know if list is currently firing
		firing,
		// First callback to fire (used internally by add and fireWith)
		firingStart,
		// End of the loop when firing
		firingLength,
		// Index of currently firing callback (modified by remove if needed)
		firingIndex,
		// Actual callback list
		list = [],
		// Stack of fire calls for repeatable lists
		stack = !options.once && [],
		// Fire callbacks
		fire = function( data ) {
			memory = options.memory && data;
			fired = true;
			firingIndex = firingStart || 0;
			firingStart = 0;
			firingLength = list.length;
			firing = true;
			for ( ; list && firingIndex < firingLength; firingIndex++ ) {
				if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
					memory = false; // To prevent further calls using add
					break;
				}
			}
			firing = false;
			if ( list ) {
				if ( stack ) {
					if ( stack.length ) {
						fire( stack.shift() );
					}
				} else if ( memory ) {
					list = [];
				} else {
					self.disable();
				}
			}
		},
		// Actual Callbacks object
		self = {
			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {
					// First, we save the current length
					var start = list.length;
					(function add( args ) {
						jQuery.each( args, function( _, arg ) {
							var type = jQuery.type( arg );
							if ( type === "function" ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && type !== "string" ) {
								// Inspect recursively
								add( arg );
							}
						});
					})( arguments );
					// Do we need to add the callbacks to the
					// current firing batch?
					if ( firing ) {
						firingLength = list.length;
					// With memory, if we're not firing then
					// we should call right away
					} else if ( memory ) {
						firingStart = start;
						fire( memory );
					}
				}
				return this;
			},
			// Remove a callback from the list
			remove: function() {
				if ( list ) {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
							// Handle firing indexes
							if ( firing ) {
								if ( index <= firingLength ) {
									firingLength--;
								}
								if ( index <= firingIndex ) {
									firingIndex--;
								}
							}
						}
					});
				}
				return this;
			},
			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );
			},
			// Remove all callbacks from the list
			empty: function() {
				list = [];
				firingLength = 0;
				return this;
			},
			// Have the list do nothing anymore
			disable: function() {
				list = stack = memory = undefined;
				return this;
			},
			// Is it disabled?
			disabled: function() {
				return !list;
			},
			// Lock the list in its current state
			lock: function() {
				stack = undefined;
				if ( !memory ) {
					self.disable();
				}
				return this;
			},
			// Is it locked?
			locked: function() {
				return !stack;
			},
			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( list && ( !fired || stack ) ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					if ( firing ) {
						stack.push( args );
					} else {
						fire( args );
					}
				}
				return this;
			},
			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},
			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


jQuery.extend({

	Deferred: function( func ) {
		var tuples = [
				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
				[ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
				[ "notify", "progress", jQuery.Callbacks("memory") ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				then: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;
					return jQuery.Deferred(function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {
							var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[ tuple[1] ](function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.done( newDefer.resolve )
										.fail( newDefer.reject )
										.progress( newDefer.notify );
								} else {
									newDefer[ tuple[ 0 ] + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );
								}
							});
						});
						fns = null;
					}).promise();
				},
				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Keep pipe for back-compat
		promise.pipe = promise.then;

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 3 ];

			// promise[ done | fail | progress ] = list.add
			promise[ tuple[1] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(function() {
					// state = [ resolved | rejected ]
					state = stateString;

				// [ reject_list | resolve_list ].disable; progress_list.lock
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
			}

			// deferred[ resolve | reject | notify ]
			deferred[ tuple[0] ] = function() {
				deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );
				return this;
			};
			deferred[ tuple[0] + "With" ] = list.fireWith;
		});

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( subordinate /* , ..., subordinateN */ ) {
		var i = 0,
			resolveValues = slice.call( arguments ),
			length = resolveValues.length,

			// the count of uncompleted subordinates
			remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

			// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

			// Update function for both resolve and progress values
			updateFunc = function( i, contexts, values ) {
				return function( value ) {
					contexts[ i ] = this;
					values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( values === progressValues ) {
						deferred.notifyWith( contexts, values );
					} else if ( !( --remaining ) ) {
						deferred.resolveWith( contexts, values );
					}
				};
			},

			progressValues, progressContexts, resolveContexts;

		// Add listeners to Deferred subordinates; treat others as resolved
		if ( length > 1 ) {
			progressValues = new Array( length );
			progressContexts = new Array( length );
			resolveContexts = new Array( length );
			for ( ; i < length; i++ ) {
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
					resolveValues[ i ].promise()
						.done( updateFunc( i, resolveContexts, resolveValues ) )
						.fail( deferred.reject )
						.progress( updateFunc( i, progressContexts, progressValues ) );
				} else {
					--remaining;
				}
			}
		}

		// If we're not waiting on anything, resolve the master
		if ( !remaining ) {
			deferred.resolveWith( resolveContexts, resolveValues );
		}

		return deferred.promise();
	}
});


// The deferred used on DOM ready
var readyList;

jQuery.fn.ready = function( fn ) {
	// Add the callback
	jQuery.ready.promise().done( fn );

	return this;
};

jQuery.extend({
	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );

		// Trigger any bound ready events
		if ( jQuery.fn.triggerHandler ) {
			jQuery( document ).triggerHandler( "ready" );
			jQuery( document ).off( "ready" );
		}
	}
});

/**
 * The ready event handler and self cleanup method
 */
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed, false );
	window.removeEventListener( "load", completed, false );
	jQuery.ready();
}

jQuery.ready.promise = function( obj ) {
	if ( !readyList ) {

		readyList = jQuery.Deferred();

		// Catch cases where $(document).ready() is called after the browser event has already occurred.
		// We once tried to use readyState "interactive" here, but it caused issues like the one
		// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
		if ( document.readyState === "complete" ) {
			// Handle it asynchronously to allow scripts the opportunity to delay ready
			setTimeout( jQuery.ready );

		} else {

			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", completed, false );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", completed, false );
		}
	}
	return readyList.promise( obj );
};

// Kick off the DOM ready check even if the user does not
jQuery.ready.promise();




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = jQuery.access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( jQuery.type( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !jQuery.isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {
			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );
			}
		}
	}

	return chainable ?
		elems :

		// Gets
		bulk ?
			fn.call( elems ) :
			len ? fn( elems[0], key ) : emptyGet;
};


/**
 * Determines whether an object can have data
 */
jQuery.acceptData = function( owner ) {
	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	/* jshint -W018 */
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};


function Data() {
	// Support: Android<4,
	// Old WebKit does not have Object.preventExtensions/freeze method,
	// return new empty object instead with no [[set]] accessor
	Object.defineProperty( this.cache = {}, 0, {
		get: function() {
			return {};
		}
	});

	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;
Data.accepts = jQuery.acceptData;

Data.prototype = {
	key: function( owner ) {
		// We can accept data for non-element nodes in modern browsers,
		// but we should not, see #8335.
		// Always return the key for a frozen object.
		if ( !Data.accepts( owner ) ) {
			return 0;
		}

		var descriptor = {},
			// Check if the owner object already has a cache key
			unlock = owner[ this.expando ];

		// If not, create one
		if ( !unlock ) {
			unlock = Data.uid++;

			// Secure it in a non-enumerable, non-writable property
			try {
				descriptor[ this.expando ] = { value: unlock };
				Object.defineProperties( owner, descriptor );

			// Support: Android<4
			// Fallback to a less secure definition
			} catch ( e ) {
				descriptor[ this.expando ] = unlock;
				jQuery.extend( owner, descriptor );
			}
		}

		// Ensure the cache object
		if ( !this.cache[ unlock ] ) {
			this.cache[ unlock ] = {};
		}

		return unlock;
	},
	set: function( owner, data, value ) {
		var prop,
			// There may be an unlock assigned to this node,
			// if there is no entry for this "owner", create one inline
			// and set the unlock as though an owner entry had always existed
			unlock = this.key( owner ),
			cache = this.cache[ unlock ];

		// Handle: [ owner, key, value ] args
		if ( typeof data === "string" ) {
			cache[ data ] = value;

		// Handle: [ owner, { properties } ] args
		} else {
			// Fresh assignments by object are shallow copied
			if ( jQuery.isEmptyObject( cache ) ) {
				jQuery.extend( this.cache[ unlock ], data );
			// Otherwise, copy the properties one-by-one to the cache object
			} else {
				for ( prop in data ) {
					cache[ prop ] = data[ prop ];
				}
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		// Either a valid cache is found, or will be created.
		// New caches will be created and the unlock returned,
		// allowing direct access to the newly created
		// empty data object. A valid owner object must be provided.
		var cache = this.cache[ this.key( owner ) ];

		return key === undefined ?
			cache : cache[ key ];
	},
	access: function( owner, key, value ) {
		var stored;
		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				((key && typeof key === "string") && value === undefined) ) {

			stored = this.get( owner, key );

			return stored !== undefined ?
				stored : this.get( owner, jQuery.camelCase(key) );
		}

		// [*]When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i, name, camel,
			unlock = this.key( owner ),
			cache = this.cache[ unlock ];

		if ( key === undefined ) {
			this.cache[ unlock ] = {};

		} else {
			// Support array or space separated string of keys
			if ( jQuery.isArray( key ) ) {
				// If "name" is an array of keys...
				// When data is initially created, via ("key", "val") signature,
				// keys will be converted to camelCase.
				// Since there is no way to tell _how_ a key was added, remove
				// both plain key and camelCase key. #12786
				// This will only penalize the array argument path.
				name = key.concat( key.map( jQuery.camelCase ) );
			} else {
				camel = jQuery.camelCase( key );
				// Try the string as a key before any manipulation
				if ( key in cache ) {
					name = [ key, camel ];
				} else {
					// If a key with the spaces exists, use it.
					// Otherwise, create an array by matching non-whitespace
					name = camel;
					name = name in cache ?
						[ name ] : ( name.match( rnotwhite ) || [] );
				}
			}

			i = name.length;
			while ( i-- ) {
				delete cache[ name[ i ] ];
			}
		}
	},
	hasData: function( owner ) {
		return !jQuery.isEmptyObject(
			this.cache[ owner[ this.expando ] ] || {}
		);
	},
	discard: function( owner ) {
		if ( owner[ this.expando ] ) {
			delete this.cache[ owner[ this.expando ] ];
		}
	}
};
var data_priv = new Data();

var data_user = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /([A-Z])/g;

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :
					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data :
					rbrace.test( data ) ? jQuery.parseJSON( data ) :
					data;
			} catch( e ) {}

			// Make sure we set the data so it isn't changed later
			data_user.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend({
	hasData: function( elem ) {
		return data_user.hasData( elem ) || data_priv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return data_user.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		data_user.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to data_priv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return data_priv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		data_priv.remove( elem, name );
	}
});

jQuery.fn.extend({
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = data_user.get( elem );

				if ( elem.nodeType === 1 && !data_priv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE11+
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = jQuery.camelCase( name.slice(5) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					data_priv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each(function() {
				data_user.set( this, key );
			});
		}

		return access( this, function( value ) {
			var data,
				camelKey = jQuery.camelCase( key );

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {
				// Attempt to get data from the cache
				// with the key as-is
				data = data_user.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to get data from the cache
				// with the key camelized
				data = data_user.get( elem, camelKey );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, camelKey, undefined );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each(function() {
				// First, attempt to store a copy or reference of any
				// data that might've been store with a camelCased key.
				var data = data_user.get( this, camelKey );

				// For HTML5 data-* attribute interop, we have to
				// store property names with dashes in a camelCase form.
				// This might not apply to all properties...*
				data_user.set( this, camelKey, value );

				// *... In the case of properties that might _actually_
				// have dashes, we need to also store a copy of that
				// unchanged property.
				if ( key.indexOf("-") !== -1 && data !== undefined ) {
					data_user.set( this, key, value );
				}
			});
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each(function() {
			data_user.remove( this, key );
		});
	}
});


jQuery.extend({
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = data_priv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray( data ) ) {
					queue = data_priv.access( elem, type, jQuery.makeArray(data) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return data_priv.get( elem, key ) || data_priv.access( elem, key, {
			empty: jQuery.Callbacks("once memory").add(function() {
				data_priv.remove( elem, [ type + "queue", key ] );
			})
		});
	}
});

jQuery.fn.extend({
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[0], type );
		}

		return data === undefined ?
			this :
			this.each(function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[0] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			});
	},
	dequeue: function( type ) {
		return this.each(function() {
			jQuery.dequeue( this, type );
		});
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},
	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = data_priv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
});
var pnum = (/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/).source;

var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHidden = function( elem, el ) {
		// isHidden might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;
		return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
	};

var rcheckableType = (/^(?:checkbox|radio)$/i);



(function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Safari<=5.1
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Safari<=5.1, Android<4.2
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE<=11+
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
})();
var strundefined = typeof undefined;



support.focusinBubbles = "onfocusin" in window;


var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = data_priv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !(events = elemData.events) ) {
			events = elemData.events = {};
		}
		if ( !(eventHandle = elemData.handle) ) {
			eventHandle = elemData.handle = function( e ) {
				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== strundefined && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend({
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join(".")
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !(handlers = events[ type ]) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = data_priv.hasData( elem ) && data_priv.get( elem );

		if ( !elemData || !(events = elemData.events) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			delete elemData.handle;
			data_priv.remove( elem, "events" );
		}
	},

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split(".") : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf(".") >= 0 ) {
			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split(".");
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf(":") < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join(".");
		event.namespace_re = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === (elem.ownerDocument || document) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( data_priv.get( cur, "events" ) || {} )[ event.type ] && data_priv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && jQuery.acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( (!special._default || special._default.apply( eventPath.pop(), data ) === false) &&
				jQuery.acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					elem[ type ]();
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event );

		var i, j, ret, matched, handleObj,
			handlerQueue = [],
			args = slice.call( arguments ),
			handlers = ( data_priv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[0] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or 2) have namespace(s)
				// a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
							.apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( (event.result = ret) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, matches, sel, handleObj,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		// Black-hole SVG <use> instance trees (#13180)
		// Avoid non-left-click bubbling in Firefox (#3861)
		if ( delegateCount && cur.nodeType && (!event.button || event.type !== "click") ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.disabled !== true || event.type !== "click" ) {
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matches[ sel ] === undefined ) {
							matches[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) >= 0 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matches[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push({ elem: cur, handlers: matches });
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( delegateCount < handlers.length ) {
			handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });
		}

		return handlerQueue;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split(" "),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: "button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
		filter: function( event, original ) {
			var eventDoc, doc, body,
				button = original.button;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop, copy,
			type = event.type,
			originalEvent = event,
			fixHook = this.fixHooks[ type ];

		if ( !fixHook ) {
			this.fixHooks[ type ] = fixHook =
				rmouseEvent.test( type ) ? this.mouseHooks :
				rkeyEvent.test( type ) ? this.keyHooks :
				{};
		}
		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = new jQuery.Event( originalEvent );

		i = copy.length;
		while ( i-- ) {
			prop = copy[ i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Support: Cordova 2.5 (WebKit) (#13255)
		// All events should have a target; Cordova deviceready doesn't
		if ( !event.target ) {
			event.target = document;
		}

		// Support: Safari 6.0+, Chrome<28
		// Target should not be a text node (#504, #13143)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
	},

	special: {
		load: {
			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {
			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					this.focus();
					return false;
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {
			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return jQuery.nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	},

	simulate: function( type, elem, event, bubble ) {
		// Piggyback on a donor event to simulate a different one.
		// Fake originalEvent to avoid donor's stopPropagation, but if the
		// simulated event prevents default then we do the same on the donor.
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true,
				originalEvent: {}
			}
		);
		if ( bubble ) {
			jQuery.event.trigger( e, null, elem );
		} else {
			jQuery.event.dispatch.call( elem, e );
		}
		if ( e.isDefaultPrevented() ) {
			event.preventDefault();
		}
	}
};

jQuery.removeEvent = function( elem, type, handle ) {
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle, false );
	}
};

jQuery.Event = function( src, props ) {
	// Allow instantiation without the 'new' keyword
	if ( !(this instanceof jQuery.Event) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&
				// Support: Android<4.0
				src.returnValue === false ?
			returnTrue :
			returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && e.preventDefault ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && e.stopPropagation ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && e.stopImmediatePropagation ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Create mouseenter/leave events using mouseover/out and event-time checks
// Support: Chrome 15+
jQuery.each({
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mousenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
});

// Support: Firefox, Chrome, Safari
// Create "bubbling" focus and blur events
if ( !support.focusinBubbles ) {
	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
			};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = data_priv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				data_priv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = data_priv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					data_priv.remove( doc, fix );

				} else {
					data_priv.access( doc, fix, attaches );
				}
			}
		};
	});
}

jQuery.fn.extend({

	on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
		var origFn, type;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				this.on( type, selector, data, types[ type ], one );
			}
			return this;
		}

		if ( data == null && fn == null ) {
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return this;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return this.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		});
	},
	one: function( types, selector, data, fn ) {
		return this.on( types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {
			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {
			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {
			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each(function() {
			jQuery.event.remove( this, types, fn, selector );
		});
	},

	trigger: function( type, data ) {
		return this.each(function() {
			jQuery.event.trigger( type, data, this );
		});
	},
	triggerHandler: function( type, data ) {
		var elem = this[0];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
});


var
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
	rtagName = /<([\w:]+)/,
	rhtml = /<|&#?\w+;/,
	rnoInnerhtml = /<(?:script|style|link)/i,
	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptType = /^$|\/(?:java|ecma)script/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,

	// We have to close these tags to support XHTML (#13200)
	wrapMap = {

		// Support: IE9
		option: [ 1, "<select multiple='multiple'>", "</select>" ],

		thead: [ 1, "<table>", "</table>" ],
		col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		_default: [ 0, "", "" ]
	};

// Support: IE9
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

// Support: 1.x compatibility
// Manipulating tables requires a tbody
function manipulationTarget( elem, content ) {
	return jQuery.nodeName( elem, "table" ) &&
		jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?

		elem.getElementsByTagName("tbody")[0] ||
			elem.appendChild( elem.ownerDocument.createElement("tbody") ) :
		elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );

	if ( match ) {
		elem.type = match[ 1 ];
	} else {
		elem.removeAttribute("type");
	}

	return elem;
}

// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		data_priv.set(
			elems[ i ], "globalEval", !refElements || data_priv.get( refElements[ i ], "globalEval" )
		);
	}
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( data_priv.hasData( src ) ) {
		pdataOld = data_priv.access( src );
		pdataCur = data_priv.set( dest, pdataOld );
		events = pdataOld.events;

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( data_user.hasData( src ) ) {
		udataOld = data_user.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		data_user.set( dest, udataCur );
	}
}

function getAll( context, tag ) {
	var ret = context.getElementsByTagName ? context.getElementsByTagName( tag || "*" ) :
			context.querySelectorAll ? context.querySelectorAll( tag || "*" ) :
			[];

	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
		jQuery.merge( [ context ], ret ) :
		ret;
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

jQuery.extend({
	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = jQuery.contains( elem.ownerDocument, elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	buildFragment: function( elems, context, scripts, selection ) {
		var elem, tmp, tag, wrap, contains, j,
			fragment = context.createDocumentFragment(),
			nodes = [],
			i = 0,
			l = elems.length;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {
					// Support: QtWebKit, PhantomJS
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || fragment.appendChild( context.createElement("div") );

					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;
					tmp.innerHTML = wrap[ 1 ] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[ 2 ];

					// Descend through wrappers to the right content
					j = wrap[ 0 ];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Support: QtWebKit, PhantomJS
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, tmp.childNodes );

					// Remember the top-level container
					tmp = fragment.firstChild;

					// Ensure the created nodes are orphaned (#12392)
					tmp.textContent = "";
				}
			}
		}

		// Remove wrapper from fragment
		fragment.textContent = "";

		i = 0;
		while ( (elem = nodes[ i++ ]) ) {

			// #4087 - If origin and destination elements are the same, and this is
			// that element, do not do anything
			if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( fragment.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( (elem = tmp[ j++ ]) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		return fragment;
	},

	cleanData: function( elems ) {
		var data, elem, type, key,
			special = jQuery.event.special,
			i = 0;

		for ( ; (elem = elems[ i ]) !== undefined; i++ ) {
			if ( jQuery.acceptData( elem ) ) {
				key = elem[ data_priv.expando ];

				if ( key && (data = data_priv.cache[ key ]) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}
					if ( data_priv.cache[ key ] ) {
						// Discard any remaining `private` data
						delete data_priv.cache[ key ];
					}
				}
			}
			// Discard any remaining `user` data
			delete data_user.cache[ elem[ data_user.expando ] ];
		}
	}
});

jQuery.fn.extend({
	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each(function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				});
		}, null, value, arguments.length );
	},

	append: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		});
	},

	prepend: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		});
	},

	before: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		});
	},

	after: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		});
	},

	remove: function( selector, keepData /* Internal Use Only */ ) {
		var elem,
			elems = selector ? jQuery.filter( selector, this ) : this,
			i = 0;

		for ( ; (elem = elems[i]) != null; i++ ) {
			if ( !keepData && elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem ) );
			}

			if ( elem.parentNode ) {
				if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {
					setGlobalEval( getAll( elem, "script" ) );
				}
				elem.parentNode.removeChild( elem );
			}
		}

		return this;
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map(function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		});
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = value.replace( rxhtmlTag, "<$1></$2>" );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var arg = arguments[ 0 ];

		// Make the changes, replacing each context element with the new content
		this.domManip( arguments, function( elem ) {
			arg = this.parentNode;

			jQuery.cleanData( getAll( this ) );

			if ( arg ) {
				arg.replaceChild( elem, this );
			}
		});

		// Force removal if there was no new content (e.g., from empty arguments)
		return arg && (arg.length || arg.nodeType) ? this : this.remove();
	},

	detach: function( selector ) {
		return this.remove( selector, true );
	},

	domManip: function( args, callback ) {

		// Flatten any nested arrays
		args = concat.apply( [], args );

		var fragment, first, scripts, hasScripts, node, doc,
			i = 0,
			l = this.length,
			set = this,
			iNoClone = l - 1,
			value = args[ 0 ],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return this.each(function( index ) {
				var self = set.eq( index );
				if ( isFunction ) {
					args[ 0 ] = value.call( this, index, self.html() );
				}
				self.domManip( args, callback );
			});
		}

		if ( l ) {
			fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, this );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			if ( first ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {
							// Support: QtWebKit
							// jQuery.merge because push.apply(_, arraylike) throws
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call( this[ i ], node, i );
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!data_priv.access( node, "globalEval" ) && jQuery.contains( doc, node ) ) {

							if ( node.src ) {
								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl ) {
									jQuery._evalUrl( node.src );
								}
							} else {
								jQuery.globalEval( node.textContent.replace( rcleanScript, "" ) );
							}
						}
					}
				}
			}
		}

		return this;
	}
});

jQuery.each({
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: QtWebKit
			// .get() because push.apply(_, arraylike) throws
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
});


var iframe,
	elemdisplay = {};

/**
 * Retrieve the actual display of a element
 * @param {String} name nodeName of the element
 * @param {Object} doc Document object
 */
// Called only from within defaultDisplay
function actualDisplay( name, doc ) {
	var style,
		elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),

		// getDefaultComputedStyle might be reliably used only on attached element
		display = window.getDefaultComputedStyle && ( style = window.getDefaultComputedStyle( elem[ 0 ] ) ) ?

			// Use of this method is a temporary fix (more like optimization) until something better comes along,
			// since it was removed from specification and supported only in FF
			style.display : jQuery.css( elem[ 0 ], "display" );

	// We don't have any data stored on the element,
	// so use "detach" method as fast way to get rid of the element
	elem.detach();

	return display;
}

/**
 * Try to determine the default display value of an element
 * @param {String} nodeName
 */
function defaultDisplay( nodeName ) {
	var doc = document,
		display = elemdisplay[ nodeName ];

	if ( !display ) {
		display = actualDisplay( nodeName, doc );

		// If the simple way fails, read from inside an iframe
		if ( display === "none" || !display ) {

			// Use the already-created iframe if possible
			iframe = (iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" )).appendTo( doc.documentElement );

			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
			doc = iframe[ 0 ].contentDocument;

			// Support: IE
			doc.write();
			doc.close();

			display = actualDisplay( nodeName, doc );
			iframe.detach();
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return display;
}
var rmargin = (/^margin/);

var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {
		// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		if ( elem.ownerDocument.defaultView.opener ) {
			return elem.ownerDocument.defaultView.getComputedStyle( elem, null );
		}

		return window.getComputedStyle( elem, null );
	};



function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,
		style = elem.style;

	computed = computed || getStyles( elem );

	// Support: IE9
	// getPropertyValue is only needed for .css('filter') (#12537)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];
	}

	if ( computed ) {

		if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// Support: iOS < 6
		// A tribute to the "awesome hack by Dean Edwards"
		// iOS < 6 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
		// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
		if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?
		// Support: IE
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {
	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {
				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return (this.get = hookFn).apply( this, arguments );
		}
	};
}


(function() {
	var pixelPositionVal, boxSizingReliableVal,
		docElem = document.documentElement,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	if ( !div.style ) {
		return;
	}

	// Support: IE9-11+
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	container.style.cssText = "border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;" +
		"position:absolute";
	container.appendChild( div );

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computePixelPositionAndBoxSizingReliable() {
		div.style.cssText =
			// Support: Firefox<29, Android 2.3
			// Vendor-prefix box-sizing
			"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;" +
			"box-sizing:border-box;display:block;margin-top:1%;top:1%;" +
			"border:1px;padding:1px;width:4px;position:absolute";
		div.innerHTML = "";
		docElem.appendChild( container );

		var divStyle = window.getComputedStyle( div, null );
		pixelPositionVal = divStyle.top !== "1%";
		boxSizingReliableVal = divStyle.width === "4px";

		docElem.removeChild( container );
	}

	// Support: node.js jsdom
	// Don't assume that getComputedStyle is a property of the global object
	if ( window.getComputedStyle ) {
		jQuery.extend( support, {
			pixelPosition: function() {

				// This test is executed only once but we still do memoizing
				// since we can use the boxSizingReliable pre-computing.
				// No need to check if the test was already performed, though.
				computePixelPositionAndBoxSizingReliable();
				return pixelPositionVal;
			},
			boxSizingReliable: function() {
				if ( boxSizingReliableVal == null ) {
					computePixelPositionAndBoxSizingReliable();
				}
				return boxSizingReliableVal;
			},
			reliableMarginRight: function() {

				// Support: Android 2.3
				// Check if div with explicit width and no margin-right incorrectly
				// gets computed margin-right based on width of container. (#3333)
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
				// This support function is only executed once so no memoizing is needed.
				var ret,
					marginDiv = div.appendChild( document.createElement( "div" ) );

				// Reset CSS: box-sizing; display; margin; border; padding
				marginDiv.style.cssText = div.style.cssText =
					// Support: Firefox<29, Android 2.3
					// Vendor-prefix box-sizing
					"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
					"box-sizing:content-box;display:block;margin:0;border:0;padding:0";
				marginDiv.style.marginRight = marginDiv.style.width = "0";
				div.style.width = "1px";
				docElem.appendChild( container );

				ret = !parseFloat( window.getComputedStyle( marginDiv, null ).marginRight );

				docElem.removeChild( container );
				div.removeChild( marginDiv );

				return ret;
			}
		});
	}
})();


// A method for quickly swapping in/out CSS properties to get correct calculations.
jQuery.swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};


var
	// Swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rnumsplit = new RegExp( "^(" + pnum + ")(.*)$", "i" ),
	rrelNum = new RegExp( "^([+-])=(" + pnum + ")", "i" ),

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];

// Return a css property mapped to a potentially vendor prefixed property
function vendorPropName( style, name ) {

	// Shortcut for names that are not vendor prefixed
	if ( name in style ) {
		return name;
	}

	// Check for vendor prefixed names
	var capName = name[0].toUpperCase() + name.slice(1),
		origName = name,
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in style ) {
			return name;
		}
	}

	return origName;
}

function setPositiveNumber( elem, value, subtract ) {
	var matches = rnumsplit.exec( value );
	return matches ?
		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?
		// If we already have the right measurement, avoid augmentation
		4 :
		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {
		// Both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {
			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// At this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {
			// At this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// At this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var valueIsBorderBox = true,
		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		styles = getStyles( elem ),
		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// Some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {
		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test(val) ) {
			return val;
		}

		// Check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox &&
			( support.boxSizingReliable() || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// Use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

function showHide( elements, show ) {
	var display, elem, hidden,
		values = [],
		index = 0,
		length = elements.length;

	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		values[ index ] = data_priv.get( elem, "olddisplay" );
		display = elem.style.display;
		if ( show ) {
			// Reset the inline display of this element to learn if it is
			// being hidden by cascaded rules or not
			if ( !values[ index ] && display === "none" ) {
				elem.style.display = "";
			}

			// Set elements which have been overridden with display: none
			// in a stylesheet to whatever the default browser style is
			// for such an element
			if ( elem.style.display === "" && isHidden( elem ) ) {
				values[ index ] = data_priv.access( elem, "olddisplay", defaultDisplay(elem.nodeName) );
			}
		} else {
			hidden = isHidden( elem );

			if ( display !== "none" || !hidden ) {
				data_priv.set( elem, "olddisplay", hidden ? display : jQuery.css( elem, "display" ) );
			}
		}
	}

	// Set the display of most of the elements in a second loop
	// to avoid the constant reflow
	for ( index = 0; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
			elem.style.display = show ? values[ index ] || "" : "none";
		}
	}

	return elements;
}

jQuery.extend({

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		"float": "cssFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && (ret = rrelNum.exec( value )) ) {
				value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number, add 'px' to the (except for certain CSS properties)
			if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
				value += "px";
			}

			// Support: IE9-11+
			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {
				style[ name ] = value;
			}

		} else {
			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;
		}
		return val;
	}
});

jQuery.each([ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) && elem.offsetWidth === 0 ?
					jQuery.swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, name, extra );
					}) :
					getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var styles = extra && getStyles( elem );
			return setPositiveNumber( elem, value, extra ?
				augmentWidthOrHeight(
					elem,
					name,
					extra,
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				) : 0
			);
		}
	};
});

// Support: Android 2.3
jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
	function( elem, computed ) {
		if ( computed ) {
			return jQuery.swap( elem, { "display": "inline-block" },
				curCSS, [ elem, "marginRight" ] );
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each({
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
});

jQuery.fn.extend({
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	},
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each(function() {
			if ( isHidden( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		});
	}
});


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || "swing";
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			if ( tween.elem[ tween.prop ] != null &&
				(!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );
			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {
			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE9
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	}
};

jQuery.fx = Tween.prototype.init;

// Back Compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rfxnum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" ),
	rrun = /queueHooks$/,
	animationPrefilters = [ defaultPrefilter ],
	tweeners = {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value ),
				target = tween.cur(),
				parts = rfxnum.exec( value ),
				unit = parts && parts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

				// Starting value computation is required for potential unit mismatches
				start = ( jQuery.cssNumber[ prop ] || unit !== "px" && +target ) &&
					rfxnum.exec( jQuery.css( tween.elem, prop ) ),
				scale = 1,
				maxIterations = 20;

			if ( start && start[ 3 ] !== unit ) {
				// Trust units reported by jQuery.css
				unit = unit || start[ 3 ];

				// Make sure we update the tween properties later on
				parts = parts || [];

				// Iteratively approximate from a nonzero starting point
				start = +target || 1;

				do {
					// If previous iteration zeroed out, double until we get *something*.
					// Use string for doubling so we don't accidentally see scale as unchanged below
					scale = scale || ".5";

					// Adjust and apply
					start = start / scale;
					jQuery.style( tween.elem, prop, start + unit );

				// Update scale, tolerating zero or NaN from tween.cur(),
				// break the loop if scale is unchanged or perfect, or if we've just had enough
				} while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
			}

			// Update tween properties
			if ( parts ) {
				start = tween.start = +start || +target || 0;
				tween.unit = unit;
				// If a +=/-= token was provided, we're doing a relative animation
				tween.end = parts[ 1 ] ?
					start + ( parts[ 1 ] + 1 ) * parts[ 2 ] :
					+parts[ 2 ];
			}

			return tween;
		} ]
	};

// Animations created synchronously will run synchronously
function createFxNow() {
	setTimeout(function() {
		fxNow = undefined;
	});
	return ( fxNow = jQuery.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( (tween = collection[ index ].call( animation, prop, value )) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	/* jshint validthis: true */
	var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHidden( elem ),
		dataShow = data_priv.get( elem, "fxshow" );

	// Handle queue: false promises
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always(function() {
			// Ensure the complete handler is called before this completes
			anim.always(function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			});
		});
	}

	// Height/width overflow pass
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
		// Make sure that nothing sneaks out
		// Record all 3 overflow attributes because IE9-10 do not
		// change the overflow attribute when overflowX and
		// overflowY are set to the same value
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Set display property to inline-block for height/width
		// animations on inline elements that are having width/height animated
		display = jQuery.css( elem, "display" );

		// Test default display if display is currently "none"
		checkDisplay = display === "none" ?
			data_priv.get( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;

		if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {
			style.display = "inline-block";
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always(function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		});
	}

	// show/hide pass
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.exec( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );

		// Any non-fx value stops us from restoring the original display value
		} else {
			display = undefined;
		}
	}

	if ( !jQuery.isEmptyObject( orig ) ) {
		if ( dataShow ) {
			if ( "hidden" in dataShow ) {
				hidden = dataShow.hidden;
			}
		} else {
			dataShow = data_priv.access( elem, "fxshow", {} );
		}

		// Store state if its toggle - enables .stop().toggle() to "reverse"
		if ( toggle ) {
			dataShow.hidden = !hidden;
		}
		if ( hidden ) {
			jQuery( elem ).show();
		} else {
			anim.done(function() {
				jQuery( elem ).hide();
			});
		}
		anim.done(function() {
			var prop;

			data_priv.remove( elem, "fxshow" );
			for ( prop in orig ) {
				jQuery.style( elem, prop, orig[ prop ] );
			}
		});
		for ( prop in orig ) {
			tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = tween.start;
				if ( hidden ) {
					tween.end = tween.start;
					tween.start = prop === "width" || prop === "height" ? 1 : 0;
				}
			}
		}

	// If this is a noop like .hide().hide(), restore an overwritten display value
	} else if ( (display === "none" ? defaultDisplay( elem.nodeName ) : display) === "inline" ) {
		style.display = display;
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = animationPrefilters.length,
		deferred = jQuery.Deferred().always( function() {
			// Don't match elem in the :animated selector
			delete tick.elem;
		}),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
				// Support: Android 2.3
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ]);

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise({
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, { specialEasing: {} }, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,
					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		}),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length ; index++ ) {
		result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		})
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

jQuery.Animation = jQuery.extend( Animation, {

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.split(" ");
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			tweeners[ prop ] = tweeners[ prop ] || [];
			tweeners[ prop ].unshift( callback );
		}
	},

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			animationPrefilters.unshift( callback );
		} else {
			animationPrefilters.push( callback );
		}
	}
});

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
		opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend({
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHidden ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate({ opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {
				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || data_priv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each(function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = data_priv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		});
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each(function() {
			var index,
				data = data_priv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		});
	}
});

jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
});

// Generate shortcuts for custom animations
jQuery.each({
	slideDown: genFx("show"),
	slideUp: genFx("hide"),
	slideToggle: genFx("toggle"),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
});

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];
		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	if ( timer() ) {
		jQuery.fx.start();
	} else {
		jQuery.timers.pop();
	}
};

jQuery.fx.interval = 13;

jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	clearInterval( timerId );
	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,
	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = setTimeout( next, time );
		hooks.stop = function() {
			clearTimeout( timeout );
		};
	});
};


(function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: iOS<=5.1, Android<=4.2+
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE<=11+
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: Android<=2.3
	// Options inside disabled selects are incorrectly marked as disabled
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Support: IE<=11+
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
})();


var nodeHook, boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend({
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each(function() {
			jQuery.removeAttr( this, name );
		});
	}
});

jQuery.extend({
	attr: function( elem, name, value ) {
		var hooks, ret,
			nType = elem.nodeType;

		// don't get/set attributes on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === strundefined ) {
			return jQuery.prop( elem, name, value );
		}

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {

			if ( value === null ) {
				jQuery.removeAttr( elem, name );

			} else if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				elem.setAttribute( name, value + "" );
				return value;
			}

		} else if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
			return ret;

		} else {
			ret = jQuery.find.attr( elem, name );

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ?
				undefined :
				ret;
		}
	},

	removeAttr: function( elem, value ) {
		var name, propName,
			i = 0,
			attrNames = value && value.match( rnotwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( (name = attrNames[i++]) ) {
				propName = jQuery.propFix[ name ] || name;

				// Boolean attributes get special treatment (#10870)
				if ( jQuery.expr.match.bool.test( name ) ) {
					// Set corresponding property to false
					elem[ propName ] = false;
				}

				elem.removeAttribute( name );
			}
		}
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					jQuery.nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	}
});

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {
			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};
jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle;
		if ( !isXML ) {
			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ name ];
			attrHandle[ name ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				name.toLowerCase() :
				null;
			attrHandle[ name ] = handle;
		}
		return ret;
	};
});




var rfocusable = /^(?:input|select|textarea|button)$/i;

jQuery.fn.extend({
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each(function() {
			delete this[ jQuery.propFix[ name ] || name ];
		});
	}
});

jQuery.extend({
	propFix: {
		"for": "htmlFor",
		"class": "className"
	},

	prop: function( elem, name, value ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		if ( notxml ) {
			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			return hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ?
				ret :
				( elem[ name ] = value );

		} else {
			return hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ?
				ret :
				elem[ name ];
		}
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {
				return elem.hasAttribute( "tabindex" ) || rfocusable.test( elem.nodeName ) || elem.href ?
					elem.tabIndex :
					-1;
			}
		}
	}
});

if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {
			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		}
	};
}

jQuery.each([
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
});




var rclass = /[\t\r\n\f]/g;

jQuery.fn.extend({
	addClass: function( value ) {
		var classes, elem, cur, clazz, j, finalValue,
			proceed = typeof value === "string" && value,
			i = 0,
			len = this.length;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).addClass( value.call( this, j, this.className ) );
			});
		}

		if ( proceed ) {
			// The disjunction here is for better compressibility (see removeClass)
			classes = ( value || "" ).match( rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					" "
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// only assign if different to avoid unneeded rendering.
					finalValue = jQuery.trim( cur );
					if ( elem.className !== finalValue ) {
						elem.className = finalValue;
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, clazz, j, finalValue,
			proceed = arguments.length === 0 || typeof value === "string" && value,
			i = 0,
			len = this.length;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).removeClass( value.call( this, j, this.className ) );
			});
		}
		if ( proceed ) {
			classes = ( value || "" ).match( rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					""
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) >= 0 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = value ? jQuery.trim( cur ) : "";
					if ( elem.className !== finalValue ) {
						elem.className = finalValue;
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value;

		if ( typeof stateVal === "boolean" && type === "string" ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( i ) {
				jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
			});
		}

		return this.each(function() {
			if ( type === "string" ) {
				// Toggle individual class names
				var className,
					i = 0,
					self = jQuery( this ),
					classNames = value.match( rnotwhite ) || [];

				while ( (className = classNames[ i++ ]) ) {
					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( type === strundefined || type === "boolean" ) {
				if ( this.className ) {
					// store className if set
					data_priv.set( this, "__className__", this.className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				this.className = this.className || value === false ? "" : data_priv.get( this, "__className__" ) || "";
			}
		});
	},

	hasClass: function( selector ) {
		var className = " " + selector + " ",
			i = 0,
			l = this.length;
		for ( ; i < l; i++ ) {
			if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
				return true;
			}
		}

		return false;
	}
});




var rreturn = /\r/g;

jQuery.fn.extend({
	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[0];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?
					// Handle most common string cases
					ret.replace(rreturn, "") :
					// Handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each(function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				});
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		});
	}
});

jQuery.extend({
	valHooks: {
		option: {
			get: function( elem ) {
				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :
					// Support: IE10-11+
					// option.text throws exceptions (#14686, #14858)
					jQuery.trim( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one" || index < 0,
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// IE6-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&
							// Don't return options that are disabled or in a disabled optgroup
							( support.optDisabled ? !option.disabled : option.getAttribute( "disabled" ) === null ) &&
							( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];
					if ( (option.selected = jQuery.inArray( option.value, values ) >= 0) ) {
						optionSet = true;
					}
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
});

// Radios and checkboxes getter/setter
jQuery.each([ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute("value") === null ? "on" : elem.value;
		};
	}
});




// Return jQuery for attributes-only inclusion


jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
});

jQuery.fn.extend({
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	},

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {
		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
	}
});


var nonce = jQuery.now();

var rquery = (/\?/);



// Support: Android 2.3
// Workaround failure to string-cast null input
jQuery.parseJSON = function( data ) {
	return JSON.parse( data + "" );
};


// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml, tmp;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE9
	try {
		tmp = new DOMParser();
		xml = tmp.parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rhash = /#.*$/,
	rts = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Document location
	ajaxLocation = window.location.href,

	// Segment location into parts
	ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

		if ( jQuery.isFunction( func ) ) {
			// For each dataType in the dataTypeExpression
			while ( (dataType = dataTypes[i++]) ) {
				// Prepend if requested
				if ( dataType[0] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					(structure[ dataType ] = structure[ dataType ] || []).unshift( func );

				// Otherwise append
				} else {
					(structure[ dataType ] = structure[ dataType ] || []).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {
				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		});
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {
		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}
		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},
		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

		// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {
								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s[ "throws" ] ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend({

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: ajaxLocation,
		type: "GET",
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /xml/,
			html: /html/,
			json: /json/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,
			// URL without anti-cache param
			cacheURL,
			// Response headers
			responseHeadersString,
			responseHeaders,
			// timeout handle
			timeoutTimer,
			// Cross-domain detection vars
			parts,
			// To know if global events are to be dispatched
			fireGlobals,
			// Loop variable
			i,
			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),
			// Callbacks context
			callbackContext = s.context || s,
			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,
			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks("once memory"),
			// Status-dependent callbacks
			statusCode = s.statusCode || {},
			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},
			// The jqXHR state
			state = 0,
			// Default abort message
			strAbort = "canceled",
			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( (match = rheaders.exec( responseHeadersString )) ) {
								responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					var lname = name.toLowerCase();
					if ( !state ) {
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( state < 2 ) {
							for ( code in map ) {
								// Lazy-add the new callback in a way that preserves old ones
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						} else {
							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR ).complete = completeDeferred.add;
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace( rhash, "" )
			.replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

		// A cross-domain request is in order when we have a protocol:host:port mismatch
		if ( s.crossDomain == null ) {
			parts = rurl.exec( s.url.toLowerCase() );
			s.crossDomain = !!( parts &&
				( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )
			);
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger("ajaxStart");
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		cacheURL = s.url;

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add anti-cache in url if needed
			if ( s.cache === false ) {
				s.url = rts.test( cacheURL ) ?

					// If there is already a '_' parameter, set its value
					cacheURL.replace( rts, "$1_=" + nonce++ ) :

					// Otherwise add one to the end
					cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
			}
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
				s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}
			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = setTimeout(function() {
					jqXHR.abort("timeout");
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch ( e ) {
				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );
				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader("Last-Modified");
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader("etag");
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {
				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger("ajaxStop");
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
});

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {
		// Shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		return jQuery.ajax({
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		});
	};
});


jQuery._evalUrl = function( url ) {
	return jQuery.ajax({
		url: url,
		type: "GET",
		dataType: "script",
		async: false,
		global: false,
		"throws": true
	});
};


jQuery.fn.extend({
	wrapAll: function( html ) {
		var wrap;

		if ( jQuery.isFunction( html ) ) {
			return this.each(function( i ) {
				jQuery( this ).wrapAll( html.call(this, i) );
			});
		}

		if ( this[ 0 ] ) {

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map(function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			}).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function( i ) {
				jQuery( this ).wrapInner( html.call(this, i) );
			});
		}

		return this.each(function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		});
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each(function( i ) {
			jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
		});
	},

	unwrap: function() {
		return this.parent().each(function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		}).end();
	}
});


jQuery.expr.filters.hidden = function( elem ) {
	// Support: Opera <= 12.12
	// Opera reports offsetWidths and offsetHeights less than zero on some elements
	return elem.offsetWidth <= 0 && elem.offsetHeight <= 0;
};
jQuery.expr.filters.visible = function( elem ) {
	return !jQuery.expr.filters.hidden( elem );
};




var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {
		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {
				// Treat each array item as a scalar.
				add( prefix, v );

			} else {
				// Item is non-scalar (array or object), encode its numeric index.
				buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
			}
		});

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {
		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {
		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, value ) {
			// If value is a function, invoke it and return its value
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
		};

	// Set traditional to true for jQuery <= 1.3.2 behavior.
	if ( traditional === undefined ) {
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		});

	} else {
		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" ).replace( r20, "+" );
};

jQuery.fn.extend({
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map(function() {
			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		})
		.filter(function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		})
		.map(function( i, elem ) {
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val ) {
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					}) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		}).get();
	}
});


jQuery.ajaxSettings.xhr = function() {
	try {
		return new XMLHttpRequest();
	} catch( e ) {}
};

var xhrId = 0,
	xhrCallbacks = {},
	xhrSuccessStatus = {
		// file protocol always yields status code 0, assume 200
		0: 200,
		// Support: IE9
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

// Support: IE9
// Open requests must be manually aborted on unload (#5280)
// See https://support.microsoft.com/kb/2856746 for more info
if ( window.attachEvent ) {
	window.attachEvent( "onunload", function() {
		for ( var key in xhrCallbacks ) {
			xhrCallbacks[ key ]();
		}
	});
}

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport(function( options ) {
	var callback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr(),
					id = ++xhrId;

				xhr.open( options.type, options.url, options.async, options.username, options.password );

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers["X-Requested-With"] ) {
					headers["X-Requested-With"] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							delete xhrCallbacks[ id ];
							callback = xhr.onload = xhr.onerror = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {
								complete(
									// file: protocol always yields status 0; see #8605, #14207
									xhr.status,
									xhr.statusText
								);
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,
									// Support: IE9
									// Accessing binary-data responseText throws an exception
									// (#11426)
									typeof xhr.responseText === "string" ? {
										text: xhr.responseText
									} : undefined,
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				xhr.onerror = callback("error");

				// Create the abort callback
				callback = xhrCallbacks[ id ] = callback("abort");

				try {
					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {
					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
});




// Install script dataType
jQuery.ajaxSetup({
	accepts: {
		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /(?:java|ecma)script/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
});

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
});

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {
	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery("<script>").prop({
					async: true,
					charset: s.scriptCharset,
					src: s.url
				}).on(
					"load error",
					callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					}
				);
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
});




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup({
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
});

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters["script json"] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always(function() {
			// Restore preexisting value
			window[ callbackName ] = overwritten;

			// Save back as free
			if ( s[ callbackName ] ) {
				// make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		});

		// Delegate to script
		return "script";
	}
});




// data: string of html
// context (optional): If specified, the fragment will be created in this context, defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( !data || typeof data !== "string" ) {
		return null;
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}
	context = context || document;

	var parsed = rsingleTag.exec( data ),
		scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[1] ) ];
	}

	parsed = jQuery.buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


// Keep a copy of the old load method
var _load = jQuery.fn.load;

/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	if ( typeof url !== "string" && _load ) {
		return _load.apply( this, arguments );
	}

	var selector, type, response,
		self = this,
		off = url.indexOf(" ");

	if ( off >= 0 ) {
		selector = jQuery.trim( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax({
			url: url,

			// if "type" variable is undefined, then "GET" method will be used
			type: type,
			dataType: "html",
			data: params
		}).done(function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		}).complete( callback && function( jqXHR, status ) {
			self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
		});
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
});




jQuery.expr.filters.animated = function( elem ) {
	return jQuery.grep(jQuery.timers, function( fn ) {
		return elem === fn.elem;
	}).length;
};




var docElem = window.document.documentElement;

/**
 * Gets a window from an element
 */
function getWindow( elem ) {
	return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
}

jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf("auto") > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {
			options = options.call( elem, i, curOffset );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend({
	offset: function( options ) {
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each(function( i ) {
					jQuery.offset.setOffset( this, options, i );
				});
		}

		var docElem, win,
			elem = this[ 0 ],
			box = { top: 0, left: 0 },
			doc = elem && elem.ownerDocument;

		if ( !doc ) {
			return;
		}

		docElem = doc.documentElement;

		// Make sure it's not a disconnected DOM node
		if ( !jQuery.contains( docElem, elem ) ) {
			return box;
		}

		// Support: BlackBerry 5, iOS 3 (original iPhone)
		// If we don't have gBCR, just use 0,0 rather than error
		if ( typeof elem.getBoundingClientRect !== strundefined ) {
			box = elem.getBoundingClientRect();
		}
		win = getWindow( doc );
		return {
			top: box.top + win.pageYOffset - docElem.clientTop,
			left: box.left + win.pageXOffset - docElem.clientLeft
		};
	},

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {
			// Assume getBoundingClientRect is there when computed position is fixed
			offset = elem.getBoundingClientRect();

		} else {
			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset.top += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	offsetParent: function() {
		return this.map(function() {
			var offsetParent = this.offsetParent || docElem;

			while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) && jQuery.css( offsetParent, "position" ) === "static" ) ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || docElem;
		});
	}
});

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : window.pageXOffset,
					top ? val : window.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length, null );
	};
});

// Support: Safari<7+, Chrome<37+
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );
				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
});


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {
					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
					// isn't a whole lot we can do. See pull request at this URL for discussion:
					// https://github.com/jquery/jquery/pull/764
					return elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?
					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable, null );
		};
	});
});


// The number of elements contained in the matched element set
jQuery.fn.size = function() {
	return this.length;
};

jQuery.fn.andSelf = jQuery.fn.addBack;




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( true ) {
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
		return jQuery;
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
}




var
	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( typeof noGlobal === strundefined ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;

}));


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(439);


/***/ }),

/***/ 421:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(0);

/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 439:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(421), __webpack_require__(440), __webpack_require__(441) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "data",
	    name: "Data source",
	    category: "framework",
	    description: "Powerful component for using local and remote data.Fully supports CRUD, Sorting, Paging, Filtering, Grouping, and Aggregates.",
	    depends: [ "core" ],
	    features: [ {
	        id: "data-odata",
	        name: "OData",
	        description: "Support for accessing Open Data Protocol (OData) services.",
	        depends: [ "data.odata" ]
	    }, {
	        id: "data-signalr",
	        name: "SignalR",
	        description: "Support for binding to SignalR hubs.",
	        depends: [ "data.signalr" ]
	    }, {
	        id: "data-XML",
	        name: "XML",
	        description: "Support for binding to XML.",
	        depends: [ "data.xml" ]
	    }]
	};

	/*jshint eqnull: true, loopfunc: true, evil: true */
	(function($, undefined) {
	    var extend = $.extend,
	        proxy = $.proxy,
	        isPlainObject = $.isPlainObject,
	        isEmptyObject = $.isEmptyObject,
	        isArray = $.isArray,
	        grep = $.grep,
	        ajax = $.ajax,
	        map,
	        each = $.each,
	        noop = $.noop,
	        kendo = window.kendo,
	        isFunction = kendo.isFunction,
	        Observable = kendo.Observable,
	        Class = kendo.Class,
	        STRING = "string",
	        FUNCTION = "function",
	        CREATE = "create",
	        READ = "read",
	        UPDATE = "update",
	        DESTROY = "destroy",
	        CHANGE = "change",
	        SYNC = "sync",
	        GET = "get",
	        ERROR = "error",
	        REQUESTSTART = "requestStart",
	        PROGRESS = "progress",
	        REQUESTEND = "requestEnd",
	        crud = [CREATE, READ, UPDATE, DESTROY],
	        identity = function(o) { return o; },
	        getter = kendo.getter,
	        stringify = kendo.stringify,
	        math = Math,
	        push = [].push,
	        join = [].join,
	        pop = [].pop,
	        splice = [].splice,
	        shift = [].shift,
	        slice = [].slice,
	        unshift = [].unshift,
	        toString = {}.toString,
	        stableSort = kendo.support.stableSort,
	        dateRegExp = /^\/Date\((.*?)\)\/$/;

	    var ObservableArray = Observable.extend({
	        init: function(array, type) {
	            var that = this;

	            that.type = type || ObservableObject;

	            Observable.fn.init.call(that);

	            that.length = array.length;

	            that.wrapAll(array, that);
	        },

	        at: function(index) {
	            return this[index];
	        },

	        toJSON: function() {
	            var idx, length = this.length, value, json = new Array(length);

	            for (idx = 0; idx < length; idx++){
	                value = this[idx];

	                if (value instanceof ObservableObject) {
	                    value = value.toJSON();
	                }

	                json[idx] = value;
	            }

	            return json;
	        },

	        parent: noop,

	        wrapAll: function(source, target) {
	            var that = this,
	                idx,
	                length,
	                parent = function() {
	                    return that;
	                };

	            target = target || [];

	            for (idx = 0, length = source.length; idx < length; idx++) {
	                target[idx] = that.wrap(source[idx], parent);
	            }

	            return target;
	        },

	        wrap: function(object, parent) {
	            var that = this,
	                observable;

	            if (object !== null && toString.call(object) === "[object Object]") {
	                observable = object instanceof that.type || object instanceof Model;

	                if (!observable) {
	                    object = object instanceof ObservableObject ? object.toJSON() : object;
	                    object = new that.type(object);
	                }

	                object.parent = parent;

	                object.bind(CHANGE, function(e) {
	                    that.trigger(CHANGE, {
	                        field: e.field,
	                        node: e.node,
	                        index: e.index,
	                        items: e.items || [this],
	                        action: e.node ? (e.action || "itemloaded") : "itemchange"
	                    });
	                });
	            }

	            return object;
	        },

	        push: function() {
	            var index = this.length,
	                items = this.wrapAll(arguments),
	                result;

	            result = push.apply(this, items);

	            this.trigger(CHANGE, {
	                action: "add",
	                index: index,
	                items: items
	            });

	            return result;
	        },

	        slice: slice,

	        sort: [].sort,

	        join: join,

	        pop: function() {
	            var length = this.length, result = pop.apply(this);

	            if (length) {
	                this.trigger(CHANGE, {
	                    action: "remove",
	                    index: length - 1,
	                    items:[result]
	                });
	            }

	            return result;
	        },

	        splice: function(index, howMany, item) {
	            var items = this.wrapAll(slice.call(arguments, 2)),
	                result, i, len;

	            result = splice.apply(this, [index, howMany].concat(items));

	            if (result.length) {
	                this.trigger(CHANGE, {
	                    action: "remove",
	                    index: index,
	                    items: result
	                });

	                for (i = 0, len = result.length; i < len; i++) {
	                    if (result[i] && result[i].children) {
	                        result[i].unbind(CHANGE);
	                    }
	                }
	            }

	            if (item) {
	                this.trigger(CHANGE, {
	                    action: "add",
	                    index: index,
	                    items: items
	                });
	            }
	            return result;
	        },

	        shift: function() {
	            var length = this.length, result = shift.apply(this);

	            if (length) {
	                this.trigger(CHANGE, {
	                    action: "remove",
	                    index: 0,
	                    items:[result]
	                });
	            }

	            return result;
	        },

	        unshift: function() {
	            var items = this.wrapAll(arguments),
	                result;

	            result = unshift.apply(this, items);

	            this.trigger(CHANGE, {
	                action: "add",
	                index: 0,
	                items: items
	            });

	            return result;
	        },

	        indexOf: function(item) {
	            var that = this,
	                idx,
	                length;

	            for (idx = 0, length = that.length; idx < length; idx++) {
	                if (that[idx] === item) {
	                    return idx;
	                }
	            }
	            return -1;
	        },

	        forEach: function(callback) {
	            var idx = 0,
	                length = this.length;

	            for (; idx < length; idx++) {
	                callback(this[idx], idx, this);
	            }
	        },

	        map: function(callback) {
	            var idx = 0,
	                result = [],
	                length = this.length;

	            for (; idx < length; idx++) {
	                result[idx] = callback(this[idx], idx, this);
	            }

	            return result;
	        },

	        reduce: function(callback) {
	            var idx = 0,
	                result,
	                length = this.length;

	            if (arguments.length == 2) {
	                result = arguments[1];
	            } else if (idx < length) {
	                result = this[idx++];
	            }

	            for (; idx < length; idx++) {
	                result = callback(result, this[idx], idx, this);
	            }

	            return result;
	        },

	        reduceRight: function(callback) {
	            var idx = this.length - 1,
	                result;

	            if (arguments.length == 2) {
	                result = arguments[1];
	            } else if (idx > 0) {
	                result = this[idx--];
	            }

	            for (; idx >= 0; idx--) {
	                result = callback(result, this[idx], idx, this);
	            }

	            return result;
	        },

	        filter: function(callback) {
	            var idx = 0,
	                result = [],
	                item,
	                length = this.length;

	            for (; idx < length; idx++) {
	                item = this[idx];
	                if (callback(item, idx, this)) {
	                    result[result.length] = item;
	                }
	            }

	            return result;
	        },

	        find: function(callback) {
	            var idx = 0,
	                item,
	                length = this.length;

	            for (; idx < length; idx++) {
	                item = this[idx];
	                if (callback(item, idx, this)) {
	                    return item;
	                }
	            }
	        },

	        every: function(callback) {
	            var idx = 0,
	                item,
	                length = this.length;

	            for (; idx < length; idx++) {
	                item = this[idx];
	                if (!callback(item, idx, this)) {
	                    return false;
	                }
	            }

	            return true;
	        },

	        some: function(callback) {
	            var idx = 0,
	                item,
	                length = this.length;

	            for (; idx < length; idx++) {
	                item = this[idx];
	                if (callback(item, idx, this)) {
	                    return true;
	                }
	            }

	            return false;
	        },

	        // non-standard collection methods
	        remove: function(item) {
	            var idx = this.indexOf(item);

	            if (idx !== -1) {
	                this.splice(idx, 1);
	            }
	        },

	        empty: function() {
	            this.splice(0, this.length);
	        }
	    });

	    // Polyfill for Symbol.iterator
	    if (typeof Symbol !== "undefined" && Symbol.iterator && !ObservableArray.prototype[Symbol.iterator]) {
	        ObservableArray.prototype[Symbol.iterator] = [][Symbol.iterator];
	    }

	    var LazyObservableArray = ObservableArray.extend({
	        init: function(data, type) {
	            Observable.fn.init.call(this);

	            this.type = type || ObservableObject;

	            for (var idx = 0; idx < data.length; idx++) {
	                this[idx] = data[idx];
	            }

	            this.length = idx;
	            this._parent = proxy(function() { return this; }, this);
	        },
	        at: function(index) {
	            var item = this[index];

	            if (!(item instanceof this.type)) {
	                item = this[index] = this.wrap(item, this._parent);
	            } else {
	                item.parent = this._parent;
	            }

	            return item;
	        }
	    });

	    function eventHandler(context, type, field, prefix) {
	        return function(e) {
	            var event = {}, key;

	            for (key in e) {
	                event[key] = e[key];
	            }

	            if (prefix) {
	                event.field = field + "." + e.field;
	            } else {
	                event.field = field;
	            }

	            if (type == CHANGE && context._notifyChange) {
	                context._notifyChange(event);
	            }

	            context.trigger(type, event);
	        };
	    }

	    var ObservableObject = Observable.extend({
	        init: function(value) {
	            var that = this,
	                member,
	                field,
	                parent = function() {
	                    return that;
	                };

	            Observable.fn.init.call(this);

	            this._handlers = {};

	            for (field in value) {
	                member = value[field];

	                if (typeof member === "object" && member && !member.getTime && field.charAt(0) != "_") {
	                    member = that.wrap(member, field, parent);
	                }

	                that[field] = member;
	            }

	            that.uid = kendo.guid();
	        },

	        shouldSerialize: function(field) {
	            return this.hasOwnProperty(field) && field !== "_handlers" && field !== "_events" && typeof this[field] !== FUNCTION && field !== "uid";
	        },

	        forEach: function(f) {
	            for (var i in this) {
	                if (this.shouldSerialize(i)) {
	                    f(this[i], i);
	                }
	            }
	        },

	        toJSON: function() {
	            var result = {}, value, field;

	            for (field in this) {
	                if (this.shouldSerialize(field)) {
	                    value = this[field];

	                    if (value instanceof ObservableObject || value instanceof ObservableArray) {
	                        value = value.toJSON();
	                    }

	                    result[field] = value;
	                }
	            }

	            return result;
	        },

	        get: function(field) {
	            var that = this, result;

	            that.trigger(GET, { field: field });

	            if (field === "this") {
	                result = that;
	            } else {
	                result = kendo.getter(field, true)(that);
	            }

	            return result;
	        },

	        _set: function(field, value) {
	            var that = this;
	            var composite = field.indexOf(".") >= 0;

	            if (composite) {
	                var paths = field.split("."),
	                    path = "";

	                while (paths.length > 1) {
	                    path += paths.shift();
	                    var obj = kendo.getter(path, true)(that);
	                    if (obj instanceof ObservableObject) {
	                        obj.set(paths.join("."), value);
	                        return composite;
	                    }
	                    path += ".";
	                }
	            }

	            kendo.setter(field)(that, value);

	            return composite;
	        },

	        set: function(field, value) {
	            var that = this,
	                isSetPrevented = false,
	                composite = field.indexOf(".") >= 0,
	                current = kendo.getter(field, true)(that);

	            if (current !== value) {
	                if (current instanceof Observable && this._handlers[field]) {
	                    if (this._handlers[field].get) {
	                       current.unbind(GET, this._handlers[field].get);
	                    }
	                    current.unbind(CHANGE, this._handlers[field].change);
	                }

	                isSetPrevented = that.trigger("set", { field: field, value: value });

	                if (!isSetPrevented) {
	                    if (!composite) {
	                        value = that.wrap(value, field, function() { return that; });
	                    }
	                    if (!that._set(field, value) || field.indexOf("(") >= 0 || field.indexOf("[") >= 0) {
	                        that.trigger(CHANGE, { field: field });
	                    }
	                }
	            }

	            return isSetPrevented;
	        },

	        parent: noop,

	        wrap: function(object, field, parent) {
	            var that = this;
	            var get;
	            var change;
	            var type = toString.call(object);

	            if (object != null && (type === "[object Object]" || type === "[object Array]")) {
	                var isObservableArray = object instanceof ObservableArray;
	                var isDataSource = object instanceof DataSource;

	                if (type === "[object Object]" && !isDataSource && !isObservableArray) {
	                    if (!(object instanceof ObservableObject)) {
	                        object = new ObservableObject(object);
	                    }

	                    get = eventHandler(that, GET, field, true);
	                    object.bind(GET, get);
	                    change = eventHandler(that, CHANGE, field, true);
	                    object.bind(CHANGE, change);

	                    that._handlers[field] = { get: get, change: change };
	                } else if (type === "[object Array]" || isObservableArray || isDataSource) {
	                    if (!isObservableArray && !isDataSource) {
	                        object = new ObservableArray(object);
	                    }

	                    change = eventHandler(that, CHANGE, field, false);

	                    object.bind(CHANGE, change);

	                    that._handlers[field] = { change: change };
	                }

	                object.parent = parent;
	            }

	            return object;
	        }
	    });

	    function equal(x, y) {
	        if (x === y) {
	            return true;
	        }

	        var xtype = $.type(x), ytype = $.type(y), field;

	        if (xtype !== ytype) {
	            return false;
	        }

	        if (xtype === "date") {
	            return x.getTime() === y.getTime();
	        }

	        if (xtype !== "object" && xtype !== "array") {
	            return false;
	        }

	        for (field in x) {
	            if (!equal(x[field], y[field])) {
	                return false;
	            }
	        }

	        return true;
	    }

	    var parsers = {
	        "number": function(value) {
	            return kendo.parseFloat(value);
	        },

	        "date": function(value) {
	            return kendo.parseDate(value);
	        },

	        "boolean": function(value) {
	            if (typeof value === STRING) {
	                return value.toLowerCase() === "true";
	            }
	            return value != null ? !!value : value;
	        },

	        "string": function(value) {
	            return value != null ? (value + "") : value;
	        },

	        "default": function(value) {
	            return value;
	        }
	    };

	    var defaultValues = {
	        "string": "",
	        "number": 0,
	        "date": new Date(),
	        "boolean": false,
	        "default": ""
	    };

	    function getFieldByName(obj, name) {
	        var field,
	            fieldName;

	        for (fieldName in obj) {
	            field = obj[fieldName];
	            if (isPlainObject(field) && field.field && field.field === name) {
	                return field;
	            } else if (field === name) {
	                return field;
	            }
	        }
	        return null;
	    }

	    var Model = ObservableObject.extend({
	        init: function(data) {
	            var that = this;

	            if (!data || $.isEmptyObject(data)) {
	                data = $.extend({}, that.defaults, data);

	                if (that._initializers) {
	                    for (var idx = 0; idx < that._initializers.length; idx++) {
	                         var name = that._initializers[idx];
	                         data[name] = that.defaults[name]();
	                    }
	                }
	            }

	            ObservableObject.fn.init.call(that, data);

	            that.dirty = false;

	            if (that.idField) {
	                that.id = that.get(that.idField);

	                if (that.id === undefined) {
	                    that.id = that._defaultId;
	                }
	            }
	        },

	        shouldSerialize: function(field) {
	            return ObservableObject.fn.shouldSerialize.call(this, field) && field !== "uid" && !(this.idField !== "id" && field === "id") && field !== "dirty" && field !== "_accessors";
	        },

	        _parse: function(field, value) {
	            var that = this,
	                fieldName = field,
	                fields = (that.fields || {}),
	                parse;

	            field = fields[field];
	            if (!field) {
	                field = getFieldByName(fields, fieldName);
	            }
	            if (field) {
	                parse = field.parse;
	                if (!parse && field.type) {
	                    parse = parsers[field.type.toLowerCase()];
	                }
	            }

	            return parse ? parse(value) : value;
	        },

	        _notifyChange: function(e) {
	            var action = e.action;

	            if (action == "add" || action == "remove") {
	                this.dirty = true;
	            }
	        },

	        editable: function(field) {
	            field = (this.fields || {})[field];
	            return field ? field.editable !== false : true;
	        },

	        set: function(field, value, initiator) {
	            var that = this;
	            var dirty = that.dirty;

	            if (that.editable(field)) {
	                value = that._parse(field, value);

	                if (!equal(value, that.get(field))) {
	                    that.dirty = true;

	                    if (ObservableObject.fn.set.call(that, field, value, initiator) && !dirty) {
	                        that.dirty = dirty;
	                    }
	                }
	            }
	        },

	        accept: function(data) {
	            var that = this,
	                parent = function() { return that; },
	                field;

	            for (field in data) {
	                var value = data[field];

	                if (field.charAt(0) != "_") {
	                    value = that.wrap(data[field], field, parent);
	                }

	                that._set(field, value);
	            }

	            if (that.idField) {
	                that.id = that.get(that.idField);
	            }

	            that.dirty = false;
	        },

	        isNew: function() {
	            return this.id === this._defaultId;
	        }
	    });

	    Model.define = function(base, options) {
	        if (options === undefined) {
	            options = base;
	            base = Model;
	        }

	        var model,
	            proto = extend({ defaults: {} }, options),
	            name,
	            field,
	            type,
	            value,
	            idx,
	            length,
	            fields = {},
	            originalName,
	            id = proto.id,
	            functionFields = [];

	        if (id) {
	            proto.idField = id;
	        }

	        if (proto.id) {
	            delete proto.id;
	        }

	        if (id) {
	            proto.defaults[id] = proto._defaultId = "";
	        }

	        if (toString.call(proto.fields) === "[object Array]") {
	            for (idx = 0, length = proto.fields.length; idx < length; idx++) {
	                field = proto.fields[idx];
	                if (typeof field === STRING) {
	                    fields[field] = {};
	                } else if (field.field) {
	                    fields[field.field] = field;
	                }
	            }
	            proto.fields = fields;
	        }

	        for (name in proto.fields) {
	            field = proto.fields[name];
	            type = field.type || "default";
	            value = null;
	            originalName = name;

	            name = typeof (field.field) === STRING ? field.field : name;

	            if (!field.nullable) {
	                value = proto.defaults[originalName !== name ? originalName : name] = field.defaultValue !== undefined ? field.defaultValue : defaultValues[type.toLowerCase()];

	                if (typeof value === "function") {
	                    functionFields.push(name);
	                }
	            }

	            if (options.id === name) {
	                proto._defaultId = value;
	            }

	            proto.defaults[originalName !== name ? originalName : name] = value;

	            field.parse = field.parse || parsers[type];
	        }

	        if (functionFields.length > 0) {
	            proto._initializers = functionFields;
	        }

	        model = base.extend(proto);
	        model.define = function(options) {
	            return Model.define(model, options);
	        };

	        if (proto.fields) {
	            model.fields = proto.fields;
	            model.idField = proto.idField;
	        }

	        return model;
	    };

	    var Comparer = {
	        selector: function(field) {
	            return isFunction(field) ? field : getter(field);
	        },

	        compare: function(field) {
	            var selector = this.selector(field);
	            return function (a, b) {
	                a = selector(a);
	                b = selector(b);

	                if (a == null && b == null) {
	                    return 0;
	                }

	                if (a == null) {
	                    return -1;
	                }

	                if (b == null) {
	                    return 1;
	                }

	                if (a.localeCompare) {
	                    return a.localeCompare(b);
	                }

	                return a > b ? 1 : (a < b ? -1 : 0);
	            };
	        },

	        create: function(sort) {
	            var compare = sort.compare || this.compare(sort.field);

	            if (sort.dir == "desc") {
	                return function(a, b) {
	                    return compare(b, a, true);
	                };
	            }

	            return compare;
	        },

	        combine: function(comparers) {
	            return function(a, b) {
	                var result = comparers[0](a, b),
	                    idx,
	                    length;

	                for (idx = 1, length = comparers.length; idx < length; idx ++) {
	                    result = result || comparers[idx](a, b);
	                }

	                return result;
	            };
	        }
	    };

	    var StableComparer = extend({}, Comparer, {
	        asc: function(field) {
	            var selector = this.selector(field);
	            return function (a, b) {
	                var valueA = selector(a);
	                var valueB = selector(b);

	                if (valueA && valueA.getTime && valueB && valueB.getTime) {
	                    valueA = valueA.getTime();
	                    valueB = valueB.getTime();
	                }

	                if (valueA === valueB) {
	                    return a.__position - b.__position;
	                }

	                if (valueA == null) {
	                    return -1;
	                }

	                if (valueB == null) {
	                    return 1;
	                }

	                if (valueA.localeCompare) {
	                    return valueA.localeCompare(valueB);
	                }

	                return valueA > valueB ? 1 : -1;
	            };
	        },

	        desc: function(field) {
	            var selector = this.selector(field);
	            return function (a, b) {
	                var valueA = selector(a);
	                var valueB = selector(b);

	                if (valueA && valueA.getTime && valueB && valueB.getTime) {
	                    valueA = valueA.getTime();
	                    valueB = valueB.getTime();
	                }

	                if (valueA === valueB) {
	                    return a.__position - b.__position;
	                }

	                if (valueA == null) {
	                    return 1;
	                }

	                if (valueB == null) {
	                    return -1;
	                }

	                if (valueB.localeCompare) {
	                    return valueB.localeCompare(valueA);
	                }

	                return valueA < valueB ? 1 : -1;
	            };
	        },
	        create: function(sort) {
	           return this[sort.dir](sort.field);
	        }
	    });

	    map = function (array, callback) {
	        var idx, length = array.length, result = new Array(length);

	        for (idx = 0; idx < length; idx++) {
	            result[idx] = callback(array[idx], idx, array);
	        }

	        return result;
	    };

	    var operators = (function(){

	        function quote(str) {
	            if (typeof str == "string") {
	                str = str.replace(/[\r\n]+/g, "");
	            }
	            return JSON.stringify(str);
	        }

	        function textOp(impl) {
	            return function(a, b, ignore) {
	                b += "";
	                if (ignore) {
	                    a = "(" + a + " || '').toLowerCase()";
	                    b = b.toLowerCase();
	                }
	                return impl(a, quote(b), ignore);
	            };
	        }

	        function operator(op, a, b, ignore) {
	            if (b != null) {
	                if (typeof b === STRING) {
	                    var date = dateRegExp.exec(b);
	                    if (date) {
	                        b = new Date(+date[1]);
	                    } else if (ignore) {
	                        b = quote(b.toLowerCase());
	                        a = "((" + a + " || '')+'').toLowerCase()";
	                    } else {
	                        b = quote(b);
	                    }
	                }

	                if (b.getTime) {
	                    //b looks like a Date
	                    a = "(" + a + "&&" + a + ".getTime?" + a + ".getTime():" + a + ")";
	                    b = b.getTime();
	                }
	            }

	            return a + " " + op + " " + b;
	        }

	        function getMatchRegexp(pattern) {
	            // take a pattern, as supported by Excel match filter, and
	            // convert it to the equivalent JS regular expression.
	            // Excel patterns support:
	            //
	            //   * - match any sequence of characters
	            //   ? - match a single character
	            //
	            // to match a literal * or ?, they must be prefixed by a tilde (~)
	            for (var rx = "/^", esc = false, i = 0; i < pattern.length; ++i) {
	                var ch = pattern.charAt(i);
	                if (esc) {
	                    rx += "\\" + ch;
	                } else if (ch == "~") {
	                    esc = true;
	                    continue;
	                } else if (ch == "*") {
	                    rx += ".*";
	                } else if (ch == "?") {
	                    rx += ".";
	                } else if (".+^$()[]{}|\\/\n\r\u2028\u2029\xA0".indexOf(ch) >= 0) {
	                    rx += "\\" + ch;
	                } else {
	                    rx += ch;
	                }
	                esc = false;
	            }
	            return rx + "$/";
	        }

	        return {
	            quote: function(value) {
	                if (value && value.getTime) {
	                    return "new Date(" + value.getTime() + ")";
	                }
	                return quote(value);
	            },
	            eq: function(a, b, ignore) {
	                return operator("==", a, b, ignore);
	            },
	            neq: function(a, b, ignore) {
	                return operator("!=", a, b, ignore);
	            },
	            gt: function(a, b, ignore) {
	                return operator(">", a, b, ignore);
	            },
	            gte: function(a, b, ignore) {
	                return operator(">=", a, b, ignore);
	            },
	            lt: function(a, b, ignore) {
	                return operator("<", a, b, ignore);
	            },
	            lte: function(a, b, ignore) {
	                return operator("<=", a, b, ignore);
	            },
	            startswith: textOp(function(a, b) {
	                return a + ".lastIndexOf(" + b + ", 0) == 0";
	            }),
	            doesnotstartwith: textOp(function(a, b) {
	                return a + ".lastIndexOf(" + b + ", 0) == -1";
	            }),
	            endswith: textOp(function(a, b) {
	                var n = b ? b.length - 2 : 0;
	                return a + ".indexOf(" + b + ", " + a + ".length - " + n + ") >= 0";
	            }),
	            doesnotendwith: textOp(function(a, b) {
	                var n = b ? b.length - 2 : 0;
	                return a + ".indexOf(" + b + ", " + a + ".length - " + n + ") < 0";
	            }),
	            contains: textOp(function(a, b) {
	                return a + ".indexOf(" + b + ") >= 0";
	            }),
	            doesnotcontain: textOp(function(a, b) {
	                return a + ".indexOf(" + b + ") == -1";
	            }),
	            matches: textOp(function(a, b){
	                b = b.substring(1, b.length - 1);
	                return getMatchRegexp(b) + ".test(" + a + ")";
	            }),
	            doesnotmatch: textOp(function(a, b){
	                b = b.substring(1, b.length - 1);
	                return "!" + getMatchRegexp(b) + ".test(" + a + ")";
	            }),
	            isempty: function(a) {
	                return a + " === ''";
	            },
	            isnotempty: function(a) {
	                return a + " !== ''";
	            },
	            isnull: function(a) {
	                return "(" + a + " == null)";
	            },
	            isnotnull: function(a) {
	                return "(" + a + " != null)";
	            }
	        };
	    })();

	    function Query(data) {
	        this.data = data || [];
	    }

	    Query.filterExpr = function(expression) {
	        var expressions = [],
	            logic = { and: " && ", or: " || " },
	            idx,
	            length,
	            filter,
	            expr,
	            fieldFunctions = [],
	            operatorFunctions = [],
	            field,
	            operator,
	            filters = expression.filters;

	        for (idx = 0, length = filters.length; idx < length; idx++) {
	            filter = filters[idx];
	            field = filter.field;
	            operator = filter.operator;

	            if (filter.filters) {
	                expr = Query.filterExpr(filter);
	                //Nested function fields or operators - update their index e.g. __o[0] -> __o[1]
	                filter = expr.expression
	                .replace(/__o\[(\d+)\]/g, function(match, index) {
	                    index = +index;
	                    return "__o[" + (operatorFunctions.length + index) + "]";
	                })
	                .replace(/__f\[(\d+)\]/g, function(match, index) {
	                    index = +index;
	                    return "__f[" + (fieldFunctions.length + index) + "]";
	                });

	                operatorFunctions.push.apply(operatorFunctions, expr.operators);
	                fieldFunctions.push.apply(fieldFunctions, expr.fields);
	            } else {
	                if (typeof field === FUNCTION) {
	                    expr = "__f[" + fieldFunctions.length +"](d)";
	                    fieldFunctions.push(field);
	                } else {
	                    expr = kendo.expr(field);
	                }

	                if (typeof operator === FUNCTION) {
	                    filter = "__o[" + operatorFunctions.length + "](" + expr + ", " + operators.quote(filter.value) + ")";
	                    operatorFunctions.push(operator);
	                } else {
	                    filter = operators[(operator || "eq").toLowerCase()](expr, filter.value, filter.ignoreCase !== undefined? filter.ignoreCase : true);
	                }
	            }

	            expressions.push(filter);
	        }

	        return  { expression: "(" + expressions.join(logic[expression.logic]) + ")", fields: fieldFunctions, operators: operatorFunctions };
	    };

	    function normalizeSort(field, dir) {
	        if (field) {
	            var descriptor = typeof field === STRING ? { field: field, dir: dir } : field,
	            descriptors = isArray(descriptor) ? descriptor : (descriptor !== undefined ? [descriptor] : []);

	            return grep(descriptors, function(d) { return !!d.dir; });
	        }
	    }

	    var operatorMap = {
	        "==": "eq",
	        equals: "eq",
	        isequalto: "eq",
	        equalto: "eq",
	        equal: "eq",
	        "!=": "neq",
	        ne: "neq",
	        notequals: "neq",
	        isnotequalto: "neq",
	        notequalto: "neq",
	        notequal: "neq",
	        "<": "lt",
	        islessthan: "lt",
	        lessthan: "lt",
	        less: "lt",
	        "<=": "lte",
	        le: "lte",
	        islessthanorequalto: "lte",
	        lessthanequal: "lte",
	        ">": "gt",
	        isgreaterthan: "gt",
	        greaterthan: "gt",
	        greater: "gt",
	        ">=": "gte",
	        isgreaterthanorequalto: "gte",
	        greaterthanequal: "gte",
	        ge: "gte",
	        notsubstringof: "doesnotcontain",
	        isnull: "isnull",
	        isempty: "isempty",
	        isnotempty: "isnotempty"
	    };

	    function normalizeOperator(expression) {
	        var idx,
	        length,
	        filter,
	        operator,
	        filters = expression.filters;

	        if (filters) {
	            for (idx = 0, length = filters.length; idx < length; idx++) {
	                filter = filters[idx];
	                operator = filter.operator;

	                if (operator && typeof operator === STRING) {
	                    filter.operator = operatorMap[operator.toLowerCase()] || operator;
	                }

	                normalizeOperator(filter);
	            }
	        }
	    }

	    function normalizeFilter(expression) {
	        if (expression && !isEmptyObject(expression)) {
	            if (isArray(expression) || !expression.filters) {
	                expression = {
	                    logic: "and",
	                    filters: isArray(expression) ? expression : [expression]
	                };
	            }

	            normalizeOperator(expression);

	            return expression;
	        }
	    }

	    Query.normalizeFilter = normalizeFilter;

	    function compareDescriptor(f1, f2) {
	        if (f1.logic || f2.logic) {
	            return false;
	        }

	        return f1.field === f2.field && f1.value === f2.value && f1.operator === f2.operator;
	    }

	    function normalizeDescriptor(filter) {
	        filter = filter || {};

	        if (isEmptyObject(filter)) {
	            return { logic: "and", filters: [] };
	        }

	        return normalizeFilter(filter);
	    }

	    function fieldComparer(a, b) {
	        if (b.logic || (a.field > b.field)) {
	            return 1;
	        } else if (a.field < b.field) {
	            return -1;
	        } else {
	            return 0;
	        }
	    }

	    function compareFilters(expr1, expr2) {
	        expr1 = normalizeDescriptor(expr1);
	        expr2 = normalizeDescriptor(expr2);

	        if (expr1.logic !== expr2.logic) {
	            return false;
	        }

	        var f1, f2;
	        var filters1 = (expr1.filters || []).slice();
	        var filters2 = (expr2.filters || []).slice();

	        if (filters1.length !== filters2.length) {
	            return false;
	        }

	        filters1 = filters1.sort(fieldComparer);
	        filters2 = filters2.sort(fieldComparer);

	        for (var idx = 0; idx < filters1.length; idx++) {
	            f1 = filters1[idx];
	            f2 = filters2[idx];

	            if (f1.logic && f2.logic) {
	                if (!compareFilters(f1, f2)) {
	                    return false;
	                }
	            } else if (!compareDescriptor(f1, f2)) {
	                return false;
	            }
	        }

	        return true;
	    }

	    Query.compareFilters = compareFilters;

	    function normalizeAggregate(expressions) {
	        return isArray(expressions) ? expressions : [expressions];
	    }

	    function normalizeGroup(field, dir) {
	        var descriptor = typeof field === STRING ? { field: field, dir: dir } : field,
	        descriptors = isArray(descriptor) ? descriptor : (descriptor !== undefined ? [descriptor] : []);

	        return map(descriptors, function(d) { return { field: d.field, dir: d.dir || "asc", aggregates: d.aggregates }; });
	    }

	    Query.prototype = {
	        toArray: function () {
	            return this.data;
	        },
	        range: function(index, count) {
	            return new Query(this.data.slice(index, index + count));
	        },
	        skip: function (count) {
	            return new Query(this.data.slice(count));
	        },
	        take: function (count) {
	            return new Query(this.data.slice(0, count));
	        },
	        select: function (selector) {
	            return new Query(map(this.data, selector));
	        },
	        order: function(selector, dir) {
	            var sort = { dir: dir };

	            if (selector) {
	                if (selector.compare) {
	                    sort.compare = selector.compare;
	                } else {
	                    sort.field = selector;
	                }
	            }

	            return new Query(this.data.slice(0).sort(Comparer.create(sort)));
	        },
	        orderBy: function(selector) {
	            return this.order(selector, "asc");
	        },
	        orderByDescending: function(selector) {
	            return this.order(selector, "desc");
	        },
	        sort: function(field, dir, comparer) {
	            var idx,
	            length,
	            descriptors = normalizeSort(field, dir),
	            comparers = [];

	            comparer = comparer || Comparer;

	            if (descriptors.length) {
	                for (idx = 0, length = descriptors.length; idx < length; idx++) {
	                    comparers.push(comparer.create(descriptors[idx]));
	                }

	                return this.orderBy({ compare: comparer.combine(comparers) });
	            }

	            return this;
	        },

	        filter: function(expressions) {
	            var idx,
	            current,
	            length,
	            compiled,
	            predicate,
	            data = this.data,
	            fields,
	            operators,
	            result = [],
	            filter;

	            expressions = normalizeFilter(expressions);

	            if (!expressions || expressions.filters.length === 0) {
	                return this;
	            }

	            compiled = Query.filterExpr(expressions);
	            fields = compiled.fields;
	            operators = compiled.operators;

	            predicate = filter = new Function("d, __f, __o", "return " + compiled.expression);

	            if (fields.length || operators.length) {
	                filter = function(d) {
	                    return predicate(d, fields, operators);
	                };
	            }


	            for (idx = 0, length = data.length; idx < length; idx++) {
	                current = data[idx];

	                if (filter(current)) {
	                    result.push(current);
	                }
	            }

	            return new Query(result);
	        },

	        group: function(descriptors, allData) {
	            descriptors =  normalizeGroup(descriptors || []);
	            allData = allData || this.data;

	            var that = this,
	            result = new Query(that.data),
	            descriptor;

	            if (descriptors.length > 0) {
	                descriptor = descriptors[0];
	                result = result.groupBy(descriptor).select(function(group) {
	                    var data = new Query(allData).filter([ { field: group.field, operator: "eq", value: group.value, ignoreCase: false } ]);
	                    return {
	                        field: group.field,
	                        value: group.value,
	                        items: descriptors.length > 1 ? new Query(group.items).group(descriptors.slice(1), data.toArray()).toArray() : group.items,
	                        hasSubgroups: descriptors.length > 1,
	                        aggregates: data.aggregate(descriptor.aggregates)
	                    };
	                });
	            }
	            return result;
	        },

	        groupBy: function(descriptor) {
	            if (isEmptyObject(descriptor) || !this.data.length) {
	                return new Query([]);
	            }

	            var field = descriptor.field,
	                sorted = this._sortForGrouping(field, descriptor.dir || "asc"),
	                accessor = kendo.accessor(field),
	                item,
	                groupValue = accessor.get(sorted[0], field),
	                group = {
	                    field: field,
	                    value: groupValue,
	                    items: []
	                },
	                currentValue,
	                idx,
	                len,
	                result = [group];

	            for(idx = 0, len = sorted.length; idx < len; idx++) {
	                item = sorted[idx];
	                currentValue = accessor.get(item, field);
	                if(!groupValueComparer(groupValue, currentValue)) {
	                    groupValue = currentValue;
	                    group = {
	                        field: field,
	                        value: groupValue,
	                        items: []
	                    };
	                    result.push(group);
	                }
	                group.items.push(item);
	            }
	            return new Query(result);
	        },

	        _sortForGrouping: function(field, dir) {
	            var idx, length,
	                data = this.data;

	            if (!stableSort) {
	                for (idx = 0, length = data.length; idx < length; idx++) {
	                    data[idx].__position = idx;
	                }

	                data = new Query(data).sort(field, dir, StableComparer).toArray();

	                for (idx = 0, length = data.length; idx < length; idx++) {
	                    delete data[idx].__position;
	                }
	                return data;
	            }
	            return this.sort(field, dir).toArray();
	        },

	        aggregate: function (aggregates) {
	            var idx,
	                len,
	                result = {},
	                state = {};

	            if (aggregates && aggregates.length) {
	                for(idx = 0, len = this.data.length; idx < len; idx++) {
	                    calculateAggregate(result, aggregates, this.data[idx], idx, len, state);
	                }
	            }
	            return result;
	        }
	    };

	    function groupValueComparer(a, b) {
	        if (a && a.getTime && b && b.getTime) {
	            return a.getTime() === b.getTime();
	        }
	        return a === b;
	    }

	    function calculateAggregate(accumulator, aggregates, item, index, length, state) {
	        aggregates = aggregates || [];
	        var idx,
	            aggr,
	            functionName,
	            len = aggregates.length;

	        for (idx = 0; idx < len; idx++) {
	            aggr = aggregates[idx];
	            functionName = aggr.aggregate;
	            var field = aggr.field;
	            accumulator[field] = accumulator[field] || {};
	            state[field] = state[field] || {};
	            state[field][functionName] = state[field][functionName] || {};
	            accumulator[field][functionName] = functions[functionName.toLowerCase()](accumulator[field][functionName], item, kendo.accessor(field), index, length, state[field][functionName]);
	        }
	    }

	    var functions = {
	        sum: function(accumulator, item, accessor) {
	            var value = accessor.get(item);

	            if (!isNumber(accumulator)) {
	                accumulator = value;
	            } else if (isNumber(value)) {
	                accumulator += value;
	            }

	            return accumulator;
	        },
	        count: function(accumulator) {
	            return (accumulator || 0) + 1;
	        },
	        average: function(accumulator, item, accessor, index, length, state) {
	            var value = accessor.get(item);

	            if (state.count === undefined) {
	                state.count = 0;
	            }

	            if (!isNumber(accumulator)) {
	                accumulator = value;
	            } else if (isNumber(value)) {
	                accumulator += value;
	            }

	            if (isNumber(value)) {
	                state.count++;
	            }

	            if(index == length - 1 && isNumber(accumulator)) {
	                accumulator = accumulator / state.count;
	            }
	            return accumulator;
	        },
	        max: function(accumulator, item, accessor) {
	            var value = accessor.get(item);

	            if (!isNumber(accumulator) && !isDate(accumulator)) {
	                accumulator = value;
	            }

	            if(accumulator < value && (isNumber(value) || isDate(value))) {
	                accumulator = value;
	            }
	            return accumulator;
	        },
	        min: function(accumulator, item, accessor) {
	            var value = accessor.get(item);

	            if (!isNumber(accumulator) && !isDate(accumulator)) {
	                accumulator = value;
	            }

	            if(accumulator > value && (isNumber(value) || isDate(value))) {
	                accumulator = value;
	            }
	            return accumulator;
	        }
	    };

	    function isNumber(val) {
	        return typeof val === "number" && !isNaN(val);
	    }

	    function isDate(val) {
	        return val && val.getTime;
	    }

	    function toJSON(array) {
	        var idx, length = array.length, result = new Array(length);

	        for (idx = 0; idx < length; idx++) {
	            result[idx] = array[idx].toJSON();
	        }

	        return result;
	    }

	    Query.process = function(data, options) {
	        options = options || {};

	        var query = new Query(data),
	            group = options.group,
	            sort = normalizeGroup(group || []).concat(normalizeSort(options.sort || [])),
	            total,
	            filterCallback = options.filterCallback,
	            filter = options.filter,
	            skip = options.skip,
	            take = options.take;

	        if (filter) {
	            query = query.filter(filter);

	            if (filterCallback) {
	                query = filterCallback(query);
	            }

	            total = query.toArray().length;
	        }

	        if (sort) {
	            query = query.sort(sort);

	            if (group) {
	                data = query.toArray();
	            }
	        }

	        if (skip !== undefined && take !== undefined) {
	            query = query.range(skip, take);
	        }

	        if (group) {
	            query = query.group(group, data);
	        }

	        return {
	            total: total,
	            data: query.toArray()
	        };
	    };

	    var LocalTransport = Class.extend({
	        init: function(options) {
	            this.data = options.data;
	        },

	        read: function(options) {
	            options.success(this.data);
	        },
	        update: function(options) {
	            options.success(options.data);
	        },
	        create: function(options) {
	            options.success(options.data);
	        },
	        destroy: function(options) {
	            options.success(options.data);
	        }
	    });

	    var RemoteTransport = Class.extend( {
	        init: function(options) {
	            var that = this, parameterMap;

	            options = that.options = extend({}, that.options, options);

	            each(crud, function(index, type) {
	                if (typeof options[type] === STRING) {
	                    options[type] = {
	                        url: options[type]
	                    };
	                }
	            });

	            that.cache = options.cache? Cache.create(options.cache) : {
	                find: noop,
	                add: noop
	            };

	            parameterMap = options.parameterMap;

	            if (isFunction(options.push)) {
	                that.push = options.push;
	            }

	            if (!that.push) {
	                that.push = identity;
	            }

	            that.parameterMap = isFunction(parameterMap) ? parameterMap : function(options) {
	                var result = {};

	                each(options, function(option, value) {
	                    if (option in parameterMap) {
	                        option = parameterMap[option];
	                        if (isPlainObject(option)) {
	                            value = option.value(value);
	                            option = option.key;
	                        }
	                    }

	                    result[option] = value;
	                });

	                return result;
	            };
	        },

	        options: {
	            parameterMap: identity
	        },

	        create: function(options) {
	            return ajax(this.setup(options, CREATE));
	        },

	        read: function(options) {
	            var that = this,
	                success,
	                error,
	                result,
	                cache = that.cache;

	            options = that.setup(options, READ);

	            success = options.success || noop;
	            error = options.error || noop;

	            result = cache.find(options.data);

	            if(result !== undefined) {
	                success(result);
	            } else {
	                options.success = function(result) {
	                    cache.add(options.data, result);

	                    success(result);
	                };

	                $.ajax(options);
	            }
	        },

	        update: function(options) {
	            return ajax(this.setup(options, UPDATE));
	        },

	        destroy: function(options) {
	            return ajax(this.setup(options, DESTROY));
	        },

	        setup: function(options, type) {
	            options = options || {};

	            var that = this,
	                parameters,
	                operation = that.options[type],
	                data = isFunction(operation.data) ? operation.data(options.data) : operation.data;

	            options = extend(true, {}, operation, options);
	            parameters = extend(true, {}, data, options.data);

	            options.data = that.parameterMap(parameters, type);

	            if (isFunction(options.url)) {
	                options.url = options.url(parameters);
	            }

	            return options;
	        }
	    });

	    var Cache = Class.extend({
	        init: function() {
	            this._store = {};
	        },
	        add: function(key, data) {
	            if(key !== undefined) {
	                this._store[stringify(key)] = data;
	            }
	        },
	        find: function(key) {
	            return this._store[stringify(key)];
	        },
	        clear: function() {
	            this._store = {};
	        },
	        remove: function(key) {
	            delete this._store[stringify(key)];
	        }
	    });

	    Cache.create = function(options) {
	        var store = {
	            "inmemory": function() { return new Cache(); }
	        };

	        if (isPlainObject(options) && isFunction(options.find)) {
	            return options;
	        }

	        if (options === true) {
	            return new Cache();
	        }

	        return store[options]();
	    };

	    function serializeRecords(data, getters, modelInstance, originalFieldNames, fieldNames) {
	        var record,
	            getter,
	            originalName,
	            idx,
	            setters = {},
	            length;

	        for (idx = 0, length = data.length; idx < length; idx++) {
	            record = data[idx];
	            for (getter in getters) {
	                originalName = fieldNames[getter];

	                if (originalName && originalName !== getter) {
	                    if (!setters[originalName]) {
	                        setters[originalName] = kendo.setter(originalName);
	                    }
	                    setters[originalName](record, getters[getter](record));
	                    delete record[getter];
	                }
	            }
	        }
	    }

	    function convertRecords(data, getters, modelInstance, originalFieldNames, fieldNames) {
	        var record,
	            getter,
	            originalName,
	            idx,
	            length;

	        for (idx = 0, length = data.length; idx < length; idx++) {
	            record = data[idx];
	            for (getter in getters) {
	                record[getter] = modelInstance._parse(getter, getters[getter](record));

	                originalName = fieldNames[getter];
	                if (originalName && originalName !== getter) {
	                    delete record[originalName];
	                }
	            }
	        }
	    }

	    function convertGroup(data, getters, modelInstance, originalFieldNames, fieldNames) {
	        var record,
	            idx,
	            fieldName,
	            length;

	        for (idx = 0, length = data.length; idx < length; idx++) {
	            record = data[idx];

	            fieldName = originalFieldNames[record.field];
	            if (fieldName && fieldName != record.field) {
	                record.field = fieldName;
	            }

	            record.value = modelInstance._parse(record.field, record.value);

	            if (record.hasSubgroups) {
	                convertGroup(record.items, getters, modelInstance, originalFieldNames, fieldNames);
	            } else {
	                convertRecords(record.items, getters, modelInstance, originalFieldNames, fieldNames);
	            }
	        }
	    }

	    function wrapDataAccess(originalFunction, model, converter, getters, originalFieldNames, fieldNames) {
	        return function(data) {
	            data = originalFunction(data);

	            if (data && !isEmptyObject(getters)) {
	                if (toString.call(data) !== "[object Array]" && !(data instanceof ObservableArray)) {
	                    data = [data];
	                }

	                converter(data, getters, new model(), originalFieldNames, fieldNames);
	            }

	            return data || [];
	        };
	    }

	    var DataReader = Class.extend({
	        init: function(schema) {
	            var that = this, member, get, model, base;

	            schema = schema || {};

	            for (member in schema) {
	                get = schema[member];

	                that[member] = typeof get === STRING ? getter(get) : get;
	            }

	            base = schema.modelBase || Model;

	            if (isPlainObject(that.model)) {
	                that.model = model = base.define(that.model);
	            }

	            var dataFunction = proxy(that.data, that);

	            that._dataAccessFunction = dataFunction;

	            if (that.model) {
	                var groupsFunction = proxy(that.groups, that),
	                    serializeFunction = proxy(that.serialize, that),
	                    originalFieldNames = {},
	                    getters = {},
	                    serializeGetters = {},
	                    fieldNames = {},
	                    shouldSerialize = false,
	                    fieldName;

	                model = that.model;

	                if (model.fields) {
	                    each(model.fields, function(field, value) {
	                        var fromName;

	                        fieldName = field;

	                        if (isPlainObject(value) && value.field) {
	                            fieldName = value.field;
	                        } else if (typeof value === STRING) {
	                            fieldName = value;
	                        }

	                        if (isPlainObject(value) && value.from) {
	                            fromName = value.from;
	                        }

	                        shouldSerialize = shouldSerialize || (fromName && fromName !== field) || fieldName !== field;

	                        getters[field] = getter(fromName || fieldName);
	                        serializeGetters[field] = getter(field);
	                        originalFieldNames[fromName || fieldName] = field;
	                        fieldNames[field] = fromName || fieldName;
	                    });

	                    if (!schema.serialize && shouldSerialize) {
	                        that.serialize = wrapDataAccess(serializeFunction, model, serializeRecords, serializeGetters, originalFieldNames, fieldNames);
	                    }
	                }

	                that._dataAccessFunction = dataFunction;
	                that.data = wrapDataAccess(dataFunction, model, convertRecords, getters, originalFieldNames, fieldNames);
	                that.groups = wrapDataAccess(groupsFunction, model, convertGroup, getters, originalFieldNames, fieldNames);
	            }
	        },
	        errors: function(data) {
	            return data ? data.errors : null;
	        },
	        parse: identity,
	        data: identity,
	        total: function(data) {
	            return data.length;
	        },
	        groups: identity,
	        aggregates: function() {
	            return {};
	        },
	        serialize: function(data) {
	            return data;
	        }
	    });

	    function mergeGroups(target, dest, skip, take) {
	        var group,
	            idx = 0,
	            items;

	        while (dest.length && take) {
	            group = dest[idx];
	            items = group.items;

	            var length = items.length;

	            if (target && target.field === group.field && target.value === group.value) {
	                if (target.hasSubgroups && target.items.length) {
	                    mergeGroups(target.items[target.items.length - 1], group.items, skip, take);
	                } else {
	                    items = items.slice(skip, skip + take);
	                    target.items = target.items.concat(items);
	                }
	                dest.splice(idx--, 1);
	            } else if (group.hasSubgroups && items.length) {
	                mergeGroups(group, items, skip, take);
	                if (!group.items.length) {
	                    dest.splice(idx--, 1);
	                }
	            } else {
	                items = items.slice(skip, skip + take);
	                group.items = items;

	                if (!group.items.length) {
	                    dest.splice(idx--, 1);
	                }
	            }

	            if (items.length === 0) {
	                skip -= length;
	            } else {
	                skip = 0;
	                take -= items.length;
	            }

	            if (++idx >= dest.length) {
	                break;
	            }
	        }

	        if (idx < dest.length) {
	            dest.splice(idx, dest.length - idx);
	        }
	    }

	    function flattenGroups(data) {
	        var idx,
	            result = [],
	            length,
	            items,
	            itemIndex;

	        for (idx = 0, length = data.length; idx < length; idx++) {
	            var group = data.at(idx);
	            if (group.hasSubgroups) {
	                result = result.concat(flattenGroups(group.items));
	            } else {
	                items = group.items;
	                for (itemIndex = 0; itemIndex < items.length; itemIndex++) {
	                    result.push(items.at(itemIndex));
	                }
	            }
	        }
	        return result;
	    }

	    function wrapGroupItems(data, model) {
	        var idx, length, group;
	        if (model) {
	            for (idx = 0, length = data.length; idx < length; idx++) {
	                group = data.at(idx);

	                if (group.hasSubgroups) {
	                    wrapGroupItems(group.items, model);
	                } else {
	                    group.items = new LazyObservableArray(group.items, model);
	                }
	            }
	        }
	    }

	    function eachGroupItems(data, func) {
	        for (var idx = 0, length = data.length; idx < length; idx++) {
	            if (data[idx].hasSubgroups) {
	                if (eachGroupItems(data[idx].items, func)) {
	                    return true;
	                }
	            } else if (func(data[idx].items, data[idx])) {
	                return true;
	            }
	        }
	    }

	    function replaceInRanges(ranges, data, item, observable) {
	        for (var idx = 0; idx < ranges.length; idx++) {
	            if (ranges[idx].data === data) {
	                break;
	            }
	            if (replaceInRange(ranges[idx].data, item, observable)) {
	                break;
	            }
	        }
	    }

	    function replaceInRange(items, item, observable) {
	        for (var idx = 0, length = items.length; idx < length; idx++) {
	            if (items[idx] && items[idx].hasSubgroups) {
	                return replaceInRange(items[idx].items, item, observable);
	            } else if (items[idx] === item || items[idx] === observable) {
	               items[idx] = observable;
	               return true;
	            }
	        }
	    }

	    function replaceWithObservable(view, data, ranges, type, serverGrouping) {
	        for (var viewIndex = 0, length = view.length; viewIndex < length; viewIndex++) {
	            var item = view[viewIndex];

	            if (!item || item instanceof type) {
	                continue;
	            }

	            if (item.hasSubgroups !== undefined && !serverGrouping) {
	                replaceWithObservable(item.items, data, ranges, type, serverGrouping);
	            } else {
	                for (var idx = 0; idx < data.length; idx++) {
	                    if (data[idx] === item) {
	                        view[viewIndex] = data.at(idx);
	                        replaceInRanges(ranges, data, item, view[viewIndex]);
	                        break;
	                    }
	                }
	            }
	        }
	    }

	    function removeModel(data, model) {
	        var idx, length;

	        for (idx = 0, length = data.length; idx < length; idx++) {
	            var dataItem = data.at(idx);
	            if (dataItem.uid == model.uid) {
	                data.splice(idx, 1);
	                return dataItem;
	            }
	        }
	    }

	    function indexOfPristineModel(data, model) {
	        if (model) {
	            return indexOf(data, function(item) {
	                return (item.uid && item.uid == model.uid) || (item[model.idField] === model.id && model.id !== model._defaultId);
	            });
	        }
	        return -1;
	    }

	    function indexOfModel(data, model) {
	        if (model) {
	            return indexOf(data, function(item) {
	                return item.uid == model.uid;
	            });
	        }
	        return -1;
	    }

	    function indexOf(data, comparer) {
	        var idx, length;

	        for (idx = 0, length = data.length; idx < length; idx++) {
	            if (comparer(data[idx])) {
	                return idx;
	            }
	        }

	        return -1;
	    }

	    function fieldNameFromModel(fields, name) {
	        if (fields && !isEmptyObject(fields)) {
	            var descriptor = fields[name];
	            var fieldName;
	            if (isPlainObject(descriptor)) {
	                fieldName = descriptor.from || descriptor.field || name;
	            } else {
	                fieldName = fields[name] || name;
	            }

	            if (isFunction(fieldName)) {
	                return name;
	            }

	            return fieldName;
	        }
	        return name;
	    }

	    function convertFilterDescriptorsField(descriptor, model) {
	        var idx,
	            length,
	            target = {};

	        for (var field in descriptor) {
	            if (field !== "filters") {
	                target[field] = descriptor[field];
	            }
	        }

	        if (descriptor.filters) {
	            target.filters = [];
	            for (idx = 0, length = descriptor.filters.length; idx < length; idx++) {
	                target.filters[idx] = convertFilterDescriptorsField(descriptor.filters[idx], model);
	            }
	        } else {
	            target.field = fieldNameFromModel(model.fields, target.field);
	        }
	        return target;
	    }

	    function convertDescriptorsField(descriptors, model) {
	        var idx,
	            length,
	            result = [],
	            target,
	            descriptor;

	        for (idx = 0, length = descriptors.length; idx < length; idx ++) {
	            target = {};

	            descriptor = descriptors[idx];

	            for (var field in descriptor) {
	                target[field] = descriptor[field];
	            }

	            target.field = fieldNameFromModel(model.fields, target.field);

	            if (target.aggregates && isArray(target.aggregates)) {
	                target.aggregates = convertDescriptorsField(target.aggregates, model);
	            }
	            result.push(target);
	        }
	        return result;
	    }

	    var DataSource = Observable.extend({
	        init: function(options) {
	            var that = this, model, data;

	            if (options) {
	                data = options.data;
	            }

	            options = that.options = extend({}, that.options, options);

	            that._map = {};
	            that._prefetch = {};
	            that._data = [];
	            that._pristineData = [];
	            that._ranges = [];
	            that._view = [];
	            that._pristineTotal = 0;
	            that._destroyed = [];
	            that._pageSize = options.pageSize;
	            that._page = options.page  || (options.pageSize ? 1 : undefined);
	            that._sort = normalizeSort(options.sort);
	            that._filter = normalizeFilter(options.filter);
	            that._group = normalizeGroup(options.group);
	            that._aggregate = options.aggregate;
	            that._total = options.total;

	            that._shouldDetachObservableParents = true;

	            Observable.fn.init.call(that);

	            that.transport = Transport.create(options, data, that);

	            if (isFunction(that.transport.push)) {
	                that.transport.push({
	                    pushCreate: proxy(that._pushCreate, that),
	                    pushUpdate: proxy(that._pushUpdate, that),
	                    pushDestroy: proxy(that._pushDestroy, that)
	                });
	            }

	            if (options.offlineStorage != null) {
	                if (typeof options.offlineStorage == "string") {
	                    var key = options.offlineStorage;

	                    that._storage = {
	                        getItem: function() {
	                            return JSON.parse(localStorage.getItem(key));
	                        },
	                        setItem: function(item) {
	                            localStorage.setItem(key, stringify(that.reader.serialize(item)));
	                        }
	                    };
	                } else {
	                    that._storage = options.offlineStorage;
	                }
	            }

	            that.reader = new kendo.data.readers[options.schema.type || "json" ](options.schema);

	            model = that.reader.model || {};

	            that._detachObservableParents();

	            that._data = that._observe(that._data);
	            that._online = true;

	            that.bind(["push", ERROR, CHANGE, REQUESTSTART, SYNC, REQUESTEND, PROGRESS], options);
	        },

	        options: {
	            data: null,
	            schema: {
	               modelBase: Model
	            },
	            offlineStorage: null,
	            serverSorting: false,
	            serverPaging: false,
	            serverFiltering: false,
	            serverGrouping: false,
	            serverAggregates: false,
	            batch: false
	        },

	        clone: function() {
	            return this;
	        },

	        online: function(value) {
	            if (value !== undefined) {
	                if (this._online != value) {
	                    this._online = value;

	                    if (value) {
	                        return this.sync();
	                    }
	                }

	                return $.Deferred().resolve().promise();
	            } else {
	                return this._online;
	            }
	        },

	        offlineData: function(state) {
	            if (this.options.offlineStorage == null) {
	                return null;
	            }

	            if (state !== undefined) {
	                return this._storage.setItem(state);
	            }

	            return this._storage.getItem() || [];
	        },

	        _isServerGrouped: function() {
	            var group = this.group() || [];

	            return this.options.serverGrouping && group.length;
	        },

	        _pushCreate: function(result) {
	            this._push(result, "pushCreate");
	        },

	        _pushUpdate: function(result) {
	            this._push(result, "pushUpdate");
	        },

	        _pushDestroy: function(result) {
	            this._push(result, "pushDestroy");
	        },

	        _push: function(result, operation) {
	            var data = this._readData(result);

	            if (!data) {
	                data = result;
	            }

	            this[operation](data);
	        },

	        _flatData: function(data, skip) {
	            if (data) {
	                if (this._isServerGrouped()) {
	                    return flattenGroups(data);
	                }

	                if (!skip) {
	                    for (var idx = 0; idx < data.length; idx++) {
	                        data.at(idx);
	                    }
	                }
	            }

	            return data;
	        },

	        parent: noop,

	        get: function(id) {
	            var idx, length, data = this._flatData(this._data);

	            for (idx = 0, length = data.length; idx < length; idx++) {
	                if (data[idx].id == id) {
	                    return data[idx];
	                }
	            }
	        },

	        getByUid: function(id) {
	            var idx, length, data = this._flatData(this._data);

	            if (!data) {
	                return;
	            }

	            for (idx = 0, length = data.length; idx < length; idx++) {
	                if (data[idx].uid == id) {
	                    return data[idx];
	                }
	            }
	        },

	        indexOf: function(model) {
	            return indexOfModel(this._data, model);
	        },

	        at: function(index) {
	            return this._data.at(index);
	        },

	        data: function(value) {
	            var that = this;
	            if (value !== undefined) {
	                that._detachObservableParents();
	                that._data = this._observe(value);

	                that._pristineData = value.slice(0);

	                that._storeData();

	                that._ranges = [];
	                that.trigger("reset");
	                that._addRange(that._data);

	                that._total = that._data.length;
	                that._pristineTotal = that._total;

	                that._process(that._data);
	            } else {
	                if (that._data) {
	                    for (var idx = 0; idx < that._data.length; idx++) {
	                        that._data.at(idx);
	                    }
	                }

	                return that._data;
	            }
	        },

	        view: function(value) {
	            if (value === undefined) {
	                return this._view;
	            } else {
	                this._view = this._observeView(value);
	            }
	        },

	        _observeView: function(data) {
	            var that = this;
	            replaceWithObservable(data, that._data, that._ranges, that.reader.model || ObservableObject, that._isServerGrouped());

	            var view = new LazyObservableArray(data, that.reader.model);
	            view.parent = function() { return that.parent(); };
	            return view;
	        },

	        flatView: function() {
	            var groups = this.group() || [];

	            if (groups.length) {
	                return flattenGroups(this._view);
	            } else {
	                return this._view;
	            }
	        },

	        add: function(model) {
	            return this.insert(this._data.length, model);
	        },

	        _createNewModel: function(model) {
	            if (this.reader.model) {
	                return new this.reader.model(model);
	            }

	            if (model instanceof ObservableObject) {
	                return model;
	            }

	            return new ObservableObject(model);
	        },

	        insert: function(index, model) {
	            if (!model) {
	                model = index;
	                index = 0;
	            }

	            if (!(model instanceof Model)) {
	                model = this._createNewModel(model);
	            }

	            if (this._isServerGrouped()) {
	                this._data.splice(index, 0, this._wrapInEmptyGroup(model));
	            } else {
	                this._data.splice(index, 0, model);
	            }

	            return model;
	        },

	        pushInsert: function(index, items) {
	            if (!items) {
	                items = index;
	                index = 0;
	            }

	            if (!isArray(items)) {
	                items = [items];
	            }

	            var pushed = [];
	            var autoSync = this.options.autoSync;
	            this.options.autoSync = false;

	            try {
	                for (var idx = 0; idx < items.length; idx ++) {
	                    var item = items[idx];

	                    var result = this.insert(index, item);

	                    pushed.push(result);

	                    var pristine = result.toJSON();

	                    if (this._isServerGrouped()) {
	                        pristine = this._wrapInEmptyGroup(pristine);
	                    }

	                    this._pristineData.push(pristine);

	                    index++;
	                }
	            } finally {
	                this.options.autoSync = autoSync;
	            }

	            if (pushed.length) {
	                this.trigger("push", {
	                    type: "create",
	                    items: pushed
	                });
	            }
	        },

	        pushCreate: function(items) {
	            this.pushInsert(this._data.length, items);
	        },

	        pushUpdate: function(items) {
	            if (!isArray(items)) {
	                items = [items];
	            }

	            var pushed = [];

	            for (var idx = 0; idx < items.length; idx ++) {
	                var item = items[idx];
	                var model = this._createNewModel(item);

	                var target = this.get(model.id);

	                if (target) {
	                    pushed.push(target);

	                    target.accept(item);

	                    target.trigger(CHANGE);

	                    this._updatePristineForModel(target, item);
	                } else {
	                    this.pushCreate(item);
	                }
	            }

	            if (pushed.length) {
	                this.trigger("push", {
	                    type: "update",
	                    items: pushed
	                });
	            }
	        },

	        pushDestroy: function(items) {
	            var pushed = this._removeItems(items);

	            if (pushed.length) {
	                this.trigger("push", {
	                    type: "destroy",
	                    items: pushed
	                });
	            }
	        },

	        _removeItems: function(items) {
	            if (!isArray(items)) {
	                items = [items];
	            }

	            var destroyed = [];
	            var autoSync = this.options.autoSync;
	            this.options.autoSync = false;
	            try {
	                for (var idx = 0; idx < items.length; idx ++) {
	                    var item = items[idx];
	                    var model = this._createNewModel(item);
	                    var found = false;

	                    this._eachItem(this._data, function(items){
	                        for (var idx = 0; idx < items.length; idx++) {
	                            var item = items.at(idx);
	                            if (item.id === model.id) {
	                                destroyed.push(item);
	                                items.splice(idx, 1);
	                                found = true;
	                                break;
	                            }
	                        }
	                    });

	                    if (found) {
	                        this._removePristineForModel(model);
	                        this._destroyed.pop();
	                    }
	                }
	            } finally {
	                this.options.autoSync = autoSync;
	            }

	            return destroyed;
	        },

	        remove: function(model) {
	            var result,
	                that = this,
	                hasGroups = that._isServerGrouped();

	            this._eachItem(that._data, function(items) {
	                result = removeModel(items, model);
	                if (result && hasGroups) {
	                    if (!result.isNew || !result.isNew()) {
	                        that._destroyed.push(result);
	                    }
	                    return true;
	                }
	            });

	            this._removeModelFromRanges(model);

	            this._updateRangesLength();

	            return model;
	        },

	        destroyed: function() {
	            return this._destroyed;
	        },

	        created: function() {
	            var idx,
	                length,
	                result = [],
	                data = this._flatData(this._data);

	            for (idx = 0, length = data.length; idx < length; idx++) {
	                if (data[idx].isNew && data[idx].isNew()) {
	                    result.push(data[idx]);
	                }
	            }
	            return result;
	        },

	        updated: function() {
	            var idx,
	                length,
	                result = [],
	                data = this._flatData(this._data);

	            for (idx = 0, length = data.length; idx < length; idx++) {
	                if ((data[idx].isNew && !data[idx].isNew()) && data[idx].dirty) {
	                    result.push(data[idx]);
	                }
	            }
	            return result;
	        },

	        sync: function() {
	            var that = this,
	                created = [],
	                updated = [],
	                destroyed = that._destroyed;

	            var promise = $.Deferred().resolve().promise();

	            if (that.online()) {

	                if (!that.reader.model) {
	                    return promise;
	                }

	                created = that.created();
	                updated = that.updated();

	                var promises = [];

	                if (that.options.batch && that.transport.submit) {
	                    promises = that._sendSubmit(created, updated, destroyed);
	                } else {
	                    promises.push.apply(promises, that._send("create", created));
	                    promises.push.apply(promises, that._send("update", updated));
	                    promises.push.apply(promises, that._send("destroy", destroyed));
	                }

	                promise = $.when
	                 .apply(null, promises)
	                 .then(function() {
	                    var idx, length;

	                    for (idx = 0, length = arguments.length; idx < length; idx++){
	                        if (arguments[idx]) {
	                            that._accept(arguments[idx]);
	                        }
	                    }

	                    that._storeData(true);

	                    that._change({ action: "sync" });

	                    that.trigger(SYNC);
	                });
	            } else {
	                that._storeData(true);

	                that._change({ action: "sync" });
	            }

	            return promise;
	        },

	        cancelChanges: function(model) {
	            var that = this;

	            if (model instanceof kendo.data.Model) {
	                that._cancelModel(model);
	            } else {
	                that._destroyed = [];
	                that._detachObservableParents();
	                that._data = that._observe(that._pristineData);
	                if (that.options.serverPaging) {
	                    that._total = that._pristineTotal;
	                }

	                that._ranges = [];
	                that._addRange(that._data);

	                that._change();

	                that._markOfflineUpdatesAsDirty();
	            }
	        },

	        _markOfflineUpdatesAsDirty: function() {
	            var that = this;

	            if (that.options.offlineStorage != null) {
	                that._eachItem(that._data, function(items) {
	                    for (var idx = 0; idx < items.length; idx++) {
	                        var item = items.at(idx);
	                        if (item.__state__ == "update" || item.__state__ == "create") {
	                            item.dirty = true;
	                        }
	                    }
	                });
	            }
	        },

	        hasChanges: function() {
	            var idx,
	                length,
	                data = this._flatData(this._data);

	            if (this._destroyed.length) {
	                return true;
	            }

	            for (idx = 0, length = data.length; idx < length; idx++) {
	                if ((data[idx].isNew && data[idx].isNew()) || data[idx].dirty) {
	                    return true;
	                }
	            }

	            return false;
	        },

	        _accept: function(result) {
	            var that = this,
	                models = result.models,
	                response = result.response,
	                idx = 0,
	                serverGroup = that._isServerGrouped(),
	                pristine = that._pristineData,
	                type = result.type,
	                length;

	            that.trigger(REQUESTEND, { response: response, type: type });

	            if (response && !isEmptyObject(response)) {
	                response = that.reader.parse(response);

	                if (that._handleCustomErrors(response)) {
	                    return;
	                }

	                response = that.reader.data(response);

	                if (!isArray(response)) {
	                    response = [response];
	                }
	            } else {
	                response = $.map(models, function(model) { return model.toJSON(); } );
	            }

	            if (type === "destroy") {
	                that._destroyed = [];
	            }

	            for (idx = 0, length = models.length; idx < length; idx++) {
	                if (type !== "destroy") {
	                    models[idx].accept(response[idx]);

	                    if (type === "create") {
	                        pristine.push(serverGroup ? that._wrapInEmptyGroup(models[idx]) : response[idx]);
	                    } else if (type === "update") {
	                        that._updatePristineForModel(models[idx], response[idx]);
	                    }
	                } else {
	                    that._removePristineForModel(models[idx]);
	                }
	            }
	        },

	        _updatePristineForModel: function(model, values) {
	            this._executeOnPristineForModel(model, function(index, items) {
	                kendo.deepExtend(items[index], values);
	            });
	        },

	        _executeOnPristineForModel: function(model, callback) {
	            this._eachPristineItem(
	                function(items) {
	                    var index = indexOfPristineModel(items, model);
	                    if (index > -1) {
	                        callback(index, items);
	                        return true;
	                    }
	                });
	        },

	        _removePristineForModel: function(model) {
	            this._executeOnPristineForModel(model, function(index, items) {
	                items.splice(index, 1);
	            });
	        },

	        _readData: function(data) {
	            var read = !this._isServerGrouped() ? this.reader.data : this.reader.groups;
	            return read.call(this.reader, data);
	        },

	        _eachPristineItem: function(callback) {
	            this._eachItem(this._pristineData, callback);
	        },

	       _eachItem: function(data, callback) {
	            if (data && data.length) {
	                if (this._isServerGrouped()) {
	                    eachGroupItems(data, callback);
	                } else {
	                    callback(data);
	                }
	            }
	        },

	        _pristineForModel: function(model) {
	            var pristine,
	                idx,
	                callback = function(items) {
	                    idx = indexOfPristineModel(items, model);
	                    if (idx > -1) {
	                        pristine = items[idx];
	                        return true;
	                    }
	                };

	            this._eachPristineItem(callback);

	            return pristine;
	        },

	        _cancelModel: function(model) {
	            var pristine = this._pristineForModel(model);

	            this._eachItem(this._data, function(items) {
	                var idx = indexOfModel(items, model);
	                if (idx >= 0) {
	                    if (pristine && (!model.isNew() || pristine.__state__)) {
	                        items[idx].accept(pristine);

	                        if (pristine.__state__ == "update") {
	                            items[idx].dirty = true;
	                        }

	                    } else {
	                        items.splice(idx, 1);
	                    }
	                }
	            });
	        },

	        _submit: function(promises, data) {
	            var that = this;

	            that.trigger(REQUESTSTART, { type: "submit" });

	            that.trigger(PROGRESS);

	            that.transport.submit(extend({
	                success: function(response, type) {
	                    var promise = $.grep(promises, function(x) {
	                        return x.type == type;
	                    })[0];

	                    if (promise) {
	                        promise.resolve({
	                            response: response,
	                            models: promise.models,
	                            type: type
	                        });
	                    }
	                },
	                error: function(response, status, error) {
	                    for (var idx = 0; idx < promises.length; idx++) {
	                        promises[idx].reject(response);
	                    }

	                    that.error(response, status, error);
	                }
	            }, data));
	        },

	        _sendSubmit: function(created, updated, destroyed) {
	            var that = this,
	                promises = [];

	            if (that.options.batch) {
	                if (created.length) {
	                    promises.push($.Deferred(function(deferred) {
	                        deferred.type = "create";
	                        deferred.models = created;
	                    }));
	                }

	                if (updated.length) {
	                    promises.push($.Deferred(function(deferred) {
	                        deferred.type = "update";
	                        deferred.models = updated;
	                    }));
	                }

	                if (destroyed.length) {
	                    promises.push($.Deferred(function(deferred) {
	                        deferred.type = "destroy";
	                        deferred.models = destroyed;
	                    }));
	                }

	                that._submit(promises, {
	                    data: {
	                        created: that.reader.serialize(toJSON(created)),
	                        updated: that.reader.serialize(toJSON(updated)),
	                        destroyed: that.reader.serialize(toJSON(destroyed))
	                    }
	                });
	            }

	            return promises;
	        },

	        _promise: function(data, models, type) {
	            var that = this;

	            return $.Deferred(function(deferred) {
	                that.trigger(REQUESTSTART, { type: type });

	                that.trigger(PROGRESS);

	                that.transport[type].call(that.transport, extend({
	                    success: function(response) {
	                        deferred.resolve({
	                            response: response,
	                            models: models,
	                            type: type
	                        });
	                    },
	                    error: function(response, status, error) {
	                        deferred.reject(response);
	                        that.error(response, status, error);
	                    }
	                }, data));
	            }).promise();
	        },

	        _send: function(method, data) {
	            var that = this,
	                idx,
	                length,
	                promises = [],
	                converted = that.reader.serialize(toJSON(data));

	            if (that.options.batch) {
	                if (data.length) {
	                    promises.push(that._promise( { data: { models: converted } }, data , method));
	                }
	            } else {
	                for (idx = 0, length = data.length; idx < length; idx++) {
	                    promises.push(that._promise( { data: converted[idx] }, [ data[idx] ], method));
	                }
	            }

	            return promises;
	        },

	        read: function(data) {
	            var that = this, params = that._params(data);
	            var deferred = $.Deferred();

	            that._queueRequest(params, function() {
	                var isPrevented = that.trigger(REQUESTSTART, { type: "read" });
	                if (!isPrevented) {
	                    that.trigger(PROGRESS);

	                    that._ranges = [];
	                    that.trigger("reset");
	                    if (that.online()) {
	                        that.transport.read({
	                            data: params,
	                            success: function(data) {
	                                that._ranges = [];
	                                that.success(data, params);

	                                deferred.resolve();
	                            },
	                            error: function() {
	                                var args = slice.call(arguments);

	                                that.error.apply(that, args);

	                                deferred.reject.apply(deferred, args);
	                            }
	                        });
	                    } else if (that.options.offlineStorage != null){
	                        that.success(that.offlineData(), params);

	                        deferred.resolve();
	                    }
	                } else {
	                    that._dequeueRequest();

	                    deferred.resolve(isPrevented);
	                }
	            });

	            return deferred.promise();
	        },

	        _readAggregates: function(data) {
	            return this.reader.aggregates(data);
	        },

	        success: function(data) {
	            var that = this,
	                options = that.options;

	            that.trigger(REQUESTEND, { response: data, type: "read" });

	            if (that.online()) {
	                data = that.reader.parse(data);

	                if (that._handleCustomErrors(data)) {
	                    that._dequeueRequest();
	                    return;
	                }

	                that._total = that.reader.total(data);

	                if (that._aggregate && options.serverAggregates) {
	                    that._aggregateResult = that._readAggregates(data);
	                }

	                data = that._readData(data);
	                that._destroyed = [];
	            } else {
	                data = that._readData(data);

	                var items = [];
	                var itemIds = {};
	                var model = that.reader.model;
	                var idField = model ? model.idField : "id";
	                var idx;

	                for (idx = 0; idx < this._destroyed.length; idx++) {
	                    var id = this._destroyed[idx][idField];
	                    itemIds[id] = id;
	                }

	                for (idx = 0; idx < data.length; idx++) {
	                    var item = data[idx];
	                    var state = item.__state__;
	                    if (state == "destroy") {
	                        if (!itemIds[item[idField]]) {
	                            this._destroyed.push(this._createNewModel(item));
	                        }
	                    } else {
	                        items.push(item);
	                    }
	                }

	                data = items;

	                that._total = data.length;
	            }

	            that._pristineTotal = that._total;

	            that._pristineData = data.slice(0);

	            that._detachObservableParents();

	            that._data = that._observe(data);

	            that._markOfflineUpdatesAsDirty();

	            that._storeData();

	            that._addRange(that._data);

	            that._process(that._data);

	            that._dequeueRequest();
	        },

	        _detachObservableParents: function() {
	            if (this._data && this._shouldDetachObservableParents) {
	                for (var idx = 0; idx < this._data.length; idx++) {
	                    if (this._data[idx].parent) {
	                        this._data[idx].parent = noop;
	                    }
	                }
	            }
	        },

	        _storeData: function(updatePristine) {
	            var serverGrouping = this._isServerGrouped();
	            var model = this.reader.model;

	            function items(data) {
	                var state = [];

	                for (var idx = 0; idx < data.length; idx++) {
	                    var dataItem = data.at(idx);
	                    var item = dataItem.toJSON();

	                    if (serverGrouping && dataItem.items) {
	                        item.items = items(dataItem.items);
	                    } else {
	                        item.uid = dataItem.uid;

	                        if (model) {
	                            if (dataItem.isNew()) {
	                                item.__state__ = "create";
	                            } else if (dataItem.dirty) {
	                                item.__state__ = "update";
	                            }
	                        }
	                    }
	                    state.push(item);
	                }

	                return state;
	            }

	            if (this.options.offlineStorage != null) {
	                var state = items(this._data);

	                var destroyed = [];

	                for (var idx = 0; idx < this._destroyed.length; idx++) {
	                    var item = this._destroyed[idx].toJSON();
	                    item.__state__ = "destroy";
	                    destroyed.push(item);
	                }

	                this.offlineData(state.concat(destroyed));

	                if (updatePristine) {
	                    this._pristineData = this._readData(state);
	                }
	            }
	        },

	        _addRange: function(data) {
	            var that = this,
	                start = that._skip || 0,
	                end = start + that._flatData(data, true).length;

	            that._ranges.push({ start: start, end: end, data: data, timestamp: new Date().getTime() });
	            that._ranges.sort( function(x, y) { return x.start - y.start; } );
	        },

	        error: function(xhr, status, errorThrown) {
	            this._dequeueRequest();
	            this.trigger(REQUESTEND, { });
	            this.trigger(ERROR, { xhr: xhr, status: status, errorThrown: errorThrown });
	        },

	        _params: function(data) {
	            var that = this,
	                options =  extend({
	                    take: that.take(),
	                    skip: that.skip(),
	                    page: that.page(),
	                    pageSize: that.pageSize(),
	                    sort: that._sort,
	                    filter: that._filter,
	                    group: that._group,
	                    aggregate: that._aggregate
	                }, data);

	            if (!that.options.serverPaging) {
	                delete options.take;
	                delete options.skip;
	                delete options.page;
	                delete options.pageSize;
	            }

	            if (!that.options.serverGrouping) {
	                delete options.group;
	            } else if (that.reader.model && options.group) {
	                options.group = convertDescriptorsField(options.group, that.reader.model);
	            }

	            if (!that.options.serverFiltering) {
	                delete options.filter;
	            } else if (that.reader.model && options.filter) {
	               options.filter = convertFilterDescriptorsField(options.filter, that.reader.model);
	            }

	            if (!that.options.serverSorting) {
	                delete options.sort;
	            } else if (that.reader.model && options.sort) {
	                options.sort = convertDescriptorsField(options.sort, that.reader.model);
	            }

	            if (!that.options.serverAggregates) {
	                delete options.aggregate;
	            } else if (that.reader.model && options.aggregate) {
	                options.aggregate = convertDescriptorsField(options.aggregate, that.reader.model);
	            }

	            return options;
	        },

	        _queueRequest: function(options, callback) {
	            var that = this;
	            if (!that._requestInProgress) {
	                that._requestInProgress = true;
	                that._pending = undefined;
	                callback();
	            } else {
	                that._pending = { callback: proxy(callback, that), options: options };
	            }
	        },

	        _dequeueRequest: function() {
	            var that = this;
	            that._requestInProgress = false;
	            if (that._pending) {
	                that._queueRequest(that._pending.options, that._pending.callback);
	            }
	        },

	        _handleCustomErrors: function(response) {
	            if (this.reader.errors) {
	                var errors = this.reader.errors(response);
	                if (errors) {
	                    this.trigger(ERROR, { xhr: null, status: "customerror", errorThrown: "custom error", errors: errors });
	                    return true;
	                }
	            }
	            return false;
	        },

	        _shouldWrap: function(data) {
	            var model = this.reader.model;

	            if (model && data.length) {
	                return !(data[0] instanceof model);
	            }

	            return false;
	        },

	        _observe: function(data) {
	            var that = this,
	                model = that.reader.model;

	            that._shouldDetachObservableParents = true;

	            if (data instanceof ObservableArray) {
	                that._shouldDetachObservableParents = false;
	                if (that._shouldWrap(data)) {
	                    data.type = that.reader.model;
	                    data.wrapAll(data, data);
	                }
	            } else {
	                var arrayType = that.pageSize() && !that.options.serverPaging ? LazyObservableArray : ObservableArray;
	                data = new arrayType(data, that.reader.model);
	                data.parent = function() { return that.parent(); };
	            }

	            if (that._isServerGrouped()) {
	                wrapGroupItems(data, model);
	            }

	            if (that._changeHandler && that._data && that._data instanceof ObservableArray) {
	                that._data.unbind(CHANGE, that._changeHandler);
	            } else {
	                that._changeHandler = proxy(that._change, that);
	            }

	            return data.bind(CHANGE, that._changeHandler);
	        },

	        _updateTotalForAction: function(action, items) {
	            var that = this;

	            var total = parseInt(that._total, 10);

	            if (!isNumber(that._total)) {
	                total = parseInt(that._pristineTotal, 10);
	            }
	            if (action === "add") {
	                total += items.length;
	            } else if (action === "remove") {
	                total -= items.length;
	            } else if (action !== "itemchange" && action !== "sync" && !that.options.serverPaging) {
	                total = that._pristineTotal;
	            } else if (action === "sync") {
	                total = that._pristineTotal = parseInt(that._total, 10);
	            }

	            that._total = total;
	        },

	        _change: function(e) {
	            var that = this, idx, length, action = e ? e.action : "";

	            if (action === "remove") {
	                for (idx = 0, length = e.items.length; idx < length; idx++) {
	                    if (!e.items[idx].isNew || !e.items[idx].isNew()) {
	                        that._destroyed.push(e.items[idx]);
	                    }
	                }
	            }

	            if (that.options.autoSync && (action === "add" || action === "remove" || action === "itemchange")) {

	                var handler = function(args) {
	                    if (args.action === "sync") {
	                        that.unbind("change", handler);
	                        that._updateTotalForAction(action, e.items);
	                    }
	                };

	                that.first("change", handler);

	                that.sync();

	            } else {
	                that._updateTotalForAction(action, e ? e.items : []);

	                that._process(that._data, e);
	            }
	        },

	        _calculateAggregates: function (data, options) {
	            options = options || {};

	            var query = new Query(data),
	                aggregates = options.aggregate,
	                filter = options.filter;

	            if (filter) {
	                query = query.filter(filter);
	            }

	            return query.aggregate(aggregates);
	        },

	        _process: function (data, e) {
	            var that = this,
	                options = {},
	                result;

	            if (that.options.serverPaging !== true) {
	                options.skip = that._skip;
	                options.take = that._take || that._pageSize;

	                if(options.skip === undefined && that._page !== undefined && that._pageSize !== undefined) {
	                    options.skip = (that._page - 1) * that._pageSize;
	                }
	            }

	            if (that.options.serverSorting !== true) {
	                options.sort = that._sort;
	            }

	            if (that.options.serverFiltering !== true) {
	                options.filter = that._filter;
	            }

	            if (that.options.serverGrouping !== true) {
	                options.group = that._group;
	            }

	            if (that.options.serverAggregates !== true) {
	                options.aggregate = that._aggregate;
	                that._aggregateResult = that._calculateAggregates(data, options);
	            }

	            result = that._queryProcess(data, options);

	            that.view(result.data);

	            if (result.total !== undefined && !that.options.serverFiltering) {
	                that._total = result.total;
	            }

	            e = e || {};

	            e.items = e.items || that._view;

	            that.trigger(CHANGE, e);
	        },

	        _queryProcess: function(data, options) {
	            return Query.process(data, options);
	        },

	        _mergeState: function(options) {
	            var that = this;

	            if (options !== undefined) {
	                that._pageSize = options.pageSize;
	                that._page = options.page;
	                that._sort = options.sort;
	                that._filter = options.filter;
	                that._group = options.group;
	                that._aggregate = options.aggregate;
	                that._skip = that._currentRangeStart = options.skip;
	                that._take = options.take;

	                if(that._skip === undefined) {
	                    that._skip = that._currentRangeStart = that.skip();
	                    options.skip = that.skip();
	                }

	                if(that._take === undefined && that._pageSize !== undefined) {
	                    that._take = that._pageSize;
	                    options.take = that._take;
	                }

	                if (options.sort) {
	                    that._sort = options.sort = normalizeSort(options.sort);
	                }

	                if (options.filter) {
	                    that._filter = options.filter = normalizeFilter(options.filter);
	                }

	                if (options.group) {
	                    that._group = options.group = normalizeGroup(options.group);
	                }
	                if (options.aggregate) {
	                    that._aggregate = options.aggregate = normalizeAggregate(options.aggregate);
	                }
	            }
	            return options;
	        },

	        query: function(options) {
	            var result;
	            var remote = this.options.serverSorting || this.options.serverPaging || this.options.serverFiltering || this.options.serverGrouping || this.options.serverAggregates;

	            if (remote || ((this._data === undefined || this._data.length === 0) && !this._destroyed.length)) {
	                return this.read(this._mergeState(options));
	            }

	            var isPrevented = this.trigger(REQUESTSTART, { type: "read" });
	            if (!isPrevented) {
	                this.trigger(PROGRESS);

	                result = this._queryProcess(this._data, this._mergeState(options));

	                if (!this.options.serverFiltering) {
	                    if (result.total !== undefined) {
	                        this._total = result.total;
	                    } else {
	                        this._total = this._data.length;
	                    }
	                }

	                this._aggregateResult = this._calculateAggregates(this._data, options);
	                this.view(result.data);
	                this.trigger(REQUESTEND, { type: "read" });
	                this.trigger(CHANGE, { items: result.data });
	            }

	            return $.Deferred().resolve(isPrevented).promise();
	        },

	        fetch: function(callback) {
	            var that = this;
	            var fn = function(isPrevented) {
	                if (isPrevented !== true && isFunction(callback)) {
	                    callback.call(that);
	                }
	            };

	            return this._query().then(fn);
	        },

	        _query: function(options) {
	            var that = this;

	            return that.query(extend({}, {
	                page: that.page(),
	                pageSize: that.pageSize(),
	                sort: that.sort(),
	                filter: that.filter(),
	                group: that.group(),
	                aggregate: that.aggregate()
	            }, options));
	        },

	        next: function(options) {
	            var that = this,
	                page = that.page(),
	                total = that.total();

	            options = options || {};

	            if (!page || (total && page + 1 > that.totalPages())) {
	                return;
	            }

	            that._skip = that._currentRangeStart = page * that.take();

	            page += 1;
	            options.page = page;

	            that._query(options);

	            return page;
	        },

	        prev: function(options) {
	            var that = this,
	                page = that.page();

	            options = options || {};

	            if (!page || page === 1) {
	                return;
	            }

	            that._skip = that._currentRangeStart = that._skip - that.take();

	            page -= 1;
	            options.page = page;

	            that._query(options);

	            return page;
	        },

	        page: function(val) {
	            var that = this,
	            skip;

	            if(val !== undefined) {
	                val = math.max(math.min(math.max(val, 1), that.totalPages()), 1);
	                that._query({ page: val });
	                return;
	            }
	            skip = that.skip();

	            return skip !== undefined ? math.round((skip || 0) / (that.take() || 1)) + 1 : undefined;
	        },

	        pageSize: function(val) {
	            var that = this;

	            if(val !== undefined) {
	                that._query({ pageSize: val, page: 1 });
	                return;
	            }

	            return that.take();
	        },

	        sort: function(val) {
	            var that = this;

	            if(val !== undefined) {
	                that._query({ sort: val });
	                return;
	            }

	            return that._sort;
	        },

	        filter: function(val) {
	            var that = this;

	            if (val === undefined) {
	                return that._filter;
	            }

	            that.trigger("reset");
	            that._query({ filter: val, page: 1 });
	        },

	        group: function(val) {
	            var that = this;

	            if(val !== undefined) {
	                that._query({ group: val });
	                return;
	            }

	            return that._group;
	        },

	        total: function() {
	            return parseInt(this._total || 0, 10);
	        },

	        aggregate: function(val) {
	            var that = this;

	            if(val !== undefined) {
	                that._query({ aggregate: val });
	                return;
	            }

	            return that._aggregate;
	        },

	        aggregates: function() {
	            var result = this._aggregateResult;

	            if (isEmptyObject(result)) {
	                result = this._emptyAggregates(this.aggregate());
	            }

	            return result;
	        },

	        _emptyAggregates: function(aggregates) {
	            var result = {};

	            if (!isEmptyObject(aggregates)) {
	                var aggregate = {};

	                if (!isArray(aggregates)){
	                    aggregates = [aggregates];
	                }

	                for (var idx = 0; idx <aggregates.length; idx++) {
	                    aggregate[aggregates[idx].aggregate] = 0;
	                    result[aggregates[idx].field] = aggregate;
	                }
	            }

	            return result;
	        },

	        _wrapInEmptyGroup: function(model) {
	            var groups = this.group(),
	                parent,
	                group,
	                idx,
	                length;

	            for (idx = groups.length-1, length = 0; idx >= length; idx--) {
	                group = groups[idx];
	                parent = {
	                    value: model.get(group.field),
	                    field: group.field,
	                    items: parent ? [parent] : [model],
	                    hasSubgroups: !!parent,
	                    aggregates: this._emptyAggregates(group.aggregates)
	                };
	            }

	            return parent;
	        },

	        totalPages: function() {
	            var that = this,
	            pageSize = that.pageSize() || that.total();

	            return math.ceil((that.total() || 0) / pageSize);
	        },

	        inRange: function(skip, take) {
	            var that = this,
	                end = math.min(skip + take, that.total());

	            if (!that.options.serverPaging && that._data.length > 0) {
	                return true;
	            }

	            return that._findRange(skip, end).length > 0;
	        },

	        lastRange: function() {
	            var ranges = this._ranges;
	            return ranges[ranges.length - 1] || { start: 0, end: 0, data: [] };
	        },

	        firstItemUid: function() {
	            var ranges = this._ranges;
	            return ranges.length && ranges[0].data.length && ranges[0].data[0].uid;
	        },

	        enableRequestsInProgress: function() {
	            this._skipRequestsInProgress = false;
	        },

	        _timeStamp: function() {
	            return new Date().getTime();
	        },

	        range: function(skip, take) {
	            this._currentRequestTimeStamp = this._timeStamp();
	            this._skipRequestsInProgress = true;

	            skip = math.min(skip || 0, this.total());

	            var that = this,
	                pageSkip = math.max(math.floor(skip / take), 0) * take,
	                size = math.min(pageSkip + take, that.total()),
	                data;

	            data = that._findRange(skip, math.min(skip + take, that.total()));

	            if (data.length) {

	                that._pending = undefined;

	                that._skip = skip > that.skip() ? math.min(size, (that.totalPages() - 1) * that.take()) : pageSkip;

	                that._currentRangeStart = skip;

	                that._take = take;

	                var paging = that.options.serverPaging;
	                var sorting = that.options.serverSorting;
	                var filtering = that.options.serverFiltering;
	                var aggregates = that.options.serverAggregates;
	                try {
	                    that.options.serverPaging = true;
	                    if (!that._isServerGrouped() && !(that.group() && that.group().length)) {
	                        that.options.serverSorting = true;
	                    }
	                    that.options.serverFiltering = true;
	                    that.options.serverPaging = true;
	                    that.options.serverAggregates = true;

	                    if (paging) {
	                        that._detachObservableParents();
	                        that._data = data = that._observe(data);
	                    }
	                    that._process(data);
	                } finally {
	                    that.options.serverPaging = paging;
	                    that.options.serverSorting = sorting;
	                    that.options.serverFiltering = filtering;
	                    that.options.serverAggregates = aggregates;
	                }

	                return;
	            }

	            if (take !== undefined) {
	                if (!that._rangeExists(pageSkip, size)) {
	                    that.prefetch(pageSkip, take, function() {
	                        if (skip > pageSkip && size < that.total() && !that._rangeExists(size, math.min(size + take, that.total()))) {
	                            that.prefetch(size, take, function() {
	                                that.range(skip, take);
	                            });
	                        } else {
	                            that.range(skip, take);
	                        }
	                    });
	                } else if (pageSkip < skip) {
	                    that.prefetch(size, take, function() {
	                        that.range(skip, take);
	                    });
	                }
	            }
	        },

	        _findRange: function(start, end) {
	            var that = this,
	                ranges = that._ranges,
	                range,
	                data = [],
	                skipIdx,
	                takeIdx,
	                startIndex,
	                endIndex,
	                rangeData,
	                rangeEnd,
	                processed,
	                options = that.options,
	                remote = options.serverSorting || options.serverPaging || options.serverFiltering || options.serverGrouping || options.serverAggregates,
	                flatData,
	                count,
	                length;

	            for (skipIdx = 0, length = ranges.length; skipIdx < length; skipIdx++) {
	                range = ranges[skipIdx];
	                if (start >= range.start && start <= range.end) {
	                    count = 0;

	                    for (takeIdx = skipIdx; takeIdx < length; takeIdx++) {
	                        range = ranges[takeIdx];
	                        flatData = that._flatData(range.data, true);

	                        if (flatData.length && start + count >= range.start) {
	                            rangeData = range.data;
	                            rangeEnd = range.end;

	                            if (!remote) {
	                                var sort = normalizeGroup(that.group() || []).concat(normalizeSort(that.sort() || []));
	                                processed = that._queryProcess(range.data, { sort: sort, filter: that.filter() });
	                                flatData = rangeData = processed.data;

	                                if (processed.total !== undefined) {
	                                    rangeEnd = processed.total;
	                                }
	                            }

	                            startIndex = 0;
	                            if (start + count > range.start) {
	                                startIndex = (start + count) - range.start;
	                            }
	                            endIndex = flatData.length;
	                            if (rangeEnd > end) {
	                                endIndex = endIndex - (rangeEnd - end);
	                            }
	                            count += endIndex - startIndex;
	                            data = that._mergeGroups(data, rangeData, startIndex, endIndex);

	                            if (end <= range.end && count == end - start) {
	                                return data;
	                            }
	                        }
	                    }
	                    break;
	                }
	            }
	            return [];
	        },

	        _mergeGroups: function(data, range, skip, take) {
	            if (this._isServerGrouped()) {
	                var temp = range.toJSON(),
	                    prevGroup;

	                if (data.length) {
	                    prevGroup = data[data.length - 1];
	                }

	                mergeGroups(prevGroup, temp, skip, take);

	                return data.concat(temp);
	            }
	            return data.concat(range.slice(skip, take));
	        },

	        skip: function() {
	            var that = this;

	            if (that._skip === undefined) {
	                return (that._page !== undefined ? (that._page  - 1) * (that.take() || 1) : undefined);
	            }
	            return that._skip;
	        },

	        currentRangeStart: function() {
	            return this._currentRangeStart || 0;
	        },

	        take: function() {
	            return this._take || this._pageSize;
	        },

	        _prefetchSuccessHandler: function (skip, size, callback, force) {
	            var that = this;
	            var timestamp = that._timeStamp();

	            return function(data) {
	                var found = false,
	                    range = { start: skip, end: size, data: [], timestamp: that._timeStamp() },
	                    idx,
	                    length,
	                    temp;

	                that._dequeueRequest();

	                that.trigger(REQUESTEND, { response: data, type: "read" });

	                data = that.reader.parse(data);

	                temp = that._readData(data);

	                if (temp.length) {

	                    for (idx = 0, length = that._ranges.length; idx < length; idx++) {
	                        if (that._ranges[idx].start === skip) {
	                            found = true;
	                            range = that._ranges[idx];
	                            break;
	                        }
	                    }
	                    if (!found) {
	                        that._ranges.push(range);
	                    }
	                }

	                range.data = that._observe(temp);
	                range.end = range.start + that._flatData(range.data, true).length;
	                that._ranges.sort( function(x, y) { return x.start - y.start; } );
	                that._total = that.reader.total(data);

	                if (force || (timestamp >= that._currentRequestTimeStamp || !that._skipRequestsInProgress)) {
	                    if (callback && temp.length) {
	                        callback();
	                    } else {
	                        that.trigger(CHANGE, {});
	                    }
	                }
	            };
	        },

	        prefetch: function(skip, take, callback) {
	            var that = this,
	                size = math.min(skip + take, that.total()),
	                options = {
	                    take: take,
	                    skip: skip,
	                    page: skip / take + 1,
	                    pageSize: take,
	                    sort: that._sort,
	                    filter: that._filter,
	                    group: that._group,
	                    aggregate: that._aggregate
	                };

	            if (!that._rangeExists(skip, size)) {
	                clearTimeout(that._timeout);

	                that._timeout = setTimeout(function() {
	                    that._queueRequest(options, function() {
	                        if (!that.trigger(REQUESTSTART, { type: "read" })) {
	                            that.transport.read({
	                                data: that._params(options),
	                                success: that._prefetchSuccessHandler(skip, size, callback),
	                                error: function() {
	                                    var args = slice.call(arguments);
	                                    that.error.apply(that, args);
	                                }
	                            });
	                        } else {
	                            that._dequeueRequest();
	                        }
	                    });
	                }, 100);
	            } else if (callback) {
	                callback();
	            }
	        },

	        _multiplePrefetch: function(skip, take, callback) {
	            var that = this,
	                size = math.min(skip + take, that.total()),
	                options = {
	                    take: take,
	                    skip: skip,
	                    page: skip / take + 1,
	                    pageSize: take,
	                    sort: that._sort,
	                    filter: that._filter,
	                    group: that._group,
	                    aggregate: that._aggregate
	                };

	            if (!that._rangeExists(skip, size)) {
	                if (!that.trigger(REQUESTSTART, { type: "read" })) {
	                    that.transport.read({
	                        data: that._params(options),
	                        success: that._prefetchSuccessHandler(skip, size, callback, true)
	                    });
	                }
	            } else if (callback) {
	                callback();
	            }
	        },

	        _rangeExists: function(start, end) {
	            var that = this,
	                ranges = that._ranges,
	                idx,
	                length;

	            for (idx = 0, length = ranges.length; idx < length; idx++) {
	                if (ranges[idx].start <= start && ranges[idx].end >= end) {
	                    return true;
	                }
	            }
	            return false;
	        },

	        _removeModelFromRanges: function(model) {
	            var result,
	                found,
	                range;

	            for (var idx = 0, length = this._ranges.length; idx < length; idx++) {
	                range = this._ranges[idx];

	                this._eachItem(range.data, function(items) {
	                    result = removeModel(items, model);
	                    if (result) {
	                        found = true;
	                    }
	                });

	                if (found) {
	                    break;
	                }
	            }
	        },

	        _updateRangesLength: function() {
	            var startOffset = 0,
	                range,
	                rangeLength;

	            for (var idx = 0, length = this._ranges.length; idx < length; idx++) {
	                range = this._ranges[idx];
	                range.start = range.start - startOffset;

	                rangeLength = this._flatData(range.data, true).length;
	                startOffset = range.end - rangeLength;
	                range.end = range.start + rangeLength;
	            }
	        }
	    });

	    var Transport = {};

	    Transport.create = function(options, data, dataSource) {
	        var transport,
	            transportOptions = options.transport ? $.extend({}, options.transport) : null;

	        if (transportOptions) {
	            transportOptions.read = typeof transportOptions.read === STRING ? { url: transportOptions.read } : transportOptions.read;

	            if (options.type === "jsdo") {
	                transportOptions.dataSource = dataSource;
	            }

	            if (options.type) {
	                kendo.data.transports = kendo.data.transports || {};
	                kendo.data.schemas = kendo.data.schemas || {};

	                if (!kendo.data.transports[options.type]) {
	                    kendo.logToConsole("Unknown DataSource transport type '" + options.type + "'.\nVerify that registration scripts for this type are included after Kendo UI on the page.", "warn");
	                } else if (!isPlainObject(kendo.data.transports[options.type])) {
	                    transport = new kendo.data.transports[options.type](extend(transportOptions, { data: data }));
	                } else {
	                    transportOptions = extend(true, {}, kendo.data.transports[options.type], transportOptions);
	                }

	                options.schema = extend(true, {}, kendo.data.schemas[options.type], options.schema);
	            }

	            if (!transport) {
	                transport = isFunction(transportOptions.read) ? transportOptions : new RemoteTransport(transportOptions);
	            }
	        } else {
	            transport = new LocalTransport({ data: options.data || [] });
	        }
	        return transport;
	    };

	    DataSource.create = function(options) {
	        if (isArray(options) || options instanceof ObservableArray) {
	           options = { data: options };
	        }

	        var dataSource = options || {},
	            data = dataSource.data,
	            fields = dataSource.fields,
	            table = dataSource.table,
	            select = dataSource.select,
	            idx,
	            length,
	            model = {},
	            field;

	        if (!data && fields && !dataSource.transport) {
	            if (table) {
	                data = inferTable(table, fields);
	            } else if (select) {
	                data = inferSelect(select, fields);

	                if (dataSource.group === undefined && data[0] && data[0].optgroup !== undefined) {
	                    dataSource.group = "optgroup";
	                }
	            }
	        }

	        if (kendo.data.Model && fields && (!dataSource.schema || !dataSource.schema.model)) {
	            for (idx = 0, length = fields.length; idx < length; idx++) {
	                field = fields[idx];
	                if (field.type) {
	                    model[field.field] = field;
	                }
	            }

	            if (!isEmptyObject(model)) {
	                dataSource.schema = extend(true, dataSource.schema, { model:  { fields: model } });
	            }
	        }

	        dataSource.data = data;

	        select = null;
	        dataSource.select = null;
	        table = null;
	        dataSource.table = null;

	        return dataSource instanceof DataSource ? dataSource : new DataSource(dataSource);
	    };

	    function inferSelect(select, fields) {
	        select = $(select)[0];
	        var options = select.options;
	        var firstField = fields[0];
	        var secondField = fields[1];

	        var data = [];
	        var idx, length;
	        var optgroup;
	        var option;
	        var record;
	        var value;

	        for (idx = 0, length = options.length; idx < length; idx++) {
	            record = {};
	            option = options[idx];
	            optgroup = option.parentNode;

	            if (optgroup === select) {
	                optgroup = null;
	            }

	            if (option.disabled || (optgroup && optgroup.disabled)) {
	                continue;
	            }

	            if (optgroup) {
	                record.optgroup = optgroup.label;
	            }

	            record[firstField.field] = option.text;

	            value = option.attributes.value;

	            if (value && value.specified) {
	                value = option.value;
	            } else {
	                value = option.text;
	            }

	            record[secondField.field] = value;

	            data.push(record);
	        }

	        return data;
	    }

	    function inferTable(table, fields) {
	        var tbody = $(table)[0].tBodies[0],
	        rows = tbody ? tbody.rows : [],
	        idx,
	        length,
	        fieldIndex,
	        fieldCount = fields.length,
	        data = [],
	        cells,
	        record,
	        cell,
	        empty;

	        for (idx = 0, length = rows.length; idx < length; idx++) {
	            record = {};
	            empty = true;
	            cells = rows[idx].cells;

	            for (fieldIndex = 0; fieldIndex < fieldCount; fieldIndex++) {
	                cell = cells[fieldIndex];
	                if(cell.nodeName.toLowerCase() !== "th") {
	                    empty = false;
	                    record[fields[fieldIndex].field] = cell.innerHTML;
	                }
	            }
	            if(!empty) {
	                data.push(record);
	            }
	        }

	        return data;
	    }

	    var Node = Model.define({
	        idField: "id",

	        init: function(value) {
	            var that = this,
	                hasChildren = that.hasChildren || value && value.hasChildren,
	                childrenField = "items",
	                childrenOptions = {};

	            kendo.data.Model.fn.init.call(that, value);

	            if (typeof that.children === STRING) {
	                childrenField = that.children;
	            }

	            childrenOptions = {
	                schema: {
	                    data: childrenField,
	                    model: {
	                        hasChildren: hasChildren,
	                        id: that.idField,
	                        fields: that.fields
	                    }
	                }
	            };

	            if (typeof that.children !== STRING) {
	                extend(childrenOptions, that.children);
	            }

	            childrenOptions.data = value;

	            if (!hasChildren) {
	                hasChildren = childrenOptions.schema.data;
	            }

	            if (typeof hasChildren === STRING) {
	                hasChildren = kendo.getter(hasChildren);
	            }

	            if (isFunction(hasChildren)) {
	                var hasChildrenObject = hasChildren.call(that, that);

	                if(hasChildrenObject && hasChildrenObject.length === 0){
	                    that.hasChildren = false;
	                } else{
	                    that.hasChildren = !!hasChildrenObject;
	                }
	            }

	            that._childrenOptions = childrenOptions;

	            if (that.hasChildren) {
	                that._initChildren();
	            }

	            that._loaded = !!(value && value._loaded);
	        },

	        _initChildren: function() {
	            var that = this;
	            var children, transport, parameterMap;

	            if (!(that.children instanceof HierarchicalDataSource)) {
	                children = that.children = new HierarchicalDataSource(that._childrenOptions);

	                transport = children.transport;
	                parameterMap = transport.parameterMap;

	                transport.parameterMap = function(data, type) {
	                    data[that.idField || "id"] = that.id;

	                    if (parameterMap) {
	                        data = parameterMap(data, type);
	                    }

	                    return data;
	                };

	                children.parent = function(){
	                    return that;
	                };

	                children.bind(CHANGE, function(e){
	                    e.node = e.node || that;
	                    that.trigger(CHANGE, e);
	                });

	                children.bind(ERROR, function(e){
	                    var collection = that.parent();

	                    if (collection) {
	                        e.node = e.node || that;
	                        collection.trigger(ERROR, e);
	                    }
	                });

	                that._updateChildrenField();
	            }
	        },

	        append: function(model) {
	            this._initChildren();
	            this.loaded(true);
	            this.children.add(model);
	        },

	        hasChildren: false,

	        level: function() {
	            var parentNode = this.parentNode(),
	                level = 0;

	            while (parentNode && parentNode.parentNode) {
	                level++;
	                parentNode = parentNode.parentNode ? parentNode.parentNode() : null;
	            }

	            return level;
	        },

	        _updateChildrenField: function() {
	            var fieldName = this._childrenOptions.schema.data;

	            this[fieldName || "items"] = this.children.data();
	        },

	        _childrenLoaded: function() {
	            this._loaded = true;

	            this._updateChildrenField();
	        },

	        load: function() {
	            var options = {};
	            var method = "_query";
	            var children, promise;

	            if (this.hasChildren) {
	                this._initChildren();

	                children = this.children;

	                options[this.idField || "id"] = this.id;

	                if (!this._loaded) {
	                    children._data = undefined;
	                    method = "read";
	                }

	                children.one(CHANGE, proxy(this._childrenLoaded, this));

	                if(this._matchFilter){
	                    options.filter = { field: '_matchFilter', operator: 'eq', value: true };
	                }

	                promise = children[method](options);
	            } else {
	                this.loaded(true);
	            }

	            return promise || $.Deferred().resolve().promise();
	        },

	        parentNode: function() {
	            var array = this.parent();

	            return array.parent();
	        },

	        loaded: function(value) {
	            if (value !== undefined) {
	                this._loaded = value;
	            } else {
	                return this._loaded;
	            }
	        },

	        shouldSerialize: function(field) {
	            return Model.fn.shouldSerialize.call(this, field) &&
	                    field !== "children" &&
	                    field !== "_loaded" &&
	                    field !== "hasChildren" &&
	                    field !== "_childrenOptions";
	        }
	    });

	    function dataMethod(name) {
	        return function() {
	            var data = this._data,
	                result = DataSource.fn[name].apply(this, slice.call(arguments));

	            if (this._data != data) {
	                this._attachBubbleHandlers();
	            }

	            return result;
	        };
	    }

	    var HierarchicalDataSource = DataSource.extend({
	        init: function(options) {
	            var node = Node.define({
	                children: options
	            });

	            if(options.filter && !options.serverFiltering){
	                this._hierarchicalFilter = options.filter;
	                options.filter = null;
	            }

	            DataSource.fn.init.call(this, extend(true, {}, { schema: { modelBase: node, model: node } }, options));

	            this._attachBubbleHandlers();
	        },

	        _attachBubbleHandlers: function() {
	            var that = this;

	            that._data.bind(ERROR, function(e) {
	                that.trigger(ERROR, e);
	            });
	        },

	        read: function(data) {
	            var result = DataSource.fn.read.call(this, data);

	            if(this._hierarchicalFilter){
	                this.filter(this._hierarchicalFilter);
	            }

	            return result;
	        },

	        remove: function(node){
	            var parentNode = node.parentNode(),
	                dataSource = this,
	                result;

	            if (parentNode && parentNode._initChildren) {
	                dataSource = parentNode.children;
	            }

	            result = DataSource.fn.remove.call(dataSource, node);

	            if (parentNode && !dataSource.data().length) {
	                parentNode.hasChildren = false;
	            }

	            return result;
	        },

	        success: dataMethod("success"),

	        data: dataMethod("data"),

	        insert: function(index, model) {
	            var parentNode = this.parent();

	            if (parentNode && parentNode._initChildren) {
	                parentNode.hasChildren = true;
	                parentNode._initChildren();
	            }

	            return DataSource.fn.insert.call(this, index, model);
	        },

	        filter: function(val) {
	            if (val === undefined) {
	                 return this._filter;
	            }

	            if(!this.options.serverFiltering){
	                this._markHierarchicalQuery(val);
	                val = { logic: "or", filters: [val, {field:'_matchFilter', operator: 'equals', value: true }]};
	            }

	            this.trigger("reset");
	            this._query({ filter: val, page: 1 });
	        },

	        _markHierarchicalQuery: function(expressions){
	            var compiled;
	            var predicate; 
	            var fields;
	            var operators;
	            var filter;

	            expressions = normalizeFilter(expressions);

	            if (!expressions || expressions.filters.length === 0) {
	                return this;
	            }

	            compiled = Query.filterExpr(expressions);
	            fields = compiled.fields;
	            operators = compiled.operators;

	            predicate = filter = new Function("d, __f, __o", "return " + compiled.expression);

	            if (fields.length || operators.length) {
	                filter = function(d) {
	                    return predicate(d, fields, operators);
	                };
	            }

	            this._updateHierarchicalFilter(filter);
	        },

	         _updateHierarchicalFilter: function(filter){
	            var current;
	            var data = this._data;
	            var result = false;

	            for (var idx = 0; idx < data.length; idx++) {
	                 current = data[idx];

	                 if(current.hasChildren){
	                     current._matchFilter = current.children._updateHierarchicalFilter(filter);
	                    if(!current._matchFilter){
	                        current._matchFilter = filter(current);
	                    }
	                }else{
	                    current._matchFilter = filter(current);
	                }

	                if(current._matchFilter){
	                    result = true;
	                }
	            }
	            return result;
	        },

	        _find: function(method, value) {
	            var idx, length, node, children;
	            var data = this._data;

	            if (!data) {
	                return;
	            }

	            node = DataSource.fn[method].call(this, value);

	            if (node) {
	                return node;
	            }

	            data = this._flatData(this._data);

	            for (idx = 0, length = data.length; idx < length; idx++) {
	                children = data[idx].children;

	                if (!(children instanceof HierarchicalDataSource)) {
	                    continue;
	                }

	                node = children[method](value);

	                if (node) {
	                    return node;
	                }
	            }
	        },

	        get: function(id) {
	            return this._find("get", id);
	        },

	        getByUid: function(uid) {
	            return this._find("getByUid", uid);
	        }
	    });

	    function inferList(list, fields) {
	        var items = $(list).children(),
	            idx,
	            length,
	            data = [],
	            record,
	            textField = fields[0].field,
	            urlField = fields[1] && fields[1].field,
	            spriteCssClassField = fields[2] && fields[2].field,
	            imageUrlField = fields[3] && fields[3].field,
	            item,
	            id,
	            textChild,
	            className,
	            children;

	        function elements(collection, tagName) {
	            return collection.filter(tagName).add(collection.find(tagName));
	        }

	        for (idx = 0, length = items.length; idx < length; idx++) {
	            record = { _loaded: true };
	            item = items.eq(idx);

	            textChild = item[0].firstChild;
	            children = item.children();
	            list = children.filter("ul");
	            children = children.filter(":not(ul)");

	            id = item.attr("data-id");

	            if (id) {
	                record.id = id;
	            }

	            if (textChild) {
	                record[textField] = textChild.nodeType == 3 ? textChild.nodeValue : children.text();
	            }

	            if (urlField) {
	                record[urlField] = elements(children, "a").attr("href");
	            }

	            if (imageUrlField) {
	                record[imageUrlField] = elements(children, "img").attr("src");
	            }

	            if (spriteCssClassField) {
	                className = elements(children, ".k-sprite").prop("className");
	                record[spriteCssClassField] = className && $.trim(className.replace("k-sprite", ""));
	            }

	            if (list.length) {
	                record.items = inferList(list.eq(0), fields);
	            }

	            if (item.attr("data-hasChildren") == "true") {
	                record.hasChildren = true;
	            }

	            data.push(record);
	        }

	        return data;
	    }

	    HierarchicalDataSource.create = function(options) {
	        options = options && options.push ? { data: options } : options;

	        var dataSource = options || {},
	            data = dataSource.data,
	            fields = dataSource.fields,
	            list = dataSource.list;

	        if (data && data._dataSource) {
	            return data._dataSource;
	        }

	        if (!data && fields && !dataSource.transport) {
	            if (list) {
	                data = inferList(list, fields);
	            }
	        }

	        dataSource.data = data;

	        return dataSource instanceof HierarchicalDataSource ? dataSource : new HierarchicalDataSource(dataSource);
	    };

	    var Buffer = kendo.Observable.extend({
	        init: function(dataSource, viewSize, disablePrefetch) {
	            kendo.Observable.fn.init.call(this);

	            this._prefetching = false;
	            this.dataSource = dataSource;
	            this.prefetch = !disablePrefetch;

	            var buffer = this;

	            dataSource.bind("change", function() {
	                buffer._change();
	            });

	            dataSource.bind("reset", function() {
	                buffer._reset();
	            });

	            this._syncWithDataSource();

	            this.setViewSize(viewSize);
	        },

	        setViewSize: function(viewSize) {
	            this.viewSize = viewSize;
	            this._recalculate();
	        },

	        at: function(index)  {
	            var pageSize = this.pageSize,
	                itemPresent = true;

	            if (index >= this.total()) {
	                this.trigger("endreached", {index: index });
	                return null;
	            }

	            if (!this.useRanges) {
	               return this.dataSource.view()[index];
	            }
	            if (this.useRanges) {
	                // out of range request
	                if (index < this.dataOffset || index >= this.skip + pageSize) {
	                    itemPresent = this.range(Math.floor(index / pageSize) * pageSize);
	                }

	                // prefetch
	                if (index === this.prefetchThreshold) {
	                    this._prefetch();
	                }

	                // mid-range jump - prefetchThreshold and nextPageThreshold may be equal, do not change to else if
	                if (index === this.midPageThreshold) {
	                    this.range(this.nextMidRange, true);
	                }
	                // next range jump
	                else if (index === this.nextPageThreshold) {
	                    this.range(this.nextFullRange);
	                }
	                // pull-back
	                else if (index === this.pullBackThreshold) {
	                    if (this.offset === this.skip) { // from full range to mid range
	                        this.range(this.previousMidRange);
	                    } else { // from mid range to full range
	                        this.range(this.previousFullRange);
	                    }
	                }

	                if (itemPresent) {
	                    return this.dataSource.at(index - this.dataOffset);
	                } else {
	                    this.trigger("endreached", { index: index });
	                    return null;
	                }
	            }
	        },

	        indexOf: function(item) {
	            return this.dataSource.data().indexOf(item) + this.dataOffset;
	        },

	        total: function() {
	            return parseInt(this.dataSource.total(), 10);
	        },

	        next: function() {
	            var buffer = this,
	                pageSize = buffer.pageSize,
	                offset = buffer.skip - buffer.viewSize + pageSize,
	                pageSkip = math.max(math.floor(offset / pageSize), 0) * pageSize;

	            this.offset = offset;
	            this.dataSource.prefetch(pageSkip, pageSize, function() {
	                buffer._goToRange(offset, true);
	            });
	        },

	        range: function(offset, nextRange) {
	            if (this.offset === offset) {
	                return true;
	            }

	            var buffer = this,
	                pageSize = this.pageSize,
	                pageSkip = math.max(math.floor(offset / pageSize), 0) * pageSize,
	                dataSource = this.dataSource;

	            if (nextRange) {
	                pageSkip += pageSize;
	            }

	            if (dataSource.inRange(offset, pageSize)) {
	                this.offset = offset;
	                this._recalculate();
	                this._goToRange(offset);
	                return true;
	            } else if (this.prefetch) {
	                dataSource.prefetch(pageSkip, pageSize, function() {
	                    buffer.offset = offset;
	                    buffer._recalculate();
	                    buffer._goToRange(offset, true);
	                });
	                return false;
	            }

	            return true;
	        },

	        syncDataSource: function() {
	            var offset = this.offset;
	            this.offset = null;
	            this.range(offset);
	        },

	        destroy: function() {
	            this.unbind();
	        },

	        _prefetch: function() {
	            var buffer = this,
	                pageSize = this.pageSize,
	                prefetchOffset = this.skip + pageSize,
	                dataSource = this.dataSource;

	            if (!dataSource.inRange(prefetchOffset, pageSize) && !this._prefetching && this.prefetch) {
	                this._prefetching = true;
	                this.trigger("prefetching", { skip: prefetchOffset, take: pageSize });

	                dataSource.prefetch(prefetchOffset, pageSize, function() {
	                    buffer._prefetching = false;
	                    buffer.trigger("prefetched", { skip: prefetchOffset, take: pageSize });
	                });
	            }
	        },

	        _goToRange: function(offset, expanding) {
	            if (this.offset !== offset) {
	                return;
	            }

	            this.dataOffset = offset;
	            this._expanding = expanding;
	            this.dataSource.range(offset, this.pageSize);
	            this.dataSource.enableRequestsInProgress();
	        },

	        _reset: function() {
	            this._syncPending = true;
	        },

	        _change: function() {
	            var dataSource = this.dataSource;

	            this.length = this.useRanges ? dataSource.lastRange().end : dataSource.view().length;

	            if (this._syncPending) {
	                this._syncWithDataSource();
	                this._recalculate();
	                this._syncPending = false;
	                this.trigger("reset", { offset: this.offset });
	            }

	            this.trigger("resize");

	            if (this._expanding) {
	                this.trigger("expand");
	            }

	            delete this._expanding;
	        },

	        _syncWithDataSource: function() {
	            var dataSource = this.dataSource;

	            this._firstItemUid = dataSource.firstItemUid();
	            this.dataOffset = this.offset = dataSource.skip() || 0;
	            this.pageSize = dataSource.pageSize();
	            this.useRanges = dataSource.options.serverPaging;
	        },

	        _recalculate: function() {
	            var pageSize = this.pageSize,
	                offset = this.offset,
	                viewSize = this.viewSize,
	                skip = Math.ceil(offset / pageSize) * pageSize;

	            this.skip = skip;
	            this.midPageThreshold = skip + pageSize - 1;
	            this.nextPageThreshold = skip + viewSize - 1;
	            this.prefetchThreshold = skip + Math.floor(pageSize / 3 * 2);
	            this.pullBackThreshold = this.offset - 1;

	            this.nextMidRange = skip + pageSize - viewSize;
	            this.nextFullRange = skip;
	            this.previousMidRange = offset - viewSize;
	            this.previousFullRange = skip - pageSize;
	        }
	    });

	    var BatchBuffer = kendo.Observable.extend({
	        init: function(dataSource, batchSize) {
	            var batchBuffer = this;

	            kendo.Observable.fn.init.call(batchBuffer);

	            this.dataSource = dataSource;
	            this.batchSize = batchSize;
	            this._total = 0;

	            this.buffer = new Buffer(dataSource, batchSize * 3);

	            this.buffer.bind({
	                "endreached": function (e) {
	                    batchBuffer.trigger("endreached", { index: e.index });
	                },
	                "prefetching": function (e) {
	                    batchBuffer.trigger("prefetching", { skip: e.skip, take: e.take });
	                },
	                "prefetched": function (e) {
	                    batchBuffer.trigger("prefetched", { skip: e.skip, take: e.take });
	                },
	                "reset": function () {
	                    batchBuffer._total = 0;
	                    batchBuffer.trigger("reset");
	                },
	                "resize": function () {
	                    batchBuffer._total = Math.ceil(this.length / batchBuffer.batchSize);
	                    batchBuffer.trigger("resize", { total: batchBuffer.total(), offset: this.offset });
	                }
	            });
	        },

	        syncDataSource: function() {
	            this.buffer.syncDataSource();
	        },

	        at: function(index) {
	            var buffer = this.buffer,
	                skip = index * this.batchSize,
	                take = this.batchSize,
	                view = [],
	                item;

	            if (buffer.offset > skip) {
	                buffer.at(buffer.offset - 1);
	            }

	            for (var i = 0; i < take; i++) {
	                item = buffer.at(skip + i);

	                if (item === null) {
	                    break;
	                }

	                view.push(item);
	            }

	            return view;
	        },

	        total: function() {
	            return this._total;
	        },

	        destroy: function() {
	            this.buffer.destroy();
	            this.unbind();
	        }
	    });

	    extend(true, kendo.data, {
	        readers: {
	            json: DataReader
	        },
	        Query: Query,
	        DataSource: DataSource,
	        HierarchicalDataSource: HierarchicalDataSource,
	        Node: Node,
	        ObservableObject: ObservableObject,
	        ObservableArray: ObservableArray,
	        LazyObservableArray: LazyObservableArray,
	        LocalTransport: LocalTransport,
	        RemoteTransport: RemoteTransport,
	        Cache: Cache,
	        DataReader: DataReader,
	        Model: Model,
	        Buffer: Buffer,
	        BatchBuffer: BatchBuffer
	    });
	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(422));


/***/ }),

/***/ 440:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(25);

/***/ }),

/***/ 441:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(26);

/***/ })

/******/ });

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(555);


/***/ }),

/***/ 421:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(0);

/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 555:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(421) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "userevents",
	    name: "User Events",
	    category: "framework",
	    depends: [ "core" ],
	    hidden: true
	};

	(function ($, undefined) {
	    var kendo = window.kendo,
	        support = kendo.support,
	        Class = kendo.Class,
	        Observable = kendo.Observable,
	        now = $.now,
	        extend = $.extend,
	        OS = support.mobileOS,
	        invalidZeroEvents = OS && OS.android,
	        DEFAULT_MIN_HOLD = 800,
	        DEFAULT_THRESHOLD = support.browser.msie ? 5 : 0, // WP8 and W8 are very sensitive and always report move.

	        // UserEvents events
	        PRESS = "press",
	        HOLD = "hold",
	        SELECT = "select",
	        START = "start",
	        MOVE = "move",
	        END = "end",
	        CANCEL = "cancel",
	        TAP = "tap",
	        RELEASE = "release",
	        GESTURESTART = "gesturestart",
	        GESTURECHANGE = "gesturechange",
	        GESTUREEND = "gestureend",
	        GESTURETAP = "gesturetap";

	    var THRESHOLD = {
	        "api": 0,
	        "touch": 0,
	        "mouse": 9,
	        "pointer": 9
	    };

	    var ENABLE_GLOBAL_SURFACE = (!support.touch || support.mouseAndTouchPresent);

	    function touchDelta(touch1, touch2) {
	        var x1 = touch1.x.location,
	            y1 = touch1.y.location,
	            x2 = touch2.x.location,
	            y2 = touch2.y.location,
	            dx = x1 - x2,
	            dy = y1 - y2;

	        return {
	            center: {
	               x: (x1 + x2) / 2,
	               y: (y1 + y2) / 2
	            },

	            distance: Math.sqrt(dx*dx + dy*dy)
	        };
	    }

	    function getTouches(e) {
	        var touches = [],
	            originalEvent = e.originalEvent,
	            currentTarget = e.currentTarget,
	            idx = 0, length,
	            changedTouches,
	            touch;

	        if (e.api) {
	            touches.push({
	                id: 2,  // hardcoded ID for API call;
	                event: e,
	                target: e.target,
	                currentTarget: e.target,
	                location: e,
	                type: "api"
	            });
	        }
	        else if (e.type.match(/touch/)) {
	            changedTouches = originalEvent ? originalEvent.changedTouches : [];
	            for (length = changedTouches.length; idx < length; idx ++) {
	                touch = changedTouches[idx];
	                touches.push({
	                    location: touch,
	                    event: e,
	                    target: touch.target,
	                    currentTarget: currentTarget,
	                    id: touch.identifier,
	                    type: "touch"
	                });
	            }
	        }
	        else if (support.pointers || support.msPointers) {
	            touches.push({
	                location: originalEvent,
	                event: e,
	                target: e.target,
	                currentTarget: currentTarget,
	                id: originalEvent.pointerId,
	                type: "pointer"
	            });
	        } else {
	            touches.push({
	                id: 1, // hardcoded ID for mouse event;
	                event: e,
	                target: e.target,
	                currentTarget: currentTarget,
	                location: e,
	                type: "mouse"
	            });
	        }

	        return touches;
	    }

	    var TouchAxis = Class.extend({
	        init: function(axis, location) {
	            var that = this;

	            that.axis = axis;

	            that._updateLocationData(location);

	            that.startLocation = that.location;
	            that.velocity = that.delta = 0;
	            that.timeStamp = now();
	        },

	        move: function(location) {
	            var that = this,
	                offset = location["page" + that.axis],
	                timeStamp = now(),
	                timeDelta = (timeStamp - that.timeStamp) || 1; // Firing manually events in tests can make this 0;

	            if (!offset && invalidZeroEvents) {
	                return;
	            }

	            that.delta = offset - that.location;

	            that._updateLocationData(location);

	            that.initialDelta = offset - that.startLocation;
	            that.velocity = that.delta / timeDelta;
	            that.timeStamp = timeStamp;
	        },

	        _updateLocationData: function(location) {
	            var that = this, axis = that.axis;

	            that.location = location["page" + axis];
	            that.client = location["client" + axis];
	            that.screen = location["screen" + axis];
	        }
	    });

	    var Touch = Class.extend({
	        init: function(userEvents, target, touchInfo) {
	            extend(this, {
	                x: new TouchAxis("X", touchInfo.location),
	                y: new TouchAxis("Y", touchInfo.location),
	                type: touchInfo.type,
	                useClickAsTap: userEvents.useClickAsTap,
	                threshold: userEvents.threshold || THRESHOLD[touchInfo.type],
	                userEvents: userEvents,
	                target: target,
	                currentTarget: touchInfo.currentTarget,
	                initialTouch: touchInfo.target,
	                id: touchInfo.id,
	                pressEvent: touchInfo,
	                _moved: false,
	                _finished: false
	            });
	        },

	        press: function() {
	            this._holdTimeout = setTimeout($.proxy(this, "_hold"), this.userEvents.minHold);
	            this._trigger(PRESS, this.pressEvent);
	        },

	        _hold: function() {
	            this._trigger(HOLD, this.pressEvent);
	        },

	        move: function(touchInfo) {
	            var that = this;

	            if (that._finished) { return; }

	            that.x.move(touchInfo.location);
	            that.y.move(touchInfo.location);

	            if (!that._moved) {
	                if (that._withinIgnoreThreshold()) {
	                    return;
	                }

	                if (!UserEvents.current || UserEvents.current === that.userEvents) {
	                    that._start(touchInfo);
	                } else {
	                    return that.dispose();
	                }
	            }

	            // Event handlers may cancel the drag in the START event handler, hence the double check for pressed.
	            if (!that._finished) {
	                that._trigger(MOVE, touchInfo);
	            }
	        },

	        end: function(touchInfo) {
	            this.endTime = now();

	            if (this._finished) { return; }

	            // Mark the object as finished if there are blocking operations in the event handlers (alert/confirm)
	            this._finished = true;

	            this._trigger(RELEASE, touchInfo); // Release should be fired before TAP (as click is after mouseup/touchend)

	            if (this._moved) {
	                this._trigger(END, touchInfo);
	            } else {
	                if (!this.useClickAsTap) {
	                    this._trigger(TAP, touchInfo);
	                }
	            }

	            clearTimeout(this._holdTimeout);

	            this.dispose();
	        },

	        dispose: function() {
	            var userEvents = this.userEvents,
	                activeTouches = userEvents.touches;

	            this._finished = true;
	            this.pressEvent = null;
	            clearTimeout(this._holdTimeout);

	            activeTouches.splice($.inArray(this, activeTouches), 1);
	        },

	        skip: function() {
	            this.dispose();
	        },

	        cancel: function() {
	            this.dispose();
	        },

	        isMoved: function() {
	            return this._moved;
	        },

	        _start: function(touchInfo) {
	            clearTimeout(this._holdTimeout);

	            this.startTime = now();
	            this._moved = true;
	            this._trigger(START, touchInfo);
	        },

	        _trigger: function(name, touchInfo) {
	            var that = this,
	                jQueryEvent = touchInfo.event,
	                data = {
	                    touch: that,
	                    x: that.x,
	                    y: that.y,
	                    target: that.target,
	                    event: jQueryEvent
	                };

	            if(that.userEvents.notify(name, data)) {
	                jQueryEvent.preventDefault();
	            }
	        },

	        _withinIgnoreThreshold: function() {
	            var xDelta = this.x.initialDelta,
	                yDelta = this.y.initialDelta;

	            return Math.sqrt(xDelta * xDelta + yDelta * yDelta) <= this.threshold;
	        }
	    });

	    function withEachUpEvent(callback) {
	        var downEvents = kendo.eventMap.up.split(" "),
	            idx = 0,
	            length = downEvents.length;

	        for(; idx < length; idx ++) {
	            callback(downEvents[idx]);
	        }
	    }

	    var UserEvents = Observable.extend({
	        init: function(element, options) {
	            var that = this,
	                filter,
	                ns = kendo.guid();

	            options = options || {};
	            filter = that.filter = options.filter;
	            that.threshold = options.threshold || DEFAULT_THRESHOLD;
	            that.minHold = options.minHold || DEFAULT_MIN_HOLD;
	            that.touches = [];
	            that._maxTouches = options.multiTouch ? 2 : 1;
	            that.allowSelection = options.allowSelection;
	            that.captureUpIfMoved = options.captureUpIfMoved;
	            that.useClickAsTap = !options.fastTap && !support.delayedClick();
	            that.eventNS = ns;

	            element = $(element).handler(that);
	            Observable.fn.init.call(that);

	            extend(that, {
	                element: element,
	                // the touch events lock to the element anyway, so no need for the global setting
	                surface: options.global && ENABLE_GLOBAL_SURFACE ? $(element[0].ownerDocument.documentElement) : $(options.surface || element),
	                stopPropagation: options.stopPropagation,
	                pressed: false
	            });

	            that.surface.handler(that)
	                .on(kendo.applyEventMap("move", ns), "_move")
	                .on(kendo.applyEventMap("up cancel", ns), "_end");

	            element.on(kendo.applyEventMap("down", ns), filter, "_start");

	            if (that.useClickAsTap) {
	                element.on(kendo.applyEventMap("click", ns), filter, "_click");
	            }

	            if (support.pointers || support.msPointers) {
	                if (support.browser.version < 11) {
	                    element.css("-ms-touch-action", "pinch-zoom double-tap-zoom");
	                } else {
	                    element.css("touch-action", options.touchAction || "none");
	                }
	            }

	            if (options.preventDragEvent) {
	                element.on(kendo.applyEventMap("dragstart", ns), kendo.preventDefault);
	            }

	            element.on(kendo.applyEventMap("mousedown", ns), filter, { root: element }, "_select");

	            if (that.captureUpIfMoved && support.eventCapture) {
	                var surfaceElement = that.surface[0],
	                    preventIfMovingProxy = $.proxy(that.preventIfMoving, that);

	                withEachUpEvent(function(eventName) {
	                    surfaceElement.addEventListener(eventName, preventIfMovingProxy, true);
	                });
	            }

	            that.bind([
	            PRESS,
	            HOLD,
	            TAP,
	            START,
	            MOVE,
	            END,
	            RELEASE,
	            CANCEL,
	            GESTURESTART,
	            GESTURECHANGE,
	            GESTUREEND,
	            GESTURETAP,
	            SELECT
	            ], options);
	        },

	        preventIfMoving: function(e) {
	            if (this._isMoved()) {
	                e.preventDefault();
	            }
	        },

	        destroy: function() {
	            var that = this;

	            if (that._destroyed) {
	                return;
	            }

	            that._destroyed = true;

	            if (that.captureUpIfMoved && support.eventCapture) {
	                var surfaceElement = that.surface[0];
	                withEachUpEvent(function(eventName) {
	                    surfaceElement.removeEventListener(eventName, that.preventIfMoving);
	                });
	            }

	            that.element.kendoDestroy(that.eventNS);
	            that.surface.kendoDestroy(that.eventNS);
	            that.element.removeData("handler");
	            that.surface.removeData("handler");
	            that._disposeAll();

	            that.unbind();
	            delete that.surface;
	            delete that.element;
	            delete that.currentTarget;
	        },

	        capture: function() {
	            UserEvents.current = this;
	        },

	        cancel: function() {
	            this._disposeAll();
	            this.trigger(CANCEL);
	        },

	        notify: function(eventName, data) {
	            var that = this,
	                touches = that.touches;

	            if (this._isMultiTouch()) {
	                switch(eventName) {
	                    case MOVE:
	                        eventName = GESTURECHANGE;
	                        break;
	                    case END:
	                        eventName = GESTUREEND;
	                        break;
	                    case TAP:
	                        eventName = GESTURETAP;
	                        break;
	                }

	                extend(data, {touches: touches}, touchDelta(touches[0], touches[1]));
	            }

	            return this.trigger(eventName, extend(data, {type: eventName}));
	        },

	        // API
	        press: function(x, y, target) {
	            this._apiCall("_start", x, y, target);
	        },

	        move: function(x, y) {
	            this._apiCall("_move", x, y);
	        },

	        end: function(x, y) {
	            this._apiCall("_end", x, y);
	        },

	        _isMultiTouch: function() {
	            return this.touches.length > 1;
	        },

	        _maxTouchesReached: function() {
	            return this.touches.length >= this._maxTouches;
	        },

	        _disposeAll: function() {
	            var touches = this.touches;
	            while (touches.length > 0) {
	                touches.pop().dispose();
	            }
	        },

	        _isMoved: function() {
	            return $.grep(this.touches, function(touch) {
	                return touch.isMoved();
	            }).length;
	        },

	        _select: function(e) {
	           if (!this.allowSelection || this.trigger(SELECT, { event: e })) {
	               e.preventDefault();
	           }
	        },

	        _start: function(e) {
	            var that = this,
	                idx = 0,
	                filter = that.filter,
	                target,
	                touches = getTouches(e),
	                length = touches.length,
	                touch,
	                which = e.which;

	            if ((which && which > 1) || (that._maxTouchesReached())){
	                return;
	            }

	            UserEvents.current = null;

	            that.currentTarget = e.currentTarget;

	            if (that.stopPropagation) {
	                e.stopPropagation();
	            }

	            for (; idx < length; idx ++) {
	                if (that._maxTouchesReached()) {
	                    break;
	                }

	                touch = touches[idx];

	                if (filter) {
	                    target = $(touch.currentTarget); // target.is(filter) ? target : target.closest(filter, that.element);
	                } else {
	                    target = that.element;
	                }

	                if (!target.length) {
	                    continue;
	                }

	                touch = new Touch(that, target, touch);
	                that.touches.push(touch);
	                touch.press();

	                if (that._isMultiTouch()) {
	                    that.notify("gesturestart", {});
	                }
	            }
	        },

	        _move: function(e) {
	            this._eachTouch("move", e);
	        },

	        _end: function(e) {
	            this._eachTouch("end", e);
	        },

	        _click: function(e) {
	            var data = {
	                touch: {
	                    initialTouch: e.target,
	                    target: $(e.currentTarget),
	                    endTime: now(),
	                    x: {
	                        location: e.pageX,
	                        client: e.clientX
	                    },
	                    y: {
	                        location: e.pageY,
	                        client: e.clientY
	                    }
	                },
	                x: e.pageX,
	                y: e.pageY,
	                target: $(e.currentTarget),
	                event: e,
	                type: "tap"
	            };

	            if (this.trigger("tap", data)) {
	                e.preventDefault();
	            }
	        },

	        _eachTouch: function(methodName, e) {
	            var that = this,
	                dict = {},
	                touches = getTouches(e),
	                activeTouches = that.touches,
	                idx,
	                touch,
	                touchInfo,
	                matchingTouch;

	            for (idx = 0; idx < activeTouches.length; idx ++) {
	                touch = activeTouches[idx];
	                dict[touch.id] = touch;
	            }

	            for (idx = 0; idx < touches.length; idx ++) {
	                touchInfo = touches[idx];
	                matchingTouch = dict[touchInfo.id];

	                if (matchingTouch) {
	                    matchingTouch[methodName](touchInfo);
	                }
	            }
	        },

	        _apiCall: function(type, x, y, target) {
	            this[type]({
	                api: true,
	                pageX: x,
	                pageY: y,
	                clientX: x,
	                clientY: y,
	                target: $(target || this.element)[0],
	                stopPropagation: $.noop,
	                preventDefault: $.noop
	            });
	        }
	    });

	    UserEvents.defaultThreshold = function(value) {
	        DEFAULT_THRESHOLD = value;
	    };

	    UserEvents.minHold = function(value) {
	        DEFAULT_MIN_HOLD = value;
	    };

	    kendo.getTouches = getTouches;
	    kendo.touchDelta = touchDelta;
	    kendo.UserEvents = UserEvents;
	 })(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(422));


/***/ })

/******/ });

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(452);


/***/ }),

/***/ 421:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(0);

/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 435:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(5);

/***/ }),

/***/ 452:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(421), __webpack_require__(435) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "draganddrop",
	    name: "Drag & drop",
	    category: "framework",
	    description: "Drag & drop functionality for any DOM element.",
	    depends: [ "core", "userevents" ]
	};

	(function ($, undefined) {
	    var kendo = window.kendo,
	        support = kendo.support,
	        document = window.document,
	        $window = $(window),
	        Class = kendo.Class,
	        Widget = kendo.ui.Widget,
	        Observable = kendo.Observable,
	        UserEvents = kendo.UserEvents,
	        proxy = $.proxy,
	        extend = $.extend,
	        getOffset = kendo.getOffset,
	        draggables = {},
	        dropTargets = {},
	        dropAreas = {},
	        lastDropTarget,
	        elementUnderCursor = kendo.elementUnderCursor,
	        KEYUP = "keyup",
	        CHANGE = "change",

	        // Draggable events
	        DRAGSTART = "dragstart",
	        HOLD = "hold",
	        DRAG = "drag",
	        DRAGEND = "dragend",
	        DRAGCANCEL = "dragcancel",
	        HINTDESTROYED = "hintDestroyed",

	        // DropTarget events
	        DRAGENTER = "dragenter",
	        DRAGLEAVE = "dragleave",
	        DROP = "drop";

	    function contains(parent, child) {
	        try {
	            return $.contains(parent, child) || parent == child;
	        } catch (e) {
	            return false;
	        }
	    }

	    function numericCssPropery(element, property) {
	        return parseInt(element.css(property), 10) || 0;
	    }

	    function within(value, range) {
	        return Math.min(Math.max(value, range.min), range.max);
	    }

	    function containerBoundaries(container, element) {
	        var offset = getOffset(container),
	            outerWidth = kendo._outerWidth,
	            outerHeight = kendo._outerHeight,
	            minX = offset.left + numericCssPropery(container, "borderLeftWidth") + numericCssPropery(container, "paddingLeft"),
	            minY = offset.top + numericCssPropery(container, "borderTopWidth") + numericCssPropery(container, "paddingTop"),
	            maxX = minX + container.width() - outerWidth(element, true),
	            maxY = minY + container.height() - outerHeight(element, true);

	        return {
	            x: { min: minX, max: maxX },
	            y: { min: minY, max: maxY }
	        };
	    }

	    function checkTarget(target, targets, areas) {
	        var theTarget, theFilter, i = 0,
	            targetLen = targets && targets.length,
	            areaLen = areas && areas.length;

	        while (target && target.parentNode) {
	            for (i = 0; i < targetLen; i ++) {
	                theTarget = targets[i];
	                if (theTarget.element[0] === target) {
	                    return { target: theTarget, targetElement: target };
	                }
	            }

	            for (i = 0; i < areaLen; i ++) {
	                theFilter = areas[i];
	                if ($.contains(theFilter.element[0], target) && support.matchesSelector.call(target, theFilter.options.filter)) {
	                    return { target: theFilter, targetElement: target };
	                }
	            }

	            target = target.parentNode;
	        }

	        return undefined;
	    }

	    var TapCapture = Observable.extend({
	        init: function(element, options) {
	            var that = this,
	                domElement = element[0];

	            that.capture = false;

	            if (domElement.addEventListener) {
	                $.each(kendo.eventMap.down.split(" "), function() {
	                    domElement.addEventListener(this, proxy(that._press, that), true);
	                });
	                $.each(kendo.eventMap.up.split(" "), function() {
	                    domElement.addEventListener(this, proxy(that._release, that), true);
	                });
	            } else {
	                $.each(kendo.eventMap.down.split(" "), function() {
	                    domElement.attachEvent(this, proxy(that._press, that));
	                });
	                $.each(kendo.eventMap.up.split(" "), function() {
	                    domElement.attachEvent(this, proxy(that._release, that));
	                });
	            }

	            Observable.fn.init.call(that);

	            that.bind(["press", "release"], options || {});
	        },

	        captureNext: function() {
	            this.capture = true;
	        },

	        cancelCapture: function() {
	            this.capture = false;
	        },

	        _press: function(e) {
	            var that = this;
	            that.trigger("press");
	            if (that.capture) {
	                e.preventDefault();
	            }
	        },

	        _release: function(e) {
	            var that = this;
	            that.trigger("release");

	            if (that.capture) {
	                e.preventDefault();
	                that.cancelCapture();
	            }
	        }
	    });

	    var PaneDimension = Observable.extend({
	        init: function(options) {
	            var that = this;
	            Observable.fn.init.call(that);

	            that.forcedEnabled = false;

	            $.extend(that, options);

	            that.scale = 1;

	            if (that.horizontal) {
	                that.measure = "offsetWidth";
	                that.scrollSize = "scrollWidth";
	                that.axis = "x";
	            } else {
	                that.measure = "offsetHeight";
	                that.scrollSize = "scrollHeight";
	                that.axis = "y";
	            }
	        },

	        makeVirtual: function() {
	            $.extend(this, {
	                virtual: true,
	                forcedEnabled: true,
	                _virtualMin: 0,
	                _virtualMax: 0
	            });
	        },

	        virtualSize: function(min, max) {
	            if (this._virtualMin !== min || this._virtualMax !== max) {
	                this._virtualMin = min;
	                this._virtualMax = max;
	                this.update();
	            }
	        },

	        outOfBounds: function(offset) {
	            return offset > this.max || offset < this.min;
	        },

	        forceEnabled: function() {
	            this.forcedEnabled = true;
	        },

	        getSize: function() {
	            return this.container[0][this.measure];
	        },

	        getTotal: function() {
	            return this.element[0][this.scrollSize];
	        },

	        rescale: function(scale) {
	            this.scale = scale;
	        },

	        update: function(silent) {
	            var that = this,
	                total = that.virtual ? that._virtualMax : that.getTotal(),
	                scaledTotal = total * that.scale,
	                size = that.getSize();

	            if (total === 0 && !that.forcedEnabled) {
	                return; // we are not visible.
	            }

	            that.max = that.virtual ? -that._virtualMin : 0;
	            that.size = size;
	            that.total = scaledTotal;
	            that.min = Math.min(that.max, size - scaledTotal);
	            that.minScale = size / total;
	            that.centerOffset = (scaledTotal - size) / 2;

	            that.enabled = that.forcedEnabled || (scaledTotal > size);

	            if (!silent) {
	                that.trigger(CHANGE, that);
	            }
	        }
	    });

	    var PaneDimensions = Observable.extend({
	        init: function(options) {
	            var that = this;

	            Observable.fn.init.call(that);

	            that.x = new PaneDimension(extend({horizontal: true}, options));
	            that.y = new PaneDimension(extend({horizontal: false}, options));
	            that.container = options.container;
	            that.forcedMinScale = options.minScale;
	            that.maxScale = options.maxScale || 100;

	            that.bind(CHANGE, options);
	        },

	        rescale: function(newScale) {
	            this.x.rescale(newScale);
	            this.y.rescale(newScale);
	            this.refresh();
	        },

	        centerCoordinates: function() {
	            return { x: Math.min(0, -this.x.centerOffset), y: Math.min(0, -this.y.centerOffset) };
	        },

	        refresh: function() {
	            var that = this;
	            that.x.update();
	            that.y.update();
	            that.enabled = that.x.enabled || that.y.enabled;
	            that.minScale = that.forcedMinScale || Math.min(that.x.minScale, that.y.minScale);
	            that.fitScale = Math.max(that.x.minScale, that.y.minScale);
	            that.trigger(CHANGE);
	        }
	    });

	    var PaneAxis = Observable.extend({
	        init: function(options) {
	            var that = this;
	            extend(that, options);
	            Observable.fn.init.call(that);
	        },

	        outOfBounds: function() {
	            return this.dimension.outOfBounds(this.movable[this.axis]);
	        },

	        dragMove: function(delta) {
	            var that = this,
	                dimension = that.dimension,
	                axis = that.axis,
	                movable = that.movable,
	                position = movable[axis] + delta;

	            if (!dimension.enabled) {
	                return;
	            }

	            if ((position < dimension.min && delta < 0) || (position > dimension.max && delta > 0)) {
	                delta *= that.resistance;
	            }

	            movable.translateAxis(axis, delta);
	            that.trigger(CHANGE, that);
	        }
	    });

	    var Pane = Class.extend({

	        init: function(options) {
	            var that = this,
	                x,
	                y,
	                resistance,
	                movable;

	            extend(that, {elastic: true}, options);

	            resistance = that.elastic ? 0.5 : 0;
	            movable = that.movable;

	            that.x = x = new PaneAxis({
	                axis: "x",
	                dimension: that.dimensions.x,
	                resistance: resistance,
	                movable: movable
	            });

	            that.y = y = new PaneAxis({
	                axis: "y",
	                dimension: that.dimensions.y,
	                resistance: resistance,
	                movable: movable
	            });

	            that.userEvents.bind(["press", "move", "end", "gesturestart", "gesturechange"], {
	                gesturestart: function(e) {
	                    that.gesture = e;
	                    that.offset = that.dimensions.container.offset();
	                },

	                press: function(e) {
	                    if ($(e.event.target).closest("a").is("[data-navigate-on-press=true]")) {
	                        e.sender.cancel();
	                    }
	                },

	                gesturechange: function(e) {
	                    var previousGesture = that.gesture,
	                        previousCenter = previousGesture.center,

	                        center = e.center,

	                        scaleDelta = e.distance / previousGesture.distance,

	                        minScale = that.dimensions.minScale,
	                        maxScale = that.dimensions.maxScale,
	                        coordinates;

	                    if (movable.scale <= minScale && scaleDelta < 1) {
	                        // Resist shrinking. Instead of shrinking from 1 to 0.5, it will shrink to 0.5 + (1 /* minScale */ - 0.5) * 0.8 = 0.9;
	                        scaleDelta += (1 - scaleDelta) * 0.8;
	                    }

	                    if (movable.scale * scaleDelta >= maxScale) {
	                        scaleDelta = maxScale / movable.scale;
	                    }

	                    var offsetX = movable.x + that.offset.left,
	                        offsetY = movable.y + that.offset.top;

	                    coordinates = {
	                        x: (offsetX - previousCenter.x) * scaleDelta + center.x - offsetX,
	                        y: (offsetY - previousCenter.y) * scaleDelta + center.y - offsetY
	                    };

	                    movable.scaleWith(scaleDelta);

	                    x.dragMove(coordinates.x);
	                    y.dragMove(coordinates.y);

	                    that.dimensions.rescale(movable.scale);
	                    that.gesture = e;
	                    e.preventDefault();
	                },

	                move: function(e) {
	                    if (e.event.target.tagName.match(/textarea|input/i)) {
	                        return;
	                    }

	                    if (x.dimension.enabled || y.dimension.enabled) {
	                        x.dragMove(e.x.delta);
	                        y.dragMove(e.y.delta);
	                        e.preventDefault();
	                    } else {
	                        e.touch.skip();
	                    }
	                },

	                end: function(e) {
	                    e.preventDefault();
	                }
	            });
	        }
	    });

	    var TRANSFORM_STYLE = support.transitions.prefix + "Transform",
	        translate;


	    if (support.hasHW3D) {
	        translate = function(x, y, scale) {
	            return "translate3d(" + x + "px," + y +"px,0) scale(" + scale + ")";
	        };
	    } else {
	        translate = function(x, y, scale) {
	            return "translate(" + x + "px," + y +"px) scale(" + scale + ")";
	        };
	    }

	    var Movable = Observable.extend({
	        init: function(element) {
	            var that = this;

	            Observable.fn.init.call(that);

	            that.element = $(element);
	            that.element[0].style.webkitTransformOrigin = "left top";
	            that.x = 0;
	            that.y = 0;
	            that.scale = 1;
	            that._saveCoordinates(translate(that.x, that.y, that.scale));
	        },

	        translateAxis: function(axis, by) {
	            this[axis] += by;
	            this.refresh();
	        },

	        scaleTo: function(scale) {
	            this.scale = scale;
	            this.refresh();
	        },

	        scaleWith: function(scaleDelta) {
	            this.scale *= scaleDelta;
	            this.refresh();
	        },

	        translate: function(coordinates) {
	            this.x += coordinates.x;
	            this.y += coordinates.y;
	            this.refresh();
	        },

	        moveAxis: function(axis, value) {
	            this[axis] = value;
	            this.refresh();
	        },

	        moveTo: function(coordinates) {
	            extend(this, coordinates);
	            this.refresh();
	        },

	        refresh: function() {
	            var that = this,
	                x = that.x,
	                y = that.y,
	                newCoordinates;

	            if (that.round) {
	                x = Math.round(x);
	                y = Math.round(y);
	            }

	            newCoordinates = translate(x, y, that.scale);

	            if (newCoordinates != that.coordinates) {
	                if (kendo.support.browser.msie && kendo.support.browser.version < 10) {
	                    that.element[0].style.position = "absolute";
	                    that.element[0].style.left = that.x + "px";
	                    that.element[0].style.top = that.y + "px";

	                } else {
	                    that.element[0].style[TRANSFORM_STYLE] = newCoordinates;
	                }
	                that._saveCoordinates(newCoordinates);
	                that.trigger(CHANGE);
	            }
	        },

	        _saveCoordinates: function(coordinates) {
	            this.coordinates = coordinates;
	        }
	    });

	    function destroyDroppable(collection, widget) {
	        var groupName = widget.options.group,
	        droppables = collection[groupName],
	        i;

	        Widget.fn.destroy.call(widget);

	        if (droppables.length > 1) {
	            for (i = 0; i < droppables.length; i++) {
	                if (droppables[i] == widget) {
	                    droppables.splice(i, 1);
	                    break;
	                }
	            }
	        } else {
	            droppables.length = 0; // WTF, porting this from the previous destroyGroup
	            delete collection[groupName];
	        }
	    }

	    var DropTarget = Widget.extend({
	        init: function(element, options) {
	            var that = this;

	            Widget.fn.init.call(that, element, options);

	            var group = that.options.group;

	            if (!(group in dropTargets)) {
	                dropTargets[group] = [ that ];
	            } else {
	                dropTargets[group].push( that );
	            }
	        },

	        events: [
	            DRAGENTER,
	            DRAGLEAVE,
	            DROP
	        ],

	        options: {
	            name: "DropTarget",
	            group: "default"
	        },

	        destroy: function() {
	            destroyDroppable(dropTargets, this);
	        },

	        _trigger: function(eventName, e) {
	            var that = this,
	                draggable = draggables[that.options.group];

	            if (draggable) {
	                return that.trigger(eventName, extend({}, e.event, {
	                           draggable: draggable,
	                           dropTarget: e.dropTarget
	                       }));
	            }
	        },

	        _over: function(e) {
	            this._trigger(DRAGENTER, e);
	        },

	        _out: function(e) {
	            this._trigger(DRAGLEAVE, e);
	        },

	        _drop: function(e) {
	            var that = this,
	                draggable = draggables[that.options.group];

	            if (draggable) {
	                draggable.dropped = !that._trigger(DROP, e);
	            }
	        }
	    });

	    DropTarget.destroyGroup = function(groupName) {
	        var group = dropTargets[groupName] || dropAreas[groupName],
	            i;

	        if (group) {
	            for (i = 0; i < group.length; i++) {
	                Widget.fn.destroy.call(group[i]);
	            }

	            group.length = 0;
	            delete dropTargets[groupName];
	            delete dropAreas[groupName];
	        }
	    };

	    DropTarget._cache = dropTargets;

	    var DropTargetArea = DropTarget.extend({
	        init: function(element, options) {
	            var that = this;

	            Widget.fn.init.call(that, element, options);

	            var group = that.options.group;

	            if (!(group in dropAreas)) {
	                dropAreas[group] = [ that ];
	            } else {
	                dropAreas[group].push( that );
	            }
	        },

	        destroy: function() {
	            destroyDroppable(dropAreas, this);
	        },

	        options: {
	            name: "DropTargetArea",
	            group: "default",
	            filter: null
	        }
	    });

	    var Draggable = Widget.extend({
	        init: function (element, options) {
	            var that = this;

	            Widget.fn.init.call(that, element, options);

	            that._activated = false;

	            that.userEvents = new UserEvents(that.element, {
	                global: true,
	                allowSelection: true,
	                filter: that.options.filter,
	                threshold: that.options.distance,
	                start: proxy(that._start, that),
	                hold: proxy(that._hold, that),
	                move: proxy(that._drag, that),
	                end: proxy(that._end, that),
	                cancel: proxy(that._cancel, that),
	                select: proxy(that._select, that)
	            });

	            that._afterEndHandler = proxy(that._afterEnd, that);
	            that._captureEscape = proxy(that._captureEscape, that);
	        },

	        events: [
	            HOLD,
	            DRAGSTART,
	            DRAG,
	            DRAGEND,
	            DRAGCANCEL,
	            HINTDESTROYED
	        ],

	        options: {
	            name: "Draggable",
	            distance: ( kendo.support.touch ? 0 : 5),
	            group: "default",
	            cursorOffset: null,
	            axis: null,
	            container: null,
	            filter: null,
	            ignore: null,
	            holdToDrag: false,
	            autoScroll: false,
	            dropped: false
	        },

	        cancelHold: function() {
	            this._activated = false;
	        },

	        _captureEscape: function(e) {
	            var that = this;

	            if (e.keyCode === kendo.keys.ESC) {
	                that._trigger(DRAGCANCEL, { event: e });
	                that.userEvents.cancel();
	            }
	        },

	        _updateHint: function(e) {
	            var that = this,
	                coordinates,
	                options = that.options,
	                boundaries = that.boundaries,
	                axis = options.axis,
	                cursorOffset = that.options.cursorOffset;

	            if (cursorOffset) {
	               coordinates = { left: e.x.location + cursorOffset.left, top: e.y.location + cursorOffset.top };
	            } else {
	                that.hintOffset.left += e.x.delta;
	                that.hintOffset.top += e.y.delta;
	                coordinates = $.extend({}, that.hintOffset);
	            }

	            if (boundaries) {
	                coordinates.top = within(coordinates.top, boundaries.y);
	                coordinates.left = within(coordinates.left, boundaries.x);
	            }

	            if (axis === "x") {
	                delete coordinates.top;
	            } else if (axis === "y") {
	                delete coordinates.left;
	            }

	            that.hint.css(coordinates);
	        },

	        _shouldIgnoreTarget: function(target) {
	            var ignoreSelector = this.options.ignore;
	            return ignoreSelector && $(target).is(ignoreSelector);
	        },

	        _select: function(e) {
	            if (!this._shouldIgnoreTarget(e.event.target)) {
	                e.preventDefault();
	            }
	        },

	        _start: function(e) {
	            var that = this,
	                options = that.options,
	                container = options.container,
	                hint = options.hint;

	            if (this._shouldIgnoreTarget(e.touch.initialTouch) || (options.holdToDrag && !that._activated)) {
	                that.userEvents.cancel();
	                return;
	            }

	            that.currentTarget = e.target;
	            that.currentTargetOffset = getOffset(that.currentTarget);

	            if (hint) {
	                if (that.hint) {
	                    that.hint.stop(true, true).remove();
	                }

	                that.hint = kendo.isFunction(hint) ? $(hint.call(that, that.currentTarget)) : hint;

	                var offset = getOffset(that.currentTarget);
	                that.hintOffset = offset;

	                that.hint.css( {
	                    position: "absolute",
	                    zIndex: 20000, // the Window's z-index is 10000 and can be raised because of z-stacking
	                    left: offset.left,
	                    top: offset.top
	                })
	                .appendTo(document.body);

	                that.angular("compile", function(){
	                    that.hint.removeAttr("ng-repeat");
	                    var scopeTarget = $(e.target);

	                    while (!scopeTarget.data("$$kendoScope") && scopeTarget.length) {
	                        scopeTarget = scopeTarget.parent();
	                    }

	                    return {
	                        elements: that.hint.get(),
	                        scopeFrom: scopeTarget.data("$$kendoScope")
	                    };
	                });
	            }

	            draggables[options.group] = that;

	            that.dropped = false;

	            if (container) {
	                that.boundaries = containerBoundaries(container, that.hint);
	            }

	            $(document).on(KEYUP, that._captureEscape);

	            if (that._trigger(DRAGSTART, e)) {
	                that.userEvents.cancel();
	                that._afterEnd();
	            }

	            that.userEvents.capture();
	        },

	        _hold: function(e) {
	            this.currentTarget = e.target;

	            if (this._trigger(HOLD, e)) {
	                this.userEvents.cancel();
	            } else {
	                this._activated = true;
	            }
	        },

	        _drag: function(e) {
	            e.preventDefault();

	            var cursorElement = this._elementUnderCursor(e);

	            if (this.options.autoScroll && this._cursorElement !== cursorElement) {
	                this._scrollableParent = findScrollableParent(cursorElement);
	                this._cursorElement = cursorElement;
	            }

	            this._lastEvent = e;
	            this._processMovement(e, cursorElement);

	            if (this.options.autoScroll) {
	                // chrome seems to trigger mousemove when mouse is moved outside of the window (over the Chrome), too.
	                if (this._scrollableParent[0]) {
	                    var velocity = autoScrollVelocity(e.x.location, e.y.location, scrollableViewPort(this._scrollableParent));


	                    this._scrollCompenstation = $.extend({}, this.hintOffset);
	                    this._scrollVelocity = velocity;

	                    if (velocity.y === 0 && velocity.x === 0) {
	                        clearInterval(this._scrollInterval);
	                        this._scrollInterval = null;
	                    } else if(!this._scrollInterval) {
	                        this._scrollInterval = setInterval($.proxy(this, "_autoScroll"), 50);
	                    }
	                }
	            }

	            if (this.hint) {
	                this._updateHint(e);
	            }
	        },

	        _processMovement: function(e, cursorElement) {
	            this._withDropTarget(cursorElement, function(target, targetElement) {
	                if (!target) {
	                    if (lastDropTarget) {
	                        lastDropTarget._trigger(DRAGLEAVE, extend(e, { dropTarget: $(lastDropTarget.targetElement) }));
	                        lastDropTarget = null;
	                    }
	                    return;
	                }

	                if (lastDropTarget) {
	                    if (targetElement === lastDropTarget.targetElement) {
	                        return;
	                    }

	                    lastDropTarget._trigger(DRAGLEAVE, extend(e, { dropTarget: $(lastDropTarget.targetElement) }));
	                }

	                target._trigger(DRAGENTER, extend(e, { dropTarget: $(targetElement) }));
	                lastDropTarget = extend(target, { targetElement: targetElement });
	            });

	            this._trigger(DRAG, extend(e, { dropTarget: lastDropTarget, elementUnderCursor: cursorElement }));
	        },

	        _autoScroll: function() {
	            var parent = this._scrollableParent[0],
	                velocity = this._scrollVelocity,
	                compensation = this._scrollCompenstation;

	            if (!parent) {
	                return;
	            }

	            var cursorElement = this._elementUnderCursor(this._lastEvent);
	            this._processMovement(this._lastEvent, cursorElement);

	            var yIsScrollable, xIsScrollable;

	            var isRootNode = parent === scrollableRoot()[0];

	            if (isRootNode) {
	                yIsScrollable = document.body.scrollHeight > $window.height();
	                xIsScrollable = document.body.scrollWidth > $window.width();
	            } else {
	                yIsScrollable = parent.offsetHeight <= parent.scrollHeight;
	                xIsScrollable = parent.offsetWidth <= parent.scrollWidth;
	            }

	            var yDelta = parent.scrollTop + velocity.y;
	            var yInBounds = yIsScrollable && yDelta > 0 && yDelta < parent.scrollHeight;

	            var xDelta = parent.scrollLeft + velocity.x;
	            var xInBounds = xIsScrollable && xDelta > 0 && xDelta < parent.scrollWidth;

	            if (yInBounds) {
	                parent.scrollTop += velocity.y;
	            }

	            if (xInBounds) {
	                parent.scrollLeft += velocity.x;
	            }

	            if (this.hint && isRootNode && (xInBounds || yInBounds)) {
	                if (yInBounds) {
	                    compensation.top += velocity.y;
	                }

	                if (xInBounds) {
	                    compensation.left += velocity.x;
	                }

	                this.hint.css(compensation);
	            }
	        },

	        _end: function(e) {
	            this._withDropTarget(this._elementUnderCursor(e), function(target, targetElement) {
	                if (target) {
	                    target._drop(extend({}, e, { dropTarget: $(targetElement) }));
	                    lastDropTarget = null;
	                }
	            });

	            this._cancel(this._trigger(DRAGEND, e));
	        },

	        _cancel: function(isDefaultPrevented) {
	            var that = this;

	            that._scrollableParent = null;
	            this._cursorElement = null;
	            clearInterval(this._scrollInterval);
	            that._activated = false;

	            if (that.hint && !that.dropped) {
	                setTimeout(function() {
	                    that.hint.stop(true, true);

	                    if (isDefaultPrevented) {
	                        that._afterEndHandler();
	                    } else {
	                        that.hint.animate(that.currentTargetOffset, "fast", that._afterEndHandler);
	                    }
	                }, 0);

	            } else {
	                that._afterEnd();
	            }
	        },

	        _trigger: function(eventName, e) {
	            var that = this;

	            return that.trigger(
	                eventName, extend(
	                {},
	                e.event,
	                {
	                    x: e.x,
	                    y: e.y,
	                    currentTarget: that.currentTarget,
	                    initialTarget: e.touch ? e.touch.initialTouch : null,
	                    dropTarget: e.dropTarget,
	                    elementUnderCursor: e.elementUnderCursor
	                }
	            ));
	        },

	        _elementUnderCursor: function(e) {
	            var target = elementUnderCursor(e),
	                hint = this.hint;

	            if (hint && contains(hint[0], target)) {
	                hint.hide();
	                target = elementUnderCursor(e);
	                // IE8 does not return the element in iframe from first attempt
	                if (!target) {
	                    target = elementUnderCursor(e);
	                }
	                hint.show();
	            }

	            return target;
	        },

	        _withDropTarget: function(element, callback) {
	            var result,
	                group = this.options.group,
	                targets = dropTargets[group],
	                areas = dropAreas[group];

	            if (targets && targets.length || areas && areas.length) {
	                result = checkTarget(element, targets, areas);

	                if (result) {
	                    callback(result.target, result.targetElement);
	                } else {
	                    callback();
	                }
	            }
	        },

	        destroy: function() {
	            var that = this;

	            Widget.fn.destroy.call(that);

	            that._afterEnd();

	            that.userEvents.destroy();

	            this._scrollableParent = null;
	            this._cursorElement = null;
	            clearInterval(this._scrollInterval);

	            that.currentTarget = null;
	        },

	        _afterEnd: function() {
	            var that = this;

	            if (that.hint) {
	                that.hint.remove();
	            }

	            delete draggables[that.options.group];

	            that.trigger("destroy");
	            that.trigger(HINTDESTROYED);
	            $(document).off(KEYUP, that._captureEscape);
	        }
	    });

	    kendo.ui.plugin(DropTarget);
	    kendo.ui.plugin(DropTargetArea);
	    kendo.ui.plugin(Draggable);
	    kendo.TapCapture = TapCapture;
	    kendo.containerBoundaries = containerBoundaries;

	    extend(kendo.ui, {
	        Pane: Pane,
	        PaneDimensions: PaneDimensions,
	        Movable: Movable
	    });

	    function scrollableViewPort(element) {
	        var root = scrollableRoot()[0],
	            offset,
	            top,
	            left;

	        if (element[0] === root) {
	            top = root.scrollTop;
	            left = root.scrollLeft;

	            return {
	                top: top,
	                left: left,
	                bottom: top + $window.height(),
	                right: left + $window.width()
	            };
	        } else {
	            offset = element.offset();
	            offset.bottom = offset.top + element.height();
	            offset.right =  offset.left + element.width();
	            return offset;
	        }
	    }

	    function scrollableRoot() {
	        return $(kendo.support.browser.chrome ? document.body : document.documentElement);
	    }

	    function findScrollableParent(element) {
	        var root = scrollableRoot();

	        if (!element || element === document.body || element === document.documentElement) {
	            return root;
	        }

	        var parent = $(element)[0];

	        while (parent && !kendo.isScrollable(parent) && parent !== document.body) {
	            parent = parent.parentNode;
	        }

	        if (parent === document.body) {
	            return root;
	        }

	        return $(parent);
	    }

	    function autoScrollVelocity(mouseX, mouseY, rect) {
	        var velocity = { x: 0, y: 0 };

	        var AUTO_SCROLL_AREA = 50;

	        if (mouseX - rect.left < AUTO_SCROLL_AREA) {
	            velocity.x = -(AUTO_SCROLL_AREA - (mouseX - rect.left));
	        } else if (rect.right - mouseX < AUTO_SCROLL_AREA) {
	            velocity.x = AUTO_SCROLL_AREA - (rect.right - mouseX);
	        }

	        if (mouseY - rect.top < AUTO_SCROLL_AREA) {
	            velocity.y = -(AUTO_SCROLL_AREA - (mouseY - rect.top));
	        } else if (rect.bottom - mouseY < AUTO_SCROLL_AREA) {
	            velocity.y = AUTO_SCROLL_AREA - (rect.bottom - mouseY);
	        }

	        return velocity;
	    }

	    // export for testing
	    kendo.ui.Draggable.utils = {
	        autoScrollVelocity: autoScrollVelocity,
	        scrollableViewPort: scrollableViewPort,
	        findScrollableParent: findScrollableParent
	    };

	 })(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(422));


/***/ })

/******/ });

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(458);


/***/ }),

/***/ 421:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(0);

/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 458:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(421) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "fx",
	    name: "Effects",
	    category: "framework",
	    description: "Required for animation effects in all Kendo UI widgets.",
	    depends: [ "core" ]
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        fx = kendo.effects,
	        each = $.each,
	        extend = $.extend,
	        proxy = $.proxy,
	        support = kendo.support,
	        browser = support.browser,
	        transforms = support.transforms,
	        transitions = support.transitions,
	        scaleProperties = { scale: 0, scalex: 0, scaley: 0, scale3d: 0 },
	        translateProperties = { translate: 0, translatex: 0, translatey: 0, translate3d: 0 },
	        hasZoom = (typeof document.documentElement.style.zoom !== "undefined") && !transforms,
	        matrix3dRegExp = /matrix3?d?\s*\(.*,\s*([\d\.\-]+)\w*?,\s*([\d\.\-]+)\w*?,\s*([\d\.\-]+)\w*?,\s*([\d\.\-]+)\w*?/i,
	        cssParamsRegExp = /^(-?[\d\.\-]+)?[\w\s]*,?\s*(-?[\d\.\-]+)?[\w\s]*/i,
	        translateXRegExp = /translatex?$/i,
	        oldEffectsRegExp = /(zoom|fade|expand)(\w+)/,
	        singleEffectRegExp = /(zoom|fade|expand)/,
	        unitRegExp = /[xy]$/i,
	        transformProps = ["perspective", "rotate", "rotatex", "rotatey", "rotatez", "rotate3d", "scale", "scalex", "scaley", "scalez", "scale3d", "skew", "skewx", "skewy", "translate", "translatex", "translatey", "translatez", "translate3d", "matrix", "matrix3d"],
	        transform2d = ["rotate", "scale", "scalex", "scaley", "skew", "skewx", "skewy", "translate", "translatex", "translatey", "matrix"],
	        transform2units = { "rotate": "deg", scale: "", skew: "px", translate: "px" },
	        cssPrefix = transforms.css,
	        round = Math.round,
	        BLANK = "",
	        PX = "px",
	        NONE = "none",
	        AUTO = "auto",
	        WIDTH = "width",
	        HEIGHT = "height",
	        HIDDEN = "hidden",
	        ORIGIN = "origin",
	        ABORT_ID = "abortId",
	        OVERFLOW = "overflow",
	        TRANSLATE = "translate",
	        POSITION = "position",
	        COMPLETE_CALLBACK = "completeCallback",
	        TRANSITION = cssPrefix + "transition",
	        TRANSFORM = cssPrefix + "transform",
	        BACKFACE = cssPrefix + "backface-visibility",
	        PERSPECTIVE = cssPrefix + "perspective",
	        DEFAULT_PERSPECTIVE = "1500px",
	        TRANSFORM_PERSPECTIVE = "perspective(" + DEFAULT_PERSPECTIVE + ")",
	        directions = {
	            left: {
	                reverse: "right",
	                property: "left",
	                transition: "translatex",
	                vertical: false,
	                modifier: -1
	            },
	            right: {
	                reverse: "left",
	                property: "left",
	                transition: "translatex",
	                vertical: false,
	                modifier: 1
	            },
	            down: {
	                reverse: "up",
	                property: "top",
	                transition: "translatey",
	                vertical: true,
	                modifier: 1
	            },
	            up: {
	                reverse: "down",
	                property: "top",
	                transition: "translatey",
	                vertical: true,
	                modifier: -1
	            },
	            top: {
	                reverse: "bottom"
	            },
	            bottom: {
	                reverse: "top"
	            },
	            "in": {
	                reverse: "out",
	                modifier: -1
	            },
	            out: {
	                reverse: "in",
	                modifier: 1
	            },

	            vertical: {
	                reverse: "vertical"
	            },

	            horizontal: {
	                reverse: "horizontal"
	            }
	        };

	    kendo.directions = directions;

	    extend($.fn, {
	        kendoStop: function(clearQueue, gotoEnd) {
	            if (transitions) {
	                return fx.stopQueue(this, clearQueue || false, gotoEnd || false);
	            } else {
	                return this.stop(clearQueue, gotoEnd);
	            }
	        }
	    });

	    /* jQuery support for all transform animations (FF 3.5/3.6, Opera 10.x, IE9 */

	    if (transforms && !transitions) {
	        each(transform2d, function(idx, value) {
	            $.fn[value] = function(val) {
	                if (typeof val == "undefined") {
	                    return animationProperty(this, value);
	                } else {
	                    var that = $(this)[0],
	                        transformValue = value + "(" + val + transform2units[value.replace(unitRegExp, "")] + ")";

	                    if (that.style.cssText.indexOf(TRANSFORM) == -1) {
	                        $(this).css(TRANSFORM, transformValue);
	                    } else {
	                        that.style.cssText = that.style.cssText.replace(new RegExp(value + "\\(.*?\\)", "i"), transformValue);
	                    }
	                }
	                return this;
	            };

	            $.fx.step[value] = function (fx) {
	                $(fx.elem)[value](fx.now);
	            };
	        });

	        var curProxy = $.fx.prototype.cur;
	        $.fx.prototype.cur = function () {
	            if (transform2d.indexOf(this.prop) != -1) {
	                return parseFloat($(this.elem)[this.prop]());
	            }

	            return curProxy.apply(this, arguments);
	        };
	    }

	    kendo.toggleClass = function(element, classes, options, add) {
	        if (classes) {
	            classes = classes.split(" ");

	            if (transitions) {
	                options = extend({
	                    exclusive: "all",
	                    duration: 400,
	                    ease: "ease-out"
	                }, options);

	                element.css(TRANSITION, options.exclusive + " " + options.duration + "ms " + options.ease);
	                setTimeout(function() {
	                    element.css(TRANSITION, "").css(HEIGHT);
	                }, options.duration); // TODO: this should fire a kendoAnimate session instead.
	            }

	            each(classes, function(idx, value) {
	                element.toggleClass(value, add);
	            });
	        }

	        return element;
	    };

	    kendo.parseEffects = function(input, mirror) {
	        var effects = {};

	        if (typeof input === "string") {
	            each(input.split(" "), function(idx, value) {
	                var redirectedEffect = !singleEffectRegExp.test(value),
	                    resolved = value.replace(oldEffectsRegExp, function(match, $1, $2) {
	                        return $1 + ":" + $2.toLowerCase();
	                    }), // Support for old zoomIn/fadeOut style, now deprecated.
	                    effect = resolved.split(":"),
	                    direction = effect[1],
	                    effectBody = {};

	                if (effect.length > 1) {
	                    effectBody.direction = (mirror && redirectedEffect ? directions[direction].reverse : direction);
	                }

	                effects[effect[0]] = effectBody;
	            });
	        } else {
	            each(input, function(idx) {
	                var direction = this.direction;

	                if (direction && mirror && !singleEffectRegExp.test(idx)) {
	                    this.direction = directions[direction].reverse;
	                }

	                effects[idx] = this;
	            });
	        }

	        return effects;
	    };

	    function parseInteger(value) {
	        return parseInt(value, 10);
	    }

	    function parseCSS(element, property) {
	        return parseInteger(element.css(property));
	    }

	    function keys(obj) {
	        var acc = [];
	        for (var propertyName in obj) {
	            acc.push(propertyName);
	        }
	        return acc;
	    }

	    function strip3DTransforms(properties) {
	        for (var key in properties) {
	            if (transformProps.indexOf(key) != -1 && transform2d.indexOf(key) == -1) {
	                delete properties[key];
	            }
	        }

	        return properties;
	    }

	    function normalizeCSS(element, properties) {
	        var transformation = [], cssValues = {}, lowerKey, key, value, isTransformed;

	        for (key in properties) {
	            lowerKey = key.toLowerCase();
	            isTransformed = transforms && transformProps.indexOf(lowerKey) != -1;

	            if (!support.hasHW3D && isTransformed && transform2d.indexOf(lowerKey) == -1) {
	                delete properties[key];
	            } else {
	                value = properties[key];

	                if (isTransformed) {
	                    transformation.push(key + "(" + value + ")");
	                } else {
	                    cssValues[key] = value;
	                }
	            }
	        }

	        if (transformation.length) {
	            cssValues[TRANSFORM] = transformation.join(" ");
	        }

	        return cssValues;
	    }

	    if (transitions) {
	        extend(fx, {
	            transition: function(element, properties, options) {
	                var css,
	                    delay = 0,
	                    oldKeys = element.data("keys") || [],
	                    timeoutID;

	                options = extend({
	                        duration: 200,
	                        ease: "ease-out",
	                        complete: null,
	                        exclusive: "all"
	                    },
	                    options
	                );

	                var stopTransitionCalled = false;

	                var stopTransition = function() {
	                    if (!stopTransitionCalled) {
	                        stopTransitionCalled = true;

	                        if (timeoutID) {
	                            clearTimeout(timeoutID);
	                            timeoutID = null;
	                        }

	                        element
	                        .removeData(ABORT_ID)
	                        .dequeue()
	                        .css(TRANSITION, "")
	                        .css(TRANSITION);

	                        options.complete.call(element);
	                    }
	                };

	                options.duration = $.fx ? $.fx.speeds[options.duration] || options.duration : options.duration;

	                css = normalizeCSS(element, properties);

	                $.merge(oldKeys, keys(css));
	                element
	                    .data("keys", $.unique(oldKeys))
	                    .height();

	                element.css(TRANSITION, options.exclusive + " " + options.duration + "ms " + options.ease).css(TRANSITION);
	                element.css(css).css(TRANSFORM);

	                /**
	                 * Use transitionEnd event for browsers who support it - but duplicate it with setTimeout, as the transitionEnd event will not be triggered if no CSS properties change.
	                 * This should be cleaned up at some point (widget by widget), and refactored to widgets not relying on the complete callback if no transition occurs.
	                 *
	                 * For IE9 and below, resort to setTimeout.
	                 */
	                if (transitions.event) {
	                    element.one(transitions.event, stopTransition);
	                    if (options.duration !== 0) {
	                        delay = 500;
	                    }
	                }

	                timeoutID = setTimeout(stopTransition, options.duration + delay);
	                element.data(ABORT_ID, timeoutID);
	                element.data(COMPLETE_CALLBACK, stopTransition);
	            },

	            stopQueue: function(element, clearQueue, gotoEnd) {
	                var cssValues,
	                    taskKeys = element.data("keys"),
	                    retainPosition = (!gotoEnd && taskKeys),
	                    completeCallback = element.data(COMPLETE_CALLBACK);

	                if (retainPosition) {
	                    cssValues = kendo.getComputedStyles(element[0], taskKeys);
	                }

	                if (completeCallback) {
	                    completeCallback();
	                }

	                if (retainPosition) {
	                    element.css(cssValues);
	                }

	                return element
	                        .removeData("keys")
	                        .stop(clearQueue);
	            }
	        });
	    }

	    function animationProperty(element, property) {
	        if (transforms) {
	            var transform = element.css(TRANSFORM);
	            if (transform == NONE) {
	                return property == "scale" ? 1 : 0;
	            }

	            var match = transform.match(new RegExp(property + "\\s*\\(([\\d\\w\\.]+)")),
	                computed = 0;

	            if (match) {
	                computed = parseInteger(match[1]);
	            } else {
	                match = transform.match(matrix3dRegExp) || [0, 0, 0, 0, 0];
	                property = property.toLowerCase();

	                if (translateXRegExp.test(property)) {
	                    computed = parseFloat(match[3] / match[2]);
	                } else if (property == "translatey") {
	                    computed = parseFloat(match[4] / match[2]);
	                } else if (property == "scale") {
	                    computed = parseFloat(match[2]);
	                } else if (property == "rotate") {
	                    computed = parseFloat(Math.atan2(match[2], match[1]));
	                }
	            }

	            return computed;
	        } else {
	            return parseFloat(element.css(property));
	        }
	    }

	    var EffectSet = kendo.Class.extend({
	        init: function(element, options) {
	            var that = this;

	            that.element = element;
	            that.effects = [];
	            that.options = options;
	            that.restore = [];
	        },

	        run: function(effects) {
	            var that = this,
	                effect,
	                idx, jdx,
	                length = effects.length,
	                element = that.element,
	                options = that.options,
	                deferred = $.Deferred(),
	                start = {},
	                end = {},
	                target,
	                children,
	                childrenLength;

	            that.effects = effects;

	            deferred.then($.proxy(that, "complete"));

	            element.data("animating", true);

	            for (idx = 0; idx < length; idx ++) {
	                effect = effects[idx];

	                effect.setReverse(options.reverse);
	                effect.setOptions(options);

	                that.addRestoreProperties(effect.restore);

	                effect.prepare(start, end);

	                children = effect.children();

	                for (jdx = 0, childrenLength = children.length; jdx < childrenLength; jdx ++) {
	                    children[jdx].duration(options.duration).run();
	                }
	            }

	            // legacy support for options.properties
	            for (var effectName in options.effects) {
	                extend(end, options.effects[effectName].properties);
	            }

	            // Show the element initially
	            if (!element.is(":visible")) {
	                extend(start, { display: element.data("olddisplay") || "block" });
	            }

	            if (transforms && !options.reset) {
	                target = element.data("targetTransform");

	                if (target) {
	                    start = extend(target, start);
	                }
	            }

	            start = normalizeCSS(element, start);

	            if (transforms && !transitions) {
	                start = strip3DTransforms(start);
	            }

	            element.css(start)
	                   .css(TRANSFORM); // Nudge

	            for (idx = 0; idx < length; idx ++) {
	                effects[idx].setup();
	            }

	            if (options.init) {
	                options.init();
	            }

	            element.data("targetTransform", end);
	            fx.animate(element, end, extend({}, options, { complete: deferred.resolve }));

	            return deferred.promise();
	        },

	        stop: function() {
	            $(this.element).kendoStop(true, true);
	        },

	        addRestoreProperties: function(restore) {
	            var element = this.element,
	                value,
	                i = 0,
	                length = restore.length;

	            for (; i < length; i ++) {
	                value = restore[i];

	                this.restore.push(value);

	                if (!element.data(value)) {
	                    element.data(value, element.css(value));
	                }
	            }
	        },

	        restoreCallback: function() {
	            var element = this.element;

	            for (var i = 0, length = this.restore.length; i < length; i ++) {
	                var value = this.restore[i];
	                element.css(value, element.data(value));
	            }
	        },

	        complete: function() {
	            var that = this,
	                idx = 0,
	                element = that.element,
	                options = that.options,
	                effects = that.effects,
	                length = effects.length;

	            element
	                .removeData("animating")
	                .dequeue(); // call next animation from the queue

	            if (options.hide) {
	                element.data("olddisplay", element.css("display")).hide();
	            }

	            this.restoreCallback();

	            if (hasZoom && !transforms) {
	                setTimeout($.proxy(this, "restoreCallback"), 0); // Again jQuery callback in IE8-
	            }

	            for (; idx < length; idx ++) {
	                effects[idx].teardown();
	            }

	            if (options.completeCallback) {
	                options.completeCallback(element);
	            }
	        }
	    });

	    fx.promise = function(element, options) {
	        var effects = [],
	            effectClass,
	            effectSet = new EffectSet(element, options),
	            parsedEffects = kendo.parseEffects(options.effects),
	            effect;

	        options.effects = parsedEffects;

	        for (var effectName in parsedEffects) {
	            effectClass = fx[capitalize(effectName)];

	            if (effectClass) {
	                effect = new effectClass(element, parsedEffects[effectName].direction);
	                effects.push(effect);
	           }
	        }

	        if (effects[0]) {
	            effectSet.run(effects);
	        } else { // Not sure how would an fx promise reach this state - means that you call kendoAnimate with no valid effects? Why?
	            if (!element.is(":visible")) {
	                element.css({ display: element.data("olddisplay") || "block" }).css("display");
	            }

	            if (options.init) {
	                options.init();
	            }

	            element.dequeue();
	            effectSet.complete();
	        }
	    };

	    extend(fx, {
	        animate: function(elements, properties, options) {
	            var useTransition = options.transition !== false;
	            delete options.transition;

	            if (transitions && "transition" in fx && useTransition) {
	                fx.transition(elements, properties, options);
	            } else {
	                if (transforms) {
	                    elements.animate(strip3DTransforms(properties), { queue: false, show: false, hide: false, duration: options.duration, complete: options.complete }); // Stop animate from showing/hiding the element to be able to hide it later on.
	                } else {
	                    elements.each(function() {
	                        var element = $(this),
	                            multiple = {};

	                        each(transformProps, function(idx, value) { // remove transforms to avoid IE and older browsers confusion
	                            var params,
	                                currentValue = properties ? properties[value]+ " " : null; // We need to match

	                            if (currentValue) {
	                                var single = properties;

	                                if (value in scaleProperties && properties[value] !== undefined) {
	                                    params = currentValue.match(cssParamsRegExp);
	                                    if (transforms) {
	                                        extend(single, { scale: +params[0] });
	                                    }
	                                } else {
	                                    if (value in translateProperties && properties[value] !== undefined) {
	                                        var position = element.css(POSITION),
	                                            isFixed = (position == "absolute" || position == "fixed");

	                                        if (!element.data(TRANSLATE)) {
	                                            if (isFixed) {
	                                                element.data(TRANSLATE, {
	                                                    top: parseCSS(element, "top") || 0,
	                                                    left: parseCSS(element, "left") || 0,
	                                                    bottom: parseCSS(element, "bottom"),
	                                                    right: parseCSS(element, "right")
	                                                });
	                                            } else {
	                                                element.data(TRANSLATE, {
	                                                    top: parseCSS(element, "marginTop") || 0,
	                                                    left: parseCSS(element, "marginLeft") || 0
	                                                });
	                                            }
	                                        }

	                                        var originalPosition = element.data(TRANSLATE);

	                                        params = currentValue.match(cssParamsRegExp);
	                                        if (params) {

	                                            var dX = value == TRANSLATE + "y" ? +null : +params[1],
	                                                dY = value == TRANSLATE + "y" ? +params[1] : +params[2];

	                                            if (isFixed) {
	                                                if (!isNaN(originalPosition.right)) {
	                                                    if (!isNaN(dX)) { extend(single, { right: originalPosition.right - dX }); }
	                                                } else {
	                                                    if (!isNaN(dX)) { extend(single, { left: originalPosition.left + dX }); }
	                                                }

	                                                if (!isNaN(originalPosition.bottom)) {
	                                                    if (!isNaN(dY)) { extend(single, { bottom: originalPosition.bottom - dY }); }
	                                                } else {
	                                                    if (!isNaN(dY)) { extend(single, { top: originalPosition.top + dY }); }
	                                                }
	                                            } else {
	                                                if (!isNaN(dX)) { extend(single, { marginLeft: originalPosition.left + dX }); }
	                                                if (!isNaN(dY)) { extend(single, { marginTop: originalPosition.top + dY }); }
	                                            }
	                                        }
	                                    }
	                                }

	                                if (!transforms && value != "scale" && value in single) {
	                                    delete single[value];
	                                }

	                                if (single) {
	                                    extend(multiple, single);
	                                }
	                            }
	                        });

	                        if (browser.msie) {
	                            delete multiple.scale;
	                        }

	                        element.animate(multiple, { queue: false, show: false, hide: false, duration: options.duration, complete: options.complete }); // Stop animate from showing/hiding the element to be able to hide it later on.
	                    });
	                }
	            }
	        }
	    });

	    fx.animatedPromise = fx.promise;

	    var Effect = kendo.Class.extend({
	        init: function(element, direction) {
	            var that = this;
	            that.element = element;
	            that._direction = direction;
	            that.options = {};
	            that._additionalEffects = [];

	            if (!that.restore) {
	                that.restore = [];
	            }
	        },

	// Public API
	        reverse: function() {
	            this._reverse = true;
	            return this.run();
	        },

	        play: function() {
	            this._reverse = false;
	            return this.run();
	        },

	        add: function(additional) {
	            this._additionalEffects.push(additional);
	            return this;
	        },

	        direction: function(value) {
	            this._direction = value;
	            return this;
	        },

	        duration: function(duration) {
	            this._duration = duration;
	            return this;
	        },

	        compositeRun: function() {
	            var that = this,
	                effectSet = new EffectSet(that.element, { reverse: that._reverse, duration: that._duration }),
	                effects = that._additionalEffects.concat([ that ]);

	            return effectSet.run(effects);
	        },

	        run: function() {
	            if (this._additionalEffects && this._additionalEffects[0]) {
	                return this.compositeRun();
	            }

	            var that = this,
	                element = that.element,
	                idx = 0,
	                restore = that.restore,
	                length = restore.length,
	                value,
	                deferred = $.Deferred(),
	                start = {},
	                end = {},
	                target,
	                children = that.children(),
	                childrenLength = children.length;

	            deferred.then($.proxy(that, "_complete"));

	            element.data("animating", true);

	            for (idx = 0; idx < length; idx ++) {
	                value = restore[idx];

	                if (!element.data(value)) {
	                    element.data(value, element.css(value));
	                }
	            }

	            for (idx = 0; idx < childrenLength; idx ++) {
	                children[idx].duration(that._duration).run();
	            }

	            that.prepare(start, end);

	            if (!element.is(":visible")) {
	                extend(start, { display: element.data("olddisplay") || "block" });
	            }

	            if (transforms) {
	                target = element.data("targetTransform");

	                if (target) {
	                    start = extend(target, start);
	                }
	            }

	            start = normalizeCSS(element, start);

	            if (transforms && !transitions) {
	                start = strip3DTransforms(start);
	            }

	            element.css(start).css(TRANSFORM); // Trick webkit into re-rendering

	            that.setup();

	            element.data("targetTransform", end);
	            fx.animate(element, end, { duration: that._duration, complete: deferred.resolve });

	            return deferred.promise();
	        },

	        stop: function() {
	            var idx = 0,
	                children = this.children(),
	                childrenLength = children.length;

	            for (idx = 0; idx < childrenLength; idx ++) {
	                children[idx].stop();
	            }

	            $(this.element).kendoStop(true, true);
	            return this;
	        },

	        restoreCallback: function() {
	            var element = this.element;

	            for (var i = 0, length = this.restore.length; i < length; i ++) {
	                var value = this.restore[i];
	                element.css(value, element.data(value));
	            }
	        },

	        _complete: function() {
	            var that = this,
	                element = that.element;

	            element
	                .removeData("animating")
	                .dequeue(); // call next animation from the queue

	            that.restoreCallback();

	            if (that.shouldHide()) {
	                element.data("olddisplay", element.css("display")).hide();
	            }

	            if (hasZoom && !transforms) {
	                setTimeout($.proxy(that, "restoreCallback"), 0); // Again jQuery callback in IE8-
	            }

	            that.teardown();
	        },

	        /////////////////////////// Support for kendo.animate;
	        setOptions: function(options) {
	            extend(true, this.options, options);
	        },

	        children: function() {
	            return [];
	        },

	        shouldHide: $.noop,

	        setup: $.noop,
	        prepare: $.noop,
	        teardown: $.noop,
	        directions: [],

	        setReverse: function(reverse) {
	            this._reverse = reverse;
	            return this;
	        }
	    });

	    function capitalize(word) {
	        return word.charAt(0).toUpperCase() + word.substring(1);
	    }

	    function createEffect(name, definition) {
	        var effectClass = Effect.extend(definition),
	            directions = effectClass.prototype.directions;

	        fx[capitalize(name)] = effectClass;

	        fx.Element.prototype[name] = function(direction, opt1, opt2, opt3) {
	            return new effectClass(this.element, direction, opt1, opt2, opt3);
	        };

	        each(directions, function(idx, theDirection) {
	            fx.Element.prototype[name + capitalize(theDirection)] = function(opt1, opt2, opt3) {
	                return new effectClass(this.element, theDirection, opt1, opt2, opt3);
	            };
	        });
	    }

	    var FOUR_DIRECTIONS = ["left", "right", "up", "down"],
	        IN_OUT = ["in", "out"];

	    createEffect("slideIn", {
	        directions: FOUR_DIRECTIONS,

	        divisor: function(value) {
	            this.options.divisor = value;
	            return this;
	        },

	        prepare: function(start, end) {
	            var that = this,
	                tmp,
	                element = that.element,
	                outerWidth = kendo._outerWidth,
	                outerHeight = kendo._outerHeight,
	                direction = directions[that._direction],
	                offset = -direction.modifier * (direction.vertical ? outerHeight(element) : outerWidth(element)),
	                startValue = offset / (that.options && that.options.divisor || 1) + PX,
	                endValue = "0px";

	            if (that._reverse) {
	                tmp = start;
	                start = end;
	                end = tmp;
	            }

	            if (transforms) {
	                start[direction.transition] = startValue;
	                end[direction.transition] = endValue;
	            } else {
	                start[direction.property] = startValue;
	                end[direction.property] = endValue;
	            }
	        }
	    });

	    createEffect("tile", {
	        directions: FOUR_DIRECTIONS,

	        init: function(element, direction, previous) {
	            Effect.prototype.init.call(this, element, direction);
	            this.options = { previous: previous };
	        },

	        previousDivisor: function(value) {
	            this.options.previousDivisor = value;
	            return this;
	        },

	        children: function() {
	            var that = this,
	                reverse = that._reverse,
	                previous = that.options.previous,
	                divisor = that.options.previousDivisor || 1,
	                dir = that._direction;

	            var children = [ kendo.fx(that.element).slideIn(dir).setReverse(reverse) ];

	            if (previous) {
	                children.push( kendo.fx(previous).slideIn(directions[dir].reverse).divisor(divisor).setReverse(!reverse) );
	            }

	            return children;
	        }
	    });

	    function createToggleEffect(name, property, defaultStart, defaultEnd) {
	        createEffect(name, {
	            directions: IN_OUT,

	            startValue: function(value) {
	                this._startValue = value;
	                return this;
	            },

	            endValue: function(value) {
	                this._endValue = value;
	                return this;
	            },

	            shouldHide: function() {
	               return this._shouldHide;
	            },

	            prepare: function(start, end) {
	                var that = this,
	                    startValue,
	                    endValue,
	                    out = this._direction === "out",
	                    startDataValue = that.element.data(property),
	                    startDataValueIsSet = !(isNaN(startDataValue) || startDataValue == defaultStart);

	                if (startDataValueIsSet) {
	                    startValue = startDataValue;
	                } else if (typeof this._startValue !== "undefined") {
	                    startValue = this._startValue;
	                } else {
	                    startValue = out ? defaultStart : defaultEnd;
	                }

	                if (typeof this._endValue !== "undefined") {
	                    endValue = this._endValue;
	                } else {
	                    endValue = out ? defaultEnd : defaultStart;
	                }

	                if (this._reverse) {
	                    start[property] = endValue;
	                    end[property] = startValue;
	                } else {
	                    start[property] = startValue;
	                    end[property] = endValue;
	                }

	                that._shouldHide = end[property] === defaultEnd;
	            }
	        });
	    }

	    createToggleEffect("fade", "opacity", 1, 0);
	    createToggleEffect("zoom", "scale", 1, 0.01);

	    createEffect("slideMargin", {
	        prepare: function(start, end) {
	            var that = this,
	                element = that.element,
	                options = that.options,
	                origin = element.data(ORIGIN),
	                offset = options.offset,
	                margin,
	                reverse = that._reverse;

	            if (!reverse && origin === null) {
	                element.data(ORIGIN, parseFloat(element.css("margin-" + options.axis)));
	            }

	            margin = (element.data(ORIGIN) || 0);
	            end["margin-" + options.axis] = !reverse ? margin + offset : margin;
	        }
	    });

	    createEffect("slideTo", {
	        prepare: function(start, end) {
	            var that = this,
	                element = that.element,
	                options = that.options,
	                offset = options.offset.split(","),
	                reverse = that._reverse;

	            if (transforms) {
	                end.translatex = !reverse ? offset[0] : 0;
	                end.translatey = !reverse ? offset[1] : 0;
	            } else {
	                end.left = !reverse ? offset[0] : 0;
	                end.top = !reverse ? offset[1] : 0;
	            }
	            element.css("left");
	        }
	    });

	    createEffect("expand", {
	        directions: ["horizontal", "vertical"],

	        restore: [ OVERFLOW ],

	        prepare: function(start, end) {
	            var that = this,
	                element = that.element,
	                options = that.options,
	                reverse = that._reverse,
	                property = that._direction === "vertical" ? HEIGHT : WIDTH,
	                setLength = element[0].style[property],
	                oldLength = element.data(property),
	                length = parseFloat(oldLength || setLength),
	                realLength = round(element.css(property, AUTO)[property]());

	            start.overflow = HIDDEN;

	            length = (options && options.reset) ? realLength || length : length || realLength;

	            end[property] = (reverse ? 0 : length) + PX;
	            start[property] = (reverse ? length : 0) + PX;

	            if (oldLength === undefined) {
	                element.data(property, setLength);
	            }
	        },

	        shouldHide: function() {
	           return this._reverse;
	        },

	        teardown: function() {
	            var that = this,
	                element = that.element,
	                property = that._direction === "vertical" ? HEIGHT : WIDTH,
	                length = element.data(property);

	            if (length == AUTO || length === BLANK) {
	                setTimeout(function() { element.css(property, AUTO).css(property); }, 0); // jQuery animate complete callback in IE is called before the last animation step!
	            }
	        }
	    });

	    var TRANSFER_START_STATE = { position: "absolute", marginLeft: 0, marginTop: 0, scale: 1 };
	    /**
	     * Intersection point formulas are taken from here - http://zonalandeducation.com/mmts/intersections/intersectionOfTwoLines1/intersectionOfTwoLines1.html
	     * Formula for a linear function from two points from here - http://demo.activemath.org/ActiveMath2/search/show.cmd?id=mbase://AC_UK_calculus/functions/ex_linear_equation_two_points
	     * The transform origin point is the intersection point of the two lines from the top left corners/top right corners of the element and target.
	     * The math and variables below MAY BE SIMPLIFIED (zeroes removed), but this would make the formula too cryptic.
	     */
	    createEffect("transfer", {
	        init: function(element, target) {
	            this.element = element;
	            this.options = { target: target };
	            this.restore = [];
	        },

	        setup: function() {
	            this.element.appendTo(document.body);
	        },

	        prepare: function(start, end) {
	            var that = this,
	                element = that.element,
	                outerBox = fx.box(element),
	                innerBox = fx.box(that.options.target),
	                currentScale = animationProperty(element, "scale"),
	                scale = fx.fillScale(innerBox, outerBox),
	                transformOrigin = fx.transformOrigin(innerBox, outerBox);

	            extend(start, TRANSFER_START_STATE);
	            end.scale = 1;

	            element.css(TRANSFORM, "scale(1)").css(TRANSFORM);
	            element.css(TRANSFORM, "scale(" + currentScale + ")");

	            start.top = outerBox.top;
	            start.left = outerBox.left;
	            start.transformOrigin = transformOrigin.x + PX + " " + transformOrigin.y + PX;

	            if (that._reverse) {
	                start.scale = scale;
	            } else {
	                end.scale = scale;
	            }
	        }
	    });


	    var CLIPS = {
	        top: "rect(auto auto $size auto)",
	        bottom: "rect($size auto auto auto)",
	        left: "rect(auto $size auto auto)",
	        right: "rect(auto auto auto $size)"
	    };

	    var ROTATIONS = {
	        top:    { start: "rotatex(0deg)", end: "rotatex(180deg)" },
	        bottom: { start: "rotatex(-180deg)", end: "rotatex(0deg)" },
	        left:   { start: "rotatey(0deg)", end: "rotatey(-180deg)" },
	        right:  { start: "rotatey(180deg)", end: "rotatey(0deg)" }
	    };

	    function clipInHalf(container, direction) {
	        var vertical = kendo.directions[direction].vertical,
	            size = (container[vertical ? HEIGHT : WIDTH]() / 2) + "px";

	        return CLIPS[direction].replace("$size", size);
	    }

	    createEffect("turningPage", {
	        directions: FOUR_DIRECTIONS,

	        init: function(element, direction, container) {
	            Effect.prototype.init.call(this, element, direction);
	            this._container = container;
	        },

	        prepare: function(start, end) {
	            var that = this,
	                reverse = that._reverse,
	                direction = reverse ? directions[that._direction].reverse : that._direction,
	                rotation = ROTATIONS[direction];

	            start.zIndex = 1;

	            if (that._clipInHalf) {
	               start.clip = clipInHalf(that._container, kendo.directions[direction].reverse);
	            }

	            start[BACKFACE] = HIDDEN;

	            end[TRANSFORM] = TRANSFORM_PERSPECTIVE + (reverse ? rotation.start : rotation.end);
	            start[TRANSFORM] = TRANSFORM_PERSPECTIVE + (reverse ? rotation.end : rotation.start);
	        },

	        setup: function() {
	            this._container.append(this.element);
	        },

	        face: function(value) {
	            this._face = value;
	            return this;
	        },

	        shouldHide: function() {
	            var that = this,
	                reverse = that._reverse,
	                face = that._face;

	            return (reverse && !face) || (!reverse && face);
	        },

	        clipInHalf: function(value) {
	            this._clipInHalf = value;
	            return this;
	        },

	        temporary: function() {
	            this.element.addClass('temp-page');
	            return this;
	        }
	    });

	    createEffect("staticPage", {
	        directions: FOUR_DIRECTIONS,

	        init: function(element, direction, container) {
	            Effect.prototype.init.call(this, element, direction);
	            this._container = container;
	        },

	        restore: ["clip"],

	        prepare: function(start, end) {
	            var that = this,
	                direction = that._reverse ? directions[that._direction].reverse : that._direction;

	            start.clip = clipInHalf(that._container, direction);
	            start.opacity = 0.999;
	            end.opacity = 1;
	        },

	        shouldHide: function() {
	            var that = this,
	                reverse = that._reverse,
	                face = that._face;

	            return (reverse && !face) || (!reverse && face);
	        },

	        face: function(value) {
	            this._face = value;
	            return this;
	        }
	    });

	    createEffect("pageturn", {
	        directions: ["horizontal", "vertical"],

	        init: function(element, direction, face, back) {
	            Effect.prototype.init.call(this, element, direction);
	            this.options = {};
	            this.options.face = face;
	            this.options.back = back;
	        },

	        children: function() {
	            var that = this,
	                options = that.options,
	                direction = that._direction === "horizontal" ? "left" : "top",
	                reverseDirection = kendo.directions[direction].reverse,
	                reverse = that._reverse,
	                temp,
	                faceClone = options.face.clone(true).removeAttr("id"),
	                backClone = options.back.clone(true).removeAttr("id"),
	                element = that.element;

	            if (reverse) {
	                temp = direction;
	                direction = reverseDirection;
	                reverseDirection = temp;
	            }

	            return [
	                kendo.fx(options.face).staticPage(direction, element).face(true).setReverse(reverse),
	                kendo.fx(options.back).staticPage(reverseDirection, element).setReverse(reverse),
	                kendo.fx(faceClone).turningPage(direction, element).face(true).clipInHalf(true).temporary().setReverse(reverse),
	                kendo.fx(backClone).turningPage(reverseDirection, element).clipInHalf(true).temporary().setReverse(reverse)
	            ];
	        },

	        prepare: function(start, end) {
	            start[PERSPECTIVE] = DEFAULT_PERSPECTIVE;
	            start.transformStyle = "preserve-3d";
	            // hack to trigger transition end.
	            start.opacity = 0.999;
	            end.opacity = 1;
	        },

	        teardown: function() {
	            this.element.find(".temp-page").remove();
	        }
	    });

	    createEffect("flip", {
	        directions: ["horizontal", "vertical"],

	        init: function(element, direction, face, back) {
	            Effect.prototype.init.call(this, element, direction);
	            this.options = {};
	            this.options.face = face;
	            this.options.back = back;
	        },

	        children: function() {
	            var that = this,
	                options = that.options,
	                direction = that._direction === "horizontal" ? "left" : "top",
	                reverseDirection = kendo.directions[direction].reverse,
	                reverse = that._reverse,
	                temp,
	                element = that.element;

	            if (reverse) {
	                temp = direction;
	                direction = reverseDirection;
	                reverseDirection = temp;
	            }

	            return [
	                kendo.fx(options.face).turningPage(direction, element).face(true).setReverse(reverse),
	                kendo.fx(options.back).turningPage(reverseDirection, element).setReverse(reverse)
	            ];
	        },

	        prepare: function(start) {
	            start[PERSPECTIVE] = DEFAULT_PERSPECTIVE;
	            start.transformStyle = "preserve-3d";
	        }
	    });

	    var RESTORE_OVERFLOW = !support.mobileOS.android;
	    var IGNORE_TRANSITION_EVENT_SELECTOR = ".km-touch-scrollbar, .km-actionsheet-wrapper";

	    createEffect("replace", {
	        _before: $.noop,
	        _after: $.noop,
	        init: function(element, previous, transitionClass) {
	            Effect.prototype.init.call(this, element);
	            this._previous = $(previous);
	            this._transitionClass = transitionClass;
	        },

	        duration: function() {
	            throw new Error("The replace effect does not support duration setting; the effect duration may be customized through the transition class rule");
	        },

	        beforeTransition: function(callback) {
	            this._before = callback;
	            return this;
	        },

	        afterTransition: function(callback) {
	            this._after = callback;
	            return this;
	        },

	        _both: function() {
	            return $().add(this._element).add(this._previous);
	        },

	        _containerClass: function() {
	            var direction = this._direction,
	                containerClass = "k-fx k-fx-start k-fx-" + this._transitionClass;

	            if (direction) {
	                containerClass += " k-fx-" + direction;
	            }

	            if (this._reverse) {
	                containerClass += " k-fx-reverse";
	            }

	            return containerClass;
	        },

	        complete: function(e) {
	            if (!this.deferred || (e && $(e.target).is(IGNORE_TRANSITION_EVENT_SELECTOR))) {
	                return;
	            }

	            var container = this.container;

	            container
	                .removeClass("k-fx-end")
	                .removeClass(this._containerClass())
	                .off(transitions.event, this.completeProxy);

	            this._previous.hide().removeClass("k-fx-current");
	            this.element.removeClass("k-fx-next");

	            if (RESTORE_OVERFLOW) {
	                container.css(OVERFLOW, "");
	            }

	            if (!this.isAbsolute) {
	                this._both().css(POSITION, "");
	            }

	            this.deferred.resolve();
	            delete this.deferred;
	        },

	        run: function() {
	            if (this._additionalEffects && this._additionalEffects[0]) {
	                return this.compositeRun();
	            }

	            var that = this,
	                element = that.element,
	                previous = that._previous,
	                container = element.parents().filter(previous.parents()).first(),
	                both = that._both(),
	                deferred = $.Deferred(),
	                originalPosition = element.css(POSITION),
	                originalOverflow;

	            // edge case for grid/scheduler, where the previous is already destroyed.
	            if (!container.length) {
	                container = element.parent();
	            }

	            this.container = container;
	            this.deferred = deferred;
	            this.isAbsolute = originalPosition  == "absolute";

	            if (!this.isAbsolute) {
	                both.css(POSITION, "absolute");
	            }

	            if (RESTORE_OVERFLOW) {
	                originalOverflow = container.css(OVERFLOW);
	                container.css(OVERFLOW, "hidden");
	            }

	            if (!transitions) {
	                this.complete();
	            } else {
	                element.addClass("k-fx-hidden");

	                container.addClass(this._containerClass());

	                this.completeProxy = $.proxy(this, "complete");
	                container.on(transitions.event, this.completeProxy);

	                kendo.animationFrame(function() {
	                    element.removeClass("k-fx-hidden").addClass("k-fx-next");
	                    previous.css("display", "").addClass("k-fx-current");
	                    that._before(previous, element);
	                    kendo.animationFrame(function() {
	                        container.removeClass("k-fx-start").addClass("k-fx-end");
	                        that._after(previous, element);
	                    });
	                });
	            }

	            return deferred.promise();
	        },

	        stop: function() {
	            this.complete();
	        }
	    });

	    var Animation = kendo.Class.extend({
	        init: function() {
	            var that = this;
	            that._tickProxy = proxy(that._tick, that);
	            that._started = false;
	        },

	        tick: $.noop,
	        done: $.noop,
	        onEnd: $.noop,
	        onCancel: $.noop,

	        start: function() {
	            if (!this.enabled()) {
	                return;
	            }

	            if (!this.done()) {
	                this._started = true;
	                kendo.animationFrame(this._tickProxy);
	            } else {
	                this.onEnd();
	            }
	        },

	        enabled: function() {
	            return true;
	        },

	        cancel: function() {
	            this._started = false;
	            this.onCancel();
	        },

	        _tick: function() {
	            var that = this;
	            if (!that._started) { return; }

	            that.tick();

	            if (!that.done()) {
	                kendo.animationFrame(that._tickProxy);
	            } else {
	                that._started = false;
	                that.onEnd();
	            }
	        }
	    });

	    var Transition = Animation.extend({
	        init: function(options) {
	            var that = this;
	            extend(that, options);
	            Animation.fn.init.call(that);
	        },

	        done: function() {
	            return this.timePassed() >= this.duration;
	        },

	        timePassed: function() {
	            return Math.min(this.duration, (new Date()) - this.startDate);
	        },

	        moveTo: function(options) {
	            var that = this,
	                movable = that.movable;

	            that.initial = movable[that.axis];
	            that.delta = options.location - that.initial;

	            that.duration = typeof options.duration == "number" ? options.duration : 300;

	            that.tick = that._easeProxy(options.ease);

	            that.startDate = new Date();
	            that.start();
	        },

	        _easeProxy: function(ease) {
	            var that = this;

	            return function() {
	                that.movable.moveAxis(that.axis, ease(that.timePassed(), that.initial, that.delta, that.duration));
	            };
	        }
	    });

	    extend(Transition, {
	        easeOutExpo: function (t, b, c, d) {
	            return (t==d) ? b+c : c * (-Math.pow(2, -10 * t/d) + 1) + b;
	        },

	        easeOutBack: function (t, b, c, d, s) {
	            s = 1.70158;
	            return c*((t=t/d-1)*t*((s+1)*t + s) + 1) + b;
	        }
	    });

	    fx.Animation = Animation;
	    fx.Transition = Transition;
	    fx.createEffect = createEffect;

	    fx.box = function(element) {
	        element = $(element);
	        var result = element.offset();
	        result.width = kendo._outerWidth(element);
	        result.height = kendo._outerHeight(element);
	        return result;
	    };

	    fx.transformOrigin = function(inner, outer) {
	        var x = (inner.left - outer.left) * outer.width / (outer.width - inner.width),
	            y = (inner.top - outer.top) * outer.height / (outer.height - inner.height);

	        return {
	            x: isNaN(x) ? 0 : x,
	            y: isNaN(y) ? 0 : y
	        };
	    };

	    fx.fillScale = function(inner, outer) {
	        return Math.min(inner.width / outer.width, inner.height / outer.height);
	    };

	    fx.fitScale = function(inner, outer) {
	        return Math.max(inner.width / outer.width, inner.height / outer.height);
	    };
	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(422));


/***/ })

/******/ });

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(486);


/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 461:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(6);

/***/ }),

/***/ 486:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(487), __webpack_require__(461) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "mobile.scroller",
	    name: "Scroller",
	    category: "mobile",
	    description: "The Kendo Mobile Scroller widget enables touch friendly kinetic scrolling for the contents of a given DOM element.",
	    depends: [ "fx", "draganddrop" ]
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        mobile = kendo.mobile,
	        fx = kendo.effects,
	        ui = mobile.ui,
	        proxy = $.proxy,
	        extend = $.extend,
	        Widget = ui.Widget,
	        Class = kendo.Class,
	        Movable = kendo.ui.Movable,
	        Pane = kendo.ui.Pane,
	        PaneDimensions = kendo.ui.PaneDimensions,
	        Transition = fx.Transition,
	        Animation = fx.Animation,
	        abs = Math.abs,
	        SNAPBACK_DURATION = 500,
	        SCROLLBAR_OPACITY = 0.7,
	        FRICTION = 0.96,
	        VELOCITY_MULTIPLIER = 10,
	        MAX_VELOCITY = 55,
	        OUT_OF_BOUNDS_FRICTION = 0.5,
	        ANIMATED_SCROLLER_PRECISION = 5,
	        RELEASECLASS = "km-scroller-release",
	        REFRESHCLASS = "km-scroller-refresh",
	        PULL = "pull",
	        CHANGE = "change",
	        RESIZE = "resize",
	        SCROLL = "scroll",
	        MOUSE_WHEEL_ID = 2;

	    var ZoomSnapBack = Animation.extend({
	        init: function(options) {
	            var that = this;
	            Animation.fn.init.call(that);
	            extend(that, options);

	            that.userEvents.bind("gestureend", proxy(that.start, that));
	            that.tapCapture.bind("press", proxy(that.cancel, that));
	        },

	        enabled: function() {
	          return this.movable.scale < this.dimensions.minScale;
	        },

	        done: function() {
	            return this.dimensions.minScale - this.movable.scale < 0.01;
	        },

	        tick: function() {
	            var movable = this.movable;
	            movable.scaleWith(1.1);
	            this.dimensions.rescale(movable.scale);
	        },

	        onEnd: function() {
	            var movable = this.movable;
	            movable.scaleTo(this.dimensions.minScale);
	            this.dimensions.rescale(movable.scale);
	        }
	    });

	    var DragInertia = Animation.extend({
	        init: function(options) {
	            var that = this;

	            Animation.fn.init.call(that);

	            extend(that, options, {
	                transition: new Transition({
	                    axis: options.axis,
	                    movable: options.movable,
	                    onEnd: function() { that._end(); }
	                })
	            });

	            that.tapCapture.bind("press", function() { that.cancel(); });
	            that.userEvents.bind("end", proxy(that.start, that));
	            that.userEvents.bind("gestureend", proxy(that.start, that));
	            that.userEvents.bind("tap", proxy(that.onEnd, that));
	        },

	        onCancel: function() {
	            this.transition.cancel();
	        },

	        freeze: function(location) {
	            var that = this;
	            that.cancel();
	            that._moveTo(location);
	        },

	        onEnd: function() {
	            var that = this;
	            if (that.paneAxis.outOfBounds()) {
	                that._snapBack();
	            } else {
	                that._end();
	            }
	        },

	        done: function() {
	            return abs(this.velocity) < 1;
	        },

	        start: function(e) {
	            var that = this,
	                velocity;

	            if (!that.dimension.enabled) { return; }


	            if (that.paneAxis.outOfBounds()) {
	                that._snapBack();
	            } else {
	                velocity = e.touch.id === MOUSE_WHEEL_ID ? 0 : e.touch[that.axis].velocity;
	                that.velocity = Math.max(Math.min(velocity * that.velocityMultiplier, MAX_VELOCITY), -MAX_VELOCITY);

	                that.tapCapture.captureNext();
	                Animation.fn.start.call(that);
	            }
	        },

	        tick: function() {
	            var that = this,
	                dimension = that.dimension,
	                friction = that.paneAxis.outOfBounds() ? OUT_OF_BOUNDS_FRICTION : that.friction,
	                delta = (that.velocity *= friction),
	                location = that.movable[that.axis] + delta;

	                if (!that.elastic && dimension.outOfBounds(location)) {
	                    location = Math.max(Math.min(location, dimension.max), dimension.min);
	                    that.velocity = 0;
	                }

	            that.movable.moveAxis(that.axis, location);
	        },

	        _end: function() {
	            this.tapCapture.cancelCapture();
	            this.end();
	        },

	        _snapBack: function() {
	            var that = this,
	                dimension = that.dimension,
	                snapBack = that.movable[that.axis] > dimension.max ? dimension.max : dimension.min;
	            that._moveTo(snapBack);
	        },

	        _moveTo: function(location) {
	            this.transition.moveTo({ location: location, duration: SNAPBACK_DURATION, ease: Transition.easeOutExpo });
	        }
	    });

	    var AnimatedScroller = Animation.extend({
	        init: function(options) {
	            var that = this;

	            kendo.effects.Animation.fn.init.call(this);

	            extend(that, options, {
	                origin: {},
	                destination: {},
	                offset: {}
	            });
	        },

	        tick: function() {
	            this._updateCoordinates();
	            this.moveTo(this.origin);
	        },

	        done: function() {
	            return abs(this.offset.y) < ANIMATED_SCROLLER_PRECISION && abs(this.offset.x) < ANIMATED_SCROLLER_PRECISION;
	        },

	        onEnd: function() {
	            this.moveTo(this.destination);
	            if (this.callback) {
	                this.callback.call();
	            }
	        },

	        setCoordinates: function(from, to) {
	            this.offset = {};
	            this.origin = from;
	            this.destination = to;
	        },

	        setCallback: function(callback) {
	            if (callback && kendo.isFunction(callback)) {
	                this.callback = callback;
	            } else {
	                callback = undefined;
	            }
	        },

	        _updateCoordinates: function() {
	            this.offset = {
	                x: (this.destination.x - this.origin.x) / 4,
	                y: (this.destination.y - this.origin.y) / 4
	            };

	            this.origin = {
	                y: this.origin.y + this.offset.y,
	                x: this.origin.x + this.offset.x
	            };
	        }
	    });

	    var ScrollBar = Class.extend({
	        init: function(options) {
	            var that = this,
	                horizontal = options.axis === "x",
	                element = $('<div class="km-touch-scrollbar km-' + (horizontal ? "horizontal" : "vertical") + '-scrollbar" />');

	            extend(that, options, {
	                element: element,
	                elementSize: 0,
	                movable: new Movable(element),
	                scrollMovable: options.movable,
	                alwaysVisible: options.alwaysVisible,
	                size: horizontal ? "width" : "height"
	            });

	            that.scrollMovable.bind(CHANGE, proxy(that.refresh, that));
	            that.container.append(element);
	            if (options.alwaysVisible) {
	                that.show();
	            }
	        },

	        refresh: function() {
	            var that = this,
	                axis = that.axis,
	                dimension = that.dimension,
	                paneSize = dimension.size,
	                scrollMovable = that.scrollMovable,
	                sizeRatio = paneSize / dimension.total,
	                position = Math.round(-scrollMovable[axis] * sizeRatio),
	                size = Math.round(paneSize * sizeRatio);

	                if (sizeRatio >= 1) {
	                    this.element.css("display", "none");
	                } else {
	                    this.element.css("display", "");
	                }

	                if (position + size > paneSize) {
	                    size = paneSize - position;
	                } else if (position < 0) {
	                    size += position;
	                    position = 0;
	                }

	            if (that.elementSize != size) {
	                that.element.css(that.size, size + "px");
	                that.elementSize = size;
	            }

	            that.movable.moveAxis(axis, position);
	        },

	        show: function() {
	            this.element.css({opacity: SCROLLBAR_OPACITY, visibility: "visible"});
	        },

	        hide: function() {
	            if (!this.alwaysVisible) {
	                this.element.css({opacity: 0});
	            }
	        }
	    });

	    var Scroller = Widget.extend({
	        init: function(element, options) {
	            var that = this;
	            Widget.fn.init.call(that, element, options);

	            element = that.element;

	            that._native = that.options.useNative && kendo.support.hasNativeScrolling;
	            if (that._native) {
	                element.addClass("km-native-scroller")
	                    .prepend('<div class="km-scroll-header"/>');

	                extend(that, {
	                    scrollElement: element,
	                    fixedContainer: element.children().first()
	                });

	                return;
	            }

	            element
	                .css("overflow", "hidden")
	                .addClass("km-scroll-wrapper")
	                .wrapInner('<div class="km-scroll-container"/>')
	                .prepend('<div class="km-scroll-header"/>');

	            var inner = element.children().eq(1),

	                tapCapture = new kendo.TapCapture(element),

	                movable = new Movable(inner),

	                dimensions = new PaneDimensions({
	                    element: inner,
	                    container: element,
	                    forcedEnabled: that.options.zoom
	                }),

	                avoidScrolling = this.options.avoidScrolling,

	                userEvents = new kendo.UserEvents(element, {
	                    touchAction: "pan-y",
	                    fastTap: true,
	                    allowSelection: true,
	                    preventDragEvent: true,
	                    captureUpIfMoved: true,
	                    multiTouch: that.options.zoom,
	                    start: function(e) {
	                        dimensions.refresh();

	                        var velocityX = abs(e.x.velocity),
	                            velocityY = abs(e.y.velocity),
	                            horizontalSwipe  = velocityX * 2 >= velocityY,
	                            originatedFromFixedContainer = $.contains(that.fixedContainer[0], e.event.target),
	                            verticalSwipe = velocityY * 2 >= velocityX;


	                        if (!originatedFromFixedContainer && !avoidScrolling(e) && that.enabled && (dimensions.x.enabled && horizontalSwipe || dimensions.y.enabled && verticalSwipe)) {
	                            userEvents.capture();
	                        } else {
	                            userEvents.cancel();
	                        }
	                    }
	                }),

	                pane = new Pane({
	                    movable: movable,
	                    dimensions: dimensions,
	                    userEvents: userEvents,
	                    elastic: that.options.elastic
	                }),

	                zoomSnapBack = new ZoomSnapBack({
	                    movable: movable,
	                    dimensions: dimensions,
	                    userEvents: userEvents,
	                    tapCapture: tapCapture
	                }),

	                animatedScroller = new AnimatedScroller({
	                    moveTo: function(coordinates) {
	                        that.scrollTo(coordinates.x, coordinates.y);
	                    }
	                });

	            movable.bind(CHANGE, function() {
	                that.scrollTop = - movable.y;
	                that.scrollLeft = - movable.x;

	                that.trigger(SCROLL, {
	                    scrollTop: that.scrollTop,
	                    scrollLeft: that.scrollLeft
	                });
	            });

	            if (that.options.mousewheelScrolling) {
	                element.on("DOMMouseScroll mousewheel",  proxy(this, "_wheelScroll"));
	            }

	            extend(that, {
	                movable: movable,
	                dimensions: dimensions,
	                zoomSnapBack: zoomSnapBack,
	                animatedScroller: animatedScroller,
	                userEvents: userEvents,
	                pane: pane,
	                tapCapture: tapCapture,
	                pulled: false,
	                enabled: true,
	                scrollElement: inner,
	                scrollTop: 0,
	                scrollLeft: 0,
	                fixedContainer: element.children().first()
	            });

	            that._initAxis("x");
	            that._initAxis("y");

	            // build closure
	            that._wheelEnd = function() {
	                that._wheel = false;
	                that.userEvents.end(0, that._wheelY);
	            };

	            dimensions.refresh();

	            if (that.options.pullToRefresh) {
	                that._initPullToRefresh();
	            }
	        },

	        _wheelScroll: function(e) {
	            if (!this._wheel) {
	                this._wheel = true;
	                this._wheelY = 0;
	                this.userEvents.press(0, this._wheelY);
	            }

	            clearTimeout(this._wheelTimeout);
	            this._wheelTimeout = setTimeout(this._wheelEnd, 50);

	            var delta = kendo.wheelDeltaY(e);

	            if (delta) {
	                this._wheelY += delta;
	                this.userEvents.move(0, this._wheelY);
	            }

	            e.preventDefault();
	        },

	        makeVirtual: function() {
	            this.dimensions.y.makeVirtual();
	        },

	        virtualSize: function(min, max) {
	            this.dimensions.y.virtualSize(min, max);
	        },

	        height: function() {
	            return this.dimensions.y.size;
	        },

	        scrollHeight: function() {
	            return this.scrollElement[0].scrollHeight;
	        },

	        scrollWidth: function() {
	            return this.scrollElement[0].scrollWidth;
	        },

	        options: {
	            name: "Scroller",
	            zoom: false,
	            pullOffset: 140,
	            visibleScrollHints: false,
	            elastic: true,
	            useNative: false,
	            mousewheelScrolling: true,
	            avoidScrolling: function() { return false; },
	            pullToRefresh: false,
	            messages: {
	                pullTemplate: "Pull to refresh",
	                releaseTemplate: "Release to refresh",
	                refreshTemplate: "Refreshing"
	            }
	        },

	        events: [
	            PULL,
	            SCROLL,
	            RESIZE
	        ],

	        _resize: function() {
	            if (!this._native) {
	                this.contentResized();
	            }
	        },

	        setOptions: function(options) {
	            var that = this;
	            Widget.fn.setOptions.call(that, options);
	            if (options.pullToRefresh) {
	                that._initPullToRefresh();
	            }
	        },

	        reset: function() {
	            if (this._native) {
	                this.scrollElement.scrollTop(0);
	            } else {
	                this.movable.moveTo({x: 0, y: 0});
	                this._scale(1);
	            }
	        },

	        contentResized: function() {
	            this.dimensions.refresh();
	            if (this.pane.x.outOfBounds()) {
	                this.movable.moveAxis("x", this.dimensions.x.min);
	            }

	            if (this.pane.y.outOfBounds()) {
	                this.movable.moveAxis("y", this.dimensions.y.min);
	            }
	        },

	        zoomOut: function() {
	            var dimensions = this.dimensions;
	            dimensions.refresh();
	            this._scale(dimensions.fitScale);
	            this.movable.moveTo(dimensions.centerCoordinates());
	        },

	        enable: function() {
	            this.enabled = true;
	        },

	        disable: function() {
	            this.enabled = false;
	        },

	        scrollTo: function(x, y) {
	            if (this._native) {
	                this.scrollElement.scrollLeft(abs(x));
	                this.scrollElement.scrollTop(abs(y));
	            } else {
	                this.dimensions.refresh();
	                this.movable.moveTo({x: x, y: y});
	            }
	        },

	        animatedScrollTo: function(x, y, callback) {
	            var from,
	                to;

	            if(this._native) {
	                this.scrollTo(x, y);
	            } else {
	                from = { x: this.movable.x, y: this.movable.y };
	                to = { x: x, y: y };

	                this.animatedScroller.setCoordinates(from, to);
	                this.animatedScroller.setCallback(callback);
	                this.animatedScroller.start();
	            }
	        },

	        pullHandled: function() {
	            var that = this;
	            that.refreshHint.removeClass(REFRESHCLASS);
	            that.hintContainer.html(that.pullTemplate({}));
	            that.yinertia.onEnd();
	            that.xinertia.onEnd();
	            that.userEvents.cancel();
	        },

	        destroy: function() {
	            Widget.fn.destroy.call(this);
	            if (this.userEvents) {
	                this.userEvents.destroy();
	            }
	        },

	        _scale: function(scale) {
	            this.dimensions.rescale(scale);
	            this.movable.scaleTo(scale);
	        },

	        _initPullToRefresh: function() {
	            var that = this;

	            that.dimensions.y.forceEnabled();
	            that.pullTemplate = kendo.template(that.options.messages.pullTemplate);
	            that.releaseTemplate = kendo.template(that.options.messages.releaseTemplate);
	            that.refreshTemplate = kendo.template(that.options.messages.refreshTemplate);

	            that.scrollElement.prepend('<span class="km-scroller-pull"><span class="km-icon"></span><span class="km-loading-left"></span><span class="km-loading-right"></span><span class="km-template">' + that.pullTemplate({}) + '</span></span>');
	            that.refreshHint = that.scrollElement.children().first();
	            that.hintContainer = that.refreshHint.children(".km-template");

	            that.pane.y.bind("change", proxy(that._paneChange, that));
	            that.userEvents.bind("end", proxy(that._dragEnd, that));
	        },

	        _dragEnd: function() {
	            var that = this;

	            if(!that.pulled) {
	                return;
	            }

	            that.pulled = false;
	            that.refreshHint.removeClass(RELEASECLASS).addClass(REFRESHCLASS);
	            that.hintContainer.html(that.refreshTemplate({}));
	            that.yinertia.freeze(that.options.pullOffset / 2);
	            that.trigger("pull");
	        },

	        _paneChange: function() {
	            var that = this;

	            if (that.movable.y / OUT_OF_BOUNDS_FRICTION > that.options.pullOffset) {
	                if (!that.pulled) {
	                    that.pulled = true;
	                    that.refreshHint.removeClass(REFRESHCLASS).addClass(RELEASECLASS);
	                    that.hintContainer.html(that.releaseTemplate({}));
	                }
	            } else if (that.pulled) {
	                that.pulled = false;
	                that.refreshHint.removeClass(RELEASECLASS);
	                that.hintContainer.html(that.pullTemplate({}));
	            }
	        },

	        _initAxis: function(axis) {
	            var that = this,
	                movable = that.movable,
	                dimension = that.dimensions[axis],
	                tapCapture = that.tapCapture,
	                paneAxis = that.pane[axis],
	                scrollBar = new ScrollBar({
	                    axis: axis,
	                    movable: movable,
	                    dimension: dimension,
	                    container: that.element,
	                    alwaysVisible: that.options.visibleScrollHints
	                });

	            dimension.bind(CHANGE, function() {
	                scrollBar.refresh();
	            });

	            paneAxis.bind(CHANGE, function() {
	                scrollBar.show();
	            });

	            that[axis + "inertia"] = new DragInertia({
	                axis: axis,
	                paneAxis: paneAxis,
	                movable: movable,
	                tapCapture: tapCapture,
	                userEvents: that.userEvents,
	                dimension: dimension,
	                elastic: that.options.elastic,
	                friction: that.options.friction || FRICTION,
	                velocityMultiplier: that.options.velocityMultiplier || VELOCITY_MULTIPLIER,
	                end: function() {
	                    scrollBar.hide();
	                    that.trigger("scrollEnd", {
	                        axis: axis,
	                        scrollTop: that.scrollTop,
	                        scrollLeft: that.scrollLeft
	                    });
	                }
	            });
	        }
	    });

	    ui.plugin(Scroller);
	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(422));


/***/ }),

/***/ 487:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(7);

/***/ })

/******/ });

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(459);


/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 427:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(4);

/***/ }),

/***/ 433:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(1);

/***/ }),

/***/ 459:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(427), __webpack_require__(433) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "list",
	    name: "List",
	    category: "framework",
	    depends: [ "data", "popup" ],
	    hidden: true
	};

	/*jshint evil: true*/
	(function($, undefined) {
	    var kendo = window.kendo,
	        ui = kendo.ui,
	        outerWidth = kendo._outerWidth,
	        outerHeight = kendo._outerHeight,
	        Widget = ui.Widget,
	        keys = kendo.keys,
	        support = kendo.support,
	        htmlEncode = kendo.htmlEncode,
	        activeElement = kendo._activeElement,
	        ObservableArray = kendo.data.ObservableArray,
	        ID = "id",
	        CHANGE = "change",
	        FOCUSED = "k-state-focused",
	        HOVER = "k-state-hover",
	        LOADING = "k-i-loading",
	        HIDDENCLASS = "k-hidden",
	        GROUPHEADER = ".k-group-header",
	        LABELIDPART = "_label",
	        OPEN = "open",
	        CLOSE = "close",
	        CASCADE = "cascade",
	        SELECT = "select",
	        SELECTED = "selected",
	        REQUESTSTART = "requestStart",
	        REQUESTEND = "requestEnd",
	        WIDTH = "width",
	        extend = $.extend,
	        proxy = $.proxy,
	        isArray = $.isArray,
	        browser = support.browser,
	        isIE = browser.msie,
	        isIE8 = isIE && browser.version < 9,
	        quotRegExp = /"/g,
	        alternativeNames = {
	            "ComboBox": "DropDownList",
	            "DropDownList": "ComboBox"
	        };

	    var List = kendo.ui.DataBoundWidget.extend({
	        init: function(element, options) {
	            var that = this,
	                ns = that.ns,
	                id;

	            Widget.fn.init.call(that, element, options);
	            element = that.element;
	            options = that.options;

	            that._isSelect = element.is(SELECT);

	            if (that._isSelect && that.element[0].length) {
	                if (!options.dataSource) {
	                    options.dataTextField = options.dataTextField || "text";
	                    options.dataValueField = options.dataValueField || "value";
	                }
	            }

	            that.ul = $('<ul unselectable="on" class="k-list k-reset"/>')
	                        .attr({
	                            tabIndex: -1,
	                            "aria-hidden": true
	                        });

	            that.list = $("<div class='k-list-container'/>")
	                        .append(that.ul)
	                        .on("mousedown" + ns, proxy(that._listMousedown, that));

	            id = element.attr(ID);

	            if (id) {
	                that.list.attr(ID, id + "-list");
	                that.ul.attr(ID, id + "_listbox");
	            }

	            that._header();
	            that._noData();
	            that._footer();
	            that._accessors();
	            that._initValue();
	        },

	        options: {
	            valuePrimitive: false,
	            footerTemplate: "",
	            headerTemplate: "",
	            noDataTemplate: "No data found."
	        },

	        setOptions: function(options) {
	            Widget.fn.setOptions.call(this, options);

	            if (options && options.enable !== undefined) {
	                options.enabled = options.enable;
	            }

	            this._header();
	            this._noData();
	            this._footer();

	            this._renderFooter();
	            this._renderNoData();
	        },

	        focus: function() {
	            this._focused.focus();
	        },

	        readonly: function(readonly) {
	            this._editable({
	                readonly: readonly === undefined ? true : readonly,
	                disable: false
	            });
	        },

	        enable: function(enable) {
	            this._editable({
	                readonly: false,
	                disable: !(enable = enable === undefined ? true : enable)
	            });
	        },

	        _listOptions: function(options) {
	            var that = this;
	            var currentOptions = that.options;
	            var virtual = currentOptions.virtual;
	            var listBoundHandler = proxy(that._listBound, that);

	            virtual = typeof virtual === "object" ? virtual : {};

	            options = $.extend({
	                autoBind: false,
	                selectable: true,
	                dataSource: that.dataSource,
	                click: proxy(that._click, that),
	                change: proxy(that._listChange, that),
	                activate: proxy(that._activateItem, that),
	                deactivate: proxy(that._deactivateItem, that),
	                dataBinding: function() {
	                    that.trigger("dataBinding");
	                },
	                dataBound: listBoundHandler,
	                height: currentOptions.height,
	                dataValueField: currentOptions.dataValueField,
	                dataTextField: currentOptions.dataTextField,
	                groupTemplate: currentOptions.groupTemplate,
	                fixedGroupTemplate: currentOptions.fixedGroupTemplate,
	                template: currentOptions.template
	            }, options, virtual);

	            if (!options.template) {
	                options.template = "#:" + kendo.expr(options.dataTextField, "data") + "#";
	            }

	            if (currentOptions.$angular) {
	                options.$angular = currentOptions.$angular;
	            }

	            return options;
	        },

	        _initList: function() {
	            var that = this;
	            var listOptions = that._listOptions({
	                selectedItemChange: proxy(that._listChange, that)
	            });

	            if (!that.options.virtual) {
	                that.listView = new kendo.ui.StaticList(that.ul, listOptions);
	            } else {
	                that.listView = new kendo.ui.VirtualList(that.ul, listOptions);
	            }

	            that.listView.bind("listBound", proxy(that._listBound, that));
	            that._setListValue();
	        },

	        _setListValue: function(value) {
	            value = value || this.options.value;

	            if (value !== undefined) {
	                this.listView.value(value)
	                    .done(proxy(this._updateSelectionState, this));
	            }
	        },

	        _updateSelectionState: $.noop,

	        _listMousedown: function(e) {
	            if (!this.filterInput || this.filterInput[0] !== e.target) {
	                e.preventDefault();
	            }
	        },

	        _isFilterEnabled: function() {
	            var filter = this.options.filter;
	            return filter && filter !== "none";
	        },

	        _hideClear: function() {
	            var that = this;

	            if(that._clear) {
	                this._clear.addClass(HIDDENCLASS);
	            }
	        },

	        _showClear: function() {
	            var that = this;

	            if(that._clear) {
	                this._clear.removeClass(HIDDENCLASS);
	            }
	        },

	        _clearValue: function() {
	            this._clearText();
	            this._accessor("");
	            this.listView.value([]);
	            if(this._isFilterEnabled() && !this.options.enforceMinLength) {
	                this._filter({word: "", open: false});
	            }
	            this._change();
	        },

	        _clearText: function() {
	            this.text("");
	        },

	        _clearFilter: function() {
	            if (!this.options.virtual) {
	                this.listView.bound(false);
	            }

	            this._filterSource();
	        },

	        _filterSource: function(filter, force) {
	            var that = this;
	            var options = that.options;
	            var dataSource = that.dataSource;
	            var expression = extend({}, dataSource.filter() || {});
	            var resetPageSettings = filter || (expression.filters && expression.filters.length && !filter);

	            var removed = removeFiltersForField(expression, options.dataTextField);

	            if ((filter || removed) && that.trigger("filtering", { filter: filter })) {
	                return;
	            }

	            var newExpression = {
	                filters: [],
	                logic: "and"
	            };

	            if (isValidFilterExpr(filter)) {
	                newExpression.filters.push(filter);
	            }

	            if (isValidFilterExpr(expression)) {
	                if (newExpression.logic === expression.logic) {
	                    newExpression.filters = newExpression.filters.concat(expression.filters);
	                } else {
	                    newExpression.filters.push(expression);
	                }
	            }

	            if (that._cascading) {
	                this.listView.setDSFilter(newExpression);
	            }

	            var dataSourceState = extend({}, {
	                page: resetPageSettings ? 1 : dataSource.page(),
	                pageSize: resetPageSettings ? dataSource.options.pageSize : dataSource.pageSize(),
	                sort: dataSource.sort(),
	                filter: dataSource.filter(),
	                group: dataSource.group(),
	                aggregate: dataSource.aggregate()
	            }, { filter: newExpression });

	            dataSource[force ? "read" : "query"](dataSource._mergeState(dataSourceState));
	        },

	        _angularElement: function(element, action) {
	            if (!element) {
	                return;
	            }

	            this.angular(action, function() {
	                return { elements: element };
	            });
	        },

	        _noData: function() {
	            var noData = $(this.noData);
	            var template = this.options.noDataTemplate;

	            this.angular("cleanup", function() { return { elements: noData }; });
	            kendo.destroy(noData);
	            noData.remove();

	            if (!template) {
	                this.noData = null;
	                return;
	            }

	            this.noData = $('<div class="k-nodata" style="display:none"><div></div></div>').appendTo(this.list);
	            this.noDataTemplate = typeof template !== "function" ? kendo.template(template) : template;
	        },

	        _renderNoData: function() {
	            var noData = this.noData;

	            if (!noData) {
	                return;
	            }

	            this._angularElement(noData, "cleanup");
	            noData.children(":first").html(this.noDataTemplate({ instance: this }));
	            this._angularElement(noData, "compile");
	        },

	        _toggleNoData: function(show) {
	            $(this.noData).toggle(show);
	        },

	        _toggleHeader: function(show) {
	            var groupHeader = this.listView.content.prev(GROUPHEADER);
	            groupHeader.toggle(show);
	        },

	        _footer: function() {
	            var footer = $(this.footer);
	            var template = this.options.footerTemplate;

	            this._angularElement(footer, "cleanup");
	            kendo.destroy(footer);
	            footer.remove();

	            if (!template) {
	                this.footer = null;
	                return;
	            }

	            this.footer = $('<div class="k-footer"></div>').appendTo(this.list);
	            this.footerTemplate = typeof template !== "function" ? kendo.template(template) : template;
	        },

	        _renderFooter: function() {
	            var footer = this.footer;

	            if (!footer) {
	                return;
	            }

	            this._angularElement(footer, "cleanup");
	            footer.html(this.footerTemplate({ instance: this }));
	            this._angularElement(footer, "compile");
	        },

	        _header: function() {
	            var header = $(this.header);
	            var template = this.options.headerTemplate;

	            this._angularElement(header, "cleanup");
	            kendo.destroy(header);
	            header.remove();

	            if (!template) {
	                this.header = null;
	                return;
	            }

	            var headerTemplate = typeof template !== "function" ? kendo.template(template) : template;
	            header = $(headerTemplate({}));

	            this.header = header[0] ? header : null;
	            this.list.prepend(header);

	            this._angularElement(this.header, "compile");
	        },

	        _allowOpening: function() {
	            return this.options.noDataTemplate || this.dataSource.flatView().length;
	        },

	        _initValue: function() {
	            var that = this,
	                value = that.options.value;

	            if (value !== null) {
	                that.element.val(value);
	            } else {
	                value = that._accessor();
	                that.options.value = value;
	            }

	            that._old = value;
	        },

	        _ignoreCase: function() {
	            var that = this,
	                model = that.dataSource.reader.model,
	                field;

	            if (model && model.fields) {
	                field = model.fields[that.options.dataTextField];

	                if (field && field.type && field.type !== "string") {
	                    that.options.ignoreCase = false;
	                }
	            }
	        },

	        _focus: function(candidate) {
	            return this.listView.focus(candidate);
	        },

	        _filter: function(options) {
	            var that = this;
	            var widgetOptions = that.options;
	            var ignoreCase = widgetOptions.ignoreCase;
	            var field = widgetOptions.dataTextField;

	            var expression = {
	                value: ignoreCase ? options.word.toLowerCase() : options.word,
	                field: field,
	                operator: widgetOptions.filter,
	                ignoreCase: ignoreCase
	            };

	            that._open = options.open;
	            that._filterSource(expression);

	        },

	        search: function(word) {
	            var options = this.options;

	            word = typeof word === "string" ? word : this._inputValue();

	            clearTimeout(this._typingTimeout);

	            if ((!options.enforceMinLength && !word.length) || word.length >= options.minLength) {
	                this._state = "filter";
	                if (!this._isFilterEnabled()) {
	                    this._searchByWord(word);
	                } else {
	                    this._filter({word: word, open: true});
	                }
	            }
	        },

	        current: function(candidate) {
	            return this._focus(candidate);
	        },

	        items: function() {
	            return this.ul[0].children;
	        },

	        destroy: function() {
	            var that = this;
	            var ns = that.ns;

	            Widget.fn.destroy.call(that);

	            that._unbindDataSource();

	            that.listView.destroy();
	            that.list.off(ns);

	            that.popup.destroy();

	            if (that._form) {
	                that._form.off("reset", that._resetHandler);
	            }
	        },

	        dataItem: function(index) {
	            var that = this;

	            if (index === undefined) {
	                return that.listView.selectedDataItems()[0];
	            }

	            if (typeof index !== "number") {
	                if (that.options.virtual) {
	                    return that.dataSource.getByUid($(index).data("uid"));
	                }

	                index = $(that.items()).index(index);
	            }

	            return that.dataSource.flatView()[index];
	        },

	        _activateItem: function() {
	            var current = this.listView.focus();
	            if (current) {
	                this._focused.add(this.filterInput).attr("aria-activedescendant", current.attr("id"));
	            }
	        },

	        _deactivateItem: function() {
	            this._focused.add(this.filterInput).removeAttr("aria-activedescendant");
	        },

	        _accessors: function() {
	            var that = this;
	            var element = that.element;
	            var options = that.options;
	            var getter = kendo.getter;
	            var textField = element.attr(kendo.attr("text-field"));
	            var valueField = element.attr(kendo.attr("value-field"));

	            if (!options.dataTextField && textField) {
	                options.dataTextField = textField;
	            }

	            if (!options.dataValueField && valueField) {
	                options.dataValueField = valueField;
	            }

	            that._text = getter(options.dataTextField);
	            that._value = getter(options.dataValueField);
	        },

	        _aria: function(id) {
	            var that = this,
	                options = that.options,
	                element = that._focused.add(that.filterInput);

	            if (options.suggest !== undefined) {
	                element.attr("aria-autocomplete", options.suggest ? "both" : "list");
	            }

	            id = id ? id + " " + that.ul[0].id : that.ul[0].id;

	            element.attr("aria-owns", id);

	            that.ul.attr("aria-live", !that._isFilterEnabled() ? "off" : "polite");

	            that._ariaLabel();
	        },

	        _ariaLabel: function(){
	            var that = this;
	            var focusedElm = that._focused;
	            var inputElm = that.element;
	            var inputId = inputElm.attr("id");
	            var labelElm = $("label[for='" + inputId  + "']");
	            var ariaLabel = inputElm.attr("aria-label");
	            var ariaLabelledBy = inputElm.attr("aria-labelledby");

	            if(focusedElm === inputElm){
	                return;
	            }

	            if(ariaLabel){
	                focusedElm.attr("aria-label", ariaLabel);
	            } else if (ariaLabelledBy){
	                focusedElm.attr("aria-labelledby", ariaLabelledBy);
	            } else if (labelElm.length){
	                var labelId = labelElm.attr("id") || that._generateLabelId(labelElm, inputId);
	                focusedElm.attr("aria-labelledby", labelId);
	            }
	        },

	        _generateLabelId: function(label, inputId){
	            var labelId = inputId + LABELIDPART;
	            label.attr("id", labelId);

	            return labelId;
	        },

	        _blur: function() {
	            var that = this;

	            that._change();
	            that.close();
	        },

	        _change: function() {
	            var that = this;
	            var index = that.selectedIndex;
	            var optionValue = that.options.value;
	            var value = that.value();
	            var trigger;

	            if (that._isSelect && !that.listView.bound() && optionValue) {
	                value = optionValue;
	            }

	            if (value !== unifyType(that._old, typeof value)) {
	                trigger = true;
	            } else if (index !== undefined && index !== that._oldIndex) {
	                trigger = true;
	            }

	            if (trigger) {
	                that._old = value;
	                that._oldIndex = index;

	                if (!that._typing) {
	                    // trigger the DOM change event so any subscriber gets notified
	                    that.element.trigger(CHANGE);
	                }

	                that.trigger(CHANGE);
	            }

	            that.typing = false;
	        },

	        _data: function() {
	            return this.dataSource.view();
	        },

	        _enable: function() {
	            var that = this,
	                options = that.options,
	                disabled = that.element.is("[disabled]");

	            if (options.enable !== undefined) {
	                options.enabled = options.enable;
	            }

	            if (!options.enabled || disabled) {
	                that.enable(false);
	            } else {
	                that.readonly(that.element.is("[readonly]"));
	            }
	        },

	        _dataValue: function(dataItem) {
	            var value = this._value(dataItem);

	            if (value === undefined) {
	                value = this._text(dataItem);
	            }

	            return value;
	        },

	        _offsetHeight: function() {
	            var offsetHeight = 0;
	            var siblings = this.listView.content.prevAll(":visible");

	            siblings.each(function() {
	                var element = $(this);

	                offsetHeight += outerHeight(element, true);
	            });

	            return offsetHeight;
	        },

	        _height: function(length) {
	            var that = this;
	            var list = that.list;
	            var height = that.options.height;
	            var visible = that.popup.visible();
	            var offsetTop;
	            var popups;
	            var footerHeight;

	            if (length || that.options.noDataTemplate) {
	                popups = list.add(list.parent(".k-animation-container")).show();

	                if (!list.is(":visible")) {
	                    popups.hide();
	                    return;
	                }

	                height = that.listView.content[0].scrollHeight > height ? height : "auto";

	                popups.height(height);

	                if (height !== "auto") {
	                    offsetTop = that._offsetHeight();
	                    footerHeight = outerHeight($(that.footer)) || 0;
	                    height = height - offsetTop - footerHeight;
	                }

	                that.listView.content.height(height);

	                if (!visible) {
	                    popups.hide();
	                }
	            }

	            return height;
	        },

	        _adjustListWidth: function() {
	            var list = this.list,
	                width = list[0].style.width,
	                wrapper = this.wrapper,
	                computedStyle, computedWidth;

	            if (!list.data(WIDTH) && width) {
	                return;
	            }

	            computedStyle = window.getComputedStyle ? window.getComputedStyle(wrapper[0], null) : 0;
	            computedWidth = parseFloat(computedStyle  && computedStyle.width) || outerWidth(wrapper);

	            if (computedStyle && browser.msie) { // getComputedStyle returns different box in IE.
	                computedWidth += parseFloat(computedStyle.paddingLeft) + parseFloat(computedStyle.paddingRight) + parseFloat(computedStyle.borderLeftWidth) + parseFloat(computedStyle.borderRightWidth);
	            }

	            if (list.css("box-sizing") !== "border-box") {
	                width = computedWidth - (outerWidth(list) - list.width());
	            } else {
	                width = computedWidth;
	            }

	            list.css({
	                fontFamily: wrapper.css("font-family"),
	                width: this.options.autoWidth ? "auto" : width,
	                minWidth: width
	            })
	            .data(WIDTH, width);

	            return true;
	        },

	        _openHandler: function(e) {
	            this._adjustListWidth();

	            if (this.trigger(OPEN)) {
	                e.preventDefault();
	            } else {
	                this._focused.attr("aria-expanded", true);
	                this.ul.attr("aria-hidden", false);
	            }
	        },

	        _closeHandler: function(e) {
	            if (this.trigger(CLOSE)) {
	                e.preventDefault();
	            } else {
	                this._focused.attr("aria-expanded", false);
	                this.ul.attr("aria-hidden", true);
	            }
	        },

	        _focusItem: function() {
	            var listView = this.listView;
	            var noFocusedItem = !listView.focus();
	            var index = last(listView.select());

	            if (index === undefined && this.options.highlightFirst && noFocusedItem) {
	                index = 0;
	            }

	            if (index !== undefined) {
	                listView.focus(index);
	            } else if (noFocusedItem) {
	                listView.scrollToIndex(0);
	            }
	        },

	        _calculateGroupPadding: function(height) {
	            var li = this.ul.children(".k-first:first");
	            var groupHeader = this.listView.content.prev(GROUPHEADER);
	            var padding = 0;

	            if (groupHeader[0] && groupHeader[0].style.display !== "none") {
	                if (height !== "auto") {
	                    padding = kendo.support.scrollbar();
	                }

	                padding += parseFloat(li.css("border-right-width"), 10) + parseFloat(li.children(".k-group").css("padding-right"), 10);

	                groupHeader.css("padding-right", padding);
	            }
	        },

	        _calculatePopupHeight: function(force) {
	            var height = this._height(this.dataSource.flatView().length || force);
	            this._calculateGroupPadding(height);
	        },

	        _resizePopup: function(force) {
	            if (this.options.virtual) {
	                return;
	            }

	            if (!this.popup.element.is(":visible")) {
	                this.popup.one("open", (function(force) {
	                    return proxy(function() {
	                        this._calculatePopupHeight(force);
	                    }, this);
	                }).call(this, force));
	            } else {
	                this._calculatePopupHeight(force);
	            }
	        },

	        _popup: function() {
	            var that = this;

	            that.popup = new ui.Popup(that.list, extend({}, that.options.popup, {
	                anchor: that.wrapper,
	                open: proxy(that._openHandler, that),
	                close: proxy(that._closeHandler, that),
	                animation: that.options.animation,
	                isRtl: support.isRtl(that.wrapper),
	                autosize :that.options.autoWidth
	            }));
	        },

	        _makeUnselectable: function() {
	            if (isIE8) {
	                this.list.find("*").not(".k-textbox").attr("unselectable", "on");
	            }
	        },

	        _toggleHover: function(e) {
	            $(e.currentTarget).toggleClass(HOVER, e.type === "mouseenter");
	        },

	        _toggle: function(open, preventFocus) {
	            var that = this;
	            var touchEnabled = support.mobileOS && (support.touch || support.MSPointers || support.pointers);

	            open = open !== undefined? open : !that.popup.visible();

	            if (!preventFocus && !touchEnabled && that._focused[0] !== activeElement()) {
	                that._prevent = true;
	                that._focused.focus();
	                that._prevent = false;
	            }

	            that[open ? OPEN : CLOSE]();
	        },

	        _triggerCascade: function() {
	            var that = this;

	            if (!that._cascadeTriggered || that._old !== that.value() || that._oldIndex !== that.selectedIndex) {
	                that._cascadeTriggered = true;
	                that.trigger(CASCADE, { userTriggered: that._userTriggered });
	            }
	        },

	        _triggerChange: function() {
	            if (this._valueBeforeCascade !== this.value()) {
	                this.trigger(CHANGE);
	            }
	        },

	        _unbindDataSource: function() {
	            var that = this;

	            that.dataSource.unbind(REQUESTSTART, that._requestStartHandler)
	                           .unbind(REQUESTEND, that._requestEndHandler)
	                           .unbind("error", that._errorHandler);
	        },

	        requireValueMapper: function(options, value) {
	            var hasValue = (options.value instanceof Array ? options.value.length : options.value) || (value instanceof Array ? value.length : value);
	            if (hasValue && options.virtual && typeof options.virtual.valueMapper !== "function") {
	                throw new Error("ValueMapper is not provided while the value is being set. See http://docs.telerik.com/kendo-ui/controls/editors/combobox/virtualization#the-valuemapper-function");
	            }
	        }
	    });

	    function unifyType(value, type) {
	        if (value !== undefined && value !== "" && value !== null) {
	            if (type === "boolean") {
	                value = Boolean(value);
	            } else if (type === "number") {
	                value = Number(value);
	            } else if (type === "string") {
	                value = value.toString();
	            }
	        }

	        return value;
	    }

	    extend(List, {
	        inArray: function(node, parentNode) {
	            var idx, length, siblings = parentNode.children;

	            if (!node || node.parentNode !== parentNode) {
	                return -1;
	            }

	            for (idx = 0, length = siblings.length; idx < length; idx++) {
	                if (node === siblings[idx]) {
	                    return idx;
	                }
	            }

	            return -1;
	        },
	        unifyType: unifyType
	    });

	    kendo.ui.List = List;

	    ui.Select = List.extend({
	        init: function(element, options) {
	            List.fn.init.call(this, element, options);
	            this._initial = this.element.val();
	        },

	        setDataSource: function(dataSource) {
	            var that = this;
	            var parent;

	            that.options.dataSource = dataSource;

	            that._dataSource();

	            if (that.listView.bound()) {
	                that._initialIndex = null;
	            }

	            that.listView.setDataSource(that.dataSource);

	            if (that.options.autoBind) {
	                that.dataSource.fetch();
	            }

	            parent = that._parentWidget();

	            if (parent) {
	                that._cascadeSelect(parent);
	            }
	        },

	        close: function() {
	            this.popup.close();
	        },

	        select: function(candidate) {
	            var that = this;

	            if (candidate === undefined) {
	                return that.selectedIndex;
	            } else {
	                return that._select(candidate).done(function() {
	                    that._old = that._accessor();
	                    that._oldIndex = that.selectedIndex;
	                });
	            }
	        },

	        _accessor: function(value, idx) {
	            return this[this._isSelect ? "_accessorSelect" : "_accessorInput"](value, idx);
	        },

	        _accessorInput: function(value) {
	            var element = this.element[0];

	            if (value === undefined) {
	                return element.value;
	            } else {
	                if (value === null) {
	                    value = "";
	                }
	                element.value = value;
	            }
	        },

	        _accessorSelect: function(value, idx) {
	            var element = this.element[0];
	            var hasValue;

	            if (value === undefined) {
	                return getSelectedOption(element).value || "";
	            }

	            getSelectedOption(element).selected = false;

	            if (idx === undefined) {
	                idx = -1;
	            }

	            hasValue = (value !== null && value !== "");

	            if (hasValue && idx == -1) {
	                this._custom(value);
	            } else {
	                if (value) {
	                    element.value = value;
	                } else {
	                    element.selectedIndex = idx;
	                }
	            }
	        },

	        _custom: function(value) {
	            var that = this;
	            var element = that.element;
	            var custom = that._customOption;

	            if (!custom) {
	                custom = $("<option/>");
	                that._customOption = custom;

	                element.append(custom);
	            }

	            custom.text(value);
	            custom[0].selected = true;
	        },

	        _hideBusy: function () {
	            var that = this;
	            clearTimeout(that._busy);
	            that._arrowIcon.removeClass(LOADING);
	            that._focused.attr("aria-busy", false);
	            that._busy = null;
	            that._showClear();
	        },

	        _showBusy: function (e) {
	            var that = this;

	            if(e.isDefaultPrevented()){
	                return;
	            }

	            that._request = true;

	            if (that._busy) {
	                return;
	            }

	            that._busy = setTimeout(function () {
	                if (that._arrowIcon) { //destroyed after request start
	                    that._focused.attr("aria-busy", true);
	                    that._arrowIcon.addClass(LOADING);
	                    that._hideClear();
	                }
	            }, 100);
	        },

	        _requestEnd: function() {
	            this._request = false;
	            this._hideBusy();
	        },

	        _dataSource: function() {
	            var that = this,
	                element = that.element,
	                options = that.options,
	                dataSource = options.dataSource || {},
	                idx;

	            dataSource = $.isArray(dataSource) ? {data: dataSource} : dataSource;

	            if (that._isSelect) {
	                idx = element[0].selectedIndex;
	                if (idx > -1) {
	                    options.index = idx;
	                }

	                dataSource.select = element;
	                dataSource.fields = [{ field: options.dataTextField },
	                                     { field: options.dataValueField }];
	            }

	            if (that.dataSource) {
	                that._unbindDataSource();
	            } else {
	                that._requestStartHandler = proxy(that._showBusy, that);
	                that._requestEndHandler = proxy(that._requestEnd, that);
	                that._errorHandler = proxy(that._hideBusy, that);
	            }

	            that.dataSource = kendo.data.DataSource.create(dataSource)
	                                   .bind(REQUESTSTART, that._requestStartHandler)
	                                   .bind(REQUESTEND, that._requestEndHandler)
	                                   .bind("error", that._errorHandler);
	        },

	        _firstItem: function() {
	            this.listView.focusFirst();
	        },

	        _lastItem: function() {
	            this.listView.focusLast();
	        },

	        _nextItem: function() {
	            this.listView.focusNext();
	        },

	        _prevItem: function() {
	            this.listView.focusPrev();
	        },

	        _move: function(e) {
	            var that = this;
	            var listView = that.listView;
	            var key = e.keyCode;
	            var down = key === keys.DOWN;
	            var dataItem;
	            var pressed;
	            var current;

	            if (key === keys.UP || down) {
	                if (e.altKey) {
	                    that.toggle(down);
	                } else {
	                    if (!listView.bound()) {
	                        if (!that._fetch) {
	                            that.dataSource.one(CHANGE, function() {
	                                that._fetch = false;
	                                that._move(e);
	                            });

	                            that._fetch = true;
	                            that._filterSource();
	                        }

	                        e.preventDefault();

	                        return true; //pressed
	                    }

	                    current = that._focus();

	                    if (!that._fetch && (!current || current.hasClass("k-state-selected"))) {
	                        if (down) {
	                            that._nextItem();

	                            if (!that._focus()) {
	                                that._lastItem();
	                            }
	                        } else {
	                            that._prevItem();

	                            if (!that._focus()) {
	                                that._firstItem();
	                            }
	                        }
	                    }

	                    dataItem = listView.dataItemByIndex(listView.getElementIndex(that._focus()));

	                    if (that.trigger(SELECT, { dataItem: dataItem, item: that._focus() })) {
	                        that._focus(current);
	                        return;
	                    }

	                    that._select(that._focus(), true).done(function() {
	                        if (!that.popup.visible()) {
	                            that._blur();
	                        }
	                    });
	                }

	                e.preventDefault();
	                pressed = true;
	            } else if (key === keys.ENTER || key === keys.TAB) {
	                if (that.popup.visible()) {
	                    e.preventDefault();
	                }

	                current = that._focus();
	                dataItem = that.dataItem();

	                if (!that.popup.visible() && (!dataItem || that.text() !== that._text(dataItem))) {
	                    current = null;
	                }

	                var activeFilter = that.filterInput && that.filterInput[0] === activeElement();

	                if (current) {
	                    dataItem = listView.dataItemByIndex(listView.getElementIndex(current));
	                    var shouldTrigger = true;

	                    if(dataItem){
	                        shouldTrigger = that._value(dataItem) !==  List.unifyType(that.value(), typeof that._value(dataItem));
	                    }

	                    if (shouldTrigger && that.trigger(SELECT, { dataItem: dataItem, item: current })) {
	                        return;
	                    }

	                    that._select(current);
	                } else if (that.input) {
	                    that._accessor(that.input.val());
	                    that.listView.value(that.input.val());
	                }

	                if (that._focusElement) {
	                    that._focusElement(that.wrapper);
	                }

	                if (activeFilter && key === keys.TAB) {
	                    that.wrapper.focusout();
	                } else {
	                    that._blur();
	                }

	                that.close();
	                pressed = true;
	            } else if (key === keys.ESC) {
	                if (that.popup.visible()) {
	                    e.preventDefault();
	                }
	                that.close();
	                pressed = true;
	            } else if (that.popup.visible() && (key === keys.PAGEDOWN || key === keys.PAGEUP)) {
	                e.preventDefault();

	                var direction = key === keys.PAGEDOWN ? 1 : -1;
	                listView.scrollWith(direction * listView.screenHeight());

	                pressed = true;
	            }

	            return pressed;
	        },

	        _fetchData: function() {
	            var that = this;
	            var hasItems = !!that.dataSource.view().length;

	            if (that._request || that.options.cascadeFrom) {
	                return;
	            }

	            if (!that.listView.bound() && !that._fetch && !hasItems) {
	                that._fetch = true;
	                that.dataSource.fetch().done(function() {
	                    that._fetch = false;
	                });
	            }
	        },

	        _options: function(data, optionLabel, value) {
	            var that = this,
	                element = that.element,
	                htmlElement = element[0],
	                length = data.length,
	                options = "",
	                option,
	                dataItem,
	                dataText,
	                dataValue,
	                idx = 0;

	            if (optionLabel) {
	                options = optionLabel;
	            }

	            for (; idx < length; idx++) {
	                option = "<option";
	                dataItem = data[idx];
	                dataText = that._text(dataItem);
	                dataValue = that._value(dataItem);

	                if (dataValue !== undefined) {
	                    dataValue += "";

	                    if (dataValue.indexOf('"') !== -1) {
	                        dataValue = dataValue.replace(quotRegExp, "&quot;");
	                    }

	                    option += ' value="' + dataValue + '"';
	                }

	                option += ">";

	                if (dataText !== undefined) {
	                    option += htmlEncode(dataText);
	                }

	                option += "</option>";
	                options += option;
	            }

	            element.html(options);

	            if (value !== undefined) {
	                htmlElement.value = value;
	                if (htmlElement.value && !value) {
	                    htmlElement.selectedIndex = -1;
	                }
	            }

	            if (htmlElement.selectedIndex !== -1) {
	                option = getSelectedOption(htmlElement);

	                if (option) {
	                    option.setAttribute(SELECTED, SELECTED);
	                }
	            }
	        },

	        _reset: function() {
	            var that = this,
	                element = that.element,
	                formId = element.attr("form"),
	                form = formId ? $("#" + formId) : element.closest("form");

	            if (form[0]) {
	                that._resetHandler = function() {
	                    setTimeout(function() {
	                        that.value(that._initial);
	                    });
	                };

	                that._form = form.on("reset", that._resetHandler);
	            }
	        },

	        _parentWidget: function() {
	            var name = this.options.name;

	            if (!this.options.cascadeFrom) {
	                return;
	            }

	            var parentElement = $("#" + this.options.cascadeFrom);
	            var parent = parentElement.data("kendo" + name);

	            if (!parent) {
	                parent = parentElement.data("kendo" + alternativeNames[name]);
	            }

	            return parent;
	        },

	        _cascade: function() {
	            var that = this;
	            var options = that.options;
	            var cascade = options.cascadeFrom;
	            var parent;

	            if (cascade) {
	                parent = that._parentWidget();

	                if (!parent) {
	                    return;
	                }

	                that._cascadeHandlerProxy = proxy(that._cascadeHandler, that);
	                that._cascadeFilterRequests = [];

	                options.autoBind = false;

	                parent.bind("set", function() { //will cascade
	                    that.one("set", function(e) { //get your value
	                        that._selectedValue = e.value;
	                    });
	                });

	                parent.first(CASCADE, that._cascadeHandlerProxy);

	                //refresh was called
	                if (parent.listView.bound()) {
	                    that._toggleCascadeOnFocus();
	                    that._cascadeSelect(parent);
	                } else {
	                    parent.one("dataBound", function() {
	                        that._toggleCascadeOnFocus();
	                    });

	                    if (!parent.value()) {
	                        that.enable(false);
	                    }
	                }
	            }
	        },

	        _toggleCascadeOnFocus: function() {
	            var that = this;
	            var parent = that._parentWidget();
	            var focusout = isIE ? "blur" : "focusout";

	            parent._focused.add(parent.filterInput).bind("focus", function() {
	                parent.unbind(CASCADE, that._cascadeHandlerProxy);
	                parent.first(CHANGE, that._cascadeHandlerProxy);
	            });

	            parent._focused.add(parent.filterInput).bind(focusout, function() {
	                parent.unbind(CHANGE, that._cascadeHandlerProxy);
	                parent.first(CASCADE, that._cascadeHandlerProxy);
	            });
	        },

	        _cascadeHandler: function(e) {
	            var parent = this._parentWidget();
	            var valueBeforeCascade = this.value();

	            this._userTriggered = e.userTriggered;

	            if (this.listView.bound()) {
	                this._clearSelection(parent, true);
	            }

	            this._cascadeSelect(parent, valueBeforeCascade);
	        },

	        _cascadeChange: function(parent) {
	            var that = this;
	            var value = that._accessor() || that._selectedValue;

	            if (!that._cascadeFilterRequests.length) {
	                that._selectedValue = null;
	            }

	            if (that._userTriggered) {
	                that._clearSelection(parent, true);
	            } else if (value) {
	                if (value !== that.listView.value()[0]) {
	                    that.value(value);
	                }

	                if (!that.dataSource.view()[0] || that.selectedIndex === -1) {
	                    that._clearSelection(parent, true);
	                }
	            } else if (that.dataSource.flatView().length) {
	                that.select(that.options.index);
	            }

	            that.enable();
	            that._triggerCascade();
	            that._triggerChange();
	            that._userTriggered = false;
	        },

	        _cascadeSelect: function(parent, valueBeforeCascade) {
	            var that = this;
	            var dataItem = parent.dataItem();
	            var filterValue = dataItem ? parent._value(dataItem) : null;
	            var valueField = that.options.cascadeFromField || parent.options.dataValueField;
	            var expressions;

	            that._valueBeforeCascade = valueBeforeCascade !== undefined ? valueBeforeCascade : that.value();

	            if (filterValue || filterValue === 0) {
	                expressions = that.dataSource.filter() || {};
	                removeFiltersForField(expressions, valueField);

	                var handler = function () {
	                    var currentHandler = that._cascadeFilterRequests.shift();
	                    if (currentHandler) {
	                        that.unbind('dataBound', currentHandler);
	                    }

	                    currentHandler = that._cascadeFilterRequests[0];
	                    if (currentHandler) {
	                        that.first('dataBound', currentHandler);
	                    }

	                    that._cascadeChange(parent);
	                };

	                that._cascadeFilterRequests.push(handler);

	                if (that._cascadeFilterRequests.length === 1) {
	                    that.first('dataBound', handler);
	                }

	                that._cascading = true;
	                that._filterSource({
	                    field: valueField,
	                    operator: "eq",
	                    value: filterValue
	                });
	                that._cascading = false;
	            } else {
	                that.enable(false);
	                that._clearSelection(parent);
	                that._triggerCascade();
	                that._triggerChange();
	                that._userTriggered = false;
	            }
	        }
	    });

	    var STATIC_LIST_NS = ".StaticList";

	    var StaticList = kendo.ui.DataBoundWidget.extend({
	        init: function(element, options) {
	            Widget.fn.init.call(this, element, options);

	            this.element.attr("role", "listbox")
	                        .on("click" + STATIC_LIST_NS, "li", proxy(this._click, this))
	                        .on("mouseenter" + STATIC_LIST_NS, "li", function() { $(this).addClass(HOVER); })
	                        .on("mouseleave" + STATIC_LIST_NS, "li", function() { $(this).removeClass(HOVER); });

	            this.content = this.element.wrap("<div class='k-list-scroller' unselectable='on'></div>").parent();
	            this.header = this.content.before('<div class="k-group-header" style="display:none"></div>').prev();

	            this.bound(false);

	            this._optionID = kendo.guid();

	            this._selectedIndices = [];

	            this._view = [];
	            this._dataItems = [];
	            this._values = [];

	            var value = this.options.value;

	            if (value) {
	                this._values = $.isArray(value) ? value.slice(0) : [value];
	            }

	            this._getter();
	            this._templates();

	            this.setDataSource(this.options.dataSource);

	            this._onScroll = proxy(function() {
	                var that = this;
	                clearTimeout(that._scrollId);

	                that._scrollId = setTimeout(function() {
	                    that._renderHeader();
	                }, 50);
	            }, this);
	        },

	        options: {
	            name: "StaticList",
	            dataValueField: null,
	            valuePrimitive: false,
	            selectable: true,
	            template: null,
	            groupTemplate: null,
	            fixedGroupTemplate: null
	        },

	        events: [
	           "click",
	            CHANGE,
	           "activate",
	           "deactivate",
	           "dataBinding",
	           "dataBound",
	           "selectedItemChange"
	        ],

	        setDataSource: function(source) {
	            var that = this;
	            var dataSource = source || {};
	            var value;

	            dataSource = $.isArray(dataSource) ? { data: dataSource } : dataSource;
	            dataSource = kendo.data.DataSource.create(dataSource);

	            if (that.dataSource) {
	                that.dataSource.unbind(CHANGE, that._refreshHandler);

	                value = that.value();

	                that.value([]);
	                that.bound(false);

	                that.value(value);
	            } else {
	                that._refreshHandler = proxy(that.refresh, that);
	            }

	            that.setDSFilter(dataSource.filter());

	            that.dataSource = dataSource.bind(CHANGE, that._refreshHandler);
	            that._fixedHeader();
	        },

	        skip: function() {
	            return this.dataSource.skip();
	        },

	        setOptions: function(options) {
	            Widget.fn.setOptions.call(this, options);

	            this._getter();
	            this._templates();
	            this._render();
	        },

	        destroy: function() {
	            this.element.off(STATIC_LIST_NS);

	            if (this._refreshHandler) {
	                this.dataSource.unbind(CHANGE, this._refreshHandler);
	            }

	            clearTimeout(this._scrollId);

	            Widget.fn.destroy.call(this);
	        },

	        dataItemByIndex: function(index) {
	            return this.dataSource.flatView()[index];
	        },

	        screenHeight: function() {
	            return this.content[0].clientHeight;
	        },

	        scrollToIndex: function(index) {
	            var item = this.element[0].children[index];

	            if (item) {
	                this.scroll(item);
	            }
	        },

	        scrollWith: function(value) {
	            this.content.scrollTop(this.content.scrollTop() + value);
	        },

	        scroll: function (item) {
	            if (!item) {
	                return;
	            }

	            if (item[0]) {
	                item = item[0];
	            }

	            var content = this.content[0],
	                itemOffsetTop = item.offsetTop,
	                itemOffsetHeight = item.offsetHeight,
	                contentScrollTop = content.scrollTop,
	                contentOffsetHeight = content.clientHeight,
	                bottomDistance = itemOffsetTop + itemOffsetHeight;

	                if (contentScrollTop > itemOffsetTop) {
	                    contentScrollTop = itemOffsetTop;
	                } else if (bottomDistance > (contentScrollTop + contentOffsetHeight)) {
	                    contentScrollTop = (bottomDistance - contentOffsetHeight);
	                }

	                content.scrollTop = contentScrollTop;
	        },

	        selectedDataItems: function(dataItems) {
	            if (dataItems === undefined) {
	                return this._dataItems.slice();
	            }

	            this._dataItems = dataItems;
	            this._values = this._getValues(dataItems);
	        },

	        _getValues: function(dataItems) {
	            var getter = this._valueGetter;

	            return $.map(dataItems, function(dataItem) {
	                return getter(dataItem);
	            });
	        },

	        focusNext: function() {
	            var current = this.focus();

	            if (!current) {
	                current = 0;
	            } else {
	                current = current.next();
	            }

	            this.focus(current);
	        },

	        focusPrev: function() {
	            var current = this.focus();

	            if (!current) {
	                current = this.element[0].children.length - 1;
	            } else {
	                current = current.prev();
	            }

	            this.focus(current);
	        },

	        focusFirst: function() {
	            this.focus(this.element[0].children[0]);
	        },

	        focusLast: function() {
	            this.focus(last(this.element[0].children));
	        },

	        focus: function(candidate) {
	            var that = this;
	            var id = that._optionID;
	            var hasCandidate;

	            if (candidate === undefined) {
	                return that._current;
	            }

	            candidate = last(that._get(candidate));
	            candidate = $(this.element[0].children[candidate]);

	            if (that._current) {
	                that._current
	                    .removeClass(FOCUSED)
	                    .removeAttr("aria-selected")
	                    .removeAttr(ID);

	                that.trigger("deactivate");
	            }

	            hasCandidate = !!candidate[0];

	            if (hasCandidate) {
	                candidate.addClass(FOCUSED);
	                that.scroll(candidate);

	                candidate.attr("id", id);
	            }

	            that._current = hasCandidate ? candidate : null;
	            that.trigger("activate");
	        },

	        focusIndex: function() {
	            return this.focus() ? this.focus().index() : undefined;
	        },

	        skipUpdate: function(skipUpdate) {
	            this._skipUpdate = skipUpdate;
	        },

	        select: function(indices) {
	            var that = this;
	            var selectable = that.options.selectable;
	            var singleSelection = selectable !== "multiple" && selectable !== false;
	            var selectedIndices = that._selectedIndices;

	            var added = [];
	            var removed = [];
	            var result;

	            if (indices === undefined) {
	                return selectedIndices.slice();
	            }

	            indices = that._get(indices);

	            if (indices.length === 1 && indices[0] === -1) {
	                indices = [];
	            }

	            var deferred = $.Deferred().resolve();
	            var filtered = that.isFiltered();

	            if (filtered && !singleSelection && that._deselectFiltered(indices)) {
	                return deferred;
	            }

	            if (singleSelection && !filtered && $.inArray(last(indices), selectedIndices) !== -1) {
	                if (that._dataItems.length && that._view.length) {
	                    that._dataItems = [that._view[selectedIndices[0]].item];
	                }

	                return deferred;
	            }

	            result = that._deselect(indices);

	            removed = result.removed;
	            indices = result.indices;

	            if (indices.length) {
	                if (singleSelection) {
	                    indices = [last(indices)];
	                }

	                added = that._select(indices);
	            }

	            if (added.length || removed.length) {
	                that._valueComparer = null;
	                that.trigger(CHANGE, {
	                    added: added,
	                    removed: removed
	                });
	            }

	            return deferred;
	        },

	        removeAt: function(position) {
	            this._selectedIndices.splice(position, 1);
	            this._values.splice(position, 1);
	            this._valueComparer = null;

	            return {
	                position: position,
	                dataItem: this._dataItems.splice(position, 1)[0]
	            };
	        },

	        setValue: function(value) {
	            value = $.isArray(value) || value instanceof ObservableArray ? value.slice(0) : [value];

	            this._values = value;

	            this._valueComparer = null;
	        },

	        value: function(value) {
	            var that = this;
	            var deferred = that._valueDeferred;
	            var indices;

	            if (value === undefined) {
	                return that._values.slice();
	            }

	            that.setValue(value);

	            if (!deferred || deferred.state() === "resolved") {
	                that._valueDeferred = deferred = $.Deferred();
	            }

	            if (that.bound()) {
	                indices = that._valueIndices(that._values);

	                if (that.options.selectable === "multiple") {
	                    that.select(-1);
	                }

	                that.select(indices);

	                deferred.resolve();
	            }

	            that._skipUpdate = false;

	            return deferred;
	        },

	        items: function() {
	            return this.element.children(".k-item");
	        },

	        _click: function(e) {
	            if (!e.isDefaultPrevented()) {
	                if (!this.trigger("click", { item: $(e.currentTarget) })) {
	                    this.select(e.currentTarget);
	                }
	            }
	        },

	        _valueExpr: function(type, values) {
	            var that = this;
	            var idx = 0;

	            var body;
	            var comparer;
	            var normalized = [];

	            if (!that._valueComparer  || that._valueType !== type) {
	                that._valueType = type;

	                for (; idx < values.length; idx++) {
	                    normalized.push(unifyType(values[idx], type));
	                }

	                body = "for (var idx = 0; idx < " + normalized.length + "; idx++) {" +
	                        " if (current === values[idx]) {" +
	                        "   return idx;" +
	                        " }" +
	                        "} " +
	                        "return -1;";

	                comparer = new Function("current", "values", body);

	                that._valueComparer = function(current) {
	                    return comparer(current, normalized);
	                };
	            }

	            return that._valueComparer;
	        },

	        _dataItemPosition: function(dataItem, values) {
	            var value = this._valueGetter(dataItem);

	            var valueExpr = this._valueExpr(typeof value, values);

	            return valueExpr(value);
	        },

	        _getter: function() {
	            this._valueGetter = kendo.getter(this.options.dataValueField);
	        },

	        _deselect: function(indices) {
	            var that = this;
	            var children = that.element[0].children;
	            var selectable = that.options.selectable;
	            var selectedIndices = that._selectedIndices;
	            var dataItems = that._dataItems;
	            var values = that._values;
	            var removed = [];
	            var i = 0;
	            var j;

	            var index, selectedIndex;
	            var removedIndices = 0;

	            indices = indices.slice();

	            if (selectable === true || !indices.length) {
	                for (; i < selectedIndices.length; i++) {
	                    $(children[selectedIndices[i]]).removeClass("k-state-selected");

	                    removed.push({
	                        position: i,
	                        dataItem: dataItems[i]
	                    });
	                }

	                that._values = [];
	                that._dataItems = [];
	                that._selectedIndices = [];
	            } else if (selectable === "multiple") {
	                for (; i < indices.length; i++) {
	                    index = indices[i];

	                    if (!$(children[index]).hasClass("k-state-selected")) {
	                        continue;
	                    }

	                    for (j = 0; j < selectedIndices.length; j++) {
	                        selectedIndex = selectedIndices[j];

	                        if (selectedIndex === index) {
	                            $(children[selectedIndex]).removeClass("k-state-selected");

	                            removed.push({
	                                position: j + removedIndices,
	                                dataItem: dataItems.splice(j, 1)[0]
	                            });

	                            selectedIndices.splice(j, 1);
	                            indices.splice(i, 1);
	                            values.splice(j, 1);

	                            removedIndices += 1;
	                            i -= 1;
	                            j -= 1;
	                            break;
	                        }
	                    }
	                }
	            }

	            return {
	                indices: indices,
	                removed: removed
	            };
	        },

	        _deselectFiltered: function(indices) {
	            var children = this.element[0].children;
	            var dataItem, index, position;
	            var removed = [];
	            var idx = 0;

	            for (; idx < indices.length; idx++) {
	                index = indices[idx];
	                dataItem = this._view[index].item;
	                position = this._dataItemPosition(dataItem, this._values);

	                if (position > -1) {
	                    removed.push(this.removeAt(position));
	                    $(children[index]).removeClass("k-state-selected");
	                }
	            }

	            if (removed.length) {
	                this.trigger(CHANGE, {
	                    added: [],
	                    removed: removed
	                });

	                return true;
	            }

	            return false;
	        },

	        _select: function(indices) {
	            var that = this;
	            var children = that.element[0].children;
	            var data = that._view;
	            var dataItem, index;
	            var added = [];
	            var idx = 0;

	            if (last(indices) !== -1) {
	                that.focus(indices);
	            }

	            for (; idx < indices.length; idx++) {
	                index = indices[idx];
	                dataItem = data[index];

	                if (index === -1 || !dataItem) {
	                    continue;
	                }

	                dataItem = dataItem.item;

	                that._selectedIndices.push(index);
	                that._dataItems.push(dataItem);
	                that._values.push(that._valueGetter(dataItem));

	                $(children[index]).addClass("k-state-selected").attr("aria-selected", true);

	                added.push({
	                    dataItem: dataItem
	                });
	            }

	            return added;
	        },

	        getElementIndex: function(element) {
	            return $(element).data("offset-index");
	        },

	        _get: function(candidate) {
	            if (typeof candidate === "number") {
	                candidate = [candidate];
	            } else if (!isArray(candidate)) {
	                candidate = this.getElementIndex(candidate);
	                candidate = [candidate !== undefined ? candidate : -1];
	            }

	            return candidate;
	        },

	        _template: function() {
	            var that = this;
	            var options = that.options;
	            var template = options.template;

	            if (!template) {
	                template = kendo.template('<li tabindex="-1" role="option" unselectable="on" class="k-item">${' + kendo.expr(options.dataTextField, "data") + "}</li>", { useWithBlock: false });
	            } else {
	                template = kendo.template(template);
	                template = function(data) {
	                    return '<li tabindex="-1" role="option" unselectable="on" class="k-item">' + template(data) + "</li>";
	                };
	            }

	            return template;
	        },

	        _templates: function() {
	            var template;
	            var options = this.options;
	            var templates = {
	                template: options.template,
	                groupTemplate: options.groupTemplate,
	                fixedGroupTemplate: options.fixedGroupTemplate
	            };

	            for (var key in templates) {
	                template = templates[key];
	                if (template && typeof template !== "function") {
	                    templates[key] = kendo.template(template);
	                }
	            }

	            this.templates = templates;
	        },

	        _normalizeIndices: function(indices) {
	            var newIndices = [];
	            var idx = 0;

	            for (; idx < indices.length; idx++) {
	                if (indices[idx] !== undefined) {
	                    newIndices.push(indices[idx]);
	                }
	            }

	            return newIndices;
	        },

	        _valueIndices: function(values, indices) {
	            var data = this._view;
	            var idx = 0;
	            var index;

	            indices = indices ? indices.slice() : [];

	            if (!values.length) {
	                return [];
	            }

	            for (; idx < data.length; idx++) {
	                index = this._dataItemPosition(data[idx].item, values);

	                if (index !== -1) {
	                    indices[index] = idx;
	                }
	            }

	            return this._normalizeIndices(indices);
	        },

	        _firstVisibleItem: function() {
	            var element = this.element[0];
	            var content = this.content[0];
	            var scrollTop = content.scrollTop;
	            var itemHeight = $(element.children[0]).height();
	            var itemIndex = Math.floor(scrollTop / itemHeight) || 0;
	            var item = element.children[itemIndex] || element.lastChild;
	            var forward = item.offsetTop < scrollTop;

	            while (item) {
	                if (forward) {
	                    if ((item.offsetTop + itemHeight) > scrollTop || !item.nextSibling) {
	                        break;
	                    }

	                    item = item.nextSibling;
	                } else {
	                    if (item.offsetTop <= scrollTop || !item.previousSibling) {
	                        break;
	                    }

	                    item = item.previousSibling;
	                }
	            }

	            return this._view[$(item).data("offset-index")];
	        },

	        _fixedHeader: function() {
	            if (this.isGrouped() && this.templates.fixedGroupTemplate) {
	                this.header.show();
	                this.content.scroll(this._onScroll);
	            } else {
	                this.header.hide();
	                this.content.off("scroll", this._onScroll);
	            }
	        },

	        _renderHeader: function() {
	            var template = this.templates.fixedGroupTemplate;
	            if (!template) {
	                return;
	            }

	            var visibleItem = this._firstVisibleItem();

	            if (visibleItem) {
	                this.header.html(template(visibleItem.group));
	            }
	        },

	        _renderItem: function(context) {
	            var item = '<li tabindex="-1" role="option" unselectable="on" class="k-item';

	            var dataItem = context.item;
	            var notFirstItem = context.index !== 0;
	            var selected = context.selected;

	            if (notFirstItem && context.newGroup) {
	                item += ' k-first';
	            }

	            if (selected) {
	                item += ' k-state-selected';
	            }

	            item += '"' + (selected ? ' aria-selected="true"' : "") + ' data-offset-index="' + context.index + '">';

	            item += this.templates.template(dataItem);

	            if (notFirstItem && context.newGroup) {
	                item += '<div class="k-group">' + this.templates.groupTemplate(context.group) + '</div>';
	            }

	            return item + "</li>";
	        },

	        _render: function() {
	            var html = "";

	            var i = 0;
	            var idx = 0;
	            var context;
	            var dataContext = [];
	            var view = this.dataSource.view();
	            var values = this.value();

	            var group, newGroup, j;
	            var isGrouped = this.isGrouped();

	            if (isGrouped) {
	                for (i = 0; i < view.length; i++) {
	                    group = view[i];
	                    newGroup = true;

	                    for (j = 0; j < group.items.length; j++) {
	                        context = {
	                            selected: this._selected(group.items[j], values),
	                            item: group.items[j],
	                            group: group.value,
	                            newGroup: newGroup,
	                            index: idx };
	                        dataContext[idx] = context;
	                        idx += 1;

	                        html += this._renderItem(context);
	                        newGroup = false;
	                    }
	                }
	            } else {
	                for (i = 0; i < view.length; i++) {
	                    context = { selected: this._selected(view[i], values), item: view[i], index: i };

	                    dataContext[i] = context;

	                    html += this._renderItem(context);
	                }
	            }

	            this._view = dataContext;

	            this.element[0].innerHTML = html;

	            if (isGrouped && dataContext.length) {
	                this._renderHeader();
	            }
	        },

	        _selected: function(dataItem, values) {
	            var select = !this.isFiltered() || this.options.selectable === "multiple";
	            return select && this._dataItemPosition(dataItem, values) !== -1;
	        },

	        setDSFilter: function(filter) {
	            this._lastDSFilter = extend({}, filter);
	        },

	        isFiltered: function() {
	            if (!this._lastDSFilter) {
	                this.setDSFilter(this.dataSource.filter());
	            }

	            return !kendo.data.Query.compareFilters(this.dataSource.filter(), this._lastDSFilter);
	        },

	        refresh: function(e) {
	            var that = this;
	            var action = e && e.action;
	            var skipUpdateOnBind = that.options.skipUpdateOnBind;
	            var isItemChange = action === "itemchange";
	            var result;

	            that.trigger("dataBinding");
	            that._angularItems("cleanup");

	            that._fixedHeader();

	            that._render();

	            that.bound(true);

	            if (isItemChange || action === "remove") {
	                result = mapChangedItems(that._dataItems, e.items);

	                if (result.changed.length) {
	                    if (isItemChange) {
	                        that.trigger("selectedItemChange", {
	                            items: result.changed
	                        });
	                    } else {
	                        that.value(that._getValues(result.unchanged));
	                    }
	                }
	            } else if (that.isFiltered() || that._skipUpdate) {
	                that.focus(0);
	                if (that._skipUpdate) {
	                    that._skipUpdate = false;
	                    that._selectedIndices = that._valueIndices(that._values, that._selectedIndices);
	                }
	            } else if (!skipUpdateOnBind && (!action || action === "add")) {
	                that.value(that._values);
	            }

	            if (that._valueDeferred) {
	                that._valueDeferred.resolve();
	            }

	            that._angularItems("compile");
	            that.trigger("dataBound");
	        },

	        bound: function(bound) {
	            if (bound === undefined) {
	                return this._bound;
	            }

	            this._bound = bound;
	        },

	        isGrouped: function() {
	            return (this.dataSource.group() || []).length;
	        }
	    });

	    ui.plugin(StaticList);

	    function last(list) {
	        return list[list.length - 1];
	    }

	    function getSelectedOption(select) {
	        var index = select.selectedIndex;
	        return index > -1 ? select.options[index] : {};
	    }

	    function mapChangedItems(selected, itemsToMatch) {
	        var itemsLength = itemsToMatch.length;
	        var selectedLength = selected.length;
	        var dataItem;
	        var found;
	        var i, j;

	        var changed = [];
	        var unchanged = [];

	        if (selectedLength) {
	            for (i = 0; i < selectedLength; i++) {
	                dataItem = selected[i];
	                found = false;

	                for (j = 0; j < itemsLength; j++) {
	                    if (dataItem === itemsToMatch[j]) {
	                        found = true;
	                        changed.push({ index: i, item: dataItem });
	                        break;
	                    }
	                }

	                if (!found) {
	                    unchanged.push(dataItem);
	                }
	            }
	        }

	        return {
	            changed: changed,
	            unchanged: unchanged
	        };
	    }

	    function isValidFilterExpr(expression) {
	        if (!expression || $.isEmptyObject(expression)) {
	            return false;
	        }

	        if (expression.filters && !expression.filters.length) {
	            return false;
	        }

	        return true;
	    }

	    function removeFiltersForField(expression, field) {
	        var filters;
	        var found = false;

	        if (expression.filters) {
	            filters = $.grep(expression.filters, function(filter) {
	                found = removeFiltersForField(filter, field);
	                if (filter.filters) {
	                    return filter.filters.length;
	                } else {
	                    return filter.field != field;
	                }
	            });

	            if (!found && expression.filters.length !== filters.length) {
	                found = true;
	            }

	            expression.filters = filters;
	        }

	        return found;
	    }

	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(422));


/***/ })

/******/ });

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(483);


/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 477:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(11);

/***/ }),

/***/ 483:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(477), __webpack_require__(484) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "mobile.pane",
	    name: "Pane",
	    category: "mobile",
	    description: "Mobile Pane",
	    depends: [ "mobile.view", "mobile.loader" ],
	    hidden: true
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        mobile = kendo.mobile,
	        roleSelector = kendo.roleSelector,
	        ui = mobile.ui,
	        Widget = ui.Widget,
	        ViewEngine = mobile.ViewEngine,
	        View = ui.View,
	        Loader = mobile.ui.Loader,

	        EXTERNAL = "external",
	        HREF = "href",
	        DUMMY_HREF = "#!",

	        NAVIGATE = "navigate",
	        VIEW_SHOW = "viewShow",
	        SAME_VIEW_REQUESTED = "sameViewRequested",
	        OS = kendo.support.mobileOS,
	        SKIP_TRANSITION_ON_BACK_BUTTON = OS.ios && !OS.appMode && OS.flatVersion >= 700,
	        WIDGET_RELS = /popover|actionsheet|modalview|drawer/,
	        BACK = "#:back",

	        attrValue = kendo.attrValue;

	    var Pane = Widget.extend({
	        init: function(element, options) {
	            var that = this;

	            Widget.fn.init.call(that, element, options);

	            options = that.options;
	            element = that.element;

	            element.addClass("km-pane");

	            if (that.options.collapsible) {
	                element.addClass("km-collapsible-pane");
	            }

	            this.history = [];

	            this.historyCallback = function(url, params, backButtonPressed) {
	                var transition = that.transition;
	                that.transition = null;

	                // swiping back in iOS leaves the app in a very broken state if we perform a transition
	                if (SKIP_TRANSITION_ON_BACK_BUTTON && backButtonPressed) {
	                    transition = "none";
	                }

	                return that.viewEngine.showView(url, transition, params);
	            };

	            this._historyNavigate = function(url) {
	                if (url === BACK) {
	                    if (that.history.length === 1) {
	                        return;
	                    }

	                    that.history.pop();
	                    url = that.history[that.history.length - 1];
	                } else {
	                    that.history.push(url);
	                }

	                that.historyCallback(url, kendo.parseQueryStringParams(url));
	            };

	            this._historyReplace = function(url) {
	                var params = kendo.parseQueryStringParams(url);
	                that.history[that.history.length - 1] = url;
	                that.historyCallback(url, params);
	            };

	            that.loader = new Loader(element, {
	                loading: that.options.loading
	            });

	            that.viewEngine = new ViewEngine({
	                container: element,
	                transition: options.transition,
	                modelScope: options.modelScope,
	                rootNeeded: !options.initial,
	                serverNavigation: options.serverNavigation,
	                remoteViewURLPrefix: options.root || "",
	                layout: options.layout,
	                $angular: options.$angular,
	                loader: that.loader,

	                showStart: function() {
	                    that.loader.transition();
	                    that.closeActiveDialogs();
	                },

	                after: function() {
	                    that.loader.transitionDone();
	                },

	                viewShow: function(e) {
	                    that.trigger(VIEW_SHOW, e);
	                },

	                loadStart: function() {
	                    that.loader.show();
	                },

	                loadComplete: function() {
	                    that.loader.hide();
	                },

	                sameViewRequested: function() {
	                    that.trigger(SAME_VIEW_REQUESTED);
	                },

	                viewTypeDetermined: function(e) {
	                    if (!e.remote || !that.options.serverNavigation)  {
	                        that.trigger(NAVIGATE, { url: e.url });
	                    }
	                }
	            });


	            this._setPortraitWidth();

	            kendo.onResize(function() {
	                that._setPortraitWidth();
	            });

	            that._setupAppLinks();
	        },

	        closeActiveDialogs: function() {
	            var dialogs = this.element.find(roleSelector("actionsheet popover modalview")).filter(":visible");
	            dialogs.each(function() {
	                kendo.widgetInstance($(this), ui).close();
	            });
	        },

	        navigateToInitial: function() {
	            var initial = this.options.initial;

	            if (initial) {
	                this.navigate(initial);
	            }

	            return initial;
	        },

	        options: {
	            name: "Pane",
	            portraitWidth: "",
	            transition: "",
	            layout: "",
	            collapsible: false,
	            initial: null,
	            modelScope: window,
	            loading: "<h1>Loading...</h1>"
	        },

	        events: [
	            NAVIGATE,
	            VIEW_SHOW,
	            SAME_VIEW_REQUESTED
	        ],

	        append: function(html) {
	            return this.viewEngine.append(html);
	        },

	        destroy: function() {
	            Widget.fn.destroy.call(this);
	            this.viewEngine.destroy();
	            this.userEvents.destroy();
	        },

	        navigate: function(url, transition) {
	            if (url instanceof View) {
	                url = url.id;
	            }

	            this.transition = transition;

	            this._historyNavigate(url);
	        },

	        replace: function(url, transition) {
	            if (url instanceof View) {
	                url = url.id;
	            }

	            this.transition = transition;

	            this._historyReplace(url);
	        },

	        bindToRouter: function(router) {
	            var that = this,
	                history = this.history,
	                viewEngine = this.viewEngine;

	            router.bind("init", function(e) {
	                var url = e.url,
	                    attrUrl = router.pushState ? url : "/";

	                viewEngine.rootView.attr(kendo.attr("url"), attrUrl);

	                // if current is set, then this means that the pane has navigated to a given view - we need to update the router accordingly.
	                var length = history.length;

	                if (url === "/" && length) {
	                    router.navigate(history[length - 1], true);
	                    e.preventDefault(); // prevents from executing routeMissing, by default
	                }
	            });

	            router.bind("routeMissing", function(e) {
	                if (!that.historyCallback(e.url, e.params, e.backButtonPressed)) {
	                    e.preventDefault();
	                }
	            });

	            router.bind("same", function() {
	                that.trigger(SAME_VIEW_REQUESTED);
	            });

	            that._historyNavigate = function(url) {
	                router.navigate(url);
	            };

	            that._historyReplace = function(url) {
	                router.replace(url);
	            };
	        },

	        hideLoading: function() {
	            this.loader.hide();
	        },

	        showLoading: function() {
	            this.loader.show();
	        },

	        changeLoadingMessage: function(message) {
	            this.loader.changeMessage(message);
	        },

	        view: function() {
	            return this.viewEngine.view();
	        },

	        _setPortraitWidth: function() {
	            var width,
	                portraitWidth = this.options.portraitWidth;

	            if (portraitWidth) {
	                width = kendo.mobile.application.element.is(".km-vertical") ? portraitWidth : "auto";
	                this.element.css("width", width);
	            }
	        },

	        _setupAppLinks: function() {
	            var that = this,
	                linkRoles = "tab",
	                pressedButtonSelector = "[data-" + kendo.ns + "navigate-on-press]",

	                buttonSelectors = $.map(["button", "backbutton", "detailbutton", "listview-link"] , function(role) {
	                    return roleSelector(role) + ":not(" + pressedButtonSelector + ")";
	                }).join(",");

	            this.element.handler(this)
	                .on("down", roleSelector(linkRoles) + "," + pressedButtonSelector, "_mouseup")
	                .on("click", roleSelector(linkRoles) + "," + buttonSelectors + "," + pressedButtonSelector, "_appLinkClick");

	            this.userEvents = new kendo.UserEvents(this.element, {
	                fastTap: true,
	                filter: buttonSelectors,
	                tap: function(e) {
	                    e.event.currentTarget = e.touch.currentTarget;
	                    that._mouseup(e.event);
	                }
	            });

	            // remove the ms-touch-action added by the user events, breaks native scrolling in WP8
	            this.element.css('-ms-touch-action', '');
	        },

	        _appLinkClick: function (e) {
	            var href = $(e.currentTarget).attr("href");
	            var remote = href && href[0] !== "#" && this.options.serverNavigation;

	            if(!remote && attrValue($(e.currentTarget), "rel") != EXTERNAL) {
	                e.preventDefault();
	            }
	        },

	        _mouseup: function(e) {
	            if (e.which > 1 || e.isDefaultPrevented()) {
	                return;
	            }

	            var pane = this,
	                link = $(e.currentTarget),
	                transition = attrValue(link, "transition"),
	                rel = attrValue(link, "rel") || "",
	                target = attrValue(link, "target"),
	                href = link.attr(HREF),
	                delayedTouchEnd = SKIP_TRANSITION_ON_BACK_BUTTON && link[0].offsetHeight === 0,
	                remote = href && href[0] !== "#" && this.options.serverNavigation;

	            if (delayedTouchEnd || remote || rel === EXTERNAL || (typeof href === "undefined") || href === DUMMY_HREF) {
	                return;
	            }

	            // Prevent iOS address bar progress display for in app navigation
	            link.attr(HREF, DUMMY_HREF);
	            setTimeout(function() { link.attr(HREF, href); });

	            if (rel.match(WIDGET_RELS)) {
	                kendo.widgetInstance($(href), ui).openFor(link);
	                // if propagation is not stopped and actionsheet is opened from tabstrip,
	                // the actionsheet is closed immediately.
	                if (rel === "actionsheet" || rel === "drawer") {
	                    e.stopPropagation();
	                }
	            } else {
	                if (target === "_top") {
	                    pane = mobile.application.pane;
	                }
	                else if (target) {
	                    pane = $("#" + target).data("kendoMobilePane");
	                }

	                pane.navigate(href, transition);
	            }

	            e.preventDefault();
	        }
	    });

	    Pane.wrap = function(element) {
	        if (!element.is(roleSelector("view"))) {
	            element = element.wrap('<div data-' + kendo.ns + 'role="view" data-stretch="true"></div>').parent();
	        }

	        var paneContainer = element.wrap('<div class="km-pane-wrapper"><div></div></div>').parent(),
	            pane = new Pane(paneContainer);

	        pane.navigate("");

	        return pane;
	    };
	    ui.plugin(Pane);
	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(422));


/***/ }),

/***/ 484:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(29);

/***/ })

/******/ });

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(493);


/***/ }),

/***/ 421:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(0);

/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 425:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(8);

/***/ }),

/***/ 487:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(7);

/***/ }),

/***/ 493:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(421), __webpack_require__(487), __webpack_require__(425), __webpack_require__(494) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "mobile.view",
	    name: "View",
	    category: "mobile",
	    description: "Mobile View",
	    depends: [ "core", "fx", "mobile.scroller", "view" ],
	    hidden: true
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        mobile = kendo.mobile,
	        ui = mobile.ui,
	        attr = kendo.attr,
	        Widget = ui.Widget,
	        ViewClone = kendo.ViewClone,
	        INIT = "init",
	        UI_OVERLAY = '<div style="height: 100%; width: 100%; position: absolute; top: 0; left: 0; z-index: 20000; display: none" />',
	        BEFORE_SHOW = "beforeShow",
	        SHOW = "show",
	        AFTER_SHOW = "afterShow",
	        BEFORE_HIDE = "beforeHide",
	        TRANSITION_END = "transitionEnd",
	        TRANSITION_START = "transitionStart",
	        HIDE = "hide",
	        DESTROY = "destroy",
	        attrValue = kendo.attrValue,
	        roleSelector = kendo.roleSelector,
	        directiveSelector = kendo.directiveSelector,
	        compileMobileDirective = kendo.compileMobileDirective;

	    function initPopOvers(element) {
	        var popovers = element.find(roleSelector("popover")),
	            idx, length,
	            roles = ui.roles;

	        for (idx = 0, length = popovers.length; idx < length; idx ++) {
	            kendo.initWidget(popovers[idx], {}, roles);
	        }
	    }

	    function preventScrollIfNotInput(e) {
	        if (!kendo.triggeredByInput(e)) {
	            e.preventDefault();
	        }
	    }

	    var View = Widget.extend({
	        init: function(element, options) {
	            Widget.fn.init.call(this, element, options);
	            this.params = {};

	            $.extend(this, options);

	            this.transition = this.transition || this.defaultTransition;

	            this._id();

	            if (!this.options.$angular) {
	                this._layout();
	                this._overlay();
	                this._scroller();
	                this._model();
	            } else {
	                this._overlay();
	            }
	        },

	        events: [
	            INIT,
	            BEFORE_SHOW,
	            SHOW,
	            AFTER_SHOW,
	            BEFORE_HIDE,
	            HIDE,
	            DESTROY,
	            TRANSITION_START,
	            TRANSITION_END
	        ],

	        options: {
	            name: "View",
	            title: "",
	            layout: null,
	            getLayout: $.noop,
	            reload: false,
	            transition: "",
	            defaultTransition: "",
	            useNativeScrolling: false,
	            stretch: false,
	            zoom: false,
	            model: null,
	            modelScope: window,
	            scroller: {},
	            initWidgets: true
	        },

	        enable: function(enable) {
	            if(typeof enable == "undefined") {
	                enable = true;
	            }

	            if(enable) {
	                this.overlay.hide();
	            } else {
	                this.overlay.show();
	            }
	        },

	        destroy: function() {
	            if (this.layout) {
	                this.layout.detach(this);
	            }

	            this.trigger(DESTROY);


	            Widget.fn.destroy.call(this);

	            if (this.scroller) {
	                this.scroller.destroy();
	            }

	            if (this.options.$angular) {
	                this.element.scope().$destroy();
	            }

	            kendo.destroy(this.element);
	        },

	        purge: function() {
	            this.destroy();
	            this.element.remove();
	        },

	        triggerBeforeShow: function() {
	            if (this.trigger(BEFORE_SHOW, { view: this })) {
	                return false;
	            }
	            return true;
	        },

	        triggerBeforeHide: function() {
	            if (this.trigger(BEFORE_HIDE, { view: this })) {
	                return false;
	            }
	            return true;
	        },

	        showStart: function() {
	            var element = this.element;

	            element.css("display", "");

	            if (!this.inited) {
	                this.inited = true;
	                this.trigger(INIT, {view: this});
	            } else { // skip the initial controller update
	                this._invokeNgController();
	            }

	            if (this.layout) {
	                this.layout.attach(this);
	            }

	            this._padIfNativeScrolling();
	            this.trigger(SHOW, {view: this});
	            kendo.resize(element);
	        },

	        showEnd: function() {
	            this.trigger(AFTER_SHOW, {view: this});
	            this._padIfNativeScrolling();
	        },

	        hideEnd: function() {
	            var that = this;
	            that.element.hide();
	            that.trigger(HIDE, {view: that});

	            if (that.layout) {
	                that.layout.trigger(HIDE, { view : that, layout: that.layout });
	            }
	        },

	        beforeTransition: function(type){
	            this.trigger(TRANSITION_START, { type: type });
	        },

	        afterTransition: function(type){
	            this.trigger(TRANSITION_END, { type: type });
	        },

	        _padIfNativeScrolling: function() {
	            if (mobile.appLevelNativeScrolling()) {
	                var isAndroid = kendo.support.mobileOS && kendo.support.mobileOS.android,
	                    skin = mobile.application.skin() || "",
	                    isAndroidForced = mobile.application.os.android || (skin.indexOf("android") > -1),
	                    hasPlatformIndependentSkin = skin === "flat" || (skin.indexOf("material") > -1),
	                    topContainer = (isAndroid || isAndroidForced) && (!hasPlatformIndependentSkin) ? "footer" : "header",
	                    bottomContainer = (isAndroid || isAndroidForced) && (!hasPlatformIndependentSkin) ? "header" : "footer";

	                this.content.css({
	                    paddingTop: this[topContainer].height(),
	                    paddingBottom: this[bottomContainer].height()
	                });
	            }
	        },

	        contentElement: function() {
	            var that = this;

	            return that.options.stretch ? that.content : that.scrollerContent;
	        },

	        clone: function() {
	            return new ViewClone(this);
	        },

	        _scroller: function() {
	            var that = this;

	            if (mobile.appLevelNativeScrolling()) {
	                return;
	            }
	            if (that.options.stretch) {
	                that.content.addClass("km-stretched-view");
	            } else {
	                that.content.kendoMobileScroller($.extend(that.options.scroller, { zoom: that.options.zoom, useNative: that.options.useNativeScrolling }));

	                that.scroller = that.content.data("kendoMobileScroller");
	                that.scrollerContent = that.scroller.scrollElement;
	            }

	            // prevent accidental address bar display when pulling the header
	            if (kendo.support.kineticScrollNeeded) {
	                $(that.element).on("touchmove", ".km-header", preventScrollIfNotInput);
	                if (!that.options.useNativeScrolling && !that.options.stretch) {
	                    $(that.element).on("touchmove", ".km-content", preventScrollIfNotInput);
	                }
	            }
	        },

	        _model: function() {
	            var that = this,
	                element = that.element,
	                model = that.options.model;

	            if (typeof model === "string") {
	                model = kendo.getter(model)(that.options.modelScope);
	            }

	            that.model = model;

	            initPopOvers(element);

	            that.element.css("display", "");
	            if (that.options.initWidgets) {
	                if (model) {
	                    kendo.bind(element, model, ui, kendo.ui, kendo.dataviz.ui);
	                } else {
	                    mobile.init(element.children());
	                }
	            }
	            that.element.css("display", "none");
	        },

	        _id: function() {
	            var element = this.element,
	                idAttrValue = element.attr("id") || "";

	            this.id = attrValue(element, "url") || "#" + idAttrValue;

	            if (this.id == "#") {
	                this.id = kendo.guid();
	                element.attr("id", this.id);
	            }
	        },

	        _layout: function() {
	            var contentSelector = roleSelector("content"),
	                element = this.element;

	            element.addClass("km-view");

	            this.header = element.children(roleSelector("header")).addClass("km-header");
	            this.footer = element.children(roleSelector("footer")).addClass("km-footer");

	            if (!element.children(contentSelector)[0]) {
	              element.wrapInner("<div " + attr("role") + '="content"></div>');
	            }

	            this.content = element.children(roleSelector("content"))
	                                .addClass("km-content");

	            this.element.prepend(this.header).append(this.footer);


	            this.layout = this.options.getLayout(this.layout);

	            if (this.layout) {
	                this.layout.setup(this);
	            }
	        },

	        _overlay: function() {
	            this.overlay = $(UI_OVERLAY).appendTo(this.element);
	        },

	        _invokeNgController: function() {
	            var controller,
	                scope;

	            if (this.options.$angular) {
	                controller = this.element.controller();
	                scope = this.options.$angular[0];

	                if (controller) {
	                    var callback = $.proxy(this, '_callController', controller, scope);

	                    if (/^\$(digest|apply)$/.test(scope.$$phase)) {
	                        callback();
	                    } else {
	                        scope.$apply(callback);
	                    }
	                }
	            }
	        },

	        _callController: function(controller, scope) {
	            this.element.injector().invoke(controller.constructor, controller, { $scope: scope });
	        }
	    });

	    function initWidgets(collection) {
	        collection.each(function() {
	            kendo.initWidget($(this), {}, ui.roles);
	        });
	    }

	    var Layout = Widget.extend({
	        init: function(element, options) {
	            Widget.fn.init.call(this, element, options);

	            element = this.element;

	            this.header = element.children(this._locate("header")).addClass("km-header");
	            this.footer = element.children(this._locate("footer")).addClass("km-footer");
	            this.elements = this.header.add(this.footer);

	            initPopOvers(element);

	            if (!this.options.$angular) {
	                kendo.mobile.init(this.element.children());
	            }
	            this.element.detach();
	            this.trigger(INIT, {layout: this});
	        },

	        _locate: function(selectors) {
	            return this.options.$angular ? directiveSelector(selectors) : roleSelector(selectors);
	        },

	        options: {
	            name: "Layout",
	            id: null,
	            platform: null
	        },

	        events: [
	            INIT,
	            SHOW,
	            HIDE
	        ],

	        setup: function(view) {
	            if (!view.header[0]) { view.header = this.header; }
	            if (!view.footer[0]) { view.footer = this.footer; }
	        },

	        detach: function(view) {
	            var that = this;
	            if (view.header === that.header && that.header[0]) {
	                view.element.prepend(that.header.detach()[0].cloneNode(true));
	            }

	            if (view.footer === that.footer && that.footer.length) {
	                view.element.append(that.footer.detach()[0].cloneNode(true));
	            }
	        },

	        attach: function(view) {
	            var that = this,
	                previousView = that.currentView;

	            if (previousView) {
	                that.detach(previousView);
	            }

	            if (view.header === that.header) {
	                that.header.detach();
	                view.element.children(roleSelector("header")).remove();
	                view.element.prepend(that.header);
	            }

	            if (view.footer === that.footer) {
	                that.footer.detach();
	                view.element.children(roleSelector("footer")).remove();
	                view.element.append(that.footer);
	            }

	            that.trigger(SHOW, {layout: that, view: view});
	            that.currentView = view;
	        }
	    });

	    var Observable = kendo.Observable,
	        bodyRegExp = /<body[^>]*>(([\u000a\u000d\u2028\u2029]|.)*)<\/body>/i,
	        LOAD_START = "loadStart",
	        LOAD_COMPLETE = "loadComplete",
	        SHOW_START = "showStart",
	        SAME_VIEW_REQUESTED = "sameViewRequested",
	        VIEW_SHOW = "viewShow",
	        VIEW_TYPE_DETERMINED = "viewTypeDetermined",
	        AFTER = "after";

	    var ViewEngine = Observable.extend({
	        init: function(options) {
	            var that = this,
	                views,
	                errorMessage,
	                container,
	                collection;

	            Observable.fn.init.call(that);

	            $.extend(that, options);
	            that.sandbox = $("<div />");
	            container = that.container;

	            views = that._hideViews(container);
	            that.rootView = views.first();

	            if (!that.rootView[0] && options.rootNeeded) {
	                if (container[0] == kendo.mobile.application.element[0]) {
	                    errorMessage = 'Your kendo mobile application element does not contain any direct child elements with data-role="view" attribute set. Make sure that you instantiate the mobile application using the correct container.';
	                } else {
	                    errorMessage = 'Your pane element does not contain any direct child elements with data-role="view" attribute set.';
	                }
	                throw new Error(errorMessage);
	            }

	            that.layouts = {};

	            that.viewContainer = new kendo.ViewContainer(that.container);

	            that.viewContainer.bind("accepted", function(e) {
	                e.view.params = that.params;
	            });

	            that.viewContainer.bind("complete", function(e) {
	                that.trigger(VIEW_SHOW, { view: e.view });
	            });

	            that.viewContainer.bind(AFTER, function() {
	                that.trigger(AFTER);
	            });

	            this.getLayoutProxy = $.proxy(this, "_getLayout");
	            that._setupLayouts(container);

	            collection = container.children(that._locate("modalview drawer"));
	            if (that.$angular) {

	                that.$angular[0].viewOptions = {
	                    defaultTransition: that.transition,
	                    loader: that.loader,
	                    container: that.container,
	                    getLayout: that.getLayoutProxy
	                };

	                collection.each(function(idx, element) {
	                    compileMobileDirective($(element), options.$angular[0]);
	                });
	            } else {
	                initWidgets(collection);
	            }

	            this.bind(this.events, options);
	        },

	        events: [
	            SHOW_START,
	            AFTER,
	            VIEW_SHOW,
	            LOAD_START,
	            LOAD_COMPLETE,
	            SAME_VIEW_REQUESTED,
	            VIEW_TYPE_DETERMINED
	        ],

	        destroy: function() {
	            kendo.destroy(this.container);

	            for (var id in this.layouts) {
	                this.layouts[id].destroy();
	            }
	        },

	        view: function() {
	            return this.viewContainer.view;
	        },

	        showView: function(url, transition, params) {
	            url = url.replace(new RegExp("^" + this.remoteViewURLPrefix), "");
	            if (url === "" && this.remoteViewURLPrefix) {
	                url = "/";
	            }

	            if (url.replace(/^#/, "") === this.url) {
	                this.trigger(SAME_VIEW_REQUESTED);
	                return false;
	            }

	            this.trigger(SHOW_START);

	            var that = this,
	                showClosure = function(view) {
	                    return that.viewContainer.show(view, transition, url);
	                },
	                element = that._findViewElement(url),
	                view = kendo.widgetInstance(element);

	            that.url = url.replace(/^#/, "");

	            that.params = params;

	            if (view && view.reload) {
	                view.purge();
	                element = [];
	            }

	            this.trigger(VIEW_TYPE_DETERMINED, { remote: element.length === 0, url: url });

	            if (element[0]) {
	                if (!view) {
	                    view = that._createView(element);
	                }

	                return showClosure(view);
	            } else {
	                if (this.serverNavigation) {
	                    location.href = url;
	                } else {
	                    that._loadView(url, showClosure);
	                }
	                return true;
	            }
	        },

	        append: function(html, url) {
	            var sandbox = this.sandbox,
	                urlPath = (url || "").split("?")[0],
	                container = this.container,
	                views,
	                modalViews,
	                view;

	            if (bodyRegExp.test(html)) {
	                html = RegExp.$1;
	            }

	            sandbox[0].innerHTML = html;

	            container.append(sandbox.children("script, style"));

	            views = this._hideViews(sandbox);
	            view = views.first();

	            // Generic HTML content found as remote view - no remote view markers
	            if (!view.length) {
	                views = view = sandbox.wrapInner("<div data-role=view />").children(); // one element
	            }

	            if (urlPath) {
	                view.hide().attr(attr("url"), urlPath);
	            }

	            this._setupLayouts(sandbox);

	            modalViews = sandbox.children(this._locate("modalview drawer"));

	            container.append(sandbox.children(this._locate("layout modalview drawer")).add(views));

	            // Initialize the modalviews after they have been appended to the final container
	            initWidgets(modalViews);

	            return this._createView(view);
	        },

	        _locate: function(selectors) {
	            return this.$angular ? directiveSelector(selectors) : roleSelector(selectors);
	        },

	        _findViewElement: function(url) {
	            var element,
	                urlPath = url.split("?")[0];

	            if (!urlPath) {
	                return this.rootView;
	            }

	            element = this.container.children("[" + attr("url") + "='" + urlPath + "']");

	            // do not try to search for "#/foo/bar" id, jQuery throws error
	            if (!element[0] && urlPath.indexOf("/") === -1) {
	                element = this.container.children(urlPath.charAt(0) === "#" ? urlPath : "#" + urlPath);
	            }

	            return element;
	        },

	        _createView: function(element) {
	            if (this.$angular) {
	                return compileMobileDirective(element, this.$angular[0]);
	            } else {
	                return kendo.initWidget(element, {
	                    defaultTransition: this.transition,
	                    loader: this.loader,
	                    container: this.container,
	                    getLayout: this.getLayoutProxy,
	                    modelScope: this.modelScope,
	                    reload: attrValue(element, "reload")
	                }, ui.roles);
	            }
	        },

	        _getLayout: function(name) {
	            if (name === "") {
	                return null;
	            }

	            return name ? this.layouts[name] : this.layouts[this.layout];
	        },

	        _loadView: function(url, callback) {
	            if (this._xhr) {
	                this._xhr.abort();
	            }

	            this.trigger(LOAD_START);

	            this._xhr = $.get(kendo.absoluteURL(url, this.remoteViewURLPrefix), "html")
	                .always($.proxy(this, "_xhrComplete", callback, url));
	        },

	        _xhrComplete: function(callback, url, response) {
	            var success = true;

	            if (typeof response === "object") {
	                if (response.status === 0) {
	                    if (response.responseText && response.responseText.length > 0) {
	                        success = true;
	                        response = response.responseText;
	                    } else { // request has been aborted for real
	                        return;
	                    }
	                }
	            }

	            this.trigger(LOAD_COMPLETE);

	            if (success) {
	                callback(this.append(response, url));
	            }
	        },

	        _hideViews: function(container) {
	            return container.children(this._locate("view splitview")).hide();
	        },

	        _setupLayouts: function(element) {
	            var that = this,
	                layout;

	            element.children(that._locate("layout")).each(function() {
	                if (that.$angular) {
	                    layout = compileMobileDirective($(this), that.$angular[0]);
	                } else {
	                    layout = kendo.initWidget($(this), {}, ui.roles);
	                }

	                var platform = layout.options.platform;

	                if (!platform || platform === mobile.application.os.name) {
	                    that.layouts[layout.options.id] = layout;
	                } else {
	                    layout.destroy();
	                }
	            });

	        }
	    });

	    kendo.mobile.ViewEngine = ViewEngine;

	    ui.plugin(View);
	    ui.plugin(Layout);
	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(422));


/***/ }),

/***/ 494:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(37);

/***/ })

/******/ });

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var utils = __webpack_require__(2);
var normalizeHeaderName = __webpack_require__(58);

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter;
  if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = __webpack_require__(18);
  } else if (typeof process !== 'undefined') {
    // For node use HTTP adapter
    adapter = __webpack_require__(18);
  }
  return adapter;
}

var defaults = {
  adapter: getDefaultAdapter(),

  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Content-Type');
    if (utils.isFormData(data) ||
      utils.isArrayBuffer(data) ||
      utils.isBuffer(data) ||
      utils.isStream(data) ||
      utils.isFile(data) ||
      utils.isBlob(data)
    ) {
      return data;
    }
    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }
    if (utils.isObject(data)) {
      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
      return JSON.stringify(data);
    }
    return data;
  }],

  transformResponse: [function transformResponse(data) {
    /*eslint no-param-reassign:0*/
    if (typeof data === 'string') {
      try {
        data = JSON.parse(data);
      } catch (e) { /* Ignore */ }
    }
    return data;
  }],

  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  }
};

defaults.headers = {
  common: {
    'Accept': 'application/json, text/plain, */*'
  }
};

utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});

module.exports = defaults;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(110)))

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! DataTables 1.10.15
 * ©2008-2017 SpryMedia Ltd - datatables.net/license
 */

/**
 * @summary     DataTables
 * @description Paginate, search and order HTML tables
 * @version     1.10.15
 * @file        jquery.dataTables.js
 * @author      SpryMedia Ltd
 * @contact     www.datatables.net
 * @copyright   Copyright 2008-2017 SpryMedia Ltd.
 *
 * This source file is free software, available under the following license:
 *   MIT license - http://datatables.net/license
 *
 * This source file is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.
 *
 * For details please refer to: http://www.datatables.net
 */

/*jslint evil: true, undef: true, browser: true */
/*globals $,require,jQuery,define,_selector_run,_selector_opts,_selector_first,_selector_row_indexes,_ext,_Api,_api_register,_api_registerPlural,_re_new_lines,_re_html,_re_formatted_numeric,_re_escape_regex,_empty,_intVal,_numToDecimal,_isNumber,_isHtml,_htmlNumeric,_pluck,_pluck_order,_range,_stripHtml,_unique,_fnBuildAjax,_fnAjaxUpdate,_fnAjaxParameters,_fnAjaxUpdateDraw,_fnAjaxDataSrc,_fnAddColumn,_fnColumnOptions,_fnAdjustColumnSizing,_fnVisibleToColumnIndex,_fnColumnIndexToVisible,_fnVisbleColumns,_fnGetColumns,_fnColumnTypes,_fnApplyColumnDefs,_fnHungarianMap,_fnCamelToHungarian,_fnLanguageCompat,_fnBrowserDetect,_fnAddData,_fnAddTr,_fnNodeToDataIndex,_fnNodeToColumnIndex,_fnGetCellData,_fnSetCellData,_fnSplitObjNotation,_fnGetObjectDataFn,_fnSetObjectDataFn,_fnGetDataMaster,_fnClearTable,_fnDeleteIndex,_fnInvalidate,_fnGetRowElements,_fnCreateTr,_fnBuildHead,_fnDrawHead,_fnDraw,_fnReDraw,_fnAddOptionsHtml,_fnDetectHeader,_fnGetUniqueThs,_fnFeatureHtmlFilter,_fnFilterComplete,_fnFilterCustom,_fnFilterColumn,_fnFilter,_fnFilterCreateSearch,_fnEscapeRegex,_fnFilterData,_fnFeatureHtmlInfo,_fnUpdateInfo,_fnInfoMacros,_fnInitialise,_fnInitComplete,_fnLengthChange,_fnFeatureHtmlLength,_fnFeatureHtmlPaginate,_fnPageChange,_fnFeatureHtmlProcessing,_fnProcessingDisplay,_fnFeatureHtmlTable,_fnScrollDraw,_fnApplyToChildren,_fnCalculateColumnWidths,_fnThrottle,_fnConvertToWidth,_fnGetWidestNode,_fnGetMaxLenString,_fnStringToCss,_fnSortFlatten,_fnSort,_fnSortAria,_fnSortListener,_fnSortAttachListener,_fnSortingClasses,_fnSortData,_fnSaveState,_fnLoadState,_fnSettingsFromNode,_fnLog,_fnMap,_fnBindAction,_fnCallbackReg,_fnCallbackFire,_fnLengthOverflow,_fnRenderer,_fnDataSource,_fnRowAttributes*/

(function( factory ) {
	"use strict";

	if ( true ) {
		// AMD
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = function ( $ ) {
			return factory( $, window, document );
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}
	else if ( typeof exports === 'object' ) {
		// CommonJS
		module.exports = function (root, $) {
			if ( ! root ) {
				// CommonJS environments without a window global must pass a
				// root. This will give an error otherwise
				root = window;
			}

			if ( ! $ ) {
				$ = typeof window !== 'undefined' ? // jQuery's factory checks for a global window
					require('jquery') :
					require('jquery')( root );
			}

			return factory( $, root, root.document );
		};
	}
	else {
		// Browser
		factory( jQuery, window, document );
	}
}
(function( $, window, document, undefined ) {
	"use strict";

	/**
	 * DataTables is a plug-in for the jQuery Javascript library. It is a highly
	 * flexible tool, based upon the foundations of progressive enhancement,
	 * which will add advanced interaction controls to any HTML table. For a
	 * full list of features please refer to
	 * [DataTables.net](href="http://datatables.net).
	 *
	 * Note that the `DataTable` object is not a global variable but is aliased
	 * to `jQuery.fn.DataTable` and `jQuery.fn.dataTable` through which it may
	 * be  accessed.
	 *
	 *  @class
	 *  @param {object} [init={}] Configuration object for DataTables. Options
	 *    are defined by {@link DataTable.defaults}
	 *  @requires jQuery 1.7+
	 *
	 *  @example
	 *    // Basic initialisation
	 *    $(document).ready( function {
	 *      $('#example').dataTable();
	 *    } );
	 *
	 *  @example
	 *    // Initialisation with configuration options - in this case, disable
	 *    // pagination and sorting.
	 *    $(document).ready( function {
	 *      $('#example').dataTable( {
	 *        "paginate": false,
	 *        "sort": false
	 *      } );
	 *    } );
	 */
	var DataTable = function ( options )
	{
		/**
		 * Perform a jQuery selector action on the table's TR elements (from the tbody) and
		 * return the resulting jQuery object.
		 *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on
		 *  @param {object} [oOpts] Optional parameters for modifying the rows to be included
		 *  @param {string} [oOpts.filter=none] Select TR elements that meet the current filter
		 *    criterion ("applied") or all TR elements (i.e. no filter).
		 *  @param {string} [oOpts.order=current] Order of the TR elements in the processed array.
		 *    Can be either 'current', whereby the current sorting of the table is used, or
		 *    'original' whereby the original order the data was read into the table is used.
		 *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page
		 *    ("current") or not ("all"). If 'current' is given, then order is assumed to be
		 *    'current' and filter is 'applied', regardless of what they might be given as.
		 *  @returns {object} jQuery object, filtered by the given selector.
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Highlight every second row
		 *      oTable.$('tr:odd').css('backgroundColor', 'blue');
		 *    } );
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Filter to rows with 'Webkit' in them, add a background colour and then
		 *      // remove the filter, thus highlighting the 'Webkit' rows only.
		 *      oTable.fnFilter('Webkit');
		 *      oTable.$('tr', {"search": "applied"}).css('backgroundColor', 'blue');
		 *      oTable.fnFilter('');
		 *    } );
		 */
		this.$ = function ( sSelector, oOpts )
		{
			return this.api(true).$( sSelector, oOpts );
		};
		
		
		/**
		 * Almost identical to $ in operation, but in this case returns the data for the matched
		 * rows - as such, the jQuery selector used should match TR row nodes or TD/TH cell nodes
		 * rather than any descendants, so the data can be obtained for the row/cell. If matching
		 * rows are found, the data returned is the original data array/object that was used to
		 * create the row (or a generated array if from a DOM source).
		 *
		 * This method is often useful in-combination with $ where both functions are given the
		 * same parameters and the array indexes will match identically.
		 *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on
		 *  @param {object} [oOpts] Optional parameters for modifying the rows to be included
		 *  @param {string} [oOpts.filter=none] Select elements that meet the current filter
		 *    criterion ("applied") or all elements (i.e. no filter).
		 *  @param {string} [oOpts.order=current] Order of the data in the processed array.
		 *    Can be either 'current', whereby the current sorting of the table is used, or
		 *    'original' whereby the original order the data was read into the table is used.
		 *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page
		 *    ("current") or not ("all"). If 'current' is given, then order is assumed to be
		 *    'current' and filter is 'applied', regardless of what they might be given as.
		 *  @returns {array} Data for the matched elements. If any elements, as a result of the
		 *    selector, were not TR, TD or TH elements in the DataTable, they will have a null
		 *    entry in the array.
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Get the data from the first row in the table
		 *      var data = oTable._('tr:first');
		 *
		 *      // Do something useful with the data
		 *      alert( "First cell is: "+data[0] );
		 *    } );
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Filter to 'Webkit' and get all data for
		 *      oTable.fnFilter('Webkit');
		 *      var data = oTable._('tr', {"search": "applied"});
		 *
		 *      // Do something with the data
		 *      alert( data.length+" rows matched the search" );
		 *    } );
		 */
		this._ = function ( sSelector, oOpts )
		{
			return this.api(true).rows( sSelector, oOpts ).data();
		};
		
		
		/**
		 * Create a DataTables Api instance, with the currently selected tables for
		 * the Api's context.
		 * @param {boolean} [traditional=false] Set the API instance's context to be
		 *   only the table referred to by the `DataTable.ext.iApiIndex` option, as was
		 *   used in the API presented by DataTables 1.9- (i.e. the traditional mode),
		 *   or if all tables captured in the jQuery object should be used.
		 * @return {DataTables.Api}
		 */
		this.api = function ( traditional )
		{
			return traditional ?
				new _Api(
					_fnSettingsFromNode( this[ _ext.iApiIndex ] )
				) :
				new _Api( this );
		};
		
		
		/**
		 * Add a single new row or multiple rows of data to the table. Please note
		 * that this is suitable for client-side processing only - if you are using
		 * server-side processing (i.e. "bServerSide": true), then to add data, you
		 * must add it to the data source, i.e. the server-side, through an Ajax call.
		 *  @param {array|object} data The data to be added to the table. This can be:
		 *    <ul>
		 *      <li>1D array of data - add a single row with the data provided</li>
		 *      <li>2D array of arrays - add multiple rows in a single call</li>
		 *      <li>object - data object when using <i>mData</i></li>
		 *      <li>array of objects - multiple data objects when using <i>mData</i></li>
		 *    </ul>
		 *  @param {bool} [redraw=true] redraw the table or not
		 *  @returns {array} An array of integers, representing the list of indexes in
		 *    <i>aoData</i> ({@link DataTable.models.oSettings}) that have been added to
		 *    the table.
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    // Global var for counter
		 *    var giCount = 2;
		 *
		 *    $(document).ready(function() {
		 *      $('#example').dataTable();
		 *    } );
		 *
		 *    function fnClickAddRow() {
		 *      $('#example').dataTable().fnAddData( [
		 *        giCount+".1",
		 *        giCount+".2",
		 *        giCount+".3",
		 *        giCount+".4" ]
		 *      );
		 *
		 *      giCount++;
		 *    }
		 */
		this.fnAddData = function( data, redraw )
		{
			var api = this.api( true );
		
			/* Check if we want to add multiple rows or not */
			var rows = $.isArray(data) && ( $.isArray(data[0]) || $.isPlainObject(data[0]) ) ?
				api.rows.add( data ) :
				api.row.add( data );
		
			if ( redraw === undefined || redraw ) {
				api.draw();
			}
		
			return rows.flatten().toArray();
		};
		
		
		/**
		 * This function will make DataTables recalculate the column sizes, based on the data
		 * contained in the table and the sizes applied to the columns (in the DOM, CSS or
		 * through the sWidth parameter). This can be useful when the width of the table's
		 * parent element changes (for example a window resize).
		 *  @param {boolean} [bRedraw=true] Redraw the table or not, you will typically want to
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable( {
		 *        "sScrollY": "200px",
		 *        "bPaginate": false
		 *      } );
		 *
		 *      $(window).on('resize', function () {
		 *        oTable.fnAdjustColumnSizing();
		 *      } );
		 *    } );
		 */
		this.fnAdjustColumnSizing = function ( bRedraw )
		{
			var api = this.api( true ).columns.adjust();
			var settings = api.settings()[0];
			var scroll = settings.oScroll;
		
			if ( bRedraw === undefined || bRedraw ) {
				api.draw( false );
			}
			else if ( scroll.sX !== "" || scroll.sY !== "" ) {
				/* If not redrawing, but scrolling, we want to apply the new column sizes anyway */
				_fnScrollDraw( settings );
			}
		};
		
		
		/**
		 * Quickly and simply clear a table
		 *  @param {bool} [bRedraw=true] redraw the table or not
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Immediately 'nuke' the current rows (perhaps waiting for an Ajax callback...)
		 *      oTable.fnClearTable();
		 *    } );
		 */
		this.fnClearTable = function( bRedraw )
		{
			var api = this.api( true ).clear();
		
			if ( bRedraw === undefined || bRedraw ) {
				api.draw();
			}
		};
		
		
		/**
		 * The exact opposite of 'opening' a row, this function will close any rows which
		 * are currently 'open'.
		 *  @param {node} nTr the table row to 'close'
		 *  @returns {int} 0 on success, or 1 if failed (can't find the row)
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable;
		 *
		 *      // 'open' an information row when a row is clicked on
		 *      $('#example tbody tr').click( function () {
		 *        if ( oTable.fnIsOpen(this) ) {
		 *          oTable.fnClose( this );
		 *        } else {
		 *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
		 *        }
		 *      } );
		 *
		 *      oTable = $('#example').dataTable();
		 *    } );
		 */
		this.fnClose = function( nTr )
		{
			this.api( true ).row( nTr ).child.hide();
		};
		
		
		/**
		 * Remove a row for the table
		 *  @param {mixed} target The index of the row from aoData to be deleted, or
		 *    the TR element you want to delete
		 *  @param {function|null} [callBack] Callback function
		 *  @param {bool} [redraw=true] Redraw the table or not
		 *  @returns {array} The row that was deleted
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Immediately remove the first row
		 *      oTable.fnDeleteRow( 0 );
		 *    } );
		 */
		this.fnDeleteRow = function( target, callback, redraw )
		{
			var api = this.api( true );
			var rows = api.rows( target );
			var settings = rows.settings()[0];
			var data = settings.aoData[ rows[0][0] ];
		
			rows.remove();
		
			if ( callback ) {
				callback.call( this, settings, data );
			}
		
			if ( redraw === undefined || redraw ) {
				api.draw();
			}
		
			return data;
		};
		
		
		/**
		 * Restore the table to it's original state in the DOM by removing all of DataTables
		 * enhancements, alterations to the DOM structure of the table and event listeners.
		 *  @param {boolean} [remove=false] Completely remove the table from the DOM
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      // This example is fairly pointless in reality, but shows how fnDestroy can be used
		 *      var oTable = $('#example').dataTable();
		 *      oTable.fnDestroy();
		 *    } );
		 */
		this.fnDestroy = function ( remove )
		{
			this.api( true ).destroy( remove );
		};
		
		
		/**
		 * Redraw the table
		 *  @param {bool} [complete=true] Re-filter and resort (if enabled) the table before the draw.
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Re-draw the table - you wouldn't want to do it here, but it's an example :-)
		 *      oTable.fnDraw();
		 *    } );
		 */
		this.fnDraw = function( complete )
		{
			// Note that this isn't an exact match to the old call to _fnDraw - it takes
			// into account the new data, but can hold position.
			this.api( true ).draw( complete );
		};
		
		
		/**
		 * Filter the input based on data
		 *  @param {string} sInput String to filter the table on
		 *  @param {int|null} [iColumn] Column to limit filtering to
		 *  @param {bool} [bRegex=false] Treat as regular expression or not
		 *  @param {bool} [bSmart=true] Perform smart filtering or not
		 *  @param {bool} [bShowGlobal=true] Show the input global filter in it's input box(es)
		 *  @param {bool} [bCaseInsensitive=true] Do case-insensitive matching (true) or not (false)
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Sometime later - filter...
		 *      oTable.fnFilter( 'test string' );
		 *    } );
		 */
		this.fnFilter = function( sInput, iColumn, bRegex, bSmart, bShowGlobal, bCaseInsensitive )
		{
			var api = this.api( true );
		
			if ( iColumn === null || iColumn === undefined ) {
				api.search( sInput, bRegex, bSmart, bCaseInsensitive );
			}
			else {
				api.column( iColumn ).search( sInput, bRegex, bSmart, bCaseInsensitive );
			}
		
			api.draw();
		};
		
		
		/**
		 * Get the data for the whole table, an individual row or an individual cell based on the
		 * provided parameters.
		 *  @param {int|node} [src] A TR row node, TD/TH cell node or an integer. If given as
		 *    a TR node then the data source for the whole row will be returned. If given as a
		 *    TD/TH cell node then iCol will be automatically calculated and the data for the
		 *    cell returned. If given as an integer, then this is treated as the aoData internal
		 *    data index for the row (see fnGetPosition) and the data for that row used.
		 *  @param {int} [col] Optional column index that you want the data of.
		 *  @returns {array|object|string} If mRow is undefined, then the data for all rows is
		 *    returned. If mRow is defined, just data for that row, and is iCol is
		 *    defined, only data for the designated cell is returned.
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    // Row data
		 *    $(document).ready(function() {
		 *      oTable = $('#example').dataTable();
		 *
		 *      oTable.$('tr').click( function () {
		 *        var data = oTable.fnGetData( this );
		 *        // ... do something with the array / object of data for the row
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Individual cell data
		 *    $(document).ready(function() {
		 *      oTable = $('#example').dataTable();
		 *
		 *      oTable.$('td').click( function () {
		 *        var sData = oTable.fnGetData( this );
		 *        alert( 'The cell clicked on had the value of '+sData );
		 *      } );
		 *    } );
		 */
		this.fnGetData = function( src, col )
		{
			var api = this.api( true );
		
			if ( src !== undefined ) {
				var type = src.nodeName ? src.nodeName.toLowerCase() : '';
		
				return col !== undefined || type == 'td' || type == 'th' ?
					api.cell( src, col ).data() :
					api.row( src ).data() || null;
			}
		
			return api.data().toArray();
		};
		
		
		/**
		 * Get an array of the TR nodes that are used in the table's body. Note that you will
		 * typically want to use the '$' API method in preference to this as it is more
		 * flexible.
		 *  @param {int} [iRow] Optional row index for the TR element you want
		 *  @returns {array|node} If iRow is undefined, returns an array of all TR elements
		 *    in the table's body, or iRow is defined, just the TR element requested.
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Get the nodes from the table
		 *      var nNodes = oTable.fnGetNodes( );
		 *    } );
		 */
		this.fnGetNodes = function( iRow )
		{
			var api = this.api( true );
		
			return iRow !== undefined ?
				api.row( iRow ).node() :
				api.rows().nodes().flatten().toArray();
		};
		
		
		/**
		 * Get the array indexes of a particular cell from it's DOM element
		 * and column index including hidden columns
		 *  @param {node} node this can either be a TR, TD or TH in the table's body
		 *  @returns {int} If nNode is given as a TR, then a single index is returned, or
		 *    if given as a cell, an array of [row index, column index (visible),
		 *    column index (all)] is given.
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      $('#example tbody td').click( function () {
		 *        // Get the position of the current data from the node
		 *        var aPos = oTable.fnGetPosition( this );
		 *
		 *        // Get the data array for this row
		 *        var aData = oTable.fnGetData( aPos[0] );
		 *
		 *        // Update the data array and return the value
		 *        aData[ aPos[1] ] = 'clicked';
		 *        this.innerHTML = 'clicked';
		 *      } );
		 *
		 *      // Init DataTables
		 *      oTable = $('#example').dataTable();
		 *    } );
		 */
		this.fnGetPosition = function( node )
		{
			var api = this.api( true );
			var nodeName = node.nodeName.toUpperCase();
		
			if ( nodeName == 'TR' ) {
				return api.row( node ).index();
			}
			else if ( nodeName == 'TD' || nodeName == 'TH' ) {
				var cell = api.cell( node ).index();
		
				return [
					cell.row,
					cell.columnVisible,
					cell.column
				];
			}
			return null;
		};
		
		
		/**
		 * Check to see if a row is 'open' or not.
		 *  @param {node} nTr the table row to check
		 *  @returns {boolean} true if the row is currently open, false otherwise
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable;
		 *
		 *      // 'open' an information row when a row is clicked on
		 *      $('#example tbody tr').click( function () {
		 *        if ( oTable.fnIsOpen(this) ) {
		 *          oTable.fnClose( this );
		 *        } else {
		 *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
		 *        }
		 *      } );
		 *
		 *      oTable = $('#example').dataTable();
		 *    } );
		 */
		this.fnIsOpen = function( nTr )
		{
			return this.api( true ).row( nTr ).child.isShown();
		};
		
		
		/**
		 * This function will place a new row directly after a row which is currently
		 * on display on the page, with the HTML contents that is passed into the
		 * function. This can be used, for example, to ask for confirmation that a
		 * particular record should be deleted.
		 *  @param {node} nTr The table row to 'open'
		 *  @param {string|node|jQuery} mHtml The HTML to put into the row
		 *  @param {string} sClass Class to give the new TD cell
		 *  @returns {node} The row opened. Note that if the table row passed in as the
		 *    first parameter, is not found in the table, this method will silently
		 *    return.
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable;
		 *
		 *      // 'open' an information row when a row is clicked on
		 *      $('#example tbody tr').click( function () {
		 *        if ( oTable.fnIsOpen(this) ) {
		 *          oTable.fnClose( this );
		 *        } else {
		 *          oTable.fnOpen( this, "Temporary row opened", "info_row" );
		 *        }
		 *      } );
		 *
		 *      oTable = $('#example').dataTable();
		 *    } );
		 */
		this.fnOpen = function( nTr, mHtml, sClass )
		{
			return this.api( true )
				.row( nTr )
				.child( mHtml, sClass )
				.show()
				.child()[0];
		};
		
		
		/**
		 * Change the pagination - provides the internal logic for pagination in a simple API
		 * function. With this function you can have a DataTables table go to the next,
		 * previous, first or last pages.
		 *  @param {string|int} mAction Paging action to take: "first", "previous", "next" or "last"
		 *    or page number to jump to (integer), note that page 0 is the first page.
		 *  @param {bool} [bRedraw=true] Redraw the table or not
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *      oTable.fnPageChange( 'next' );
		 *    } );
		 */
		this.fnPageChange = function ( mAction, bRedraw )
		{
			var api = this.api( true ).page( mAction );
		
			if ( bRedraw === undefined || bRedraw ) {
				api.draw(false);
			}
		};
		
		
		/**
		 * Show a particular column
		 *  @param {int} iCol The column whose display should be changed
		 *  @param {bool} bShow Show (true) or hide (false) the column
		 *  @param {bool} [bRedraw=true] Redraw the table or not
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Hide the second column after initialisation
		 *      oTable.fnSetColumnVis( 1, false );
		 *    } );
		 */
		this.fnSetColumnVis = function ( iCol, bShow, bRedraw )
		{
			var api = this.api( true ).column( iCol ).visible( bShow );
		
			if ( bRedraw === undefined || bRedraw ) {
				api.columns.adjust().draw();
			}
		};
		
		
		/**
		 * Get the settings for a particular table for external manipulation
		 *  @returns {object} DataTables settings object. See
		 *    {@link DataTable.models.oSettings}
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *      var oSettings = oTable.fnSettings();
		 *
		 *      // Show an example parameter from the settings
		 *      alert( oSettings._iDisplayStart );
		 *    } );
		 */
		this.fnSettings = function()
		{
			return _fnSettingsFromNode( this[_ext.iApiIndex] );
		};
		
		
		/**
		 * Sort the table by a particular column
		 *  @param {int} iCol the data index to sort on. Note that this will not match the
		 *    'display index' if you have hidden data entries
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Sort immediately with columns 0 and 1
		 *      oTable.fnSort( [ [0,'asc'], [1,'asc'] ] );
		 *    } );
		 */
		this.fnSort = function( aaSort )
		{
			this.api( true ).order( aaSort ).draw();
		};
		
		
		/**
		 * Attach a sort listener to an element for a given column
		 *  @param {node} nNode the element to attach the sort listener to
		 *  @param {int} iColumn the column that a click on this node will sort on
		 *  @param {function} [fnCallback] callback function when sort is run
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *
		 *      // Sort on column 1, when 'sorter' is clicked on
		 *      oTable.fnSortListener( document.getElementById('sorter'), 1 );
		 *    } );
		 */
		this.fnSortListener = function( nNode, iColumn, fnCallback )
		{
			this.api( true ).order.listener( nNode, iColumn, fnCallback );
		};
		
		
		/**
		 * Update a table cell or row - this method will accept either a single value to
		 * update the cell with, an array of values with one element for each column or
		 * an object in the same format as the original data source. The function is
		 * self-referencing in order to make the multi column updates easier.
		 *  @param {object|array|string} mData Data to update the cell/row with
		 *  @param {node|int} mRow TR element you want to update or the aoData index
		 *  @param {int} [iColumn] The column to update, give as null or undefined to
		 *    update a whole row.
		 *  @param {bool} [bRedraw=true] Redraw the table or not
		 *  @param {bool} [bAction=true] Perform pre-draw actions or not
		 *  @returns {int} 0 on success, 1 on error
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *      oTable.fnUpdate( 'Example update', 0, 0 ); // Single cell
		 *      oTable.fnUpdate( ['a', 'b', 'c', 'd', 'e'], $('tbody tr')[0] ); // Row
		 *    } );
		 */
		this.fnUpdate = function( mData, mRow, iColumn, bRedraw, bAction )
		{
			var api = this.api( true );
		
			if ( iColumn === undefined || iColumn === null ) {
				api.row( mRow ).data( mData );
			}
			else {
				api.cell( mRow, iColumn ).data( mData );
			}
		
			if ( bAction === undefined || bAction ) {
				api.columns.adjust();
			}
		
			if ( bRedraw === undefined || bRedraw ) {
				api.draw();
			}
			return 0;
		};
		
		
		/**
		 * Provide a common method for plug-ins to check the version of DataTables being used, in order
		 * to ensure compatibility.
		 *  @param {string} sVersion Version string to check for, in the format "X.Y.Z". Note that the
		 *    formats "X" and "X.Y" are also acceptable.
		 *  @returns {boolean} true if this version of DataTables is greater or equal to the required
		 *    version, or false if this version of DataTales is not suitable
		 *  @method
		 *  @dtopt API
		 *  @deprecated Since v1.10
		 *
		 *  @example
		 *    $(document).ready(function() {
		 *      var oTable = $('#example').dataTable();
		 *      alert( oTable.fnVersionCheck( '1.9.0' ) );
		 *    } );
		 */
		this.fnVersionCheck = _ext.fnVersionCheck;
		

		var _that = this;
		var emptyInit = options === undefined;
		var len = this.length;

		if ( emptyInit ) {
			options = {};
		}

		this.oApi = this.internal = _ext.internal;

		// Extend with old style plug-in API methods
		for ( var fn in DataTable.ext.internal ) {
			if ( fn ) {
				this[fn] = _fnExternApiFunc(fn);
			}
		}

		this.each(function() {
			// For each initialisation we want to give it a clean initialisation
			// object that can be bashed around
			var o = {};
			var oInit = len > 1 ? // optimisation for single table case
				_fnExtend( o, options, true ) :
				options;

			/*global oInit,_that,emptyInit*/
			var i=0, iLen, j, jLen, k, kLen;
			var sId = this.getAttribute( 'id' );
			var bInitHandedOff = false;
			var defaults = DataTable.defaults;
			var $this = $(this);
			
			
			/* Sanity check */
			if ( this.nodeName.toLowerCase() != 'table' )
			{
				_fnLog( null, 0, 'Non-table node initialisation ('+this.nodeName+')', 2 );
				return;
			}
			
			/* Backwards compatibility for the defaults */
			_fnCompatOpts( defaults );
			_fnCompatCols( defaults.column );
			
			/* Convert the camel-case defaults to Hungarian */
			_fnCamelToHungarian( defaults, defaults, true );
			_fnCamelToHungarian( defaults.column, defaults.column, true );
			
			/* Setting up the initialisation object */
			_fnCamelToHungarian( defaults, $.extend( oInit, $this.data() ) );
			
			
			
			/* Check to see if we are re-initialising a table */
			var allSettings = DataTable.settings;
			for ( i=0, iLen=allSettings.length ; i<iLen ; i++ )
			{
				var s = allSettings[i];
			
				/* Base check on table node */
				if ( s.nTable == this || s.nTHead.parentNode == this || (s.nTFoot && s.nTFoot.parentNode == this) )
				{
					var bRetrieve = oInit.bRetrieve !== undefined ? oInit.bRetrieve : defaults.bRetrieve;
					var bDestroy = oInit.bDestroy !== undefined ? oInit.bDestroy : defaults.bDestroy;
			
					if ( emptyInit || bRetrieve )
					{
						return s.oInstance;
					}
					else if ( bDestroy )
					{
						s.oInstance.fnDestroy();
						break;
					}
					else
					{
						_fnLog( s, 0, 'Cannot reinitialise DataTable', 3 );
						return;
					}
				}
			
				/* If the element we are initialising has the same ID as a table which was previously
				 * initialised, but the table nodes don't match (from before) then we destroy the old
				 * instance by simply deleting it. This is under the assumption that the table has been
				 * destroyed by other methods. Anyone using non-id selectors will need to do this manually
				 */
				if ( s.sTableId == this.id )
				{
					allSettings.splice( i, 1 );
					break;
				}
			}
			
			/* Ensure the table has an ID - required for accessibility */
			if ( sId === null || sId === "" )
			{
				sId = "DataTables_Table_"+(DataTable.ext._unique++);
				this.id = sId;
			}
			
			/* Create the settings object for this table and set some of the default parameters */
			var oSettings = $.extend( true, {}, DataTable.models.oSettings, {
				"sDestroyWidth": $this[0].style.width,
				"sInstance":     sId,
				"sTableId":      sId
			} );
			oSettings.nTable = this;
			oSettings.oApi   = _that.internal;
			oSettings.oInit  = oInit;
			
			allSettings.push( oSettings );
			
			// Need to add the instance after the instance after the settings object has been added
			// to the settings array, so we can self reference the table instance if more than one
			oSettings.oInstance = (_that.length===1) ? _that : $this.dataTable();
			
			// Backwards compatibility, before we apply all the defaults
			_fnCompatOpts( oInit );
			
			if ( oInit.oLanguage )
			{
				_fnLanguageCompat( oInit.oLanguage );
			}
			
			// If the length menu is given, but the init display length is not, use the length menu
			if ( oInit.aLengthMenu && ! oInit.iDisplayLength )
			{
				oInit.iDisplayLength = $.isArray( oInit.aLengthMenu[0] ) ?
					oInit.aLengthMenu[0][0] : oInit.aLengthMenu[0];
			}
			
			// Apply the defaults and init options to make a single init object will all
			// options defined from defaults and instance options.
			oInit = _fnExtend( $.extend( true, {}, defaults ), oInit );
			
			
			// Map the initialisation options onto the settings object
			_fnMap( oSettings.oFeatures, oInit, [
				"bPaginate",
				"bLengthChange",
				"bFilter",
				"bSort",
				"bSortMulti",
				"bInfo",
				"bProcessing",
				"bAutoWidth",
				"bSortClasses",
				"bServerSide",
				"bDeferRender"
			] );
			_fnMap( oSettings, oInit, [
				"asStripeClasses",
				"ajax",
				"fnServerData",
				"fnFormatNumber",
				"sServerMethod",
				"aaSorting",
				"aaSortingFixed",
				"aLengthMenu",
				"sPaginationType",
				"sAjaxSource",
				"sAjaxDataProp",
				"iStateDuration",
				"sDom",
				"bSortCellsTop",
				"iTabIndex",
				"fnStateLoadCallback",
				"fnStateSaveCallback",
				"renderer",
				"searchDelay",
				"rowId",
				[ "iCookieDuration", "iStateDuration" ], // backwards compat
				[ "oSearch", "oPreviousSearch" ],
				[ "aoSearchCols", "aoPreSearchCols" ],
				[ "iDisplayLength", "_iDisplayLength" ],
				[ "bJQueryUI", "bJUI" ]
			] );
			_fnMap( oSettings.oScroll, oInit, [
				[ "sScrollX", "sX" ],
				[ "sScrollXInner", "sXInner" ],
				[ "sScrollY", "sY" ],
				[ "bScrollCollapse", "bCollapse" ]
			] );
			_fnMap( oSettings.oLanguage, oInit, "fnInfoCallback" );
			
			/* Callback functions which are array driven */
			_fnCallbackReg( oSettings, 'aoDrawCallback',       oInit.fnDrawCallback,      'user' );
			_fnCallbackReg( oSettings, 'aoServerParams',       oInit.fnServerParams,      'user' );
			_fnCallbackReg( oSettings, 'aoStateSaveParams',    oInit.fnStateSaveParams,   'user' );
			_fnCallbackReg( oSettings, 'aoStateLoadParams',    oInit.fnStateLoadParams,   'user' );
			_fnCallbackReg( oSettings, 'aoStateLoaded',        oInit.fnStateLoaded,       'user' );
			_fnCallbackReg( oSettings, 'aoRowCallback',        oInit.fnRowCallback,       'user' );
			_fnCallbackReg( oSettings, 'aoRowCreatedCallback', oInit.fnCreatedRow,        'user' );
			_fnCallbackReg( oSettings, 'aoHeaderCallback',     oInit.fnHeaderCallback,    'user' );
			_fnCallbackReg( oSettings, 'aoFooterCallback',     oInit.fnFooterCallback,    'user' );
			_fnCallbackReg( oSettings, 'aoInitComplete',       oInit.fnInitComplete,      'user' );
			_fnCallbackReg( oSettings, 'aoPreDrawCallback',    oInit.fnPreDrawCallback,   'user' );
			
			oSettings.rowIdFn = _fnGetObjectDataFn( oInit.rowId );
			
			/* Browser support detection */
			_fnBrowserDetect( oSettings );
			
			var oClasses = oSettings.oClasses;
			
			// @todo Remove in 1.11
			if ( oInit.bJQueryUI )
			{
				/* Use the JUI classes object for display. You could clone the oStdClasses object if
				 * you want to have multiple tables with multiple independent classes
				 */
				$.extend( oClasses, DataTable.ext.oJUIClasses, oInit.oClasses );
			
				if ( oInit.sDom === defaults.sDom && defaults.sDom === "lfrtip" )
				{
					/* Set the DOM to use a layout suitable for jQuery UI's theming */
					oSettings.sDom = '<"H"lfr>t<"F"ip>';
				}
			
				if ( ! oSettings.renderer ) {
					oSettings.renderer = 'jqueryui';
				}
				else if ( $.isPlainObject( oSettings.renderer ) && ! oSettings.renderer.header ) {
					oSettings.renderer.header = 'jqueryui';
				}
			}
			else
			{
				$.extend( oClasses, DataTable.ext.classes, oInit.oClasses );
			}
			$this.addClass( oClasses.sTable );
			
			
			if ( oSettings.iInitDisplayStart === undefined )
			{
				/* Display start point, taking into account the save saving */
				oSettings.iInitDisplayStart = oInit.iDisplayStart;
				oSettings._iDisplayStart = oInit.iDisplayStart;
			}
			
			if ( oInit.iDeferLoading !== null )
			{
				oSettings.bDeferLoading = true;
				var tmp = $.isArray( oInit.iDeferLoading );
				oSettings._iRecordsDisplay = tmp ? oInit.iDeferLoading[0] : oInit.iDeferLoading;
				oSettings._iRecordsTotal = tmp ? oInit.iDeferLoading[1] : oInit.iDeferLoading;
			}
			
			/* Language definitions */
			var oLanguage = oSettings.oLanguage;
			$.extend( true, oLanguage, oInit.oLanguage );
			
			if ( oLanguage.sUrl )
			{
				/* Get the language definitions from a file - because this Ajax call makes the language
				 * get async to the remainder of this function we use bInitHandedOff to indicate that
				 * _fnInitialise will be fired by the returned Ajax handler, rather than the constructor
				 */
				$.ajax( {
					dataType: 'json',
					url: oLanguage.sUrl,
					success: function ( json ) {
						_fnLanguageCompat( json );
						_fnCamelToHungarian( defaults.oLanguage, json );
						$.extend( true, oLanguage, json );
						_fnInitialise( oSettings );
					},
					error: function () {
						// Error occurred loading language file, continue on as best we can
						_fnInitialise( oSettings );
					}
				} );
				bInitHandedOff = true;
			}
			
			/*
			 * Stripes
			 */
			if ( oInit.asStripeClasses === null )
			{
				oSettings.asStripeClasses =[
					oClasses.sStripeOdd,
					oClasses.sStripeEven
				];
			}
			
			/* Remove row stripe classes if they are already on the table row */
			var stripeClasses = oSettings.asStripeClasses;
			var rowOne = $this.children('tbody').find('tr').eq(0);
			if ( $.inArray( true, $.map( stripeClasses, function(el, i) {
				return rowOne.hasClass(el);
			} ) ) !== -1 ) {
				$('tbody tr', this).removeClass( stripeClasses.join(' ') );
				oSettings.asDestroyStripes = stripeClasses.slice();
			}
			
			/*
			 * Columns
			 * See if we should load columns automatically or use defined ones
			 */
			var anThs = [];
			var aoColumnsInit;
			var nThead = this.getElementsByTagName('thead');
			if ( nThead.length !== 0 )
			{
				_fnDetectHeader( oSettings.aoHeader, nThead[0] );
				anThs = _fnGetUniqueThs( oSettings );
			}
			
			/* If not given a column array, generate one with nulls */
			if ( oInit.aoColumns === null )
			{
				aoColumnsInit = [];
				for ( i=0, iLen=anThs.length ; i<iLen ; i++ )
				{
					aoColumnsInit.push( null );
				}
			}
			else
			{
				aoColumnsInit = oInit.aoColumns;
			}
			
			/* Add the columns */
			for ( i=0, iLen=aoColumnsInit.length ; i<iLen ; i++ )
			{
				_fnAddColumn( oSettings, anThs ? anThs[i] : null );
			}
			
			/* Apply the column definitions */
			_fnApplyColumnDefs( oSettings, oInit.aoColumnDefs, aoColumnsInit, function (iCol, oDef) {
				_fnColumnOptions( oSettings, iCol, oDef );
			} );
			
			/* HTML5 attribute detection - build an mData object automatically if the
			 * attributes are found
			 */
			if ( rowOne.length ) {
				var a = function ( cell, name ) {
					return cell.getAttribute( 'data-'+name ) !== null ? name : null;
				};
			
				$( rowOne[0] ).children('th, td').each( function (i, cell) {
					var col = oSettings.aoColumns[i];
			
					if ( col.mData === i ) {
						var sort = a( cell, 'sort' ) || a( cell, 'order' );
						var filter = a( cell, 'filter' ) || a( cell, 'search' );
			
						if ( sort !== null || filter !== null ) {
							col.mData = {
								_:      i+'.display',
								sort:   sort !== null   ? i+'.@data-'+sort   : undefined,
								type:   sort !== null   ? i+'.@data-'+sort   : undefined,
								filter: filter !== null ? i+'.@data-'+filter : undefined
							};
			
							_fnColumnOptions( oSettings, i );
						}
					}
				} );
			}
			
			var features = oSettings.oFeatures;
			var loadedInit = function () {
				/*
				 * Sorting
				 * @todo For modularisation (1.11) this needs to do into a sort start up handler
				 */
			
				// If aaSorting is not defined, then we use the first indicator in asSorting
				// in case that has been altered, so the default sort reflects that option
				if ( oInit.aaSorting === undefined ) {
					var sorting = oSettings.aaSorting;
					for ( i=0, iLen=sorting.length ; i<iLen ; i++ ) {
						sorting[i][1] = oSettings.aoColumns[ i ].asSorting[0];
					}
				}
			
				/* Do a first pass on the sorting classes (allows any size changes to be taken into
				 * account, and also will apply sorting disabled classes if disabled
				 */
				_fnSortingClasses( oSettings );
			
				if ( features.bSort ) {
					_fnCallbackReg( oSettings, 'aoDrawCallback', function () {
						if ( oSettings.bSorted ) {
							var aSort = _fnSortFlatten( oSettings );
							var sortedColumns = {};
			
							$.each( aSort, function (i, val) {
								sortedColumns[ val.src ] = val.dir;
							} );
			
							_fnCallbackFire( oSettings, null, 'order', [oSettings, aSort, sortedColumns] );
							_fnSortAria( oSettings );
						}
					} );
				}
			
				_fnCallbackReg( oSettings, 'aoDrawCallback', function () {
					if ( oSettings.bSorted || _fnDataSource( oSettings ) === 'ssp' || features.bDeferRender ) {
						_fnSortingClasses( oSettings );
					}
				}, 'sc' );
			
			
				/*
				 * Final init
				 * Cache the header, body and footer as required, creating them if needed
				 */
			
				// Work around for Webkit bug 83867 - store the caption-side before removing from doc
				var captions = $this.children('caption').each( function () {
					this._captionSide = $(this).css('caption-side');
				} );
			
				var thead = $this.children('thead');
				if ( thead.length === 0 ) {
					thead = $('<thead/>').appendTo($this);
				}
				oSettings.nTHead = thead[0];
			
				var tbody = $this.children('tbody');
				if ( tbody.length === 0 ) {
					tbody = $('<tbody/>').appendTo($this);
				}
				oSettings.nTBody = tbody[0];
			
				var tfoot = $this.children('tfoot');
				if ( tfoot.length === 0 && captions.length > 0 && (oSettings.oScroll.sX !== "" || oSettings.oScroll.sY !== "") ) {
					// If we are a scrolling table, and no footer has been given, then we need to create
					// a tfoot element for the caption element to be appended to
					tfoot = $('<tfoot/>').appendTo($this);
				}
			
				if ( tfoot.length === 0 || tfoot.children().length === 0 ) {
					$this.addClass( oClasses.sNoFooter );
				}
				else if ( tfoot.length > 0 ) {
					oSettings.nTFoot = tfoot[0];
					_fnDetectHeader( oSettings.aoFooter, oSettings.nTFoot );
				}
			
				/* Check if there is data passing into the constructor */
				if ( oInit.aaData ) {
					for ( i=0 ; i<oInit.aaData.length ; i++ ) {
						_fnAddData( oSettings, oInit.aaData[ i ] );
					}
				}
				else if ( oSettings.bDeferLoading || _fnDataSource( oSettings ) == 'dom' ) {
					/* Grab the data from the page - only do this when deferred loading or no Ajax
					 * source since there is no point in reading the DOM data if we are then going
					 * to replace it with Ajax data
					 */
					_fnAddTr( oSettings, $(oSettings.nTBody).children('tr') );
				}
			
				/* Copy the data index array */
				oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();
			
				/* Initialisation complete - table can be drawn */
				oSettings.bInitialised = true;
			
				/* Check if we need to initialise the table (it might not have been handed off to the
				 * language processor)
				 */
				if ( bInitHandedOff === false ) {
					_fnInitialise( oSettings );
				}
			};
			
			/* Must be done after everything which can be overridden by the state saving! */
			if ( oInit.bStateSave )
			{
				features.bStateSave = true;
				_fnCallbackReg( oSettings, 'aoDrawCallback', _fnSaveState, 'state_save' );
				_fnLoadState( oSettings, oInit, loadedInit );
			}
			else {
				loadedInit();
			}
			
		} );
		_that = null;
		return this;
	};

	
	/*
	 * It is useful to have variables which are scoped locally so only the
	 * DataTables functions can access them and they don't leak into global space.
	 * At the same time these functions are often useful over multiple files in the
	 * core and API, so we list, or at least document, all variables which are used
	 * by DataTables as private variables here. This also ensures that there is no
	 * clashing of variable names and that they can easily referenced for reuse.
	 */
	
	
	// Defined else where
	//  _selector_run
	//  _selector_opts
	//  _selector_first
	//  _selector_row_indexes
	
	var _ext; // DataTable.ext
	var _Api; // DataTable.Api
	var _api_register; // DataTable.Api.register
	var _api_registerPlural; // DataTable.Api.registerPlural
	
	var _re_dic = {};
	var _re_new_lines = /[\r\n]/g;
	var _re_html = /<.*?>/g;
	
	// This is not strict ISO8601 - Date.parse() is quite lax, although
	// implementations differ between browsers.
	var _re_date = /^\d{2,4}[\.\/\-]\d{1,2}[\.\/\-]\d{1,2}([T ]{1}\d{1,2}[:\.]\d{2}([\.:]\d{2})?)?$/;
	
	// Escape regular expression special characters
	var _re_escape_regex = new RegExp( '(\\' + [ '/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\', '$', '^', '-' ].join('|\\') + ')', 'g' );
	
	// http://en.wikipedia.org/wiki/Foreign_exchange_market
	// - \u20BD - Russian ruble.
	// - \u20a9 - South Korean Won
	// - \u20BA - Turkish Lira
	// - \u20B9 - Indian Rupee
	// - R - Brazil (R$) and South Africa
	// - fr - Swiss Franc
	// - kr - Swedish krona, Norwegian krone and Danish krone
	// - \u2009 is thin space and \u202F is narrow no-break space, both used in many
	//   standards as thousands separators.
	var _re_formatted_numeric = /[',$£€¥%\u2009\u202F\u20BD\u20a9\u20BArfk]/gi;
	
	
	var _empty = function ( d ) {
		return !d || d === true || d === '-' ? true : false;
	};
	
	
	var _intVal = function ( s ) {
		var integer = parseInt( s, 10 );
		return !isNaN(integer) && isFinite(s) ? integer : null;
	};
	
	// Convert from a formatted number with characters other than `.` as the
	// decimal place, to a Javascript number
	var _numToDecimal = function ( num, decimalPoint ) {
		// Cache created regular expressions for speed as this function is called often
		if ( ! _re_dic[ decimalPoint ] ) {
			_re_dic[ decimalPoint ] = new RegExp( _fnEscapeRegex( decimalPoint ), 'g' );
		}
		return typeof num === 'string' && decimalPoint !== '.' ?
			num.replace( /\./g, '' ).replace( _re_dic[ decimalPoint ], '.' ) :
			num;
	};
	
	
	var _isNumber = function ( d, decimalPoint, formatted ) {
		var strType = typeof d === 'string';
	
		// If empty return immediately so there must be a number if it is a
		// formatted string (this stops the string "k", or "kr", etc being detected
		// as a formatted number for currency
		if ( _empty( d ) ) {
			return true;
		}
	
		if ( decimalPoint && strType ) {
			d = _numToDecimal( d, decimalPoint );
		}
	
		if ( formatted && strType ) {
			d = d.replace( _re_formatted_numeric, '' );
		}
	
		return !isNaN( parseFloat(d) ) && isFinite( d );
	};
	
	
	// A string without HTML in it can be considered to be HTML still
	var _isHtml = function ( d ) {
		return _empty( d ) || typeof d === 'string';
	};
	
	
	var _htmlNumeric = function ( d, decimalPoint, formatted ) {
		if ( _empty( d ) ) {
			return true;
		}
	
		var html = _isHtml( d );
		return ! html ?
			null :
			_isNumber( _stripHtml( d ), decimalPoint, formatted ) ?
				true :
				null;
	};
	
	
	var _pluck = function ( a, prop, prop2 ) {
		var out = [];
		var i=0, ien=a.length;
	
		// Could have the test in the loop for slightly smaller code, but speed
		// is essential here
		if ( prop2 !== undefined ) {
			for ( ; i<ien ; i++ ) {
				if ( a[i] && a[i][ prop ] ) {
					out.push( a[i][ prop ][ prop2 ] );
				}
			}
		}
		else {
			for ( ; i<ien ; i++ ) {
				if ( a[i] ) {
					out.push( a[i][ prop ] );
				}
			}
		}
	
		return out;
	};
	
	
	// Basically the same as _pluck, but rather than looping over `a` we use `order`
	// as the indexes to pick from `a`
	var _pluck_order = function ( a, order, prop, prop2 )
	{
		var out = [];
		var i=0, ien=order.length;
	
		// Could have the test in the loop for slightly smaller code, but speed
		// is essential here
		if ( prop2 !== undefined ) {
			for ( ; i<ien ; i++ ) {
				if ( a[ order[i] ][ prop ] ) {
					out.push( a[ order[i] ][ prop ][ prop2 ] );
				}
			}
		}
		else {
			for ( ; i<ien ; i++ ) {
				out.push( a[ order[i] ][ prop ] );
			}
		}
	
		return out;
	};
	
	
	var _range = function ( len, start )
	{
		var out = [];
		var end;
	
		if ( start === undefined ) {
			start = 0;
			end = len;
		}
		else {
			end = start;
			start = len;
		}
	
		for ( var i=start ; i<end ; i++ ) {
			out.push( i );
		}
	
		return out;
	};
	
	
	var _removeEmpty = function ( a )
	{
		var out = [];
	
		for ( var i=0, ien=a.length ; i<ien ; i++ ) {
			if ( a[i] ) { // careful - will remove all falsy values!
				out.push( a[i] );
			}
		}
	
		return out;
	};
	
	
	var _stripHtml = function ( d ) {
		return d.replace( _re_html, '' );
	};
	
	
	/**
	 * Determine if all values in the array are unique. This means we can short
	 * cut the _unique method at the cost of a single loop. A sorted array is used
	 * to easily check the values.
	 *
	 * @param  {array} src Source array
	 * @return {boolean} true if all unique, false otherwise
	 * @ignore
	 */
	var _areAllUnique = function ( src ) {
		if ( src.length < 2 ) {
			return true;
		}
	
		var sorted = src.slice().sort();
		var last = sorted[0];
	
		for ( var i=1, ien=sorted.length ; i<ien ; i++ ) {
			if ( sorted[i] === last ) {
				return false;
			}
	
			last = sorted[i];
		}
	
		return true;
	};
	
	
	/**
	 * Find the unique elements in a source array.
	 *
	 * @param  {array} src Source array
	 * @return {array} Array of unique items
	 * @ignore
	 */
	var _unique = function ( src )
	{
		if ( _areAllUnique( src ) ) {
			return src.slice();
		}
	
		// A faster unique method is to use object keys to identify used values,
		// but this doesn't work with arrays or objects, which we must also
		// consider. See jsperf.com/compare-array-unique-versions/4 for more
		// information.
		var
			out = [],
			val,
			i, ien=src.length,
			j, k=0;
	
		again: for ( i=0 ; i<ien ; i++ ) {
			val = src[i];
	
			for ( j=0 ; j<k ; j++ ) {
				if ( out[j] === val ) {
					continue again;
				}
			}
	
			out.push( val );
			k++;
		}
	
		return out;
	};
	
	
	/**
	 * DataTables utility methods
	 * 
	 * This namespace provides helper methods that DataTables uses internally to
	 * create a DataTable, but which are not exclusively used only for DataTables.
	 * These methods can be used by extension authors to save the duplication of
	 * code.
	 *
	 *  @namespace
	 */
	DataTable.util = {
		/**
		 * Throttle the calls to a function. Arguments and context are maintained
		 * for the throttled function.
		 *
		 * @param {function} fn Function to be called
		 * @param {integer} freq Call frequency in mS
		 * @return {function} Wrapped function
		 */
		throttle: function ( fn, freq ) {
			var
				frequency = freq !== undefined ? freq : 200,
				last,
				timer;
	
			return function () {
				var
					that = this,
					now  = +new Date(),
					args = arguments;
	
				if ( last && now < last + frequency ) {
					clearTimeout( timer );
	
					timer = setTimeout( function () {
						last = undefined;
						fn.apply( that, args );
					}, frequency );
				}
				else {
					last = now;
					fn.apply( that, args );
				}
			};
		},
	
	
		/**
		 * Escape a string such that it can be used in a regular expression
		 *
		 *  @param {string} val string to escape
		 *  @returns {string} escaped string
		 */
		escapeRegex: function ( val ) {
			return val.replace( _re_escape_regex, '\\$1' );
		}
	};
	
	
	
	/**
	 * Create a mapping object that allows camel case parameters to be looked up
	 * for their Hungarian counterparts. The mapping is stored in a private
	 * parameter called `_hungarianMap` which can be accessed on the source object.
	 *  @param {object} o
	 *  @memberof DataTable#oApi
	 */
	function _fnHungarianMap ( o )
	{
		var
			hungarian = 'a aa ai ao as b fn i m o s ',
			match,
			newKey,
			map = {};
	
		$.each( o, function (key, val) {
			match = key.match(/^([^A-Z]+?)([A-Z])/);
	
			if ( match && hungarian.indexOf(match[1]+' ') !== -1 )
			{
				newKey = key.replace( match[0], match[2].toLowerCase() );
				map[ newKey ] = key;
	
				if ( match[1] === 'o' )
				{
					_fnHungarianMap( o[key] );
				}
			}
		} );
	
		o._hungarianMap = map;
	}
	
	
	/**
	 * Convert from camel case parameters to Hungarian, based on a Hungarian map
	 * created by _fnHungarianMap.
	 *  @param {object} src The model object which holds all parameters that can be
	 *    mapped.
	 *  @param {object} user The object to convert from camel case to Hungarian.
	 *  @param {boolean} force When set to `true`, properties which already have a
	 *    Hungarian value in the `user` object will be overwritten. Otherwise they
	 *    won't be.
	 *  @memberof DataTable#oApi
	 */
	function _fnCamelToHungarian ( src, user, force )
	{
		if ( ! src._hungarianMap ) {
			_fnHungarianMap( src );
		}
	
		var hungarianKey;
	
		$.each( user, function (key, val) {
			hungarianKey = src._hungarianMap[ key ];
	
			if ( hungarianKey !== undefined && (force || user[hungarianKey] === undefined) )
			{
				// For objects, we need to buzz down into the object to copy parameters
				if ( hungarianKey.charAt(0) === 'o' )
				{
					// Copy the camelCase options over to the hungarian
					if ( ! user[ hungarianKey ] ) {
						user[ hungarianKey ] = {};
					}
					$.extend( true, user[hungarianKey], user[key] );
	
					_fnCamelToHungarian( src[hungarianKey], user[hungarianKey], force );
				}
				else {
					user[hungarianKey] = user[ key ];
				}
			}
		} );
	}
	
	
	/**
	 * Language compatibility - when certain options are given, and others aren't, we
	 * need to duplicate the values over, in order to provide backwards compatibility
	 * with older language files.
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnLanguageCompat( lang )
	{
		var defaults = DataTable.defaults.oLanguage;
		var zeroRecords = lang.sZeroRecords;
	
		/* Backwards compatibility - if there is no sEmptyTable given, then use the same as
		 * sZeroRecords - assuming that is given.
		 */
		if ( ! lang.sEmptyTable && zeroRecords &&
			defaults.sEmptyTable === "No data available in table" )
		{
			_fnMap( lang, lang, 'sZeroRecords', 'sEmptyTable' );
		}
	
		/* Likewise with loading records */
		if ( ! lang.sLoadingRecords && zeroRecords &&
			defaults.sLoadingRecords === "Loading..." )
		{
			_fnMap( lang, lang, 'sZeroRecords', 'sLoadingRecords' );
		}
	
		// Old parameter name of the thousands separator mapped onto the new
		if ( lang.sInfoThousands ) {
			lang.sThousands = lang.sInfoThousands;
		}
	
		var decimal = lang.sDecimal;
		if ( decimal ) {
			_addNumericSort( decimal );
		}
	}
	
	
	/**
	 * Map one parameter onto another
	 *  @param {object} o Object to map
	 *  @param {*} knew The new parameter name
	 *  @param {*} old The old parameter name
	 */
	var _fnCompatMap = function ( o, knew, old ) {
		if ( o[ knew ] !== undefined ) {
			o[ old ] = o[ knew ];
		}
	};
	
	
	/**
	 * Provide backwards compatibility for the main DT options. Note that the new
	 * options are mapped onto the old parameters, so this is an external interface
	 * change only.
	 *  @param {object} init Object to map
	 */
	function _fnCompatOpts ( init )
	{
		_fnCompatMap( init, 'ordering',      'bSort' );
		_fnCompatMap( init, 'orderMulti',    'bSortMulti' );
		_fnCompatMap( init, 'orderClasses',  'bSortClasses' );
		_fnCompatMap( init, 'orderCellsTop', 'bSortCellsTop' );
		_fnCompatMap( init, 'order',         'aaSorting' );
		_fnCompatMap( init, 'orderFixed',    'aaSortingFixed' );
		_fnCompatMap( init, 'paging',        'bPaginate' );
		_fnCompatMap( init, 'pagingType',    'sPaginationType' );
		_fnCompatMap( init, 'pageLength',    'iDisplayLength' );
		_fnCompatMap( init, 'searching',     'bFilter' );
	
		// Boolean initialisation of x-scrolling
		if ( typeof init.sScrollX === 'boolean' ) {
			init.sScrollX = init.sScrollX ? '100%' : '';
		}
		if ( typeof init.scrollX === 'boolean' ) {
			init.scrollX = init.scrollX ? '100%' : '';
		}
	
		// Column search objects are in an array, so it needs to be converted
		// element by element
		var searchCols = init.aoSearchCols;
	
		if ( searchCols ) {
			for ( var i=0, ien=searchCols.length ; i<ien ; i++ ) {
				if ( searchCols[i] ) {
					_fnCamelToHungarian( DataTable.models.oSearch, searchCols[i] );
				}
			}
		}
	}
	
	
	/**
	 * Provide backwards compatibility for column options. Note that the new options
	 * are mapped onto the old parameters, so this is an external interface change
	 * only.
	 *  @param {object} init Object to map
	 */
	function _fnCompatCols ( init )
	{
		_fnCompatMap( init, 'orderable',     'bSortable' );
		_fnCompatMap( init, 'orderData',     'aDataSort' );
		_fnCompatMap( init, 'orderSequence', 'asSorting' );
		_fnCompatMap( init, 'orderDataType', 'sortDataType' );
	
		// orderData can be given as an integer
		var dataSort = init.aDataSort;
		if ( typeof dataSort === 'number' && ! $.isArray( dataSort ) ) {
			init.aDataSort = [ dataSort ];
		}
	}
	
	
	/**
	 * Browser feature detection for capabilities, quirks
	 *  @param {object} settings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnBrowserDetect( settings )
	{
		// We don't need to do this every time DataTables is constructed, the values
		// calculated are specific to the browser and OS configuration which we
		// don't expect to change between initialisations
		if ( ! DataTable.__browser ) {
			var browser = {};
			DataTable.__browser = browser;
	
			// Scrolling feature / quirks detection
			var n = $('<div/>')
				.css( {
					position: 'fixed',
					top: 0,
					left: $(window).scrollLeft()*-1, // allow for scrolling
					height: 1,
					width: 1,
					overflow: 'hidden'
				} )
				.append(
					$('<div/>')
						.css( {
							position: 'absolute',
							top: 1,
							left: 1,
							width: 100,
							overflow: 'scroll'
						} )
						.append(
							$('<div/>')
								.css( {
									width: '100%',
									height: 10
								} )
						)
				)
				.appendTo( 'body' );
	
			var outer = n.children();
			var inner = outer.children();
	
			// Numbers below, in order, are:
			// inner.offsetWidth, inner.clientWidth, outer.offsetWidth, outer.clientWidth
			//
			// IE6 XP:                           100 100 100  83
			// IE7 Vista:                        100 100 100  83
			// IE 8+ Windows:                     83  83 100  83
			// Evergreen Windows:                 83  83 100  83
			// Evergreen Mac with scrollbars:     85  85 100  85
			// Evergreen Mac without scrollbars: 100 100 100 100
	
			// Get scrollbar width
			browser.barWidth = outer[0].offsetWidth - outer[0].clientWidth;
	
			// IE6/7 will oversize a width 100% element inside a scrolling element, to
			// include the width of the scrollbar, while other browsers ensure the inner
			// element is contained without forcing scrolling
			browser.bScrollOversize = inner[0].offsetWidth === 100 && outer[0].clientWidth !== 100;
	
			// In rtl text layout, some browsers (most, but not all) will place the
			// scrollbar on the left, rather than the right.
			browser.bScrollbarLeft = Math.round( inner.offset().left ) !== 1;
	
			// IE8- don't provide height and width for getBoundingClientRect
			browser.bBounding = n[0].getBoundingClientRect().width ? true : false;
	
			n.remove();
		}
	
		$.extend( settings.oBrowser, DataTable.__browser );
		settings.oScroll.iBarWidth = DataTable.__browser.barWidth;
	}
	
	
	/**
	 * Array.prototype reduce[Right] method, used for browsers which don't support
	 * JS 1.6. Done this way to reduce code size, since we iterate either way
	 *  @param {object} settings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnReduce ( that, fn, init, start, end, inc )
	{
		var
			i = start,
			value,
			isSet = false;
	
		if ( init !== undefined ) {
			value = init;
			isSet = true;
		}
	
		while ( i !== end ) {
			if ( ! that.hasOwnProperty(i) ) {
				continue;
			}
	
			value = isSet ?
				fn( value, that[i], i, that ) :
				that[i];
	
			isSet = true;
			i += inc;
		}
	
		return value;
	}
	
	/**
	 * Add a column to the list used for the table with default values
	 *  @param {object} oSettings dataTables settings object
	 *  @param {node} nTh The th element for this column
	 *  @memberof DataTable#oApi
	 */
	function _fnAddColumn( oSettings, nTh )
	{
		// Add column to aoColumns array
		var oDefaults = DataTable.defaults.column;
		var iCol = oSettings.aoColumns.length;
		var oCol = $.extend( {}, DataTable.models.oColumn, oDefaults, {
			"nTh": nTh ? nTh : document.createElement('th'),
			"sTitle":    oDefaults.sTitle    ? oDefaults.sTitle    : nTh ? nTh.innerHTML : '',
			"aDataSort": oDefaults.aDataSort ? oDefaults.aDataSort : [iCol],
			"mData": oDefaults.mData ? oDefaults.mData : iCol,
			idx: iCol
		} );
		oSettings.aoColumns.push( oCol );
	
		// Add search object for column specific search. Note that the `searchCols[ iCol ]`
		// passed into extend can be undefined. This allows the user to give a default
		// with only some of the parameters defined, and also not give a default
		var searchCols = oSettings.aoPreSearchCols;
		searchCols[ iCol ] = $.extend( {}, DataTable.models.oSearch, searchCols[ iCol ] );
	
		// Use the default column options function to initialise classes etc
		_fnColumnOptions( oSettings, iCol, $(nTh).data() );
	}
	
	
	/**
	 * Apply options for a column
	 *  @param {object} oSettings dataTables settings object
	 *  @param {int} iCol column index to consider
	 *  @param {object} oOptions object with sType, bVisible and bSearchable etc
	 *  @memberof DataTable#oApi
	 */
	function _fnColumnOptions( oSettings, iCol, oOptions )
	{
		var oCol = oSettings.aoColumns[ iCol ];
		var oClasses = oSettings.oClasses;
		var th = $(oCol.nTh);
	
		// Try to get width information from the DOM. We can't get it from CSS
		// as we'd need to parse the CSS stylesheet. `width` option can override
		if ( ! oCol.sWidthOrig ) {
			// Width attribute
			oCol.sWidthOrig = th.attr('width') || null;
	
			// Style attribute
			var t = (th.attr('style') || '').match(/width:\s*(\d+[pxem%]+)/);
			if ( t ) {
				oCol.sWidthOrig = t[1];
			}
		}
	
		/* User specified column options */
		if ( oOptions !== undefined && oOptions !== null )
		{
			// Backwards compatibility
			_fnCompatCols( oOptions );
	
			// Map camel case parameters to their Hungarian counterparts
			_fnCamelToHungarian( DataTable.defaults.column, oOptions );
	
			/* Backwards compatibility for mDataProp */
			if ( oOptions.mDataProp !== undefined && !oOptions.mData )
			{
				oOptions.mData = oOptions.mDataProp;
			}
	
			if ( oOptions.sType )
			{
				oCol._sManualType = oOptions.sType;
			}
	
			// `class` is a reserved word in Javascript, so we need to provide
			// the ability to use a valid name for the camel case input
			if ( oOptions.className && ! oOptions.sClass )
			{
				oOptions.sClass = oOptions.className;
			}
	
			$.extend( oCol, oOptions );
			_fnMap( oCol, oOptions, "sWidth", "sWidthOrig" );
	
			/* iDataSort to be applied (backwards compatibility), but aDataSort will take
			 * priority if defined
			 */
			if ( oOptions.iDataSort !== undefined )
			{
				oCol.aDataSort = [ oOptions.iDataSort ];
			}
			_fnMap( oCol, oOptions, "aDataSort" );
		}
	
		/* Cache the data get and set functions for speed */
		var mDataSrc = oCol.mData;
		var mData = _fnGetObjectDataFn( mDataSrc );
		var mRender = oCol.mRender ? _fnGetObjectDataFn( oCol.mRender ) : null;
	
		var attrTest = function( src ) {
			return typeof src === 'string' && src.indexOf('@') !== -1;
		};
		oCol._bAttrSrc = $.isPlainObject( mDataSrc ) && (
			attrTest(mDataSrc.sort) || attrTest(mDataSrc.type) || attrTest(mDataSrc.filter)
		);
		oCol._setter = null;
	
		oCol.fnGetData = function (rowData, type, meta) {
			var innerData = mData( rowData, type, undefined, meta );
	
			return mRender && type ?
				mRender( innerData, type, rowData, meta ) :
				innerData;
		};
		oCol.fnSetData = function ( rowData, val, meta ) {
			return _fnSetObjectDataFn( mDataSrc )( rowData, val, meta );
		};
	
		// Indicate if DataTables should read DOM data as an object or array
		// Used in _fnGetRowElements
		if ( typeof mDataSrc !== 'number' ) {
			oSettings._rowReadObject = true;
		}
	
		/* Feature sorting overrides column specific when off */
		if ( !oSettings.oFeatures.bSort )
		{
			oCol.bSortable = false;
			th.addClass( oClasses.sSortableNone ); // Have to add class here as order event isn't called
		}
	
		/* Check that the class assignment is correct for sorting */
		var bAsc = $.inArray('asc', oCol.asSorting) !== -1;
		var bDesc = $.inArray('desc', oCol.asSorting) !== -1;
		if ( !oCol.bSortable || (!bAsc && !bDesc) )
		{
			oCol.sSortingClass = oClasses.sSortableNone;
			oCol.sSortingClassJUI = "";
		}
		else if ( bAsc && !bDesc )
		{
			oCol.sSortingClass = oClasses.sSortableAsc;
			oCol.sSortingClassJUI = oClasses.sSortJUIAscAllowed;
		}
		else if ( !bAsc && bDesc )
		{
			oCol.sSortingClass = oClasses.sSortableDesc;
			oCol.sSortingClassJUI = oClasses.sSortJUIDescAllowed;
		}
		else
		{
			oCol.sSortingClass = oClasses.sSortable;
			oCol.sSortingClassJUI = oClasses.sSortJUI;
		}
	}
	
	
	/**
	 * Adjust the table column widths for new data. Note: you would probably want to
	 * do a redraw after calling this function!
	 *  @param {object} settings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnAdjustColumnSizing ( settings )
	{
		/* Not interested in doing column width calculation if auto-width is disabled */
		if ( settings.oFeatures.bAutoWidth !== false )
		{
			var columns = settings.aoColumns;
	
			_fnCalculateColumnWidths( settings );
			for ( var i=0 , iLen=columns.length ; i<iLen ; i++ )
			{
				columns[i].nTh.style.width = columns[i].sWidth;
			}
		}
	
		var scroll = settings.oScroll;
		if ( scroll.sY !== '' || scroll.sX !== '')
		{
			_fnScrollDraw( settings );
		}
	
		_fnCallbackFire( settings, null, 'column-sizing', [settings] );
	}
	
	
	/**
	 * Covert the index of a visible column to the index in the data array (take account
	 * of hidden columns)
	 *  @param {object} oSettings dataTables settings object
	 *  @param {int} iMatch Visible column index to lookup
	 *  @returns {int} i the data index
	 *  @memberof DataTable#oApi
	 */
	function _fnVisibleToColumnIndex( oSettings, iMatch )
	{
		var aiVis = _fnGetColumns( oSettings, 'bVisible' );
	
		return typeof aiVis[iMatch] === 'number' ?
			aiVis[iMatch] :
			null;
	}
	
	
	/**
	 * Covert the index of an index in the data array and convert it to the visible
	 *   column index (take account of hidden columns)
	 *  @param {int} iMatch Column index to lookup
	 *  @param {object} oSettings dataTables settings object
	 *  @returns {int} i the data index
	 *  @memberof DataTable#oApi
	 */
	function _fnColumnIndexToVisible( oSettings, iMatch )
	{
		var aiVis = _fnGetColumns( oSettings, 'bVisible' );
		var iPos = $.inArray( iMatch, aiVis );
	
		return iPos !== -1 ? iPos : null;
	}
	
	
	/**
	 * Get the number of visible columns
	 *  @param {object} oSettings dataTables settings object
	 *  @returns {int} i the number of visible columns
	 *  @memberof DataTable#oApi
	 */
	function _fnVisbleColumns( oSettings )
	{
		var vis = 0;
	
		// No reduce in IE8, use a loop for now
		$.each( oSettings.aoColumns, function ( i, col ) {
			if ( col.bVisible && $(col.nTh).css('display') !== 'none' ) {
				vis++;
			}
		} );
	
		return vis;
	}
	
	
	/**
	 * Get an array of column indexes that match a given property
	 *  @param {object} oSettings dataTables settings object
	 *  @param {string} sParam Parameter in aoColumns to look for - typically
	 *    bVisible or bSearchable
	 *  @returns {array} Array of indexes with matched properties
	 *  @memberof DataTable#oApi
	 */
	function _fnGetColumns( oSettings, sParam )
	{
		var a = [];
	
		$.map( oSettings.aoColumns, function(val, i) {
			if ( val[sParam] ) {
				a.push( i );
			}
		} );
	
		return a;
	}
	
	
	/**
	 * Calculate the 'type' of a column
	 *  @param {object} settings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnColumnTypes ( settings )
	{
		var columns = settings.aoColumns;
		var data = settings.aoData;
		var types = DataTable.ext.type.detect;
		var i, ien, j, jen, k, ken;
		var col, cell, detectedType, cache;
	
		// For each column, spin over the 
		for ( i=0, ien=columns.length ; i<ien ; i++ ) {
			col = columns[i];
			cache = [];
	
			if ( ! col.sType && col._sManualType ) {
				col.sType = col._sManualType;
			}
			else if ( ! col.sType ) {
				for ( j=0, jen=types.length ; j<jen ; j++ ) {
					for ( k=0, ken=data.length ; k<ken ; k++ ) {
						// Use a cache array so we only need to get the type data
						// from the formatter once (when using multiple detectors)
						if ( cache[k] === undefined ) {
							cache[k] = _fnGetCellData( settings, k, i, 'type' );
						}
	
						detectedType = types[j]( cache[k], settings );
	
						// If null, then this type can't apply to this column, so
						// rather than testing all cells, break out. There is an
						// exception for the last type which is `html`. We need to
						// scan all rows since it is possible to mix string and HTML
						// types
						if ( ! detectedType && j !== types.length-1 ) {
							break;
						}
	
						// Only a single match is needed for html type since it is
						// bottom of the pile and very similar to string
						if ( detectedType === 'html' ) {
							break;
						}
					}
	
					// Type is valid for all data points in the column - use this
					// type
					if ( detectedType ) {
						col.sType = detectedType;
						break;
					}
				}
	
				// Fall back - if no type was detected, always use string
				if ( ! col.sType ) {
					col.sType = 'string';
				}
			}
		}
	}
	
	
	/**
	 * Take the column definitions and static columns arrays and calculate how
	 * they relate to column indexes. The callback function will then apply the
	 * definition found for a column to a suitable configuration object.
	 *  @param {object} oSettings dataTables settings object
	 *  @param {array} aoColDefs The aoColumnDefs array that is to be applied
	 *  @param {array} aoCols The aoColumns array that defines columns individually
	 *  @param {function} fn Callback function - takes two parameters, the calculated
	 *    column index and the definition for that column.
	 *  @memberof DataTable#oApi
	 */
	function _fnApplyColumnDefs( oSettings, aoColDefs, aoCols, fn )
	{
		var i, iLen, j, jLen, k, kLen, def;
		var columns = oSettings.aoColumns;
	
		// Column definitions with aTargets
		if ( aoColDefs )
		{
			/* Loop over the definitions array - loop in reverse so first instance has priority */
			for ( i=aoColDefs.length-1 ; i>=0 ; i-- )
			{
				def = aoColDefs[i];
	
				/* Each definition can target multiple columns, as it is an array */
				var aTargets = def.targets !== undefined ?
					def.targets :
					def.aTargets;
	
				if ( ! $.isArray( aTargets ) )
				{
					aTargets = [ aTargets ];
				}
	
				for ( j=0, jLen=aTargets.length ; j<jLen ; j++ )
				{
					if ( typeof aTargets[j] === 'number' && aTargets[j] >= 0 )
					{
						/* Add columns that we don't yet know about */
						while( columns.length <= aTargets[j] )
						{
							_fnAddColumn( oSettings );
						}
	
						/* Integer, basic index */
						fn( aTargets[j], def );
					}
					else if ( typeof aTargets[j] === 'number' && aTargets[j] < 0 )
					{
						/* Negative integer, right to left column counting */
						fn( columns.length+aTargets[j], def );
					}
					else if ( typeof aTargets[j] === 'string' )
					{
						/* Class name matching on TH element */
						for ( k=0, kLen=columns.length ; k<kLen ; k++ )
						{
							if ( aTargets[j] == "_all" ||
							     $(columns[k].nTh).hasClass( aTargets[j] ) )
							{
								fn( k, def );
							}
						}
					}
				}
			}
		}
	
		// Statically defined columns array
		if ( aoCols )
		{
			for ( i=0, iLen=aoCols.length ; i<iLen ; i++ )
			{
				fn( i, aoCols[i] );
			}
		}
	}
	
	/**
	 * Add a data array to the table, creating DOM node etc. This is the parallel to
	 * _fnGatherData, but for adding rows from a Javascript source, rather than a
	 * DOM source.
	 *  @param {object} oSettings dataTables settings object
	 *  @param {array} aData data array to be added
	 *  @param {node} [nTr] TR element to add to the table - optional. If not given,
	 *    DataTables will create a row automatically
	 *  @param {array} [anTds] Array of TD|TH elements for the row - must be given
	 *    if nTr is.
	 *  @returns {int} >=0 if successful (index of new aoData entry), -1 if failed
	 *  @memberof DataTable#oApi
	 */
	function _fnAddData ( oSettings, aDataIn, nTr, anTds )
	{
		/* Create the object for storing information about this new row */
		var iRow = oSettings.aoData.length;
		var oData = $.extend( true, {}, DataTable.models.oRow, {
			src: nTr ? 'dom' : 'data',
			idx: iRow
		} );
	
		oData._aData = aDataIn;
		oSettings.aoData.push( oData );
	
		/* Create the cells */
		var nTd, sThisType;
		var columns = oSettings.aoColumns;
	
		// Invalidate the column types as the new data needs to be revalidated
		for ( var i=0, iLen=columns.length ; i<iLen ; i++ )
		{
			columns[i].sType = null;
		}
	
		/* Add to the display array */
		oSettings.aiDisplayMaster.push( iRow );
	
		var id = oSettings.rowIdFn( aDataIn );
		if ( id !== undefined ) {
			oSettings.aIds[ id ] = oData;
		}
	
		/* Create the DOM information, or register it if already present */
		if ( nTr || ! oSettings.oFeatures.bDeferRender )
		{
			_fnCreateTr( oSettings, iRow, nTr, anTds );
		}
	
		return iRow;
	}
	
	
	/**
	 * Add one or more TR elements to the table. Generally we'd expect to
	 * use this for reading data from a DOM sourced table, but it could be
	 * used for an TR element. Note that if a TR is given, it is used (i.e.
	 * it is not cloned).
	 *  @param {object} settings dataTables settings object
	 *  @param {array|node|jQuery} trs The TR element(s) to add to the table
	 *  @returns {array} Array of indexes for the added rows
	 *  @memberof DataTable#oApi
	 */
	function _fnAddTr( settings, trs )
	{
		var row;
	
		// Allow an individual node to be passed in
		if ( ! (trs instanceof $) ) {
			trs = $(trs);
		}
	
		return trs.map( function (i, el) {
			row = _fnGetRowElements( settings, el );
			return _fnAddData( settings, row.data, el, row.cells );
		} );
	}
	
	
	/**
	 * Take a TR element and convert it to an index in aoData
	 *  @param {object} oSettings dataTables settings object
	 *  @param {node} n the TR element to find
	 *  @returns {int} index if the node is found, null if not
	 *  @memberof DataTable#oApi
	 */
	function _fnNodeToDataIndex( oSettings, n )
	{
		return (n._DT_RowIndex!==undefined) ? n._DT_RowIndex : null;
	}
	
	
	/**
	 * Take a TD element and convert it into a column data index (not the visible index)
	 *  @param {object} oSettings dataTables settings object
	 *  @param {int} iRow The row number the TD/TH can be found in
	 *  @param {node} n The TD/TH element to find
	 *  @returns {int} index if the node is found, -1 if not
	 *  @memberof DataTable#oApi
	 */
	function _fnNodeToColumnIndex( oSettings, iRow, n )
	{
		return $.inArray( n, oSettings.aoData[ iRow ].anCells );
	}
	
	
	/**
	 * Get the data for a given cell from the internal cache, taking into account data mapping
	 *  @param {object} settings dataTables settings object
	 *  @param {int} rowIdx aoData row id
	 *  @param {int} colIdx Column index
	 *  @param {string} type data get type ('display', 'type' 'filter' 'sort')
	 *  @returns {*} Cell data
	 *  @memberof DataTable#oApi
	 */
	function _fnGetCellData( settings, rowIdx, colIdx, type )
	{
		var draw           = settings.iDraw;
		var col            = settings.aoColumns[colIdx];
		var rowData        = settings.aoData[rowIdx]._aData;
		var defaultContent = col.sDefaultContent;
		var cellData       = col.fnGetData( rowData, type, {
			settings: settings,
			row:      rowIdx,
			col:      colIdx
		} );
	
		if ( cellData === undefined ) {
			if ( settings.iDrawError != draw && defaultContent === null ) {
				_fnLog( settings, 0, "Requested unknown parameter "+
					(typeof col.mData=='function' ? '{function}' : "'"+col.mData+"'")+
					" for row "+rowIdx+", column "+colIdx, 4 );
				settings.iDrawError = draw;
			}
			return defaultContent;
		}
	
		// When the data source is null and a specific data type is requested (i.e.
		// not the original data), we can use default column data
		if ( (cellData === rowData || cellData === null) && defaultContent !== null && type !== undefined ) {
			cellData = defaultContent;
		}
		else if ( typeof cellData === 'function' ) {
			// If the data source is a function, then we run it and use the return,
			// executing in the scope of the data object (for instances)
			return cellData.call( rowData );
		}
	
		if ( cellData === null && type == 'display' ) {
			return '';
		}
		return cellData;
	}
	
	
	/**
	 * Set the value for a specific cell, into the internal data cache
	 *  @param {object} settings dataTables settings object
	 *  @param {int} rowIdx aoData row id
	 *  @param {int} colIdx Column index
	 *  @param {*} val Value to set
	 *  @memberof DataTable#oApi
	 */
	function _fnSetCellData( settings, rowIdx, colIdx, val )
	{
		var col     = settings.aoColumns[colIdx];
		var rowData = settings.aoData[rowIdx]._aData;
	
		col.fnSetData( rowData, val, {
			settings: settings,
			row:      rowIdx,
			col:      colIdx
		}  );
	}
	
	
	// Private variable that is used to match action syntax in the data property object
	var __reArray = /\[.*?\]$/;
	var __reFn = /\(\)$/;
	
	/**
	 * Split string on periods, taking into account escaped periods
	 * @param  {string} str String to split
	 * @return {array} Split string
	 */
	function _fnSplitObjNotation( str )
	{
		return $.map( str.match(/(\\.|[^\.])+/g) || [''], function ( s ) {
			return s.replace(/\\\./g, '.');
		} );
	}
	
	
	/**
	 * Return a function that can be used to get data from a source object, taking
	 * into account the ability to use nested objects as a source
	 *  @param {string|int|function} mSource The data source for the object
	 *  @returns {function} Data get function
	 *  @memberof DataTable#oApi
	 */
	function _fnGetObjectDataFn( mSource )
	{
		if ( $.isPlainObject( mSource ) )
		{
			/* Build an object of get functions, and wrap them in a single call */
			var o = {};
			$.each( mSource, function (key, val) {
				if ( val ) {
					o[key] = _fnGetObjectDataFn( val );
				}
			} );
	
			return function (data, type, row, meta) {
				var t = o[type] || o._;
				return t !== undefined ?
					t(data, type, row, meta) :
					data;
			};
		}
		else if ( mSource === null )
		{
			/* Give an empty string for rendering / sorting etc */
			return function (data) { // type, row and meta also passed, but not used
				return data;
			};
		}
		else if ( typeof mSource === 'function' )
		{
			return function (data, type, row, meta) {
				return mSource( data, type, row, meta );
			};
		}
		else if ( typeof mSource === 'string' && (mSource.indexOf('.') !== -1 ||
			      mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1) )
		{
			/* If there is a . in the source string then the data source is in a
			 * nested object so we loop over the data for each level to get the next
			 * level down. On each loop we test for undefined, and if found immediately
			 * return. This allows entire objects to be missing and sDefaultContent to
			 * be used if defined, rather than throwing an error
			 */
			var fetchData = function (data, type, src) {
				var arrayNotation, funcNotation, out, innerSrc;
	
				if ( src !== "" )
				{
					var a = _fnSplitObjNotation( src );
	
					for ( var i=0, iLen=a.length ; i<iLen ; i++ )
					{
						// Check if we are dealing with special notation
						arrayNotation = a[i].match(__reArray);
						funcNotation = a[i].match(__reFn);
	
						if ( arrayNotation )
						{
							// Array notation
							a[i] = a[i].replace(__reArray, '');
	
							// Condition allows simply [] to be passed in
							if ( a[i] !== "" ) {
								data = data[ a[i] ];
							}
							out = [];
	
							// Get the remainder of the nested object to get
							a.splice( 0, i+1 );
							innerSrc = a.join('.');
	
							// Traverse each entry in the array getting the properties requested
							if ( $.isArray( data ) ) {
								for ( var j=0, jLen=data.length ; j<jLen ; j++ ) {
									out.push( fetchData( data[j], type, innerSrc ) );
								}
							}
	
							// If a string is given in between the array notation indicators, that
							// is used to join the strings together, otherwise an array is returned
							var join = arrayNotation[0].substring(1, arrayNotation[0].length-1);
							data = (join==="") ? out : out.join(join);
	
							// The inner call to fetchData has already traversed through the remainder
							// of the source requested, so we exit from the loop
							break;
						}
						else if ( funcNotation )
						{
							// Function call
							a[i] = a[i].replace(__reFn, '');
							data = data[ a[i] ]();
							continue;
						}
	
						if ( data === null || data[ a[i] ] === undefined )
						{
							return undefined;
						}
						data = data[ a[i] ];
					}
				}
	
				return data;
			};
	
			return function (data, type) { // row and meta also passed, but not used
				return fetchData( data, type, mSource );
			};
		}
		else
		{
			/* Array or flat object mapping */
			return function (data, type) { // row and meta also passed, but not used
				return data[mSource];
			};
		}
	}
	
	
	/**
	 * Return a function that can be used to set data from a source object, taking
	 * into account the ability to use nested objects as a source
	 *  @param {string|int|function} mSource The data source for the object
	 *  @returns {function} Data set function
	 *  @memberof DataTable#oApi
	 */
	function _fnSetObjectDataFn( mSource )
	{
		if ( $.isPlainObject( mSource ) )
		{
			/* Unlike get, only the underscore (global) option is used for for
			 * setting data since we don't know the type here. This is why an object
			 * option is not documented for `mData` (which is read/write), but it is
			 * for `mRender` which is read only.
			 */
			return _fnSetObjectDataFn( mSource._ );
		}
		else if ( mSource === null )
		{
			/* Nothing to do when the data source is null */
			return function () {};
		}
		else if ( typeof mSource === 'function' )
		{
			return function (data, val, meta) {
				mSource( data, 'set', val, meta );
			};
		}
		else if ( typeof mSource === 'string' && (mSource.indexOf('.') !== -1 ||
			      mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1) )
		{
			/* Like the get, we need to get data from a nested object */
			var setData = function (data, val, src) {
				var a = _fnSplitObjNotation( src ), b;
				var aLast = a[a.length-1];
				var arrayNotation, funcNotation, o, innerSrc;
	
				for ( var i=0, iLen=a.length-1 ; i<iLen ; i++ )
				{
					// Check if we are dealing with an array notation request
					arrayNotation = a[i].match(__reArray);
					funcNotation = a[i].match(__reFn);
	
					if ( arrayNotation )
					{
						a[i] = a[i].replace(__reArray, '');
						data[ a[i] ] = [];
	
						// Get the remainder of the nested object to set so we can recurse
						b = a.slice();
						b.splice( 0, i+1 );
						innerSrc = b.join('.');
	
						// Traverse each entry in the array setting the properties requested
						if ( $.isArray( val ) )
						{
							for ( var j=0, jLen=val.length ; j<jLen ; j++ )
							{
								o = {};
								setData( o, val[j], innerSrc );
								data[ a[i] ].push( o );
							}
						}
						else
						{
							// We've been asked to save data to an array, but it
							// isn't array data to be saved. Best that can be done
							// is to just save the value.
							data[ a[i] ] = val;
						}
	
						// The inner call to setData has already traversed through the remainder
						// of the source and has set the data, thus we can exit here
						return;
					}
					else if ( funcNotation )
					{
						// Function call
						a[i] = a[i].replace(__reFn, '');
						data = data[ a[i] ]( val );
					}
	
					// If the nested object doesn't currently exist - since we are
					// trying to set the value - create it
					if ( data[ a[i] ] === null || data[ a[i] ] === undefined )
					{
						data[ a[i] ] = {};
					}
					data = data[ a[i] ];
				}
	
				// Last item in the input - i.e, the actual set
				if ( aLast.match(__reFn ) )
				{
					// Function call
					data = data[ aLast.replace(__reFn, '') ]( val );
				}
				else
				{
					// If array notation is used, we just want to strip it and use the property name
					// and assign the value. If it isn't used, then we get the result we want anyway
					data[ aLast.replace(__reArray, '') ] = val;
				}
			};
	
			return function (data, val) { // meta is also passed in, but not used
				return setData( data, val, mSource );
			};
		}
		else
		{
			/* Array or flat object mapping */
			return function (data, val) { // meta is also passed in, but not used
				data[mSource] = val;
			};
		}
	}
	
	
	/**
	 * Return an array with the full table data
	 *  @param {object} oSettings dataTables settings object
	 *  @returns array {array} aData Master data array
	 *  @memberof DataTable#oApi
	 */
	function _fnGetDataMaster ( settings )
	{
		return _pluck( settings.aoData, '_aData' );
	}
	
	
	/**
	 * Nuke the table
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnClearTable( settings )
	{
		settings.aoData.length = 0;
		settings.aiDisplayMaster.length = 0;
		settings.aiDisplay.length = 0;
		settings.aIds = {};
	}
	
	
	 /**
	 * Take an array of integers (index array) and remove a target integer (value - not
	 * the key!)
	 *  @param {array} a Index array to target
	 *  @param {int} iTarget value to find
	 *  @memberof DataTable#oApi
	 */
	function _fnDeleteIndex( a, iTarget, splice )
	{
		var iTargetIndex = -1;
	
		for ( var i=0, iLen=a.length ; i<iLen ; i++ )
		{
			if ( a[i] == iTarget )
			{
				iTargetIndex = i;
			}
			else if ( a[i] > iTarget )
			{
				a[i]--;
			}
		}
	
		if ( iTargetIndex != -1 && splice === undefined )
		{
			a.splice( iTargetIndex, 1 );
		}
	}
	
	
	/**
	 * Mark cached data as invalid such that a re-read of the data will occur when
	 * the cached data is next requested. Also update from the data source object.
	 *
	 * @param {object} settings DataTables settings object
	 * @param {int}    rowIdx   Row index to invalidate
	 * @param {string} [src]    Source to invalidate from: undefined, 'auto', 'dom'
	 *     or 'data'
	 * @param {int}    [colIdx] Column index to invalidate. If undefined the whole
	 *     row will be invalidated
	 * @memberof DataTable#oApi
	 *
	 * @todo For the modularisation of v1.11 this will need to become a callback, so
	 *   the sort and filter methods can subscribe to it. That will required
	 *   initialisation options for sorting, which is why it is not already baked in
	 */
	function _fnInvalidate( settings, rowIdx, src, colIdx )
	{
		var row = settings.aoData[ rowIdx ];
		var i, ien;
		var cellWrite = function ( cell, col ) {
			// This is very frustrating, but in IE if you just write directly
			// to innerHTML, and elements that are overwritten are GC'ed,
			// even if there is a reference to them elsewhere
			while ( cell.childNodes.length ) {
				cell.removeChild( cell.firstChild );
			}
	
			cell.innerHTML = _fnGetCellData( settings, rowIdx, col, 'display' );
		};
	
		// Are we reading last data from DOM or the data object?
		if ( src === 'dom' || ((! src || src === 'auto') && row.src === 'dom') ) {
			// Read the data from the DOM
			row._aData = _fnGetRowElements(
					settings, row, colIdx, colIdx === undefined ? undefined : row._aData
				)
				.data;
		}
		else {
			// Reading from data object, update the DOM
			var cells = row.anCells;
	
			if ( cells ) {
				if ( colIdx !== undefined ) {
					cellWrite( cells[colIdx], colIdx );
				}
				else {
					for ( i=0, ien=cells.length ; i<ien ; i++ ) {
						cellWrite( cells[i], i );
					}
				}
			}
		}
	
		// For both row and cell invalidation, the cached data for sorting and
		// filtering is nulled out
		row._aSortData = null;
		row._aFilterData = null;
	
		// Invalidate the type for a specific column (if given) or all columns since
		// the data might have changed
		var cols = settings.aoColumns;
		if ( colIdx !== undefined ) {
			cols[ colIdx ].sType = null;
		}
		else {
			for ( i=0, ien=cols.length ; i<ien ; i++ ) {
				cols[i].sType = null;
			}
	
			// Update DataTables special `DT_*` attributes for the row
			_fnRowAttributes( settings, row );
		}
	}
	
	
	/**
	 * Build a data source object from an HTML row, reading the contents of the
	 * cells that are in the row.
	 *
	 * @param {object} settings DataTables settings object
	 * @param {node|object} TR element from which to read data or existing row
	 *   object from which to re-read the data from the cells
	 * @param {int} [colIdx] Optional column index
	 * @param {array|object} [d] Data source object. If `colIdx` is given then this
	 *   parameter should also be given and will be used to write the data into.
	 *   Only the column in question will be written
	 * @returns {object} Object with two parameters: `data` the data read, in
	 *   document order, and `cells` and array of nodes (they can be useful to the
	 *   caller, so rather than needing a second traversal to get them, just return
	 *   them from here).
	 * @memberof DataTable#oApi
	 */
	function _fnGetRowElements( settings, row, colIdx, d )
	{
		var
			tds = [],
			td = row.firstChild,
			name, col, o, i=0, contents,
			columns = settings.aoColumns,
			objectRead = settings._rowReadObject;
	
		// Allow the data object to be passed in, or construct
		d = d !== undefined ?
			d :
			objectRead ?
				{} :
				[];
	
		var attr = function ( str, td  ) {
			if ( typeof str === 'string' ) {
				var idx = str.indexOf('@');
	
				if ( idx !== -1 ) {
					var attr = str.substring( idx+1 );
					var setter = _fnSetObjectDataFn( str );
					setter( d, td.getAttribute( attr ) );
				}
			}
		};
	
		// Read data from a cell and store into the data object
		var cellProcess = function ( cell ) {
			if ( colIdx === undefined || colIdx === i ) {
				col = columns[i];
				contents = $.trim(cell.innerHTML);
	
				if ( col && col._bAttrSrc ) {
					var setter = _fnSetObjectDataFn( col.mData._ );
					setter( d, contents );
	
					attr( col.mData.sort, cell );
					attr( col.mData.type, cell );
					attr( col.mData.filter, cell );
				}
				else {
					// Depending on the `data` option for the columns the data can
					// be read to either an object or an array.
					if ( objectRead ) {
						if ( ! col._setter ) {
							// Cache the setter function
							col._setter = _fnSetObjectDataFn( col.mData );
						}
						col._setter( d, contents );
					}
					else {
						d[i] = contents;
					}
				}
			}
	
			i++;
		};
	
		if ( td ) {
			// `tr` element was passed in
			while ( td ) {
				name = td.nodeName.toUpperCase();
	
				if ( name == "TD" || name == "TH" ) {
					cellProcess( td );
					tds.push( td );
				}
	
				td = td.nextSibling;
			}
		}
		else {
			// Existing row object passed in
			tds = row.anCells;
	
			for ( var j=0, jen=tds.length ; j<jen ; j++ ) {
				cellProcess( tds[j] );
			}
		}
	
		// Read the ID from the DOM if present
		var rowNode = row.firstChild ? row : row.nTr;
	
		if ( rowNode ) {
			var id = rowNode.getAttribute( 'id' );
	
			if ( id ) {
				_fnSetObjectDataFn( settings.rowId )( d, id );
			}
		}
	
		return {
			data: d,
			cells: tds
		};
	}
	/**
	 * Create a new TR element (and it's TD children) for a row
	 *  @param {object} oSettings dataTables settings object
	 *  @param {int} iRow Row to consider
	 *  @param {node} [nTrIn] TR element to add to the table - optional. If not given,
	 *    DataTables will create a row automatically
	 *  @param {array} [anTds] Array of TD|TH elements for the row - must be given
	 *    if nTr is.
	 *  @memberof DataTable#oApi
	 */
	function _fnCreateTr ( oSettings, iRow, nTrIn, anTds )
	{
		var
			row = oSettings.aoData[iRow],
			rowData = row._aData,
			cells = [],
			nTr, nTd, oCol,
			i, iLen;
	
		if ( row.nTr === null )
		{
			nTr = nTrIn || document.createElement('tr');
	
			row.nTr = nTr;
			row.anCells = cells;
	
			/* Use a private property on the node to allow reserve mapping from the node
			 * to the aoData array for fast look up
			 */
			nTr._DT_RowIndex = iRow;
	
			/* Special parameters can be given by the data source to be used on the row */
			_fnRowAttributes( oSettings, row );
	
			/* Process each column */
			for ( i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )
			{
				oCol = oSettings.aoColumns[i];
	
				nTd = nTrIn ? anTds[i] : document.createElement( oCol.sCellType );
				nTd._DT_CellIndex = {
					row: iRow,
					column: i
				};
				
				cells.push( nTd );
	
				// Need to create the HTML if new, or if a rendering function is defined
				if ( (!nTrIn || oCol.mRender || oCol.mData !== i) &&
					 (!$.isPlainObject(oCol.mData) || oCol.mData._ !== i+'.display')
				) {
					nTd.innerHTML = _fnGetCellData( oSettings, iRow, i, 'display' );
				}
	
				/* Add user defined class */
				if ( oCol.sClass )
				{
					nTd.className += ' '+oCol.sClass;
				}
	
				// Visibility - add or remove as required
				if ( oCol.bVisible && ! nTrIn )
				{
					nTr.appendChild( nTd );
				}
				else if ( ! oCol.bVisible && nTrIn )
				{
					nTd.parentNode.removeChild( nTd );
				}
	
				if ( oCol.fnCreatedCell )
				{
					oCol.fnCreatedCell.call( oSettings.oInstance,
						nTd, _fnGetCellData( oSettings, iRow, i ), rowData, iRow, i
					);
				}
			}
	
			_fnCallbackFire( oSettings, 'aoRowCreatedCallback', null, [nTr, rowData, iRow] );
		}
	
		// Remove once webkit bug 131819 and Chromium bug 365619 have been resolved
		// and deployed
		row.nTr.setAttribute( 'role', 'row' );
	}
	
	
	/**
	 * Add attributes to a row based on the special `DT_*` parameters in a data
	 * source object.
	 *  @param {object} settings DataTables settings object
	 *  @param {object} DataTables row object for the row to be modified
	 *  @memberof DataTable#oApi
	 */
	function _fnRowAttributes( settings, row )
	{
		var tr = row.nTr;
		var data = row._aData;
	
		if ( tr ) {
			var id = settings.rowIdFn( data );
	
			if ( id ) {
				tr.id = id;
			}
	
			if ( data.DT_RowClass ) {
				// Remove any classes added by DT_RowClass before
				var a = data.DT_RowClass.split(' ');
				row.__rowc = row.__rowc ?
					_unique( row.__rowc.concat( a ) ) :
					a;
	
				$(tr)
					.removeClass( row.__rowc.join(' ') )
					.addClass( data.DT_RowClass );
			}
	
			if ( data.DT_RowAttr ) {
				$(tr).attr( data.DT_RowAttr );
			}
	
			if ( data.DT_RowData ) {
				$(tr).data( data.DT_RowData );
			}
		}
	}
	
	
	/**
	 * Create the HTML header for the table
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnBuildHead( oSettings )
	{
		var i, ien, cell, row, column;
		var thead = oSettings.nTHead;
		var tfoot = oSettings.nTFoot;
		var createHeader = $('th, td', thead).length === 0;
		var classes = oSettings.oClasses;
		var columns = oSettings.aoColumns;
	
		if ( createHeader ) {
			row = $('<tr/>').appendTo( thead );
		}
	
		for ( i=0, ien=columns.length ; i<ien ; i++ ) {
			column = columns[i];
			cell = $( column.nTh ).addClass( column.sClass );
	
			if ( createHeader ) {
				cell.appendTo( row );
			}
	
			// 1.11 move into sorting
			if ( oSettings.oFeatures.bSort ) {
				cell.addClass( column.sSortingClass );
	
				if ( column.bSortable !== false ) {
					cell
						.attr( 'tabindex', oSettings.iTabIndex )
						.attr( 'aria-controls', oSettings.sTableId );
	
					_fnSortAttachListener( oSettings, column.nTh, i );
				}
			}
	
			if ( column.sTitle != cell[0].innerHTML ) {
				cell.html( column.sTitle );
			}
	
			_fnRenderer( oSettings, 'header' )(
				oSettings, cell, column, classes
			);
		}
	
		if ( createHeader ) {
			_fnDetectHeader( oSettings.aoHeader, thead );
		}
		
		/* ARIA role for the rows */
	 	$(thead).find('>tr').attr('role', 'row');
	
		/* Deal with the footer - add classes if required */
		$(thead).find('>tr>th, >tr>td').addClass( classes.sHeaderTH );
		$(tfoot).find('>tr>th, >tr>td').addClass( classes.sFooterTH );
	
		// Cache the footer cells. Note that we only take the cells from the first
		// row in the footer. If there is more than one row the user wants to
		// interact with, they need to use the table().foot() method. Note also this
		// allows cells to be used for multiple columns using colspan
		if ( tfoot !== null ) {
			var cells = oSettings.aoFooter[0];
	
			for ( i=0, ien=cells.length ; i<ien ; i++ ) {
				column = columns[i];
				column.nTf = cells[i].cell;
	
				if ( column.sClass ) {
					$(column.nTf).addClass( column.sClass );
				}
			}
		}
	}
	
	
	/**
	 * Draw the header (or footer) element based on the column visibility states. The
	 * methodology here is to use the layout array from _fnDetectHeader, modified for
	 * the instantaneous column visibility, to construct the new layout. The grid is
	 * traversed over cell at a time in a rows x columns grid fashion, although each
	 * cell insert can cover multiple elements in the grid - which is tracks using the
	 * aApplied array. Cell inserts in the grid will only occur where there isn't
	 * already a cell in that position.
	 *  @param {object} oSettings dataTables settings object
	 *  @param array {objects} aoSource Layout array from _fnDetectHeader
	 *  @param {boolean} [bIncludeHidden=false] If true then include the hidden columns in the calc,
	 *  @memberof DataTable#oApi
	 */
	function _fnDrawHead( oSettings, aoSource, bIncludeHidden )
	{
		var i, iLen, j, jLen, k, kLen, n, nLocalTr;
		var aoLocal = [];
		var aApplied = [];
		var iColumns = oSettings.aoColumns.length;
		var iRowspan, iColspan;
	
		if ( ! aoSource )
		{
			return;
		}
	
		if (  bIncludeHidden === undefined )
		{
			bIncludeHidden = false;
		}
	
		/* Make a copy of the master layout array, but without the visible columns in it */
		for ( i=0, iLen=aoSource.length ; i<iLen ; i++ )
		{
			aoLocal[i] = aoSource[i].slice();
			aoLocal[i].nTr = aoSource[i].nTr;
	
			/* Remove any columns which are currently hidden */
			for ( j=iColumns-1 ; j>=0 ; j-- )
			{
				if ( !oSettings.aoColumns[j].bVisible && !bIncludeHidden )
				{
					aoLocal[i].splice( j, 1 );
				}
			}
	
			/* Prep the applied array - it needs an element for each row */
			aApplied.push( [] );
		}
	
		for ( i=0, iLen=aoLocal.length ; i<iLen ; i++ )
		{
			nLocalTr = aoLocal[i].nTr;
	
			/* All cells are going to be replaced, so empty out the row */
			if ( nLocalTr )
			{
				while( (n = nLocalTr.firstChild) )
				{
					nLocalTr.removeChild( n );
				}
			}
	
			for ( j=0, jLen=aoLocal[i].length ; j<jLen ; j++ )
			{
				iRowspan = 1;
				iColspan = 1;
	
				/* Check to see if there is already a cell (row/colspan) covering our target
				 * insert point. If there is, then there is nothing to do.
				 */
				if ( aApplied[i][j] === undefined )
				{
					nLocalTr.appendChild( aoLocal[i][j].cell );
					aApplied[i][j] = 1;
	
					/* Expand the cell to cover as many rows as needed */
					while ( aoLocal[i+iRowspan] !== undefined &&
					        aoLocal[i][j].cell == aoLocal[i+iRowspan][j].cell )
					{
						aApplied[i+iRowspan][j] = 1;
						iRowspan++;
					}
	
					/* Expand the cell to cover as many columns as needed */
					while ( aoLocal[i][j+iColspan] !== undefined &&
					        aoLocal[i][j].cell == aoLocal[i][j+iColspan].cell )
					{
						/* Must update the applied array over the rows for the columns */
						for ( k=0 ; k<iRowspan ; k++ )
						{
							aApplied[i+k][j+iColspan] = 1;
						}
						iColspan++;
					}
	
					/* Do the actual expansion in the DOM */
					$(aoLocal[i][j].cell)
						.attr('rowspan', iRowspan)
						.attr('colspan', iColspan);
				}
			}
		}
	}
	
	
	/**
	 * Insert the required TR nodes into the table for display
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnDraw( oSettings )
	{
		/* Provide a pre-callback function which can be used to cancel the draw is false is returned */
		var aPreDraw = _fnCallbackFire( oSettings, 'aoPreDrawCallback', 'preDraw', [oSettings] );
		if ( $.inArray( false, aPreDraw ) !== -1 )
		{
			_fnProcessingDisplay( oSettings, false );
			return;
		}
	
		var i, iLen, n;
		var anRows = [];
		var iRowCount = 0;
		var asStripeClasses = oSettings.asStripeClasses;
		var iStripes = asStripeClasses.length;
		var iOpenRows = oSettings.aoOpenRows.length;
		var oLang = oSettings.oLanguage;
		var iInitDisplayStart = oSettings.iInitDisplayStart;
		var bServerSide = _fnDataSource( oSettings ) == 'ssp';
		var aiDisplay = oSettings.aiDisplay;
	
		oSettings.bDrawing = true;
	
		/* Check and see if we have an initial draw position from state saving */
		if ( iInitDisplayStart !== undefined && iInitDisplayStart !== -1 )
		{
			oSettings._iDisplayStart = bServerSide ?
				iInitDisplayStart :
				iInitDisplayStart >= oSettings.fnRecordsDisplay() ?
					0 :
					iInitDisplayStart;
	
			oSettings.iInitDisplayStart = -1;
		}
	
		var iDisplayStart = oSettings._iDisplayStart;
		var iDisplayEnd = oSettings.fnDisplayEnd();
	
		/* Server-side processing draw intercept */
		if ( oSettings.bDeferLoading )
		{
			oSettings.bDeferLoading = false;
			oSettings.iDraw++;
			_fnProcessingDisplay( oSettings, false );
		}
		else if ( !bServerSide )
		{
			oSettings.iDraw++;
		}
		else if ( !oSettings.bDestroying && !_fnAjaxUpdate( oSettings ) )
		{
			return;
		}
	
		if ( aiDisplay.length !== 0 )
		{
			var iStart = bServerSide ? 0 : iDisplayStart;
			var iEnd = bServerSide ? oSettings.aoData.length : iDisplayEnd;
	
			for ( var j=iStart ; j<iEnd ; j++ )
			{
				var iDataIndex = aiDisplay[j];
				var aoData = oSettings.aoData[ iDataIndex ];
				if ( aoData.nTr === null )
				{
					_fnCreateTr( oSettings, iDataIndex );
				}
	
				var nRow = aoData.nTr;
	
				/* Remove the old striping classes and then add the new one */
				if ( iStripes !== 0 )
				{
					var sStripe = asStripeClasses[ iRowCount % iStripes ];
					if ( aoData._sRowStripe != sStripe )
					{
						$(nRow).removeClass( aoData._sRowStripe ).addClass( sStripe );
						aoData._sRowStripe = sStripe;
					}
				}
	
				// Row callback functions - might want to manipulate the row
				// iRowCount and j are not currently documented. Are they at all
				// useful?
				_fnCallbackFire( oSettings, 'aoRowCallback', null,
					[nRow, aoData._aData, iRowCount, j] );
	
				anRows.push( nRow );
				iRowCount++;
			}
		}
		else
		{
			/* Table is empty - create a row with an empty message in it */
			var sZero = oLang.sZeroRecords;
			if ( oSettings.iDraw == 1 &&  _fnDataSource( oSettings ) == 'ajax' )
			{
				sZero = oLang.sLoadingRecords;
			}
			else if ( oLang.sEmptyTable && oSettings.fnRecordsTotal() === 0 )
			{
				sZero = oLang.sEmptyTable;
			}
	
			anRows[ 0 ] = $( '<tr/>', { 'class': iStripes ? asStripeClasses[0] : '' } )
				.append( $('<td />', {
					'valign':  'top',
					'colSpan': _fnVisbleColumns( oSettings ),
					'class':   oSettings.oClasses.sRowEmpty
				} ).html( sZero ) )[0];
		}
	
		/* Header and footer callbacks */
		_fnCallbackFire( oSettings, 'aoHeaderCallback', 'header', [ $(oSettings.nTHead).children('tr')[0],
			_fnGetDataMaster( oSettings ), iDisplayStart, iDisplayEnd, aiDisplay ] );
	
		_fnCallbackFire( oSettings, 'aoFooterCallback', 'footer', [ $(oSettings.nTFoot).children('tr')[0],
			_fnGetDataMaster( oSettings ), iDisplayStart, iDisplayEnd, aiDisplay ] );
	
		var body = $(oSettings.nTBody);
	
		body.children().detach();
		body.append( $(anRows) );
	
		/* Call all required callback functions for the end of a draw */
		_fnCallbackFire( oSettings, 'aoDrawCallback', 'draw', [oSettings] );
	
		/* Draw is complete, sorting and filtering must be as well */
		oSettings.bSorted = false;
		oSettings.bFiltered = false;
		oSettings.bDrawing = false;
	}
	
	
	/**
	 * Redraw the table - taking account of the various features which are enabled
	 *  @param {object} oSettings dataTables settings object
	 *  @param {boolean} [holdPosition] Keep the current paging position. By default
	 *    the paging is reset to the first page
	 *  @memberof DataTable#oApi
	 */
	function _fnReDraw( settings, holdPosition )
	{
		var
			features = settings.oFeatures,
			sort     = features.bSort,
			filter   = features.bFilter;
	
		if ( sort ) {
			_fnSort( settings );
		}
	
		if ( filter ) {
			_fnFilterComplete( settings, settings.oPreviousSearch );
		}
		else {
			// No filtering, so we want to just use the display master
			settings.aiDisplay = settings.aiDisplayMaster.slice();
		}
	
		if ( holdPosition !== true ) {
			settings._iDisplayStart = 0;
		}
	
		// Let any modules know about the draw hold position state (used by
		// scrolling internally)
		settings._drawHold = holdPosition;
	
		_fnDraw( settings );
	
		settings._drawHold = false;
	}
	
	
	/**
	 * Add the options to the page HTML for the table
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnAddOptionsHtml ( oSettings )
	{
		var classes = oSettings.oClasses;
		var table = $(oSettings.nTable);
		var holding = $('<div/>').insertBefore( table ); // Holding element for speed
		var features = oSettings.oFeatures;
	
		// All DataTables are wrapped in a div
		var insert = $('<div/>', {
			id:      oSettings.sTableId+'_wrapper',
			'class': classes.sWrapper + (oSettings.nTFoot ? '' : ' '+classes.sNoFooter)
		} );
	
		oSettings.nHolding = holding[0];
		oSettings.nTableWrapper = insert[0];
		oSettings.nTableReinsertBefore = oSettings.nTable.nextSibling;
	
		/* Loop over the user set positioning and place the elements as needed */
		var aDom = oSettings.sDom.split('');
		var featureNode, cOption, nNewNode, cNext, sAttr, j;
		for ( var i=0 ; i<aDom.length ; i++ )
		{
			featureNode = null;
			cOption = aDom[i];
	
			if ( cOption == '<' )
			{
				/* New container div */
				nNewNode = $('<div/>')[0];
	
				/* Check to see if we should append an id and/or a class name to the container */
				cNext = aDom[i+1];
				if ( cNext == "'" || cNext == '"' )
				{
					sAttr = "";
					j = 2;
					while ( aDom[i+j] != cNext )
					{
						sAttr += aDom[i+j];
						j++;
					}
	
					/* Replace jQuery UI constants @todo depreciated */
					if ( sAttr == "H" )
					{
						sAttr = classes.sJUIHeader;
					}
					else if ( sAttr == "F" )
					{
						sAttr = classes.sJUIFooter;
					}
	
					/* The attribute can be in the format of "#id.class", "#id" or "class" This logic
					 * breaks the string into parts and applies them as needed
					 */
					if ( sAttr.indexOf('.') != -1 )
					{
						var aSplit = sAttr.split('.');
						nNewNode.id = aSplit[0].substr(1, aSplit[0].length-1);
						nNewNode.className = aSplit[1];
					}
					else if ( sAttr.charAt(0) == "#" )
					{
						nNewNode.id = sAttr.substr(1, sAttr.length-1);
					}
					else
					{
						nNewNode.className = sAttr;
					}
	
					i += j; /* Move along the position array */
				}
	
				insert.append( nNewNode );
				insert = $(nNewNode);
			}
			else if ( cOption == '>' )
			{
				/* End container div */
				insert = insert.parent();
			}
			// @todo Move options into their own plugins?
			else if ( cOption == 'l' && features.bPaginate && features.bLengthChange )
			{
				/* Length */
				featureNode = _fnFeatureHtmlLength( oSettings );
			}
			else if ( cOption == 'f' && features.bFilter )
			{
				/* Filter */
				featureNode = _fnFeatureHtmlFilter( oSettings );
			}
			else if ( cOption == 'r' && features.bProcessing )
			{
				/* pRocessing */
				featureNode = _fnFeatureHtmlProcessing( oSettings );
			}
			else if ( cOption == 't' )
			{
				/* Table */
				featureNode = _fnFeatureHtmlTable( oSettings );
			}
			else if ( cOption ==  'i' && features.bInfo )
			{
				/* Info */
				featureNode = _fnFeatureHtmlInfo( oSettings );
			}
			else if ( cOption == 'p' && features.bPaginate )
			{
				/* Pagination */
				featureNode = _fnFeatureHtmlPaginate( oSettings );
			}
			else if ( DataTable.ext.feature.length !== 0 )
			{
				/* Plug-in features */
				var aoFeatures = DataTable.ext.feature;
				for ( var k=0, kLen=aoFeatures.length ; k<kLen ; k++ )
				{
					if ( cOption == aoFeatures[k].cFeature )
					{
						featureNode = aoFeatures[k].fnInit( oSettings );
						break;
					}
				}
			}
	
			/* Add to the 2D features array */
			if ( featureNode )
			{
				var aanFeatures = oSettings.aanFeatures;
	
				if ( ! aanFeatures[cOption] )
				{
					aanFeatures[cOption] = [];
				}
	
				aanFeatures[cOption].push( featureNode );
				insert.append( featureNode );
			}
		}
	
		/* Built our DOM structure - replace the holding div with what we want */
		holding.replaceWith( insert );
		oSettings.nHolding = null;
	}
	
	
	/**
	 * Use the DOM source to create up an array of header cells. The idea here is to
	 * create a layout grid (array) of rows x columns, which contains a reference
	 * to the cell that that point in the grid (regardless of col/rowspan), such that
	 * any column / row could be removed and the new grid constructed
	 *  @param array {object} aLayout Array to store the calculated layout in
	 *  @param {node} nThead The header/footer element for the table
	 *  @memberof DataTable#oApi
	 */
	function _fnDetectHeader ( aLayout, nThead )
	{
		var nTrs = $(nThead).children('tr');
		var nTr, nCell;
		var i, k, l, iLen, jLen, iColShifted, iColumn, iColspan, iRowspan;
		var bUnique;
		var fnShiftCol = function ( a, i, j ) {
			var k = a[i];
	                while ( k[j] ) {
				j++;
			}
			return j;
		};
	
		aLayout.splice( 0, aLayout.length );
	
		/* We know how many rows there are in the layout - so prep it */
		for ( i=0, iLen=nTrs.length ; i<iLen ; i++ )
		{
			aLayout.push( [] );
		}
	
		/* Calculate a layout array */
		for ( i=0, iLen=nTrs.length ; i<iLen ; i++ )
		{
			nTr = nTrs[i];
			iColumn = 0;
	
			/* For every cell in the row... */
			nCell = nTr.firstChild;
			while ( nCell ) {
				if ( nCell.nodeName.toUpperCase() == "TD" ||
				     nCell.nodeName.toUpperCase() == "TH" )
				{
					/* Get the col and rowspan attributes from the DOM and sanitise them */
					iColspan = nCell.getAttribute('colspan') * 1;
					iRowspan = nCell.getAttribute('rowspan') * 1;
					iColspan = (!iColspan || iColspan===0 || iColspan===1) ? 1 : iColspan;
					iRowspan = (!iRowspan || iRowspan===0 || iRowspan===1) ? 1 : iRowspan;
	
					/* There might be colspan cells already in this row, so shift our target
					 * accordingly
					 */
					iColShifted = fnShiftCol( aLayout, i, iColumn );
	
					/* Cache calculation for unique columns */
					bUnique = iColspan === 1 ? true : false;
	
					/* If there is col / rowspan, copy the information into the layout grid */
					for ( l=0 ; l<iColspan ; l++ )
					{
						for ( k=0 ; k<iRowspan ; k++ )
						{
							aLayout[i+k][iColShifted+l] = {
								"cell": nCell,
								"unique": bUnique
							};
							aLayout[i+k].nTr = nTr;
						}
					}
				}
				nCell = nCell.nextSibling;
			}
		}
	}
	
	
	/**
	 * Get an array of unique th elements, one for each column
	 *  @param {object} oSettings dataTables settings object
	 *  @param {node} nHeader automatically detect the layout from this node - optional
	 *  @param {array} aLayout thead/tfoot layout from _fnDetectHeader - optional
	 *  @returns array {node} aReturn list of unique th's
	 *  @memberof DataTable#oApi
	 */
	function _fnGetUniqueThs ( oSettings, nHeader, aLayout )
	{
		var aReturn = [];
		if ( !aLayout )
		{
			aLayout = oSettings.aoHeader;
			if ( nHeader )
			{
				aLayout = [];
				_fnDetectHeader( aLayout, nHeader );
			}
		}
	
		for ( var i=0, iLen=aLayout.length ; i<iLen ; i++ )
		{
			for ( var j=0, jLen=aLayout[i].length ; j<jLen ; j++ )
			{
				if ( aLayout[i][j].unique &&
					 (!aReturn[j] || !oSettings.bSortCellsTop) )
				{
					aReturn[j] = aLayout[i][j].cell;
				}
			}
		}
	
		return aReturn;
	}
	
	/**
	 * Create an Ajax call based on the table's settings, taking into account that
	 * parameters can have multiple forms, and backwards compatibility.
	 *
	 * @param {object} oSettings dataTables settings object
	 * @param {array} data Data to send to the server, required by
	 *     DataTables - may be augmented by developer callbacks
	 * @param {function} fn Callback function to run when data is obtained
	 */
	function _fnBuildAjax( oSettings, data, fn )
	{
		// Compatibility with 1.9-, allow fnServerData and event to manipulate
		_fnCallbackFire( oSettings, 'aoServerParams', 'serverParams', [data] );
	
		// Convert to object based for 1.10+ if using the old array scheme which can
		// come from server-side processing or serverParams
		if ( data && $.isArray(data) ) {
			var tmp = {};
			var rbracket = /(.*?)\[\]$/;
	
			$.each( data, function (key, val) {
				var match = val.name.match(rbracket);
	
				if ( match ) {
					// Support for arrays
					var name = match[0];
	
					if ( ! tmp[ name ] ) {
						tmp[ name ] = [];
					}
					tmp[ name ].push( val.value );
				}
				else {
					tmp[val.name] = val.value;
				}
			} );
			data = tmp;
		}
	
		var ajaxData;
		var ajax = oSettings.ajax;
		var instance = oSettings.oInstance;
		var callback = function ( json ) {
			_fnCallbackFire( oSettings, null, 'xhr', [oSettings, json, oSettings.jqXHR] );
			fn( json );
		};
	
		if ( $.isPlainObject( ajax ) && ajax.data )
		{
			ajaxData = ajax.data;
	
			var newData = $.isFunction( ajaxData ) ?
				ajaxData( data, oSettings ) :  // fn can manipulate data or return
				ajaxData;                      // an object object or array to merge
	
			// If the function returned something, use that alone
			data = $.isFunction( ajaxData ) && newData ?
				newData :
				$.extend( true, data, newData );
	
			// Remove the data property as we've resolved it already and don't want
			// jQuery to do it again (it is restored at the end of the function)
			delete ajax.data;
		}
	
		var baseAjax = {
			"data": data,
			"success": function (json) {
				var error = json.error || json.sError;
				if ( error ) {
					_fnLog( oSettings, 0, error );
				}
	
				oSettings.json = json;
				callback( json );
			},
			"dataType": "json",
			"cache": false,
			"type": oSettings.sServerMethod,
			"error": function (xhr, error, thrown) {
				var ret = _fnCallbackFire( oSettings, null, 'xhr', [oSettings, null, oSettings.jqXHR] );
	
				if ( $.inArray( true, ret ) === -1 ) {
					if ( error == "parsererror" ) {
						_fnLog( oSettings, 0, 'Invalid JSON response', 1 );
					}
					else if ( xhr.readyState === 4 ) {
						_fnLog( oSettings, 0, 'Ajax error', 7 );
					}
				}
	
				_fnProcessingDisplay( oSettings, false );
			}
		};
	
		// Store the data submitted for the API
		oSettings.oAjaxData = data;
	
		// Allow plug-ins and external processes to modify the data
		_fnCallbackFire( oSettings, null, 'preXhr', [oSettings, data] );
	
		if ( oSettings.fnServerData )
		{
			// DataTables 1.9- compatibility
			oSettings.fnServerData.call( instance,
				oSettings.sAjaxSource,
				$.map( data, function (val, key) { // Need to convert back to 1.9 trad format
					return { name: key, value: val };
				} ),
				callback,
				oSettings
			);
		}
		else if ( oSettings.sAjaxSource || typeof ajax === 'string' )
		{
			// DataTables 1.9- compatibility
			oSettings.jqXHR = $.ajax( $.extend( baseAjax, {
				url: ajax || oSettings.sAjaxSource
			} ) );
		}
		else if ( $.isFunction( ajax ) )
		{
			// Is a function - let the caller define what needs to be done
			oSettings.jqXHR = ajax.call( instance, data, callback, oSettings );
		}
		else
		{
			// Object to extend the base settings
			oSettings.jqXHR = $.ajax( $.extend( baseAjax, ajax ) );
	
			// Restore for next time around
			ajax.data = ajaxData;
		}
	}
	
	
	/**
	 * Update the table using an Ajax call
	 *  @param {object} settings dataTables settings object
	 *  @returns {boolean} Block the table drawing or not
	 *  @memberof DataTable#oApi
	 */
	function _fnAjaxUpdate( settings )
	{
		if ( settings.bAjaxDataGet ) {
			settings.iDraw++;
			_fnProcessingDisplay( settings, true );
	
			_fnBuildAjax(
				settings,
				_fnAjaxParameters( settings ),
				function(json) {
					_fnAjaxUpdateDraw( settings, json );
				}
			);
	
			return false;
		}
		return true;
	}
	
	
	/**
	 * Build up the parameters in an object needed for a server-side processing
	 * request. Note that this is basically done twice, is different ways - a modern
	 * method which is used by default in DataTables 1.10 which uses objects and
	 * arrays, or the 1.9- method with is name / value pairs. 1.9 method is used if
	 * the sAjaxSource option is used in the initialisation, or the legacyAjax
	 * option is set.
	 *  @param {object} oSettings dataTables settings object
	 *  @returns {bool} block the table drawing or not
	 *  @memberof DataTable#oApi
	 */
	function _fnAjaxParameters( settings )
	{
		var
			columns = settings.aoColumns,
			columnCount = columns.length,
			features = settings.oFeatures,
			preSearch = settings.oPreviousSearch,
			preColSearch = settings.aoPreSearchCols,
			i, data = [], dataProp, column, columnSearch,
			sort = _fnSortFlatten( settings ),
			displayStart = settings._iDisplayStart,
			displayLength = features.bPaginate !== false ?
				settings._iDisplayLength :
				-1;
	
		var param = function ( name, value ) {
			data.push( { 'name': name, 'value': value } );
		};
	
		// DataTables 1.9- compatible method
		param( 'sEcho',          settings.iDraw );
		param( 'iColumns',       columnCount );
		param( 'sColumns',       _pluck( columns, 'sName' ).join(',') );
		param( 'iDisplayStart',  displayStart );
		param( 'iDisplayLength', displayLength );
	
		// DataTables 1.10+ method
		var d = {
			draw:    settings.iDraw,
			columns: [],
			order:   [],
			start:   displayStart,
			length:  displayLength,
			search:  {
				value: preSearch.sSearch,
				regex: preSearch.bRegex
			}
		};
	
		for ( i=0 ; i<columnCount ; i++ ) {
			column = columns[i];
			columnSearch = preColSearch[i];
			dataProp = typeof column.mData=="function" ? 'function' : column.mData ;
	
			d.columns.push( {
				data:       dataProp,
				name:       column.sName,
				searchable: column.bSearchable,
				orderable:  column.bSortable,
				search:     {
					value: columnSearch.sSearch,
					regex: columnSearch.bRegex
				}
			} );
	
			param( "mDataProp_"+i, dataProp );
	
			if ( features.bFilter ) {
				param( 'sSearch_'+i,     columnSearch.sSearch );
				param( 'bRegex_'+i,      columnSearch.bRegex );
				param( 'bSearchable_'+i, column.bSearchable );
			}
	
			if ( features.bSort ) {
				param( 'bSortable_'+i, column.bSortable );
			}
		}
	
		if ( features.bFilter ) {
			param( 'sSearch', preSearch.sSearch );
			param( 'bRegex', preSearch.bRegex );
		}
	
		if ( features.bSort ) {
			$.each( sort, function ( i, val ) {
				d.order.push( { column: val.col, dir: val.dir } );
	
				param( 'iSortCol_'+i, val.col );
				param( 'sSortDir_'+i, val.dir );
			} );
	
			param( 'iSortingCols', sort.length );
		}
	
		// If the legacy.ajax parameter is null, then we automatically decide which
		// form to use, based on sAjaxSource
		var legacy = DataTable.ext.legacy.ajax;
		if ( legacy === null ) {
			return settings.sAjaxSource ? data : d;
		}
	
		// Otherwise, if legacy has been specified then we use that to decide on the
		// form
		return legacy ? data : d;
	}
	
	
	/**
	 * Data the data from the server (nuking the old) and redraw the table
	 *  @param {object} oSettings dataTables settings object
	 *  @param {object} json json data return from the server.
	 *  @param {string} json.sEcho Tracking flag for DataTables to match requests
	 *  @param {int} json.iTotalRecords Number of records in the data set, not accounting for filtering
	 *  @param {int} json.iTotalDisplayRecords Number of records in the data set, accounting for filtering
	 *  @param {array} json.aaData The data to display on this page
	 *  @param {string} [json.sColumns] Column ordering (sName, comma separated)
	 *  @memberof DataTable#oApi
	 */
	function _fnAjaxUpdateDraw ( settings, json )
	{
		// v1.10 uses camelCase variables, while 1.9 uses Hungarian notation.
		// Support both
		var compat = function ( old, modern ) {
			return json[old] !== undefined ? json[old] : json[modern];
		};
	
		var data = _fnAjaxDataSrc( settings, json );
		var draw            = compat( 'sEcho',                'draw' );
		var recordsTotal    = compat( 'iTotalRecords',        'recordsTotal' );
		var recordsFiltered = compat( 'iTotalDisplayRecords', 'recordsFiltered' );
	
		if ( draw ) {
			// Protect against out of sequence returns
			if ( draw*1 < settings.iDraw ) {
				return;
			}
			settings.iDraw = draw * 1;
		}
	
		_fnClearTable( settings );
		settings._iRecordsTotal   = parseInt(recordsTotal, 10);
		settings._iRecordsDisplay = parseInt(recordsFiltered, 10);
	
		for ( var i=0, ien=data.length ; i<ien ; i++ ) {
			_fnAddData( settings, data[i] );
		}
		settings.aiDisplay = settings.aiDisplayMaster.slice();
	
		settings.bAjaxDataGet = false;
		_fnDraw( settings );
	
		if ( ! settings._bInitComplete ) {
			_fnInitComplete( settings, json );
		}
	
		settings.bAjaxDataGet = true;
		_fnProcessingDisplay( settings, false );
	}
	
	
	/**
	 * Get the data from the JSON data source to use for drawing a table. Using
	 * `_fnGetObjectDataFn` allows the data to be sourced from a property of the
	 * source object, or from a processing function.
	 *  @param {object} oSettings dataTables settings object
	 *  @param  {object} json Data source object / array from the server
	 *  @return {array} Array of data to use
	 */
	function _fnAjaxDataSrc ( oSettings, json )
	{
		var dataSrc = $.isPlainObject( oSettings.ajax ) && oSettings.ajax.dataSrc !== undefined ?
			oSettings.ajax.dataSrc :
			oSettings.sAjaxDataProp; // Compatibility with 1.9-.
	
		// Compatibility with 1.9-. In order to read from aaData, check if the
		// default has been changed, if not, check for aaData
		if ( dataSrc === 'data' ) {
			return json.aaData || json[dataSrc];
		}
	
		return dataSrc !== "" ?
			_fnGetObjectDataFn( dataSrc )( json ) :
			json;
	}
	
	/**
	 * Generate the node required for filtering text
	 *  @returns {node} Filter control element
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnFeatureHtmlFilter ( settings )
	{
		var classes = settings.oClasses;
		var tableId = settings.sTableId;
		var language = settings.oLanguage;
		var previousSearch = settings.oPreviousSearch;
		var features = settings.aanFeatures;
		var input = '<input type="search" class="'+classes.sFilterInput+'"/>';
	
		var str = language.sSearch;
		str = str.match(/_INPUT_/) ?
			str.replace('_INPUT_', input) :
			str+input;
	
		var filter = $('<div/>', {
				'id': ! features.f ? tableId+'_filter' : null,
				'class': classes.sFilter
			} )
			.append( $('<label/>' ).append( str ) );
	
		var searchFn = function() {
			/* Update all other filter input elements for the new display */
			var n = features.f;
			var val = !this.value ? "" : this.value; // mental IE8 fix :-(
	
			/* Now do the filter */
			if ( val != previousSearch.sSearch ) {
				_fnFilterComplete( settings, {
					"sSearch": val,
					"bRegex": previousSearch.bRegex,
					"bSmart": previousSearch.bSmart ,
					"bCaseInsensitive": previousSearch.bCaseInsensitive
				} );
	
				// Need to redraw, without resorting
				settings._iDisplayStart = 0;
				_fnDraw( settings );
			}
		};
	
		var searchDelay = settings.searchDelay !== null ?
			settings.searchDelay :
			_fnDataSource( settings ) === 'ssp' ?
				400 :
				0;
	
		var jqFilter = $('input', filter)
			.val( previousSearch.sSearch )
			.attr( 'placeholder', language.sSearchPlaceholder )
			.on(
				'keyup.DT search.DT input.DT paste.DT cut.DT',
				searchDelay ?
					_fnThrottle( searchFn, searchDelay ) :
					searchFn
			)
			.on( 'keypress.DT', function(e) {
				/* Prevent form submission */
				if ( e.keyCode == 13 ) {
					return false;
				}
			} )
			.attr('aria-controls', tableId);
	
		// Update the input elements whenever the table is filtered
		$(settings.nTable).on( 'search.dt.DT', function ( ev, s ) {
			if ( settings === s ) {
				// IE9 throws an 'unknown error' if document.activeElement is used
				// inside an iframe or frame...
				try {
					if ( jqFilter[0] !== document.activeElement ) {
						jqFilter.val( previousSearch.sSearch );
					}
				}
				catch ( e ) {}
			}
		} );
	
		return filter[0];
	}
	
	
	/**
	 * Filter the table using both the global filter and column based filtering
	 *  @param {object} oSettings dataTables settings object
	 *  @param {object} oSearch search information
	 *  @param {int} [iForce] force a research of the master array (1) or not (undefined or 0)
	 *  @memberof DataTable#oApi
	 */
	function _fnFilterComplete ( oSettings, oInput, iForce )
	{
		var oPrevSearch = oSettings.oPreviousSearch;
		var aoPrevSearch = oSettings.aoPreSearchCols;
		var fnSaveFilter = function ( oFilter ) {
			/* Save the filtering values */
			oPrevSearch.sSearch = oFilter.sSearch;
			oPrevSearch.bRegex = oFilter.bRegex;
			oPrevSearch.bSmart = oFilter.bSmart;
			oPrevSearch.bCaseInsensitive = oFilter.bCaseInsensitive;
		};
		var fnRegex = function ( o ) {
			// Backwards compatibility with the bEscapeRegex option
			return o.bEscapeRegex !== undefined ? !o.bEscapeRegex : o.bRegex;
		};
	
		// Resolve any column types that are unknown due to addition or invalidation
		// @todo As per sort - can this be moved into an event handler?
		_fnColumnTypes( oSettings );
	
		/* In server-side processing all filtering is done by the server, so no point hanging around here */
		if ( _fnDataSource( oSettings ) != 'ssp' )
		{
			/* Global filter */
			_fnFilter( oSettings, oInput.sSearch, iForce, fnRegex(oInput), oInput.bSmart, oInput.bCaseInsensitive );
			fnSaveFilter( oInput );
	
			/* Now do the individual column filter */
			for ( var i=0 ; i<aoPrevSearch.length ; i++ )
			{
				_fnFilterColumn( oSettings, aoPrevSearch[i].sSearch, i, fnRegex(aoPrevSearch[i]),
					aoPrevSearch[i].bSmart, aoPrevSearch[i].bCaseInsensitive );
			}
	
			/* Custom filtering */
			_fnFilterCustom( oSettings );
		}
		else
		{
			fnSaveFilter( oInput );
		}
	
		/* Tell the draw function we have been filtering */
		oSettings.bFiltered = true;
		_fnCallbackFire( oSettings, null, 'search', [oSettings] );
	}
	
	
	/**
	 * Apply custom filtering functions
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnFilterCustom( settings )
	{
		var filters = DataTable.ext.search;
		var displayRows = settings.aiDisplay;
		var row, rowIdx;
	
		for ( var i=0, ien=filters.length ; i<ien ; i++ ) {
			var rows = [];
	
			// Loop over each row and see if it should be included
			for ( var j=0, jen=displayRows.length ; j<jen ; j++ ) {
				rowIdx = displayRows[ j ];
				row = settings.aoData[ rowIdx ];
	
				if ( filters[i]( settings, row._aFilterData, rowIdx, row._aData, j ) ) {
					rows.push( rowIdx );
				}
			}
	
			// So the array reference doesn't break set the results into the
			// existing array
			displayRows.length = 0;
			$.merge( displayRows, rows );
		}
	}
	
	
	/**
	 * Filter the table on a per-column basis
	 *  @param {object} oSettings dataTables settings object
	 *  @param {string} sInput string to filter on
	 *  @param {int} iColumn column to filter
	 *  @param {bool} bRegex treat search string as a regular expression or not
	 *  @param {bool} bSmart use smart filtering or not
	 *  @param {bool} bCaseInsensitive Do case insenstive matching or not
	 *  @memberof DataTable#oApi
	 */
	function _fnFilterColumn ( settings, searchStr, colIdx, regex, smart, caseInsensitive )
	{
		if ( searchStr === '' ) {
			return;
		}
	
		var data;
		var out = [];
		var display = settings.aiDisplay;
		var rpSearch = _fnFilterCreateSearch( searchStr, regex, smart, caseInsensitive );
	
		for ( var i=0 ; i<display.length ; i++ ) {
			data = settings.aoData[ display[i] ]._aFilterData[ colIdx ];
	
			if ( rpSearch.test( data ) ) {
				out.push( display[i] );
			}
		}
	
		settings.aiDisplay = out;
	}
	
	
	/**
	 * Filter the data table based on user input and draw the table
	 *  @param {object} settings dataTables settings object
	 *  @param {string} input string to filter on
	 *  @param {int} force optional - force a research of the master array (1) or not (undefined or 0)
	 *  @param {bool} regex treat as a regular expression or not
	 *  @param {bool} smart perform smart filtering or not
	 *  @param {bool} caseInsensitive Do case insenstive matching or not
	 *  @memberof DataTable#oApi
	 */
	function _fnFilter( settings, input, force, regex, smart, caseInsensitive )
	{
		var rpSearch = _fnFilterCreateSearch( input, regex, smart, caseInsensitive );
		var prevSearch = settings.oPreviousSearch.sSearch;
		var displayMaster = settings.aiDisplayMaster;
		var display, invalidated, i;
		var filtered = [];
	
		// Need to take account of custom filtering functions - always filter
		if ( DataTable.ext.search.length !== 0 ) {
			force = true;
		}
	
		// Check if any of the rows were invalidated
		invalidated = _fnFilterData( settings );
	
		// If the input is blank - we just want the full data set
		if ( input.length <= 0 ) {
			settings.aiDisplay = displayMaster.slice();
		}
		else {
			// New search - start from the master array
			if ( invalidated ||
				 force ||
				 prevSearch.length > input.length ||
				 input.indexOf(prevSearch) !== 0 ||
				 settings.bSorted // On resort, the display master needs to be
				                  // re-filtered since indexes will have changed
			) {
				settings.aiDisplay = displayMaster.slice();
			}
	
			// Search the display array
			display = settings.aiDisplay;
	
			for ( i=0 ; i<display.length ; i++ ) {
				if ( rpSearch.test( settings.aoData[ display[i] ]._sFilterRow ) ) {
					filtered.push( display[i] );
				}
			}
	
			settings.aiDisplay = filtered;
		}
	}
	
	
	/**
	 * Build a regular expression object suitable for searching a table
	 *  @param {string} sSearch string to search for
	 *  @param {bool} bRegex treat as a regular expression or not
	 *  @param {bool} bSmart perform smart filtering or not
	 *  @param {bool} bCaseInsensitive Do case insensitive matching or not
	 *  @returns {RegExp} constructed object
	 *  @memberof DataTable#oApi
	 */
	function _fnFilterCreateSearch( search, regex, smart, caseInsensitive )
	{
		search = regex ?
			search :
			_fnEscapeRegex( search );
		
		if ( smart ) {
			/* For smart filtering we want to allow the search to work regardless of
			 * word order. We also want double quoted text to be preserved, so word
			 * order is important - a la google. So this is what we want to
			 * generate:
			 * 
			 * ^(?=.*?\bone\b)(?=.*?\btwo three\b)(?=.*?\bfour\b).*$
			 */
			var a = $.map( search.match( /"[^"]+"|[^ ]+/g ) || [''], function ( word ) {
				if ( word.charAt(0) === '"' ) {
					var m = word.match( /^"(.*)"$/ );
					word = m ? m[1] : word;
				}
	
				return word.replace('"', '');
			} );
	
			search = '^(?=.*?'+a.join( ')(?=.*?' )+').*$';
		}
	
		return new RegExp( search, caseInsensitive ? 'i' : '' );
	}
	
	
	/**
	 * Escape a string such that it can be used in a regular expression
	 *  @param {string} sVal string to escape
	 *  @returns {string} escaped string
	 *  @memberof DataTable#oApi
	 */
	var _fnEscapeRegex = DataTable.util.escapeRegex;
	
	var __filter_div = $('<div>')[0];
	var __filter_div_textContent = __filter_div.textContent !== undefined;
	
	// Update the filtering data for each row if needed (by invalidation or first run)
	function _fnFilterData ( settings )
	{
		var columns = settings.aoColumns;
		var column;
		var i, j, ien, jen, filterData, cellData, row;
		var fomatters = DataTable.ext.type.search;
		var wasInvalidated = false;
	
		for ( i=0, ien=settings.aoData.length ; i<ien ; i++ ) {
			row = settings.aoData[i];
	
			if ( ! row._aFilterData ) {
				filterData = [];
	
				for ( j=0, jen=columns.length ; j<jen ; j++ ) {
					column = columns[j];
	
					if ( column.bSearchable ) {
						cellData = _fnGetCellData( settings, i, j, 'filter' );
	
						if ( fomatters[ column.sType ] ) {
							cellData = fomatters[ column.sType ]( cellData );
						}
	
						// Search in DataTables 1.10 is string based. In 1.11 this
						// should be altered to also allow strict type checking.
						if ( cellData === null ) {
							cellData = '';
						}
	
						if ( typeof cellData !== 'string' && cellData.toString ) {
							cellData = cellData.toString();
						}
					}
					else {
						cellData = '';
					}
	
					// If it looks like there is an HTML entity in the string,
					// attempt to decode it so sorting works as expected. Note that
					// we could use a single line of jQuery to do this, but the DOM
					// method used here is much faster http://jsperf.com/html-decode
					if ( cellData.indexOf && cellData.indexOf('&') !== -1 ) {
						__filter_div.innerHTML = cellData;
						cellData = __filter_div_textContent ?
							__filter_div.textContent :
							__filter_div.innerText;
					}
	
					if ( cellData.replace ) {
						cellData = cellData.replace(/[\r\n]/g, '');
					}
	
					filterData.push( cellData );
				}
	
				row._aFilterData = filterData;
				row._sFilterRow = filterData.join('  ');
				wasInvalidated = true;
			}
		}
	
		return wasInvalidated;
	}
	
	
	/**
	 * Convert from the internal Hungarian notation to camelCase for external
	 * interaction
	 *  @param {object} obj Object to convert
	 *  @returns {object} Inverted object
	 *  @memberof DataTable#oApi
	 */
	function _fnSearchToCamel ( obj )
	{
		return {
			search:          obj.sSearch,
			smart:           obj.bSmart,
			regex:           obj.bRegex,
			caseInsensitive: obj.bCaseInsensitive
		};
	}
	
	
	
	/**
	 * Convert from camelCase notation to the internal Hungarian. We could use the
	 * Hungarian convert function here, but this is cleaner
	 *  @param {object} obj Object to convert
	 *  @returns {object} Inverted object
	 *  @memberof DataTable#oApi
	 */
	function _fnSearchToHung ( obj )
	{
		return {
			sSearch:          obj.search,
			bSmart:           obj.smart,
			bRegex:           obj.regex,
			bCaseInsensitive: obj.caseInsensitive
		};
	}
	
	/**
	 * Generate the node required for the info display
	 *  @param {object} oSettings dataTables settings object
	 *  @returns {node} Information element
	 *  @memberof DataTable#oApi
	 */
	function _fnFeatureHtmlInfo ( settings )
	{
		var
			tid = settings.sTableId,
			nodes = settings.aanFeatures.i,
			n = $('<div/>', {
				'class': settings.oClasses.sInfo,
				'id': ! nodes ? tid+'_info' : null
			} );
	
		if ( ! nodes ) {
			// Update display on each draw
			settings.aoDrawCallback.push( {
				"fn": _fnUpdateInfo,
				"sName": "information"
			} );
	
			n
				.attr( 'role', 'status' )
				.attr( 'aria-live', 'polite' );
	
			// Table is described by our info div
			$(settings.nTable).attr( 'aria-describedby', tid+'_info' );
		}
	
		return n[0];
	}
	
	
	/**
	 * Update the information elements in the display
	 *  @param {object} settings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnUpdateInfo ( settings )
	{
		/* Show information about the table */
		var nodes = settings.aanFeatures.i;
		if ( nodes.length === 0 ) {
			return;
		}
	
		var
			lang  = settings.oLanguage,
			start = settings._iDisplayStart+1,
			end   = settings.fnDisplayEnd(),
			max   = settings.fnRecordsTotal(),
			total = settings.fnRecordsDisplay(),
			out   = total ?
				lang.sInfo :
				lang.sInfoEmpty;
	
		if ( total !== max ) {
			/* Record set after filtering */
			out += ' ' + lang.sInfoFiltered;
		}
	
		// Convert the macros
		out += lang.sInfoPostFix;
		out = _fnInfoMacros( settings, out );
	
		var callback = lang.fnInfoCallback;
		if ( callback !== null ) {
			out = callback.call( settings.oInstance,
				settings, start, end, max, total, out
			);
		}
	
		$(nodes).html( out );
	}
	
	
	function _fnInfoMacros ( settings, str )
	{
		// When infinite scrolling, we are always starting at 1. _iDisplayStart is used only
		// internally
		var
			formatter  = settings.fnFormatNumber,
			start      = settings._iDisplayStart+1,
			len        = settings._iDisplayLength,
			vis        = settings.fnRecordsDisplay(),
			all        = len === -1;
	
		return str.
			replace(/_START_/g, formatter.call( settings, start ) ).
			replace(/_END_/g,   formatter.call( settings, settings.fnDisplayEnd() ) ).
			replace(/_MAX_/g,   formatter.call( settings, settings.fnRecordsTotal() ) ).
			replace(/_TOTAL_/g, formatter.call( settings, vis ) ).
			replace(/_PAGE_/g,  formatter.call( settings, all ? 1 : Math.ceil( start / len ) ) ).
			replace(/_PAGES_/g, formatter.call( settings, all ? 1 : Math.ceil( vis / len ) ) );
	}
	
	
	
	/**
	 * Draw the table for the first time, adding all required features
	 *  @param {object} settings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnInitialise ( settings )
	{
		var i, iLen, iAjaxStart=settings.iInitDisplayStart;
		var columns = settings.aoColumns, column;
		var features = settings.oFeatures;
		var deferLoading = settings.bDeferLoading; // value modified by the draw
	
		/* Ensure that the table data is fully initialised */
		if ( ! settings.bInitialised ) {
			setTimeout( function(){ _fnInitialise( settings ); }, 200 );
			return;
		}
	
		/* Show the display HTML options */
		_fnAddOptionsHtml( settings );
	
		/* Build and draw the header / footer for the table */
		_fnBuildHead( settings );
		_fnDrawHead( settings, settings.aoHeader );
		_fnDrawHead( settings, settings.aoFooter );
	
		/* Okay to show that something is going on now */
		_fnProcessingDisplay( settings, true );
	
		/* Calculate sizes for columns */
		if ( features.bAutoWidth ) {
			_fnCalculateColumnWidths( settings );
		}
	
		for ( i=0, iLen=columns.length ; i<iLen ; i++ ) {
			column = columns[i];
	
			if ( column.sWidth ) {
				column.nTh.style.width = _fnStringToCss( column.sWidth );
			}
		}
	
		_fnCallbackFire( settings, null, 'preInit', [settings] );
	
		// If there is default sorting required - let's do it. The sort function
		// will do the drawing for us. Otherwise we draw the table regardless of the
		// Ajax source - this allows the table to look initialised for Ajax sourcing
		// data (show 'loading' message possibly)
		_fnReDraw( settings );
	
		// Server-side processing init complete is done by _fnAjaxUpdateDraw
		var dataSrc = _fnDataSource( settings );
		if ( dataSrc != 'ssp' || deferLoading ) {
			// if there is an ajax source load the data
			if ( dataSrc == 'ajax' ) {
				_fnBuildAjax( settings, [], function(json) {
					var aData = _fnAjaxDataSrc( settings, json );
	
					// Got the data - add it to the table
					for ( i=0 ; i<aData.length ; i++ ) {
						_fnAddData( settings, aData[i] );
					}
	
					// Reset the init display for cookie saving. We've already done
					// a filter, and therefore cleared it before. So we need to make
					// it appear 'fresh'
					settings.iInitDisplayStart = iAjaxStart;
	
					_fnReDraw( settings );
	
					_fnProcessingDisplay( settings, false );
					_fnInitComplete( settings, json );
				}, settings );
			}
			else {
				_fnProcessingDisplay( settings, false );
				_fnInitComplete( settings );
			}
		}
	}
	
	
	/**
	 * Draw the table for the first time, adding all required features
	 *  @param {object} oSettings dataTables settings object
	 *  @param {object} [json] JSON from the server that completed the table, if using Ajax source
	 *    with client-side processing (optional)
	 *  @memberof DataTable#oApi
	 */
	function _fnInitComplete ( settings, json )
	{
		settings._bInitComplete = true;
	
		// When data was added after the initialisation (data or Ajax) we need to
		// calculate the column sizing
		if ( json || settings.oInit.aaData ) {
			_fnAdjustColumnSizing( settings );
		}
	
		_fnCallbackFire( settings, null, 'plugin-init', [settings, json] );
		_fnCallbackFire( settings, 'aoInitComplete', 'init', [settings, json] );
	}
	
	
	function _fnLengthChange ( settings, val )
	{
		var len = parseInt( val, 10 );
		settings._iDisplayLength = len;
	
		_fnLengthOverflow( settings );
	
		// Fire length change event
		_fnCallbackFire( settings, null, 'length', [settings, len] );
	}
	
	
	/**
	 * Generate the node required for user display length changing
	 *  @param {object} settings dataTables settings object
	 *  @returns {node} Display length feature node
	 *  @memberof DataTable#oApi
	 */
	function _fnFeatureHtmlLength ( settings )
	{
		var
			classes  = settings.oClasses,
			tableId  = settings.sTableId,
			menu     = settings.aLengthMenu,
			d2       = $.isArray( menu[0] ),
			lengths  = d2 ? menu[0] : menu,
			language = d2 ? menu[1] : menu;
	
		var select = $('<select/>', {
			'name':          tableId+'_length',
			'aria-controls': tableId,
			'class':         classes.sLengthSelect
		} );
	
		for ( var i=0, ien=lengths.length ; i<ien ; i++ ) {
			select[0][ i ] = new Option( language[i], lengths[i] );
		}
	
		var div = $('<div><label/></div>').addClass( classes.sLength );
		if ( ! settings.aanFeatures.l ) {
			div[0].id = tableId+'_length';
		}
	
		div.children().append(
			settings.oLanguage.sLengthMenu.replace( '_MENU_', select[0].outerHTML )
		);
	
		// Can't use `select` variable as user might provide their own and the
		// reference is broken by the use of outerHTML
		$('select', div)
			.val( settings._iDisplayLength )
			.on( 'change.DT', function(e) {
				_fnLengthChange( settings, $(this).val() );
				_fnDraw( settings );
			} );
	
		// Update node value whenever anything changes the table's length
		$(settings.nTable).on( 'length.dt.DT', function (e, s, len) {
			if ( settings === s ) {
				$('select', div).val( len );
			}
		} );
	
		return div[0];
	}
	
	
	
	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * Note that most of the paging logic is done in
	 * DataTable.ext.pager
	 */
	
	/**
	 * Generate the node required for default pagination
	 *  @param {object} oSettings dataTables settings object
	 *  @returns {node} Pagination feature node
	 *  @memberof DataTable#oApi
	 */
	function _fnFeatureHtmlPaginate ( settings )
	{
		var
			type   = settings.sPaginationType,
			plugin = DataTable.ext.pager[ type ],
			modern = typeof plugin === 'function',
			redraw = function( settings ) {
				_fnDraw( settings );
			},
			node = $('<div/>').addClass( settings.oClasses.sPaging + type )[0],
			features = settings.aanFeatures;
	
		if ( ! modern ) {
			plugin.fnInit( settings, node, redraw );
		}
	
		/* Add a draw callback for the pagination on first instance, to update the paging display */
		if ( ! features.p )
		{
			node.id = settings.sTableId+'_paginate';
	
			settings.aoDrawCallback.push( {
				"fn": function( settings ) {
					if ( modern ) {
						var
							start      = settings._iDisplayStart,
							len        = settings._iDisplayLength,
							visRecords = settings.fnRecordsDisplay(),
							all        = len === -1,
							page = all ? 0 : Math.ceil( start / len ),
							pages = all ? 1 : Math.ceil( visRecords / len ),
							buttons = plugin(page, pages),
							i, ien;
	
						for ( i=0, ien=features.p.length ; i<ien ; i++ ) {
							_fnRenderer( settings, 'pageButton' )(
								settings, features.p[i], i, buttons, page, pages
							);
						}
					}
					else {
						plugin.fnUpdate( settings, redraw );
					}
				},
				"sName": "pagination"
			} );
		}
	
		return node;
	}
	
	
	/**
	 * Alter the display settings to change the page
	 *  @param {object} settings DataTables settings object
	 *  @param {string|int} action Paging action to take: "first", "previous",
	 *    "next" or "last" or page number to jump to (integer)
	 *  @param [bool] redraw Automatically draw the update or not
	 *  @returns {bool} true page has changed, false - no change
	 *  @memberof DataTable#oApi
	 */
	function _fnPageChange ( settings, action, redraw )
	{
		var
			start     = settings._iDisplayStart,
			len       = settings._iDisplayLength,
			records   = settings.fnRecordsDisplay();
	
		if ( records === 0 || len === -1 )
		{
			start = 0;
		}
		else if ( typeof action === "number" )
		{
			start = action * len;
	
			if ( start > records )
			{
				start = 0;
			}
		}
		else if ( action == "first" )
		{
			start = 0;
		}
		else if ( action == "previous" )
		{
			start = len >= 0 ?
				start - len :
				0;
	
			if ( start < 0 )
			{
			  start = 0;
			}
		}
		else if ( action == "next" )
		{
			if ( start + len < records )
			{
				start += len;
			}
		}
		else if ( action == "last" )
		{
			start = Math.floor( (records-1) / len) * len;
		}
		else
		{
			_fnLog( settings, 0, "Unknown paging action: "+action, 5 );
		}
	
		var changed = settings._iDisplayStart !== start;
		settings._iDisplayStart = start;
	
		if ( changed ) {
			_fnCallbackFire( settings, null, 'page', [settings] );
	
			if ( redraw ) {
				_fnDraw( settings );
			}
		}
	
		return changed;
	}
	
	
	
	/**
	 * Generate the node required for the processing node
	 *  @param {object} settings dataTables settings object
	 *  @returns {node} Processing element
	 *  @memberof DataTable#oApi
	 */
	function _fnFeatureHtmlProcessing ( settings )
	{
		return $('<div/>', {
				'id': ! settings.aanFeatures.r ? settings.sTableId+'_processing' : null,
				'class': settings.oClasses.sProcessing
			} )
			.html( settings.oLanguage.sProcessing )
			.insertBefore( settings.nTable )[0];
	}
	
	
	/**
	 * Display or hide the processing indicator
	 *  @param {object} settings dataTables settings object
	 *  @param {bool} show Show the processing indicator (true) or not (false)
	 *  @memberof DataTable#oApi
	 */
	function _fnProcessingDisplay ( settings, show )
	{
		if ( settings.oFeatures.bProcessing ) {
			$(settings.aanFeatures.r).css( 'display', show ? 'block' : 'none' );
		}
	
		_fnCallbackFire( settings, null, 'processing', [settings, show] );
	}
	
	/**
	 * Add any control elements for the table - specifically scrolling
	 *  @param {object} settings dataTables settings object
	 *  @returns {node} Node to add to the DOM
	 *  @memberof DataTable#oApi
	 */
	function _fnFeatureHtmlTable ( settings )
	{
		var table = $(settings.nTable);
	
		// Add the ARIA grid role to the table
		table.attr( 'role', 'grid' );
	
		// Scrolling from here on in
		var scroll = settings.oScroll;
	
		if ( scroll.sX === '' && scroll.sY === '' ) {
			return settings.nTable;
		}
	
		var scrollX = scroll.sX;
		var scrollY = scroll.sY;
		var classes = settings.oClasses;
		var caption = table.children('caption');
		var captionSide = caption.length ? caption[0]._captionSide : null;
		var headerClone = $( table[0].cloneNode(false) );
		var footerClone = $( table[0].cloneNode(false) );
		var footer = table.children('tfoot');
		var _div = '<div/>';
		var size = function ( s ) {
			return !s ? null : _fnStringToCss( s );
		};
	
		if ( ! footer.length ) {
			footer = null;
		}
	
		/*
		 * The HTML structure that we want to generate in this function is:
		 *  div - scroller
		 *    div - scroll head
		 *      div - scroll head inner
		 *        table - scroll head table
		 *          thead - thead
		 *    div - scroll body
		 *      table - table (master table)
		 *        thead - thead clone for sizing
		 *        tbody - tbody
		 *    div - scroll foot
		 *      div - scroll foot inner
		 *        table - scroll foot table
		 *          tfoot - tfoot
		 */
		var scroller = $( _div, { 'class': classes.sScrollWrapper } )
			.append(
				$(_div, { 'class': classes.sScrollHead } )
					.css( {
						overflow: 'hidden',
						position: 'relative',
						border: 0,
						width: scrollX ? size(scrollX) : '100%'
					} )
					.append(
						$(_div, { 'class': classes.sScrollHeadInner } )
							.css( {
								'box-sizing': 'content-box',
								width: scroll.sXInner || '100%'
							} )
							.append(
								headerClone
									.removeAttr('id')
									.css( 'margin-left', 0 )
									.append( captionSide === 'top' ? caption : null )
									.append(
										table.children('thead')
									)
							)
					)
			)
			.append(
				$(_div, { 'class': classes.sScrollBody } )
					.css( {
						position: 'relative',
						overflow: 'auto',
						width: size( scrollX )
					} )
					.append( table )
			);
	
		if ( footer ) {
			scroller.append(
				$(_div, { 'class': classes.sScrollFoot } )
					.css( {
						overflow: 'hidden',
						border: 0,
						width: scrollX ? size(scrollX) : '100%'
					} )
					.append(
						$(_div, { 'class': classes.sScrollFootInner } )
							.append(
								footerClone
									.removeAttr('id')
									.css( 'margin-left', 0 )
									.append( captionSide === 'bottom' ? caption : null )
									.append(
										table.children('tfoot')
									)
							)
					)
			);
		}
	
		var children = scroller.children();
		var scrollHead = children[0];
		var scrollBody = children[1];
		var scrollFoot = footer ? children[2] : null;
	
		// When the body is scrolled, then we also want to scroll the headers
		if ( scrollX ) {
			$(scrollBody).on( 'scroll.DT', function (e) {
				var scrollLeft = this.scrollLeft;
	
				scrollHead.scrollLeft = scrollLeft;
	
				if ( footer ) {
					scrollFoot.scrollLeft = scrollLeft;
				}
			} );
		}
	
		$(scrollBody).css(
			scrollY && scroll.bCollapse ? 'max-height' : 'height', 
			scrollY
		);
	
		settings.nScrollHead = scrollHead;
		settings.nScrollBody = scrollBody;
		settings.nScrollFoot = scrollFoot;
	
		// On redraw - align columns
		settings.aoDrawCallback.push( {
			"fn": _fnScrollDraw,
			"sName": "scrolling"
		} );
	
		return scroller[0];
	}
	
	
	
	/**
	 * Update the header, footer and body tables for resizing - i.e. column
	 * alignment.
	 *
	 * Welcome to the most horrible function DataTables. The process that this
	 * function follows is basically:
	 *   1. Re-create the table inside the scrolling div
	 *   2. Take live measurements from the DOM
	 *   3. Apply the measurements to align the columns
	 *   4. Clean up
	 *
	 *  @param {object} settings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnScrollDraw ( settings )
	{
		// Given that this is such a monster function, a lot of variables are use
		// to try and keep the minimised size as small as possible
		var
			scroll         = settings.oScroll,
			scrollX        = scroll.sX,
			scrollXInner   = scroll.sXInner,
			scrollY        = scroll.sY,
			barWidth       = scroll.iBarWidth,
			divHeader      = $(settings.nScrollHead),
			divHeaderStyle = divHeader[0].style,
			divHeaderInner = divHeader.children('div'),
			divHeaderInnerStyle = divHeaderInner[0].style,
			divHeaderTable = divHeaderInner.children('table'),
			divBodyEl      = settings.nScrollBody,
			divBody        = $(divBodyEl),
			divBodyStyle   = divBodyEl.style,
			divFooter      = $(settings.nScrollFoot),
			divFooterInner = divFooter.children('div'),
			divFooterTable = divFooterInner.children('table'),
			header         = $(settings.nTHead),
			table          = $(settings.nTable),
			tableEl        = table[0],
			tableStyle     = tableEl.style,
			footer         = settings.nTFoot ? $(settings.nTFoot) : null,
			browser        = settings.oBrowser,
			ie67           = browser.bScrollOversize,
			dtHeaderCells  = _pluck( settings.aoColumns, 'nTh' ),
			headerTrgEls, footerTrgEls,
			headerSrcEls, footerSrcEls,
			headerCopy, footerCopy,
			headerWidths=[], footerWidths=[],
			headerContent=[], footerContent=[],
			idx, correction, sanityWidth,
			zeroOut = function(nSizer) {
				var style = nSizer.style;
				style.paddingTop = "0";
				style.paddingBottom = "0";
				style.borderTopWidth = "0";
				style.borderBottomWidth = "0";
				style.height = 0;
			};
	
		// If the scrollbar visibility has changed from the last draw, we need to
		// adjust the column sizes as the table width will have changed to account
		// for the scrollbar
		var scrollBarVis = divBodyEl.scrollHeight > divBodyEl.clientHeight;
		
		if ( settings.scrollBarVis !== scrollBarVis && settings.scrollBarVis !== undefined ) {
			settings.scrollBarVis = scrollBarVis;
			_fnAdjustColumnSizing( settings );
			return; // adjust column sizing will call this function again
		}
		else {
			settings.scrollBarVis = scrollBarVis;
		}
	
		/*
		 * 1. Re-create the table inside the scrolling div
		 */
	
		// Remove the old minimised thead and tfoot elements in the inner table
		table.children('thead, tfoot').remove();
	
		if ( footer ) {
			footerCopy = footer.clone().prependTo( table );
			footerTrgEls = footer.find('tr'); // the original tfoot is in its own table and must be sized
			footerSrcEls = footerCopy.find('tr');
		}
	
		// Clone the current header and footer elements and then place it into the inner table
		headerCopy = header.clone().prependTo( table );
		headerTrgEls = header.find('tr'); // original header is in its own table
		headerSrcEls = headerCopy.find('tr');
		headerCopy.find('th, td').removeAttr('tabindex');
	
	
		/*
		 * 2. Take live measurements from the DOM - do not alter the DOM itself!
		 */
	
		// Remove old sizing and apply the calculated column widths
		// Get the unique column headers in the newly created (cloned) header. We want to apply the
		// calculated sizes to this header
		if ( ! scrollX )
		{
			divBodyStyle.width = '100%';
			divHeader[0].style.width = '100%';
		}
	
		$.each( _fnGetUniqueThs( settings, headerCopy ), function ( i, el ) {
			idx = _fnVisibleToColumnIndex( settings, i );
			el.style.width = settings.aoColumns[idx].sWidth;
		} );
	
		if ( footer ) {
			_fnApplyToChildren( function(n) {
				n.style.width = "";
			}, footerSrcEls );
		}
	
		// Size the table as a whole
		sanityWidth = table.outerWidth();
		if ( scrollX === "" ) {
			// No x scrolling
			tableStyle.width = "100%";
	
			// IE7 will make the width of the table when 100% include the scrollbar
			// - which is shouldn't. When there is a scrollbar we need to take this
			// into account.
			if ( ie67 && (table.find('tbody').height() > divBodyEl.offsetHeight ||
				divBody.css('overflow-y') == "scroll")
			) {
				tableStyle.width = _fnStringToCss( table.outerWidth() - barWidth);
			}
	
			// Recalculate the sanity width
			sanityWidth = table.outerWidth();
		}
		else if ( scrollXInner !== "" ) {
			// legacy x scroll inner has been given - use it
			tableStyle.width = _fnStringToCss(scrollXInner);
	
			// Recalculate the sanity width
			sanityWidth = table.outerWidth();
		}
	
		// Hidden header should have zero height, so remove padding and borders. Then
		// set the width based on the real headers
	
		// Apply all styles in one pass
		_fnApplyToChildren( zeroOut, headerSrcEls );
	
		// Read all widths in next pass
		_fnApplyToChildren( function(nSizer) {
			headerContent.push( nSizer.innerHTML );
			headerWidths.push( _fnStringToCss( $(nSizer).css('width') ) );
		}, headerSrcEls );
	
		// Apply all widths in final pass
		_fnApplyToChildren( function(nToSize, i) {
			// Only apply widths to the DataTables detected header cells - this
			// prevents complex headers from having contradictory sizes applied
			if ( $.inArray( nToSize, dtHeaderCells ) !== -1 ) {
				nToSize.style.width = headerWidths[i];
			}
		}, headerTrgEls );
	
		$(headerSrcEls).height(0);
	
		/* Same again with the footer if we have one */
		if ( footer )
		{
			_fnApplyToChildren( zeroOut, footerSrcEls );
	
			_fnApplyToChildren( function(nSizer) {
				footerContent.push( nSizer.innerHTML );
				footerWidths.push( _fnStringToCss( $(nSizer).css('width') ) );
			}, footerSrcEls );
	
			_fnApplyToChildren( function(nToSize, i) {
				nToSize.style.width = footerWidths[i];
			}, footerTrgEls );
	
			$(footerSrcEls).height(0);
		}
	
	
		/*
		 * 3. Apply the measurements
		 */
	
		// "Hide" the header and footer that we used for the sizing. We need to keep
		// the content of the cell so that the width applied to the header and body
		// both match, but we want to hide it completely. We want to also fix their
		// width to what they currently are
		_fnApplyToChildren( function(nSizer, i) {
			nSizer.innerHTML = '<div class="dataTables_sizing" style="height:0;overflow:hidden;">'+headerContent[i]+'</div>';
			nSizer.style.width = headerWidths[i];
		}, headerSrcEls );
	
		if ( footer )
		{
			_fnApplyToChildren( function(nSizer, i) {
				nSizer.innerHTML = '<div class="dataTables_sizing" style="height:0;overflow:hidden;">'+footerContent[i]+'</div>';
				nSizer.style.width = footerWidths[i];
			}, footerSrcEls );
		}
	
		// Sanity check that the table is of a sensible width. If not then we are going to get
		// misalignment - try to prevent this by not allowing the table to shrink below its min width
		if ( table.outerWidth() < sanityWidth )
		{
			// The min width depends upon if we have a vertical scrollbar visible or not */
			correction = ((divBodyEl.scrollHeight > divBodyEl.offsetHeight ||
				divBody.css('overflow-y') == "scroll")) ?
					sanityWidth+barWidth :
					sanityWidth;
	
			// IE6/7 are a law unto themselves...
			if ( ie67 && (divBodyEl.scrollHeight >
				divBodyEl.offsetHeight || divBody.css('overflow-y') == "scroll")
			) {
				tableStyle.width = _fnStringToCss( correction-barWidth );
			}
	
			// And give the user a warning that we've stopped the table getting too small
			if ( scrollX === "" || scrollXInner !== "" ) {
				_fnLog( settings, 1, 'Possible column misalignment', 6 );
			}
		}
		else
		{
			correction = '100%';
		}
	
		// Apply to the container elements
		divBodyStyle.width = _fnStringToCss( correction );
		divHeaderStyle.width = _fnStringToCss( correction );
	
		if ( footer ) {
			settings.nScrollFoot.style.width = _fnStringToCss( correction );
		}
	
	
		/*
		 * 4. Clean up
		 */
		if ( ! scrollY ) {
			/* IE7< puts a vertical scrollbar in place (when it shouldn't be) due to subtracting
			 * the scrollbar height from the visible display, rather than adding it on. We need to
			 * set the height in order to sort this. Don't want to do it in any other browsers.
			 */
			if ( ie67 ) {
				divBodyStyle.height = _fnStringToCss( tableEl.offsetHeight+barWidth );
			}
		}
	
		/* Finally set the width's of the header and footer tables */
		var iOuterWidth = table.outerWidth();
		divHeaderTable[0].style.width = _fnStringToCss( iOuterWidth );
		divHeaderInnerStyle.width = _fnStringToCss( iOuterWidth );
	
		// Figure out if there are scrollbar present - if so then we need a the header and footer to
		// provide a bit more space to allow "overflow" scrolling (i.e. past the scrollbar)
		var bScrolling = table.height() > divBodyEl.clientHeight || divBody.css('overflow-y') == "scroll";
		var padding = 'padding' + (browser.bScrollbarLeft ? 'Left' : 'Right' );
		divHeaderInnerStyle[ padding ] = bScrolling ? barWidth+"px" : "0px";
	
		if ( footer ) {
			divFooterTable[0].style.width = _fnStringToCss( iOuterWidth );
			divFooterInner[0].style.width = _fnStringToCss( iOuterWidth );
			divFooterInner[0].style[padding] = bScrolling ? barWidth+"px" : "0px";
		}
	
		// Correct DOM ordering for colgroup - comes before the thead
		table.children('colgroup').insertBefore( table.children('thead') );
	
		/* Adjust the position of the header in case we loose the y-scrollbar */
		divBody.scroll();
	
		// If sorting or filtering has occurred, jump the scrolling back to the top
		// only if we aren't holding the position
		if ( (settings.bSorted || settings.bFiltered) && ! settings._drawHold ) {
			divBodyEl.scrollTop = 0;
		}
	}
	
	
	
	/**
	 * Apply a given function to the display child nodes of an element array (typically
	 * TD children of TR rows
	 *  @param {function} fn Method to apply to the objects
	 *  @param array {nodes} an1 List of elements to look through for display children
	 *  @param array {nodes} an2 Another list (identical structure to the first) - optional
	 *  @memberof DataTable#oApi
	 */
	function _fnApplyToChildren( fn, an1, an2 )
	{
		var index=0, i=0, iLen=an1.length;
		var nNode1, nNode2;
	
		while ( i < iLen ) {
			nNode1 = an1[i].firstChild;
			nNode2 = an2 ? an2[i].firstChild : null;
	
			while ( nNode1 ) {
				if ( nNode1.nodeType === 1 ) {
					if ( an2 ) {
						fn( nNode1, nNode2, index );
					}
					else {
						fn( nNode1, index );
					}
	
					index++;
				}
	
				nNode1 = nNode1.nextSibling;
				nNode2 = an2 ? nNode2.nextSibling : null;
			}
	
			i++;
		}
	}
	
	
	
	var __re_html_remove = /<.*?>/g;
	
	
	/**
	 * Calculate the width of columns for the table
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnCalculateColumnWidths ( oSettings )
	{
		var
			table = oSettings.nTable,
			columns = oSettings.aoColumns,
			scroll = oSettings.oScroll,
			scrollY = scroll.sY,
			scrollX = scroll.sX,
			scrollXInner = scroll.sXInner,
			columnCount = columns.length,
			visibleColumns = _fnGetColumns( oSettings, 'bVisible' ),
			headerCells = $('th', oSettings.nTHead),
			tableWidthAttr = table.getAttribute('width'), // from DOM element
			tableContainer = table.parentNode,
			userInputs = false,
			i, column, columnIdx, width, outerWidth,
			browser = oSettings.oBrowser,
			ie67 = browser.bScrollOversize;
	
		var styleWidth = table.style.width;
		if ( styleWidth && styleWidth.indexOf('%') !== -1 ) {
			tableWidthAttr = styleWidth;
		}
	
		/* Convert any user input sizes into pixel sizes */
		for ( i=0 ; i<visibleColumns.length ; i++ ) {
			column = columns[ visibleColumns[i] ];
	
			if ( column.sWidth !== null ) {
				column.sWidth = _fnConvertToWidth( column.sWidthOrig, tableContainer );
	
				userInputs = true;
			}
		}
	
		/* If the number of columns in the DOM equals the number that we have to
		 * process in DataTables, then we can use the offsets that are created by
		 * the web- browser. No custom sizes can be set in order for this to happen,
		 * nor scrolling used
		 */
		if ( ie67 || ! userInputs && ! scrollX && ! scrollY &&
		     columnCount == _fnVisbleColumns( oSettings ) &&
		     columnCount == headerCells.length
		) {
			for ( i=0 ; i<columnCount ; i++ ) {
				var colIdx = _fnVisibleToColumnIndex( oSettings, i );
	
				if ( colIdx !== null ) {
					columns[ colIdx ].sWidth = _fnStringToCss( headerCells.eq(i).width() );
				}
			}
		}
		else
		{
			// Otherwise construct a single row, worst case, table with the widest
			// node in the data, assign any user defined widths, then insert it into
			// the DOM and allow the browser to do all the hard work of calculating
			// table widths
			var tmpTable = $(table).clone() // don't use cloneNode - IE8 will remove events on the main table
				.css( 'visibility', 'hidden' )
				.removeAttr( 'id' );
	
			// Clean up the table body
			tmpTable.find('tbody tr').remove();
			var tr = $('<tr/>').appendTo( tmpTable.find('tbody') );
	
			// Clone the table header and footer - we can't use the header / footer
			// from the cloned table, since if scrolling is active, the table's
			// real header and footer are contained in different table tags
			tmpTable.find('thead, tfoot').remove();
			tmpTable
				.append( $(oSettings.nTHead).clone() )
				.append( $(oSettings.nTFoot).clone() );
	
			// Remove any assigned widths from the footer (from scrolling)
			tmpTable.find('tfoot th, tfoot td').css('width', '');
	
			// Apply custom sizing to the cloned header
			headerCells = _fnGetUniqueThs( oSettings, tmpTable.find('thead')[0] );
	
			for ( i=0 ; i<visibleColumns.length ; i++ ) {
				column = columns[ visibleColumns[i] ];
	
				headerCells[i].style.width = column.sWidthOrig !== null && column.sWidthOrig !== '' ?
					_fnStringToCss( column.sWidthOrig ) :
					'';
	
				// For scrollX we need to force the column width otherwise the
				// browser will collapse it. If this width is smaller than the
				// width the column requires, then it will have no effect
				if ( column.sWidthOrig && scrollX ) {
					$( headerCells[i] ).append( $('<div/>').css( {
						width: column.sWidthOrig,
						margin: 0,
						padding: 0,
						border: 0,
						height: 1
					} ) );
				}
			}
	
			// Find the widest cell for each column and put it into the table
			if ( oSettings.aoData.length ) {
				for ( i=0 ; i<visibleColumns.length ; i++ ) {
					columnIdx = visibleColumns[i];
					column = columns[ columnIdx ];
	
					$( _fnGetWidestNode( oSettings, columnIdx ) )
						.clone( false )
						.append( column.sContentPadding )
						.appendTo( tr );
				}
			}
	
			// Tidy the temporary table - remove name attributes so there aren't
			// duplicated in the dom (radio elements for example)
			$('[name]', tmpTable).removeAttr('name');
	
			// Table has been built, attach to the document so we can work with it.
			// A holding element is used, positioned at the top of the container
			// with minimal height, so it has no effect on if the container scrolls
			// or not. Otherwise it might trigger scrolling when it actually isn't
			// needed
			var holder = $('<div/>').css( scrollX || scrollY ?
					{
						position: 'absolute',
						top: 0,
						left: 0,
						height: 1,
						right: 0,
						overflow: 'hidden'
					} :
					{}
				)
				.append( tmpTable )
				.appendTo( tableContainer );
	
			// When scrolling (X or Y) we want to set the width of the table as 
			// appropriate. However, when not scrolling leave the table width as it
			// is. This results in slightly different, but I think correct behaviour
			if ( scrollX && scrollXInner ) {
				tmpTable.width( scrollXInner );
			}
			else if ( scrollX ) {
				tmpTable.css( 'width', 'auto' );
				tmpTable.removeAttr('width');
	
				// If there is no width attribute or style, then allow the table to
				// collapse
				if ( tmpTable.width() < tableContainer.clientWidth && tableWidthAttr ) {
					tmpTable.width( tableContainer.clientWidth );
				}
			}
			else if ( scrollY ) {
				tmpTable.width( tableContainer.clientWidth );
			}
			else if ( tableWidthAttr ) {
				tmpTable.width( tableWidthAttr );
			}
	
			// Get the width of each column in the constructed table - we need to
			// know the inner width (so it can be assigned to the other table's
			// cells) and the outer width so we can calculate the full width of the
			// table. This is safe since DataTables requires a unique cell for each
			// column, but if ever a header can span multiple columns, this will
			// need to be modified.
			var total = 0;
			for ( i=0 ; i<visibleColumns.length ; i++ ) {
				var cell = $(headerCells[i]);
				var border = cell.outerWidth() - cell.width();
	
				// Use getBounding... where possible (not IE8-) because it can give
				// sub-pixel accuracy, which we then want to round up!
				var bounding = browser.bBounding ?
					Math.ceil( headerCells[i].getBoundingClientRect().width ) :
					cell.outerWidth();
	
				// Total is tracked to remove any sub-pixel errors as the outerWidth
				// of the table might not equal the total given here (IE!).
				total += bounding;
	
				// Width for each column to use
				columns[ visibleColumns[i] ].sWidth = _fnStringToCss( bounding - border );
			}
	
			table.style.width = _fnStringToCss( total );
	
			// Finished with the table - ditch it
			holder.remove();
		}
	
		// If there is a width attr, we want to attach an event listener which
		// allows the table sizing to automatically adjust when the window is
		// resized. Use the width attr rather than CSS, since we can't know if the
		// CSS is a relative value or absolute - DOM read is always px.
		if ( tableWidthAttr ) {
			table.style.width = _fnStringToCss( tableWidthAttr );
		}
	
		if ( (tableWidthAttr || scrollX) && ! oSettings._reszEvt ) {
			var bindResize = function () {
				$(window).on('resize.DT-'+oSettings.sInstance, _fnThrottle( function () {
					_fnAdjustColumnSizing( oSettings );
				} ) );
			};
	
			// IE6/7 will crash if we bind a resize event handler on page load.
			// To be removed in 1.11 which drops IE6/7 support
			if ( ie67 ) {
				setTimeout( bindResize, 1000 );
			}
			else {
				bindResize();
			}
	
			oSettings._reszEvt = true;
		}
	}
	
	
	/**
	 * Throttle the calls to a function. Arguments and context are maintained for
	 * the throttled function
	 *  @param {function} fn Function to be called
	 *  @param {int} [freq=200] call frequency in mS
	 *  @returns {function} wrapped function
	 *  @memberof DataTable#oApi
	 */
	var _fnThrottle = DataTable.util.throttle;
	
	
	/**
	 * Convert a CSS unit width to pixels (e.g. 2em)
	 *  @param {string} width width to be converted
	 *  @param {node} parent parent to get the with for (required for relative widths) - optional
	 *  @returns {int} width in pixels
	 *  @memberof DataTable#oApi
	 */
	function _fnConvertToWidth ( width, parent )
	{
		if ( ! width ) {
			return 0;
		}
	
		var n = $('<div/>')
			.css( 'width', _fnStringToCss( width ) )
			.appendTo( parent || document.body );
	
		var val = n[0].offsetWidth;
		n.remove();
	
		return val;
	}
	
	
	/**
	 * Get the widest node
	 *  @param {object} settings dataTables settings object
	 *  @param {int} colIdx column of interest
	 *  @returns {node} widest table node
	 *  @memberof DataTable#oApi
	 */
	function _fnGetWidestNode( settings, colIdx )
	{
		var idx = _fnGetMaxLenString( settings, colIdx );
		if ( idx < 0 ) {
			return null;
		}
	
		var data = settings.aoData[ idx ];
		return ! data.nTr ? // Might not have been created when deferred rendering
			$('<td/>').html( _fnGetCellData( settings, idx, colIdx, 'display' ) )[0] :
			data.anCells[ colIdx ];
	}
	
	
	/**
	 * Get the maximum strlen for each data column
	 *  @param {object} settings dataTables settings object
	 *  @param {int} colIdx column of interest
	 *  @returns {string} max string length for each column
	 *  @memberof DataTable#oApi
	 */
	function _fnGetMaxLenString( settings, colIdx )
	{
		var s, max=-1, maxIdx = -1;
	
		for ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {
			s = _fnGetCellData( settings, i, colIdx, 'display' )+'';
			s = s.replace( __re_html_remove, '' );
			s = s.replace( /&nbsp;/g, ' ' );
	
			if ( s.length > max ) {
				max = s.length;
				maxIdx = i;
			}
		}
	
		return maxIdx;
	}
	
	
	/**
	 * Append a CSS unit (only if required) to a string
	 *  @param {string} value to css-ify
	 *  @returns {string} value with css unit
	 *  @memberof DataTable#oApi
	 */
	function _fnStringToCss( s )
	{
		if ( s === null ) {
			return '0px';
		}
	
		if ( typeof s == 'number' ) {
			return s < 0 ?
				'0px' :
				s+'px';
		}
	
		// Check it has a unit character already
		return s.match(/\d$/) ?
			s+'px' :
			s;
	}
	
	
	
	function _fnSortFlatten ( settings )
	{
		var
			i, iLen, k, kLen,
			aSort = [],
			aiOrig = [],
			aoColumns = settings.aoColumns,
			aDataSort, iCol, sType, srcCol,
			fixed = settings.aaSortingFixed,
			fixedObj = $.isPlainObject( fixed ),
			nestedSort = [],
			add = function ( a ) {
				if ( a.length && ! $.isArray( a[0] ) ) {
					// 1D array
					nestedSort.push( a );
				}
				else {
					// 2D array
					$.merge( nestedSort, a );
				}
			};
	
		// Build the sort array, with pre-fix and post-fix options if they have been
		// specified
		if ( $.isArray( fixed ) ) {
			add( fixed );
		}
	
		if ( fixedObj && fixed.pre ) {
			add( fixed.pre );
		}
	
		add( settings.aaSorting );
	
		if (fixedObj && fixed.post ) {
			add( fixed.post );
		}
	
		for ( i=0 ; i<nestedSort.length ; i++ )
		{
			srcCol = nestedSort[i][0];
			aDataSort = aoColumns[ srcCol ].aDataSort;
	
			for ( k=0, kLen=aDataSort.length ; k<kLen ; k++ )
			{
				iCol = aDataSort[k];
				sType = aoColumns[ iCol ].sType || 'string';
	
				if ( nestedSort[i]._idx === undefined ) {
					nestedSort[i]._idx = $.inArray( nestedSort[i][1], aoColumns[iCol].asSorting );
				}
	
				aSort.push( {
					src:       srcCol,
					col:       iCol,
					dir:       nestedSort[i][1],
					index:     nestedSort[i]._idx,
					type:      sType,
					formatter: DataTable.ext.type.order[ sType+"-pre" ]
				} );
			}
		}
	
		return aSort;
	}
	
	/**
	 * Change the order of the table
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 *  @todo This really needs split up!
	 */
	function _fnSort ( oSettings )
	{
		var
			i, ien, iLen, j, jLen, k, kLen,
			sDataType, nTh,
			aiOrig = [],
			oExtSort = DataTable.ext.type.order,
			aoData = oSettings.aoData,
			aoColumns = oSettings.aoColumns,
			aDataSort, data, iCol, sType, oSort,
			formatters = 0,
			sortCol,
			displayMaster = oSettings.aiDisplayMaster,
			aSort;
	
		// Resolve any column types that are unknown due to addition or invalidation
		// @todo Can this be moved into a 'data-ready' handler which is called when
		//   data is going to be used in the table?
		_fnColumnTypes( oSettings );
	
		aSort = _fnSortFlatten( oSettings );
	
		for ( i=0, ien=aSort.length ; i<ien ; i++ ) {
			sortCol = aSort[i];
	
			// Track if we can use the fast sort algorithm
			if ( sortCol.formatter ) {
				formatters++;
			}
	
			// Load the data needed for the sort, for each cell
			_fnSortData( oSettings, sortCol.col );
		}
	
		/* No sorting required if server-side or no sorting array */
		if ( _fnDataSource( oSettings ) != 'ssp' && aSort.length !== 0 )
		{
			// Create a value - key array of the current row positions such that we can use their
			// current position during the sort, if values match, in order to perform stable sorting
			for ( i=0, iLen=displayMaster.length ; i<iLen ; i++ ) {
				aiOrig[ displayMaster[i] ] = i;
			}
	
			/* Do the sort - here we want multi-column sorting based on a given data source (column)
			 * and sorting function (from oSort) in a certain direction. It's reasonably complex to
			 * follow on it's own, but this is what we want (example two column sorting):
			 *  fnLocalSorting = function(a,b){
			 *    var iTest;
			 *    iTest = oSort['string-asc']('data11', 'data12');
			 *      if (iTest !== 0)
			 *        return iTest;
			 *    iTest = oSort['numeric-desc']('data21', 'data22');
			 *    if (iTest !== 0)
			 *      return iTest;
			 *    return oSort['numeric-asc']( aiOrig[a], aiOrig[b] );
			 *  }
			 * Basically we have a test for each sorting column, if the data in that column is equal,
			 * test the next column. If all columns match, then we use a numeric sort on the row
			 * positions in the original data array to provide a stable sort.
			 *
			 * Note - I know it seems excessive to have two sorting methods, but the first is around
			 * 15% faster, so the second is only maintained for backwards compatibility with sorting
			 * methods which do not have a pre-sort formatting function.
			 */
			if ( formatters === aSort.length ) {
				// All sort types have formatting functions
				displayMaster.sort( function ( a, b ) {
					var
						x, y, k, test, sort,
						len=aSort.length,
						dataA = aoData[a]._aSortData,
						dataB = aoData[b]._aSortData;
	
					for ( k=0 ; k<len ; k++ ) {
						sort = aSort[k];
	
						x = dataA[ sort.col ];
						y = dataB[ sort.col ];
	
						test = x<y ? -1 : x>y ? 1 : 0;
						if ( test !== 0 ) {
							return sort.dir === 'asc' ? test : -test;
						}
					}
	
					x = aiOrig[a];
					y = aiOrig[b];
					return x<y ? -1 : x>y ? 1 : 0;
				} );
			}
			else {
				// Depreciated - remove in 1.11 (providing a plug-in option)
				// Not all sort types have formatting methods, so we have to call their sorting
				// methods.
				displayMaster.sort( function ( a, b ) {
					var
						x, y, k, l, test, sort, fn,
						len=aSort.length,
						dataA = aoData[a]._aSortData,
						dataB = aoData[b]._aSortData;
	
					for ( k=0 ; k<len ; k++ ) {
						sort = aSort[k];
	
						x = dataA[ sort.col ];
						y = dataB[ sort.col ];
	
						fn = oExtSort[ sort.type+"-"+sort.dir ] || oExtSort[ "string-"+sort.dir ];
						test = fn( x, y );
						if ( test !== 0 ) {
							return test;
						}
					}
	
					x = aiOrig[a];
					y = aiOrig[b];
					return x<y ? -1 : x>y ? 1 : 0;
				} );
			}
		}
	
		/* Tell the draw function that we have sorted the data */
		oSettings.bSorted = true;
	}
	
	
	function _fnSortAria ( settings )
	{
		var label;
		var nextSort;
		var columns = settings.aoColumns;
		var aSort = _fnSortFlatten( settings );
		var oAria = settings.oLanguage.oAria;
	
		// ARIA attributes - need to loop all columns, to update all (removing old
		// attributes as needed)
		for ( var i=0, iLen=columns.length ; i<iLen ; i++ )
		{
			var col = columns[i];
			var asSorting = col.asSorting;
			var sTitle = col.sTitle.replace( /<.*?>/g, "" );
			var th = col.nTh;
	
			// IE7 is throwing an error when setting these properties with jQuery's
			// attr() and removeAttr() methods...
			th.removeAttribute('aria-sort');
	
			/* In ARIA only the first sorting column can be marked as sorting - no multi-sort option */
			if ( col.bSortable ) {
				if ( aSort.length > 0 && aSort[0].col == i ) {
					th.setAttribute('aria-sort', aSort[0].dir=="asc" ? "ascending" : "descending" );
					nextSort = asSorting[ aSort[0].index+1 ] || asSorting[0];
				}
				else {
					nextSort = asSorting[0];
				}
	
				label = sTitle + ( nextSort === "asc" ?
					oAria.sSortAscending :
					oAria.sSortDescending
				);
			}
			else {
				label = sTitle;
			}
	
			th.setAttribute('aria-label', label);
		}
	}
	
	
	/**
	 * Function to run on user sort request
	 *  @param {object} settings dataTables settings object
	 *  @param {node} attachTo node to attach the handler to
	 *  @param {int} colIdx column sorting index
	 *  @param {boolean} [append=false] Append the requested sort to the existing
	 *    sort if true (i.e. multi-column sort)
	 *  @param {function} [callback] callback function
	 *  @memberof DataTable#oApi
	 */
	function _fnSortListener ( settings, colIdx, append, callback )
	{
		var col = settings.aoColumns[ colIdx ];
		var sorting = settings.aaSorting;
		var asSorting = col.asSorting;
		var nextSortIdx;
		var next = function ( a, overflow ) {
			var idx = a._idx;
			if ( idx === undefined ) {
				idx = $.inArray( a[1], asSorting );
			}
	
			return idx+1 < asSorting.length ?
				idx+1 :
				overflow ?
					null :
					0;
		};
	
		// Convert to 2D array if needed
		if ( typeof sorting[0] === 'number' ) {
			sorting = settings.aaSorting = [ sorting ];
		}
	
		// If appending the sort then we are multi-column sorting
		if ( append && settings.oFeatures.bSortMulti ) {
			// Are we already doing some kind of sort on this column?
			var sortIdx = $.inArray( colIdx, _pluck(sorting, '0') );
	
			if ( sortIdx !== -1 ) {
				// Yes, modify the sort
				nextSortIdx = next( sorting[sortIdx], true );
	
				if ( nextSortIdx === null && sorting.length === 1 ) {
					nextSortIdx = 0; // can't remove sorting completely
				}
	
				if ( nextSortIdx === null ) {
					sorting.splice( sortIdx, 1 );
				}
				else {
					sorting[sortIdx][1] = asSorting[ nextSortIdx ];
					sorting[sortIdx]._idx = nextSortIdx;
				}
			}
			else {
				// No sort on this column yet
				sorting.push( [ colIdx, asSorting[0], 0 ] );
				sorting[sorting.length-1]._idx = 0;
			}
		}
		else if ( sorting.length && sorting[0][0] == colIdx ) {
			// Single column - already sorting on this column, modify the sort
			nextSortIdx = next( sorting[0] );
	
			sorting.length = 1;
			sorting[0][1] = asSorting[ nextSortIdx ];
			sorting[0]._idx = nextSortIdx;
		}
		else {
			// Single column - sort only on this column
			sorting.length = 0;
			sorting.push( [ colIdx, asSorting[0] ] );
			sorting[0]._idx = 0;
		}
	
		// Run the sort by calling a full redraw
		_fnReDraw( settings );
	
		// callback used for async user interaction
		if ( typeof callback == 'function' ) {
			callback( settings );
		}
	}
	
	
	/**
	 * Attach a sort handler (click) to a node
	 *  @param {object} settings dataTables settings object
	 *  @param {node} attachTo node to attach the handler to
	 *  @param {int} colIdx column sorting index
	 *  @param {function} [callback] callback function
	 *  @memberof DataTable#oApi
	 */
	function _fnSortAttachListener ( settings, attachTo, colIdx, callback )
	{
		var col = settings.aoColumns[ colIdx ];
	
		_fnBindAction( attachTo, {}, function (e) {
			/* If the column is not sortable - don't to anything */
			if ( col.bSortable === false ) {
				return;
			}
	
			// If processing is enabled use a timeout to allow the processing
			// display to be shown - otherwise to it synchronously
			if ( settings.oFeatures.bProcessing ) {
				_fnProcessingDisplay( settings, true );
	
				setTimeout( function() {
					_fnSortListener( settings, colIdx, e.shiftKey, callback );
	
					// In server-side processing, the draw callback will remove the
					// processing display
					if ( _fnDataSource( settings ) !== 'ssp' ) {
						_fnProcessingDisplay( settings, false );
					}
				}, 0 );
			}
			else {
				_fnSortListener( settings, colIdx, e.shiftKey, callback );
			}
		} );
	}
	
	
	/**
	 * Set the sorting classes on table's body, Note: it is safe to call this function
	 * when bSort and bSortClasses are false
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnSortingClasses( settings )
	{
		var oldSort = settings.aLastSort;
		var sortClass = settings.oClasses.sSortColumn;
		var sort = _fnSortFlatten( settings );
		var features = settings.oFeatures;
		var i, ien, colIdx;
	
		if ( features.bSort && features.bSortClasses ) {
			// Remove old sorting classes
			for ( i=0, ien=oldSort.length ; i<ien ; i++ ) {
				colIdx = oldSort[i].src;
	
				// Remove column sorting
				$( _pluck( settings.aoData, 'anCells', colIdx ) )
					.removeClass( sortClass + (i<2 ? i+1 : 3) );
			}
	
			// Add new column sorting
			for ( i=0, ien=sort.length ; i<ien ; i++ ) {
				colIdx = sort[i].src;
	
				$( _pluck( settings.aoData, 'anCells', colIdx ) )
					.addClass( sortClass + (i<2 ? i+1 : 3) );
			}
		}
	
		settings.aLastSort = sort;
	}
	
	
	// Get the data to sort a column, be it from cache, fresh (populating the
	// cache), or from a sort formatter
	function _fnSortData( settings, idx )
	{
		// Custom sorting function - provided by the sort data type
		var column = settings.aoColumns[ idx ];
		var customSort = DataTable.ext.order[ column.sSortDataType ];
		var customData;
	
		if ( customSort ) {
			customData = customSort.call( settings.oInstance, settings, idx,
				_fnColumnIndexToVisible( settings, idx )
			);
		}
	
		// Use / populate cache
		var row, cellData;
		var formatter = DataTable.ext.type.order[ column.sType+"-pre" ];
	
		for ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {
			row = settings.aoData[i];
	
			if ( ! row._aSortData ) {
				row._aSortData = [];
			}
	
			if ( ! row._aSortData[idx] || customSort ) {
				cellData = customSort ?
					customData[i] : // If there was a custom sort function, use data from there
					_fnGetCellData( settings, i, idx, 'sort' );
	
				row._aSortData[ idx ] = formatter ?
					formatter( cellData ) :
					cellData;
			}
		}
	}
	
	
	
	/**
	 * Save the state of a table
	 *  @param {object} oSettings dataTables settings object
	 *  @memberof DataTable#oApi
	 */
	function _fnSaveState ( settings )
	{
		if ( !settings.oFeatures.bStateSave || settings.bDestroying )
		{
			return;
		}
	
		/* Store the interesting variables */
		var state = {
			time:    +new Date(),
			start:   settings._iDisplayStart,
			length:  settings._iDisplayLength,
			order:   $.extend( true, [], settings.aaSorting ),
			search:  _fnSearchToCamel( settings.oPreviousSearch ),
			columns: $.map( settings.aoColumns, function ( col, i ) {
				return {
					visible: col.bVisible,
					search: _fnSearchToCamel( settings.aoPreSearchCols[i] )
				};
			} )
		};
	
		_fnCallbackFire( settings, "aoStateSaveParams", 'stateSaveParams', [settings, state] );
	
		settings.oSavedState = state;
		settings.fnStateSaveCallback.call( settings.oInstance, settings, state );
	}
	
	
	/**
	 * Attempt to load a saved table state
	 *  @param {object} oSettings dataTables settings object
	 *  @param {object} oInit DataTables init object so we can override settings
	 *  @param {function} callback Callback to execute when the state has been loaded
	 *  @memberof DataTable#oApi
	 */
	function _fnLoadState ( settings, oInit, callback )
	{
		var i, ien;
		var columns = settings.aoColumns;
		var loaded = function ( s ) {
			if ( ! s || ! s.time ) {
				callback();
				return;
			}
	
			// Allow custom and plug-in manipulation functions to alter the saved data set and
			// cancelling of loading by returning false
			var abStateLoad = _fnCallbackFire( settings, 'aoStateLoadParams', 'stateLoadParams', [settings, s] );
			if ( $.inArray( false, abStateLoad ) !== -1 ) {
				callback();
				return;
			}
	
			// Reject old data
			var duration = settings.iStateDuration;
			if ( duration > 0 && s.time < +new Date() - (duration*1000) ) {
				callback();
				return;
			}
	
			// Number of columns have changed - all bets are off, no restore of settings
			if ( s.columns && columns.length !== s.columns.length ) {
				callback();
				return;
			}
	
			// Store the saved state so it might be accessed at any time
			settings.oLoadedState = $.extend( true, {}, s );
	
			// Restore key features - todo - for 1.11 this needs to be done by
			// subscribed events
			if ( s.start !== undefined ) {
				settings._iDisplayStart    = s.start;
				settings.iInitDisplayStart = s.start;
			}
			if ( s.length !== undefined ) {
				settings._iDisplayLength   = s.length;
			}
	
			// Order
			if ( s.order !== undefined ) {
				settings.aaSorting = [];
				$.each( s.order, function ( i, col ) {
					settings.aaSorting.push( col[0] >= columns.length ?
						[ 0, col[1] ] :
						col
					);
				} );
			}
	
			// Search
			if ( s.search !== undefined ) {
				$.extend( settings.oPreviousSearch, _fnSearchToHung( s.search ) );
			}
	
			// Columns
			//
			if ( s.columns ) {
				for ( i=0, ien=s.columns.length ; i<ien ; i++ ) {
					var col = s.columns[i];
	
					// Visibility
					if ( col.visible !== undefined ) {
						columns[i].bVisible = col.visible;
					}
	
					// Search
					if ( col.search !== undefined ) {
						$.extend( settings.aoPreSearchCols[i], _fnSearchToHung( col.search ) );
					}
				}
			}
	
			_fnCallbackFire( settings, 'aoStateLoaded', 'stateLoaded', [settings, s] );
			callback();
		}
	
		if ( ! settings.oFeatures.bStateSave ) {
			callback();
			return;
		}
	
		var state = settings.fnStateLoadCallback.call( settings.oInstance, settings, loaded );
	
		if ( state !== undefined ) {
			loaded( state );
		}
		// otherwise, wait for the loaded callback to be executed
	}
	
	
	/**
	 * Return the settings object for a particular table
	 *  @param {node} table table we are using as a dataTable
	 *  @returns {object} Settings object - or null if not found
	 *  @memberof DataTable#oApi
	 */
	function _fnSettingsFromNode ( table )
	{
		var settings = DataTable.settings;
		var idx = $.inArray( table, _pluck( settings, 'nTable' ) );
	
		return idx !== -1 ?
			settings[ idx ] :
			null;
	}
	
	
	/**
	 * Log an error message
	 *  @param {object} settings dataTables settings object
	 *  @param {int} level log error messages, or display them to the user
	 *  @param {string} msg error message
	 *  @param {int} tn Technical note id to get more information about the error.
	 *  @memberof DataTable#oApi
	 */
	function _fnLog( settings, level, msg, tn )
	{
		msg = 'DataTables warning: '+
			(settings ? 'table id='+settings.sTableId+' - ' : '')+msg;
	
		if ( tn ) {
			msg += '. For more information about this error, please see '+
			'http://datatables.net/tn/'+tn;
		}
	
		if ( ! level  ) {
			// Backwards compatibility pre 1.10
			var ext = DataTable.ext;
			var type = ext.sErrMode || ext.errMode;
	
			if ( settings ) {
				_fnCallbackFire( settings, null, 'error', [ settings, tn, msg ] );
			}
	
			if ( type == 'alert' ) {
				alert( msg );
			}
			else if ( type == 'throw' ) {
				throw new Error(msg);
			}
			else if ( typeof type == 'function' ) {
				type( settings, tn, msg );
			}
		}
		else if ( window.console && console.log ) {
			console.log( msg );
		}
	}
	
	
	/**
	 * See if a property is defined on one object, if so assign it to the other object
	 *  @param {object} ret target object
	 *  @param {object} src source object
	 *  @param {string} name property
	 *  @param {string} [mappedName] name to map too - optional, name used if not given
	 *  @memberof DataTable#oApi
	 */
	function _fnMap( ret, src, name, mappedName )
	{
		if ( $.isArray( name ) ) {
			$.each( name, function (i, val) {
				if ( $.isArray( val ) ) {
					_fnMap( ret, src, val[0], val[1] );
				}
				else {
					_fnMap( ret, src, val );
				}
			} );
	
			return;
		}
	
		if ( mappedName === undefined ) {
			mappedName = name;
		}
	
		if ( src[name] !== undefined ) {
			ret[mappedName] = src[name];
		}
	}
	
	
	/**
	 * Extend objects - very similar to jQuery.extend, but deep copy objects, and
	 * shallow copy arrays. The reason we need to do this, is that we don't want to
	 * deep copy array init values (such as aaSorting) since the dev wouldn't be
	 * able to override them, but we do want to deep copy arrays.
	 *  @param {object} out Object to extend
	 *  @param {object} extender Object from which the properties will be applied to
	 *      out
	 *  @param {boolean} breakRefs If true, then arrays will be sliced to take an
	 *      independent copy with the exception of the `data` or `aaData` parameters
	 *      if they are present. This is so you can pass in a collection to
	 *      DataTables and have that used as your data source without breaking the
	 *      references
	 *  @returns {object} out Reference, just for convenience - out === the return.
	 *  @memberof DataTable#oApi
	 *  @todo This doesn't take account of arrays inside the deep copied objects.
	 */
	function _fnExtend( out, extender, breakRefs )
	{
		var val;
	
		for ( var prop in extender ) {
			if ( extender.hasOwnProperty(prop) ) {
				val = extender[prop];
	
				if ( $.isPlainObject( val ) ) {
					if ( ! $.isPlainObject( out[prop] ) ) {
						out[prop] = {};
					}
					$.extend( true, out[prop], val );
				}
				else if ( breakRefs && prop !== 'data' && prop !== 'aaData' && $.isArray(val) ) {
					out[prop] = val.slice();
				}
				else {
					out[prop] = val;
				}
			}
		}
	
		return out;
	}
	
	
	/**
	 * Bind an event handers to allow a click or return key to activate the callback.
	 * This is good for accessibility since a return on the keyboard will have the
	 * same effect as a click, if the element has focus.
	 *  @param {element} n Element to bind the action to
	 *  @param {object} oData Data object to pass to the triggered function
	 *  @param {function} fn Callback function for when the event is triggered
	 *  @memberof DataTable#oApi
	 */
	function _fnBindAction( n, oData, fn )
	{
		$(n)
			.on( 'click.DT', oData, function (e) {
					n.blur(); // Remove focus outline for mouse users
					fn(e);
				} )
			.on( 'keypress.DT', oData, function (e){
					if ( e.which === 13 ) {
						e.preventDefault();
						fn(e);
					}
				} )
			.on( 'selectstart.DT', function () {
					/* Take the brutal approach to cancelling text selection */
					return false;
				} );
	}
	
	
	/**
	 * Register a callback function. Easily allows a callback function to be added to
	 * an array store of callback functions that can then all be called together.
	 *  @param {object} oSettings dataTables settings object
	 *  @param {string} sStore Name of the array storage for the callbacks in oSettings
	 *  @param {function} fn Function to be called back
	 *  @param {string} sName Identifying name for the callback (i.e. a label)
	 *  @memberof DataTable#oApi
	 */
	function _fnCallbackReg( oSettings, sStore, fn, sName )
	{
		if ( fn )
		{
			oSettings[sStore].push( {
				"fn": fn,
				"sName": sName
			} );
		}
	}
	
	
	/**
	 * Fire callback functions and trigger events. Note that the loop over the
	 * callback array store is done backwards! Further note that you do not want to
	 * fire off triggers in time sensitive applications (for example cell creation)
	 * as its slow.
	 *  @param {object} settings dataTables settings object
	 *  @param {string} callbackArr Name of the array storage for the callbacks in
	 *      oSettings
	 *  @param {string} eventName Name of the jQuery custom event to trigger. If
	 *      null no trigger is fired
	 *  @param {array} args Array of arguments to pass to the callback function /
	 *      trigger
	 *  @memberof DataTable#oApi
	 */
	function _fnCallbackFire( settings, callbackArr, eventName, args )
	{
		var ret = [];
	
		if ( callbackArr ) {
			ret = $.map( settings[callbackArr].slice().reverse(), function (val, i) {
				return val.fn.apply( settings.oInstance, args );
			} );
		}
	
		if ( eventName !== null ) {
			var e = $.Event( eventName+'.dt' );
	
			$(settings.nTable).trigger( e, args );
	
			ret.push( e.result );
		}
	
		return ret;
	}
	
	
	function _fnLengthOverflow ( settings )
	{
		var
			start = settings._iDisplayStart,
			end = settings.fnDisplayEnd(),
			len = settings._iDisplayLength;
	
		/* If we have space to show extra rows (backing up from the end point - then do so */
		if ( start >= end )
		{
			start = end - len;
		}
	
		// Keep the start record on the current page
		start -= (start % len);
	
		if ( len === -1 || start < 0 )
		{
			start = 0;
		}
	
		settings._iDisplayStart = start;
	}
	
	
	function _fnRenderer( settings, type )
	{
		var renderer = settings.renderer;
		var host = DataTable.ext.renderer[type];
	
		if ( $.isPlainObject( renderer ) && renderer[type] ) {
			// Specific renderer for this type. If available use it, otherwise use
			// the default.
			return host[renderer[type]] || host._;
		}
		else if ( typeof renderer === 'string' ) {
			// Common renderer - if there is one available for this type use it,
			// otherwise use the default
			return host[renderer] || host._;
		}
	
		// Use the default
		return host._;
	}
	
	
	/**
	 * Detect the data source being used for the table. Used to simplify the code
	 * a little (ajax) and to make it compress a little smaller.
	 *
	 *  @param {object} settings dataTables settings object
	 *  @returns {string} Data source
	 *  @memberof DataTable#oApi
	 */
	function _fnDataSource ( settings )
	{
		if ( settings.oFeatures.bServerSide ) {
			return 'ssp';
		}
		else if ( settings.ajax || settings.sAjaxSource ) {
			return 'ajax';
		}
		return 'dom';
	}
	

	
	
	/**
	 * Computed structure of the DataTables API, defined by the options passed to
	 * `DataTable.Api.register()` when building the API.
	 *
	 * The structure is built in order to speed creation and extension of the Api
	 * objects since the extensions are effectively pre-parsed.
	 *
	 * The array is an array of objects with the following structure, where this
	 * base array represents the Api prototype base:
	 *
	 *     [
	 *       {
	 *         name:      'data'                -- string   - Property name
	 *         val:       function () {},       -- function - Api method (or undefined if just an object
	 *         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result
	 *         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property
	 *       },
	 *       {
	 *         name:     'row'
	 *         val:       {},
	 *         methodExt: [ ... ],
	 *         propExt:   [
	 *           {
	 *             name:      'data'
	 *             val:       function () {},
	 *             methodExt: [ ... ],
	 *             propExt:   [ ... ]
	 *           },
	 *           ...
	 *         ]
	 *       }
	 *     ]
	 *
	 * @type {Array}
	 * @ignore
	 */
	var __apiStruct = [];
	
	
	/**
	 * `Array.prototype` reference.
	 *
	 * @type object
	 * @ignore
	 */
	var __arrayProto = Array.prototype;
	
	
	/**
	 * Abstraction for `context` parameter of the `Api` constructor to allow it to
	 * take several different forms for ease of use.
	 *
	 * Each of the input parameter types will be converted to a DataTables settings
	 * object where possible.
	 *
	 * @param  {string|node|jQuery|object} mixed DataTable identifier. Can be one
	 *   of:
	 *
	 *   * `string` - jQuery selector. Any DataTables' matching the given selector
	 *     with be found and used.
	 *   * `node` - `TABLE` node which has already been formed into a DataTable.
	 *   * `jQuery` - A jQuery object of `TABLE` nodes.
	 *   * `object` - DataTables settings object
	 *   * `DataTables.Api` - API instance
	 * @return {array|null} Matching DataTables settings objects. `null` or
	 *   `undefined` is returned if no matching DataTable is found.
	 * @ignore
	 */
	var _toSettings = function ( mixed )
	{
		var idx, jq;
		var settings = DataTable.settings;
		var tables = $.map( settings, function (el, i) {
			return el.nTable;
		} );
	
		if ( ! mixed ) {
			return [];
		}
		else if ( mixed.nTable && mixed.oApi ) {
			// DataTables settings object
			return [ mixed ];
		}
		else if ( mixed.nodeName && mixed.nodeName.toLowerCase() === 'table' ) {
			// Table node
			idx = $.inArray( mixed, tables );
			return idx !== -1 ? [ settings[idx] ] : null;
		}
		else if ( mixed && typeof mixed.settings === 'function' ) {
			return mixed.settings().toArray();
		}
		else if ( typeof mixed === 'string' ) {
			// jQuery selector
			jq = $(mixed);
		}
		else if ( mixed instanceof $ ) {
			// jQuery object (also DataTables instance)
			jq = mixed;
		}
	
		if ( jq ) {
			return jq.map( function(i) {
				idx = $.inArray( this, tables );
				return idx !== -1 ? settings[idx] : null;
			} ).toArray();
		}
	};
	
	
	/**
	 * DataTables API class - used to control and interface with  one or more
	 * DataTables enhanced tables.
	 *
	 * The API class is heavily based on jQuery, presenting a chainable interface
	 * that you can use to interact with tables. Each instance of the API class has
	 * a "context" - i.e. the tables that it will operate on. This could be a single
	 * table, all tables on a page or a sub-set thereof.
	 *
	 * Additionally the API is designed to allow you to easily work with the data in
	 * the tables, retrieving and manipulating it as required. This is done by
	 * presenting the API class as an array like interface. The contents of the
	 * array depend upon the actions requested by each method (for example
	 * `rows().nodes()` will return an array of nodes, while `rows().data()` will
	 * return an array of objects or arrays depending upon your table's
	 * configuration). The API object has a number of array like methods (`push`,
	 * `pop`, `reverse` etc) as well as additional helper methods (`each`, `pluck`,
	 * `unique` etc) to assist your working with the data held in a table.
	 *
	 * Most methods (those which return an Api instance) are chainable, which means
	 * the return from a method call also has all of the methods available that the
	 * top level object had. For example, these two calls are equivalent:
	 *
	 *     // Not chained
	 *     api.row.add( {...} );
	 *     api.draw();
	 *
	 *     // Chained
	 *     api.row.add( {...} ).draw();
	 *
	 * @class DataTable.Api
	 * @param {array|object|string|jQuery} context DataTable identifier. This is
	 *   used to define which DataTables enhanced tables this API will operate on.
	 *   Can be one of:
	 *
	 *   * `string` - jQuery selector. Any DataTables' matching the given selector
	 *     with be found and used.
	 *   * `node` - `TABLE` node which has already been formed into a DataTable.
	 *   * `jQuery` - A jQuery object of `TABLE` nodes.
	 *   * `object` - DataTables settings object
	 * @param {array} [data] Data to initialise the Api instance with.
	 *
	 * @example
	 *   // Direct initialisation during DataTables construction
	 *   var api = $('#example').DataTable();
	 *
	 * @example
	 *   // Initialisation using a DataTables jQuery object
	 *   var api = $('#example').dataTable().api();
	 *
	 * @example
	 *   // Initialisation as a constructor
	 *   var api = new $.fn.DataTable.Api( 'table.dataTable' );
	 */
	_Api = function ( context, data )
	{
		if ( ! (this instanceof _Api) ) {
			return new _Api( context, data );
		}
	
		var settings = [];
		var ctxSettings = function ( o ) {
			var a = _toSettings( o );
			if ( a ) {
				settings = settings.concat( a );
			}
		};
	
		if ( $.isArray( context ) ) {
			for ( var i=0, ien=context.length ; i<ien ; i++ ) {
				ctxSettings( context[i] );
			}
		}
		else {
			ctxSettings( context );
		}
	
		// Remove duplicates
		this.context = _unique( settings );
	
		// Initial data
		if ( data ) {
			$.merge( this, data );
		}
	
		// selector
		this.selector = {
			rows: null,
			cols: null,
			opts: null
		};
	
		_Api.extend( this, this, __apiStruct );
	};
	
	DataTable.Api = _Api;
	
	// Don't destroy the existing prototype, just extend it. Required for jQuery 2's
	// isPlainObject.
	$.extend( _Api.prototype, {
		any: function ()
		{
			return this.count() !== 0;
		},
	
	
		concat:  __arrayProto.concat,
	
	
		context: [], // array of table settings objects
	
	
		count: function ()
		{
			return this.flatten().length;
		},
	
	
		each: function ( fn )
		{
			for ( var i=0, ien=this.length ; i<ien; i++ ) {
				fn.call( this, this[i], i, this );
			}
	
			return this;
		},
	
	
		eq: function ( idx )
		{
			var ctx = this.context;
	
			return ctx.length > idx ?
				new _Api( ctx[idx], this[idx] ) :
				null;
		},
	
	
		filter: function ( fn )
		{
			var a = [];
	
			if ( __arrayProto.filter ) {
				a = __arrayProto.filter.call( this, fn, this );
			}
			else {
				// Compatibility for browsers without EMCA-252-5 (JS 1.6)
				for ( var i=0, ien=this.length ; i<ien ; i++ ) {
					if ( fn.call( this, this[i], i, this ) ) {
						a.push( this[i] );
					}
				}
			}
	
			return new _Api( this.context, a );
		},
	
	
		flatten: function ()
		{
			var a = [];
			return new _Api( this.context, a.concat.apply( a, this.toArray() ) );
		},
	
	
		join:    __arrayProto.join,
	
	
		indexOf: __arrayProto.indexOf || function (obj, start)
		{
			for ( var i=(start || 0), ien=this.length ; i<ien ; i++ ) {
				if ( this[i] === obj ) {
					return i;
				}
			}
			return -1;
		},
	
		iterator: function ( flatten, type, fn, alwaysNew ) {
			var
				a = [], ret,
				i, ien, j, jen,
				context = this.context,
				rows, items, item,
				selector = this.selector;
	
			// Argument shifting
			if ( typeof flatten === 'string' ) {
				alwaysNew = fn;
				fn = type;
				type = flatten;
				flatten = false;
			}
	
			for ( i=0, ien=context.length ; i<ien ; i++ ) {
				var apiInst = new _Api( context[i] );
	
				if ( type === 'table' ) {
					ret = fn.call( apiInst, context[i], i );
	
					if ( ret !== undefined ) {
						a.push( ret );
					}
				}
				else if ( type === 'columns' || type === 'rows' ) {
					// this has same length as context - one entry for each table
					ret = fn.call( apiInst, context[i], this[i], i );
	
					if ( ret !== undefined ) {
						a.push( ret );
					}
				}
				else if ( type === 'column' || type === 'column-rows' || type === 'row' || type === 'cell' ) {
					// columns and rows share the same structure.
					// 'this' is an array of column indexes for each context
					items = this[i];
	
					if ( type === 'column-rows' ) {
						rows = _selector_row_indexes( context[i], selector.opts );
					}
	
					for ( j=0, jen=items.length ; j<jen ; j++ ) {
						item = items[j];
	
						if ( type === 'cell' ) {
							ret = fn.call( apiInst, context[i], item.row, item.column, i, j );
						}
						else {
							ret = fn.call( apiInst, context[i], item, i, j, rows );
						}
	
						if ( ret !== undefined ) {
							a.push( ret );
						}
					}
				}
			}
	
			if ( a.length || alwaysNew ) {
				var api = new _Api( context, flatten ? a.concat.apply( [], a ) : a );
				var apiSelector = api.selector;
				apiSelector.rows = selector.rows;
				apiSelector.cols = selector.cols;
				apiSelector.opts = selector.opts;
				return api;
			}
			return this;
		},
	
	
		lastIndexOf: __arrayProto.lastIndexOf || function (obj, start)
		{
			// Bit cheeky...
			return this.indexOf.apply( this.toArray.reverse(), arguments );
		},
	
	
		length:  0,
	
	
		map: function ( fn )
		{
			var a = [];
	
			if ( __arrayProto.map ) {
				a = __arrayProto.map.call( this, fn, this );
			}
			else {
				// Compatibility for browsers without EMCA-252-5 (JS 1.6)
				for ( var i=0, ien=this.length ; i<ien ; i++ ) {
					a.push( fn.call( this, this[i], i ) );
				}
			}
	
			return new _Api( this.context, a );
		},
	
	
		pluck: function ( prop )
		{
			return this.map( function ( el ) {
				return el[ prop ];
			} );
		},
	
		pop:     __arrayProto.pop,
	
	
		push:    __arrayProto.push,
	
	
		// Does not return an API instance
		reduce: __arrayProto.reduce || function ( fn, init )
		{
			return _fnReduce( this, fn, init, 0, this.length, 1 );
		},
	
	
		reduceRight: __arrayProto.reduceRight || function ( fn, init )
		{
			return _fnReduce( this, fn, init, this.length-1, -1, -1 );
		},
	
	
		reverse: __arrayProto.reverse,
	
	
		// Object with rows, columns and opts
		selector: null,
	
	
		shift:   __arrayProto.shift,
	
	
		slice: function () {
			return new _Api( this.context, this );
		},
	
	
		sort:    __arrayProto.sort, // ? name - order?
	
	
		splice:  __arrayProto.splice,
	
	
		toArray: function ()
		{
			return __arrayProto.slice.call( this );
		},
	
	
		to$: function ()
		{
			return $( this );
		},
	
	
		toJQuery: function ()
		{
			return $( this );
		},
	
	
		unique: function ()
		{
			return new _Api( this.context, _unique(this) );
		},
	
	
		unshift: __arrayProto.unshift
	} );
	
	
	_Api.extend = function ( scope, obj, ext )
	{
		// Only extend API instances and static properties of the API
		if ( ! ext.length || ! obj || ( ! (obj instanceof _Api) && ! obj.__dt_wrapper ) ) {
			return;
		}
	
		var
			i, ien,
			j, jen,
			struct, inner,
			methodScoping = function ( scope, fn, struc ) {
				return function () {
					var ret = fn.apply( scope, arguments );
	
					// Method extension
					_Api.extend( ret, ret, struc.methodExt );
					return ret;
				};
			};
	
		for ( i=0, ien=ext.length ; i<ien ; i++ ) {
			struct = ext[i];
	
			// Value
			obj[ struct.name ] = typeof struct.val === 'function' ?
				methodScoping( scope, struct.val, struct ) :
				$.isPlainObject( struct.val ) ?
					{} :
					struct.val;
	
			obj[ struct.name ].__dt_wrapper = true;
	
			// Property extension
			_Api.extend( scope, obj[ struct.name ], struct.propExt );
		}
	};
	
	
	// @todo - Is there need for an augment function?
	// _Api.augment = function ( inst, name )
	// {
	// 	// Find src object in the structure from the name
	// 	var parts = name.split('.');
	
	// 	_Api.extend( inst, obj );
	// };
	
	
	//     [
	//       {
	//         name:      'data'                -- string   - Property name
	//         val:       function () {},       -- function - Api method (or undefined if just an object
	//         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result
	//         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property
	//       },
	//       {
	//         name:     'row'
	//         val:       {},
	//         methodExt: [ ... ],
	//         propExt:   [
	//           {
	//             name:      'data'
	//             val:       function () {},
	//             methodExt: [ ... ],
	//             propExt:   [ ... ]
	//           },
	//           ...
	//         ]
	//       }
	//     ]
	
	_Api.register = _api_register = function ( name, val )
	{
		if ( $.isArray( name ) ) {
			for ( var j=0, jen=name.length ; j<jen ; j++ ) {
				_Api.register( name[j], val );
			}
			return;
		}
	
		var
			i, ien,
			heir = name.split('.'),
			struct = __apiStruct,
			key, method;
	
		var find = function ( src, name ) {
			for ( var i=0, ien=src.length ; i<ien ; i++ ) {
				if ( src[i].name === name ) {
					return src[i];
				}
			}
			return null;
		};
	
		for ( i=0, ien=heir.length ; i<ien ; i++ ) {
			method = heir[i].indexOf('()') !== -1;
			key = method ?
				heir[i].replace('()', '') :
				heir[i];
	
			var src = find( struct, key );
			if ( ! src ) {
				src = {
					name:      key,
					val:       {},
					methodExt: [],
					propExt:   []
				};
				struct.push( src );
			}
	
			if ( i === ien-1 ) {
				src.val = val;
			}
			else {
				struct = method ?
					src.methodExt :
					src.propExt;
			}
		}
	};
	
	
	_Api.registerPlural = _api_registerPlural = function ( pluralName, singularName, val ) {
		_Api.register( pluralName, val );
	
		_Api.register( singularName, function () {
			var ret = val.apply( this, arguments );
	
			if ( ret === this ) {
				// Returned item is the API instance that was passed in, return it
				return this;
			}
			else if ( ret instanceof _Api ) {
				// New API instance returned, want the value from the first item
				// in the returned array for the singular result.
				return ret.length ?
					$.isArray( ret[0] ) ?
						new _Api( ret.context, ret[0] ) : // Array results are 'enhanced'
						ret[0] :
					undefined;
			}
	
			// Non-API return - just fire it back
			return ret;
		} );
	};
	
	
	/**
	 * Selector for HTML tables. Apply the given selector to the give array of
	 * DataTables settings objects.
	 *
	 * @param {string|integer} [selector] jQuery selector string or integer
	 * @param  {array} Array of DataTables settings objects to be filtered
	 * @return {array}
	 * @ignore
	 */
	var __table_selector = function ( selector, a )
	{
		// Integer is used to pick out a table by index
		if ( typeof selector === 'number' ) {
			return [ a[ selector ] ];
		}
	
		// Perform a jQuery selector on the table nodes
		var nodes = $.map( a, function (el, i) {
			return el.nTable;
		} );
	
		return $(nodes)
			.filter( selector )
			.map( function (i) {
				// Need to translate back from the table node to the settings
				var idx = $.inArray( this, nodes );
				return a[ idx ];
			} )
			.toArray();
	};
	
	
	
	/**
	 * Context selector for the API's context (i.e. the tables the API instance
	 * refers to.
	 *
	 * @name    DataTable.Api#tables
	 * @param {string|integer} [selector] Selector to pick which tables the iterator
	 *   should operate on. If not given, all tables in the current context are
	 *   used. This can be given as a jQuery selector (for example `':gt(0)'`) to
	 *   select multiple tables or as an integer to select a single table.
	 * @returns {DataTable.Api} Returns a new API instance if a selector is given.
	 */
	_api_register( 'tables()', function ( selector ) {
		// A new instance is created if there was a selector specified
		return selector ?
			new _Api( __table_selector( selector, this.context ) ) :
			this;
	} );
	
	
	_api_register( 'table()', function ( selector ) {
		var tables = this.tables( selector );
		var ctx = tables.context;
	
		// Truncate to the first matched table
		return ctx.length ?
			new _Api( ctx[0] ) :
			tables;
	} );
	
	
	_api_registerPlural( 'tables().nodes()', 'table().node()' , function () {
		return this.iterator( 'table', function ( ctx ) {
			return ctx.nTable;
		}, 1 );
	} );
	
	
	_api_registerPlural( 'tables().body()', 'table().body()' , function () {
		return this.iterator( 'table', function ( ctx ) {
			return ctx.nTBody;
		}, 1 );
	} );
	
	
	_api_registerPlural( 'tables().header()', 'table().header()' , function () {
		return this.iterator( 'table', function ( ctx ) {
			return ctx.nTHead;
		}, 1 );
	} );
	
	
	_api_registerPlural( 'tables().footer()', 'table().footer()' , function () {
		return this.iterator( 'table', function ( ctx ) {
			return ctx.nTFoot;
		}, 1 );
	} );
	
	
	_api_registerPlural( 'tables().containers()', 'table().container()' , function () {
		return this.iterator( 'table', function ( ctx ) {
			return ctx.nTableWrapper;
		}, 1 );
	} );
	
	
	
	/**
	 * Redraw the tables in the current context.
	 */
	_api_register( 'draw()', function ( paging ) {
		return this.iterator( 'table', function ( settings ) {
			if ( paging === 'page' ) {
				_fnDraw( settings );
			}
			else {
				if ( typeof paging === 'string' ) {
					paging = paging === 'full-hold' ?
						false :
						true;
				}
	
				_fnReDraw( settings, paging===false );
			}
		} );
	} );
	
	
	
	/**
	 * Get the current page index.
	 *
	 * @return {integer} Current page index (zero based)
	 *//**
	 * Set the current page.
	 *
	 * Note that if you attempt to show a page which does not exist, DataTables will
	 * not throw an error, but rather reset the paging.
	 *
	 * @param {integer|string} action The paging action to take. This can be one of:
	 *  * `integer` - The page index to jump to
	 *  * `string` - An action to take:
	 *    * `first` - Jump to first page.
	 *    * `next` - Jump to the next page
	 *    * `previous` - Jump to previous page
	 *    * `last` - Jump to the last page.
	 * @returns {DataTables.Api} this
	 */
	_api_register( 'page()', function ( action ) {
		if ( action === undefined ) {
			return this.page.info().page; // not an expensive call
		}
	
		// else, have an action to take on all tables
		return this.iterator( 'table', function ( settings ) {
			_fnPageChange( settings, action );
		} );
	} );
	
	
	/**
	 * Paging information for the first table in the current context.
	 *
	 * If you require paging information for another table, use the `table()` method
	 * with a suitable selector.
	 *
	 * @return {object} Object with the following properties set:
	 *  * `page` - Current page index (zero based - i.e. the first page is `0`)
	 *  * `pages` - Total number of pages
	 *  * `start` - Display index for the first record shown on the current page
	 *  * `end` - Display index for the last record shown on the current page
	 *  * `length` - Display length (number of records). Note that generally `start
	 *    + length = end`, but this is not always true, for example if there are
	 *    only 2 records to show on the final page, with a length of 10.
	 *  * `recordsTotal` - Full data set length
	 *  * `recordsDisplay` - Data set length once the current filtering criterion
	 *    are applied.
	 */
	_api_register( 'page.info()', function ( action ) {
		if ( this.context.length === 0 ) {
			return undefined;
		}
	
		var
			settings   = this.context[0],
			start      = settings._iDisplayStart,
			len        = settings.oFeatures.bPaginate ? settings._iDisplayLength : -1,
			visRecords = settings.fnRecordsDisplay(),
			all        = len === -1;
	
		return {
			"page":           all ? 0 : Math.floor( start / len ),
			"pages":          all ? 1 : Math.ceil( visRecords / len ),
			"start":          start,
			"end":            settings.fnDisplayEnd(),
			"length":         len,
			"recordsTotal":   settings.fnRecordsTotal(),
			"recordsDisplay": visRecords,
			"serverSide":     _fnDataSource( settings ) === 'ssp'
		};
	} );
	
	
	/**
	 * Get the current page length.
	 *
	 * @return {integer} Current page length. Note `-1` indicates that all records
	 *   are to be shown.
	 *//**
	 * Set the current page length.
	 *
	 * @param {integer} Page length to set. Use `-1` to show all records.
	 * @returns {DataTables.Api} this
	 */
	_api_register( 'page.len()', function ( len ) {
		// Note that we can't call this function 'length()' because `length`
		// is a Javascript property of functions which defines how many arguments
		// the function expects.
		if ( len === undefined ) {
			return this.context.length !== 0 ?
				this.context[0]._iDisplayLength :
				undefined;
		}
	
		// else, set the page length
		return this.iterator( 'table', function ( settings ) {
			_fnLengthChange( settings, len );
		} );
	} );
	
	
	
	var __reload = function ( settings, holdPosition, callback ) {
		// Use the draw event to trigger a callback
		if ( callback ) {
			var api = new _Api( settings );
	
			api.one( 'draw', function () {
				callback( api.ajax.json() );
			} );
		}
	
		if ( _fnDataSource( settings ) == 'ssp' ) {
			_fnReDraw( settings, holdPosition );
		}
		else {
			_fnProcessingDisplay( settings, true );
	
			// Cancel an existing request
			var xhr = settings.jqXHR;
			if ( xhr && xhr.readyState !== 4 ) {
				xhr.abort();
			}
	
			// Trigger xhr
			_fnBuildAjax( settings, [], function( json ) {
				_fnClearTable( settings );
	
				var data = _fnAjaxDataSrc( settings, json );
				for ( var i=0, ien=data.length ; i<ien ; i++ ) {
					_fnAddData( settings, data[i] );
				}
	
				_fnReDraw( settings, holdPosition );
				_fnProcessingDisplay( settings, false );
			} );
		}
	};
	
	
	/**
	 * Get the JSON response from the last Ajax request that DataTables made to the
	 * server. Note that this returns the JSON from the first table in the current
	 * context.
	 *
	 * @return {object} JSON received from the server.
	 */
	_api_register( 'ajax.json()', function () {
		var ctx = this.context;
	
		if ( ctx.length > 0 ) {
			return ctx[0].json;
		}
	
		// else return undefined;
	} );
	
	
	/**
	 * Get the data submitted in the last Ajax request
	 */
	_api_register( 'ajax.params()', function () {
		var ctx = this.context;
	
		if ( ctx.length > 0 ) {
			return ctx[0].oAjaxData;
		}
	
		// else return undefined;
	} );
	
	
	/**
	 * Reload tables from the Ajax data source. Note that this function will
	 * automatically re-draw the table when the remote data has been loaded.
	 *
	 * @param {boolean} [reset=true] Reset (default) or hold the current paging
	 *   position. A full re-sort and re-filter is performed when this method is
	 *   called, which is why the pagination reset is the default action.
	 * @returns {DataTables.Api} this
	 */
	_api_register( 'ajax.reload()', function ( callback, resetPaging ) {
		return this.iterator( 'table', function (settings) {
			__reload( settings, resetPaging===false, callback );
		} );
	} );
	
	
	/**
	 * Get the current Ajax URL. Note that this returns the URL from the first
	 * table in the current context.
	 *
	 * @return {string} Current Ajax source URL
	 *//**
	 * Set the Ajax URL. Note that this will set the URL for all tables in the
	 * current context.
	 *
	 * @param {string} url URL to set.
	 * @returns {DataTables.Api} this
	 */
	_api_register( 'ajax.url()', function ( url ) {
		var ctx = this.context;
	
		if ( url === undefined ) {
			// get
			if ( ctx.length === 0 ) {
				return undefined;
			}
			ctx = ctx[0];
	
			return ctx.ajax ?
				$.isPlainObject( ctx.ajax ) ?
					ctx.ajax.url :
					ctx.ajax :
				ctx.sAjaxSource;
		}
	
		// set
		return this.iterator( 'table', function ( settings ) {
			if ( $.isPlainObject( settings.ajax ) ) {
				settings.ajax.url = url;
			}
			else {
				settings.ajax = url;
			}
			// No need to consider sAjaxSource here since DataTables gives priority
			// to `ajax` over `sAjaxSource`. So setting `ajax` here, renders any
			// value of `sAjaxSource` redundant.
		} );
	} );
	
	
	/**
	 * Load data from the newly set Ajax URL. Note that this method is only
	 * available when `ajax.url()` is used to set a URL. Additionally, this method
	 * has the same effect as calling `ajax.reload()` but is provided for
	 * convenience when setting a new URL. Like `ajax.reload()` it will
	 * automatically redraw the table once the remote data has been loaded.
	 *
	 * @returns {DataTables.Api} this
	 */
	_api_register( 'ajax.url().load()', function ( callback, resetPaging ) {
		// Same as a reload, but makes sense to present it for easy access after a
		// url change
		return this.iterator( 'table', function ( ctx ) {
			__reload( ctx, resetPaging===false, callback );
		} );
	} );
	
	
	
	
	var _selector_run = function ( type, selector, selectFn, settings, opts )
	{
		var
			out = [], res,
			a, i, ien, j, jen,
			selectorType = typeof selector;
	
		// Can't just check for isArray here, as an API or jQuery instance might be
		// given with their array like look
		if ( ! selector || selectorType === 'string' || selectorType === 'function' || selector.length === undefined ) {
			selector = [ selector ];
		}
	
		for ( i=0, ien=selector.length ; i<ien ; i++ ) {
			// Only split on simple strings - complex expressions will be jQuery selectors
			a = selector[i] && selector[i].split && ! selector[i].match(/[\[\(:]/) ?
				selector[i].split(',') :
				[ selector[i] ];
	
			for ( j=0, jen=a.length ; j<jen ; j++ ) {
				res = selectFn( typeof a[j] === 'string' ? $.trim(a[j]) : a[j] );
	
				if ( res && res.length ) {
					out = out.concat( res );
				}
			}
		}
	
		// selector extensions
		var ext = _ext.selector[ type ];
		if ( ext.length ) {
			for ( i=0, ien=ext.length ; i<ien ; i++ ) {
				out = ext[i]( settings, opts, out );
			}
		}
	
		return _unique( out );
	};
	
	
	var _selector_opts = function ( opts )
	{
		if ( ! opts ) {
			opts = {};
		}
	
		// Backwards compatibility for 1.9- which used the terminology filter rather
		// than search
		if ( opts.filter && opts.search === undefined ) {
			opts.search = opts.filter;
		}
	
		return $.extend( {
			search: 'none',
			order: 'current',
			page: 'all'
		}, opts );
	};
	
	
	var _selector_first = function ( inst )
	{
		// Reduce the API instance to the first item found
		for ( var i=0, ien=inst.length ; i<ien ; i++ ) {
			if ( inst[i].length > 0 ) {
				// Assign the first element to the first item in the instance
				// and truncate the instance and context
				inst[0] = inst[i];
				inst[0].length = 1;
				inst.length = 1;
				inst.context = [ inst.context[i] ];
	
				return inst;
			}
		}
	
		// Not found - return an empty instance
		inst.length = 0;
		return inst;
	};
	
	
	var _selector_row_indexes = function ( settings, opts )
	{
		var
			i, ien, tmp, a=[],
			displayFiltered = settings.aiDisplay,
			displayMaster = settings.aiDisplayMaster;
	
		var
			search = opts.search,  // none, applied, removed
			order  = opts.order,   // applied, current, index (original - compatibility with 1.9)
			page   = opts.page;    // all, current
	
		if ( _fnDataSource( settings ) == 'ssp' ) {
			// In server-side processing mode, most options are irrelevant since
			// rows not shown don't exist and the index order is the applied order
			// Removed is a special case - for consistency just return an empty
			// array
			return search === 'removed' ?
				[] :
				_range( 0, displayMaster.length );
		}
		else if ( page == 'current' ) {
			// Current page implies that order=current and fitler=applied, since it is
			// fairly senseless otherwise, regardless of what order and search actually
			// are
			for ( i=settings._iDisplayStart, ien=settings.fnDisplayEnd() ; i<ien ; i++ ) {
				a.push( displayFiltered[i] );
			}
		}
		else if ( order == 'current' || order == 'applied' ) {
			a = search == 'none' ?
				displayMaster.slice() :                      // no search
				search == 'applied' ?
					displayFiltered.slice() :                // applied search
					$.map( displayMaster, function (el, i) { // removed search
						return $.inArray( el, displayFiltered ) === -1 ? el : null;
					} );
		}
		else if ( order == 'index' || order == 'original' ) {
			for ( i=0, ien=settings.aoData.length ; i<ien ; i++ ) {
				if ( search == 'none' ) {
					a.push( i );
				}
				else { // applied | removed
					tmp = $.inArray( i, displayFiltered );
	
					if ((tmp === -1 && search == 'removed') ||
						(tmp >= 0   && search == 'applied') )
					{
						a.push( i );
					}
				}
			}
		}
	
		return a;
	};
	
	
	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * Rows
	 *
	 * {}          - no selector - use all available rows
	 * {integer}   - row aoData index
	 * {node}      - TR node
	 * {string}    - jQuery selector to apply to the TR elements
	 * {array}     - jQuery array of nodes, or simply an array of TR nodes
	 *
	 */
	
	
	var __row_selector = function ( settings, selector, opts )
	{
		var rows;
		var run = function ( sel ) {
			var selInt = _intVal( sel );
			var i, ien;
	
			// Short cut - selector is a number and no options provided (default is
			// all records, so no need to check if the index is in there, since it
			// must be - dev error if the index doesn't exist).
			if ( selInt !== null && ! opts ) {
				return [ selInt ];
			}
	
			if ( ! rows ) {
				rows = _selector_row_indexes( settings, opts );
			}
	
			if ( selInt !== null && $.inArray( selInt, rows ) !== -1 ) {
				// Selector - integer
				return [ selInt ];
			}
			else if ( sel === null || sel === undefined || sel === '' ) {
				// Selector - none
				return rows;
			}
	
			// Selector - function
			if ( typeof sel === 'function' ) {
				return $.map( rows, function (idx) {
					var row = settings.aoData[ idx ];
					return sel( idx, row._aData, row.nTr ) ? idx : null;
				} );
			}
	
			// Get nodes in the order from the `rows` array with null values removed
			var nodes = _removeEmpty(
				_pluck_order( settings.aoData, rows, 'nTr' )
			);
	
			// Selector - node
			if ( sel.nodeName ) {
				if ( sel._DT_RowIndex !== undefined ) {
					return [ sel._DT_RowIndex ]; // Property added by DT for fast lookup
				}
				else if ( sel._DT_CellIndex ) {
					return [ sel._DT_CellIndex.row ];
				}
				else {
					var host = $(sel).closest('*[data-dt-row]');
					return host.length ?
						[ host.data('dt-row') ] :
						[];
				}
			}
	
			// ID selector. Want to always be able to select rows by id, regardless
			// of if the tr element has been created or not, so can't rely upon
			// jQuery here - hence a custom implementation. This does not match
			// Sizzle's fast selector or HTML4 - in HTML5 the ID can be anything,
			// but to select it using a CSS selector engine (like Sizzle or
			// querySelect) it would need to need to be escaped for some characters.
			// DataTables simplifies this for row selectors since you can select
			// only a row. A # indicates an id any anything that follows is the id -
			// unescaped.
			if ( typeof sel === 'string' && sel.charAt(0) === '#' ) {
				// get row index from id
				var rowObj = settings.aIds[ sel.replace( /^#/, '' ) ];
				if ( rowObj !== undefined ) {
					return [ rowObj.idx ];
				}
	
				// need to fall through to jQuery in case there is DOM id that
				// matches
			}
	
			// Selector - jQuery selector string, array of nodes or jQuery object/
			// As jQuery's .filter() allows jQuery objects to be passed in filter,
			// it also allows arrays, so this will cope with all three options
			return $(nodes)
				.filter( sel )
				.map( function () {
					return this._DT_RowIndex;
				} )
				.toArray();
		};
	
		return _selector_run( 'row', selector, run, settings, opts );
	};
	
	
	_api_register( 'rows()', function ( selector, opts ) {
		// argument shifting
		if ( selector === undefined ) {
			selector = '';
		}
		else if ( $.isPlainObject( selector ) ) {
			opts = selector;
			selector = '';
		}
	
		opts = _selector_opts( opts );
	
		var inst = this.iterator( 'table', function ( settings ) {
			return __row_selector( settings, selector, opts );
		}, 1 );
	
		// Want argument shifting here and in __row_selector?
		inst.selector.rows = selector;
		inst.selector.opts = opts;
	
		return inst;
	} );
	
	_api_register( 'rows().nodes()', function () {
		return this.iterator( 'row', function ( settings, row ) {
			return settings.aoData[ row ].nTr || undefined;
		}, 1 );
	} );
	
	_api_register( 'rows().data()', function () {
		return this.iterator( true, 'rows', function ( settings, rows ) {
			return _pluck_order( settings.aoData, rows, '_aData' );
		}, 1 );
	} );
	
	_api_registerPlural( 'rows().cache()', 'row().cache()', function ( type ) {
		return this.iterator( 'row', function ( settings, row ) {
			var r = settings.aoData[ row ];
			return type === 'search' ? r._aFilterData : r._aSortData;
		}, 1 );
	} );
	
	_api_registerPlural( 'rows().invalidate()', 'row().invalidate()', function ( src ) {
		return this.iterator( 'row', function ( settings, row ) {
			_fnInvalidate( settings, row, src );
		} );
	} );
	
	_api_registerPlural( 'rows().indexes()', 'row().index()', function () {
		return this.iterator( 'row', function ( settings, row ) {
			return row;
		}, 1 );
	} );
	
	_api_registerPlural( 'rows().ids()', 'row().id()', function ( hash ) {
		var a = [];
		var context = this.context;
	
		// `iterator` will drop undefined values, but in this case we want them
		for ( var i=0, ien=context.length ; i<ien ; i++ ) {
			for ( var j=0, jen=this[i].length ; j<jen ; j++ ) {
				var id = context[i].rowIdFn( context[i].aoData[ this[i][j] ]._aData );
				a.push( (hash === true ? '#' : '' )+ id );
			}
		}
	
		return new _Api( context, a );
	} );
	
	_api_registerPlural( 'rows().remove()', 'row().remove()', function () {
		var that = this;
	
		this.iterator( 'row', function ( settings, row, thatIdx ) {
			var data = settings.aoData;
			var rowData = data[ row ];
			var i, ien, j, jen;
			var loopRow, loopCells;
	
			data.splice( row, 1 );
	
			// Update the cached indexes
			for ( i=0, ien=data.length ; i<ien ; i++ ) {
				loopRow = data[i];
				loopCells = loopRow.anCells;
	
				// Rows
				if ( loopRow.nTr !== null ) {
					loopRow.nTr._DT_RowIndex = i;
				}
	
				// Cells
				if ( loopCells !== null ) {
					for ( j=0, jen=loopCells.length ; j<jen ; j++ ) {
						loopCells[j]._DT_CellIndex.row = i;
					}
				}
			}
	
			// Delete from the display arrays
			_fnDeleteIndex( settings.aiDisplayMaster, row );
			_fnDeleteIndex( settings.aiDisplay, row );
			_fnDeleteIndex( that[ thatIdx ], row, false ); // maintain local indexes
	
			// Check for an 'overflow' they case for displaying the table
			_fnLengthOverflow( settings );
	
			// Remove the row's ID reference if there is one
			var id = settings.rowIdFn( rowData._aData );
			if ( id !== undefined ) {
				delete settings.aIds[ id ];
			}
		} );
	
		this.iterator( 'table', function ( settings ) {
			for ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {
				settings.aoData[i].idx = i;
			}
		} );
	
		return this;
	} );
	
	
	_api_register( 'rows.add()', function ( rows ) {
		var newRows = this.iterator( 'table', function ( settings ) {
				var row, i, ien;
				var out = [];
	
				for ( i=0, ien=rows.length ; i<ien ; i++ ) {
					row = rows[i];
	
					if ( row.nodeName && row.nodeName.toUpperCase() === 'TR' ) {
						out.push( _fnAddTr( settings, row )[0] );
					}
					else {
						out.push( _fnAddData( settings, row ) );
					}
				}
	
				return out;
			}, 1 );
	
		// Return an Api.rows() extended instance, so rows().nodes() etc can be used
		var modRows = this.rows( -1 );
		modRows.pop();
		$.merge( modRows, newRows );
	
		return modRows;
	} );
	
	
	
	
	
	/**
	 *
	 */
	_api_register( 'row()', function ( selector, opts ) {
		return _selector_first( this.rows( selector, opts ) );
	} );
	
	
	_api_register( 'row().data()', function ( data ) {
		var ctx = this.context;
	
		if ( data === undefined ) {
			// Get
			return ctx.length && this.length ?
				ctx[0].aoData[ this[0] ]._aData :
				undefined;
		}
	
		// Set
		ctx[0].aoData[ this[0] ]._aData = data;
	
		// Automatically invalidate
		_fnInvalidate( ctx[0], this[0], 'data' );
	
		return this;
	} );
	
	
	_api_register( 'row().node()', function () {
		var ctx = this.context;
	
		return ctx.length && this.length ?
			ctx[0].aoData[ this[0] ].nTr || null :
			null;
	} );
	
	
	_api_register( 'row.add()', function ( row ) {
		// Allow a jQuery object to be passed in - only a single row is added from
		// it though - the first element in the set
		if ( row instanceof $ && row.length ) {
			row = row[0];
		}
	
		var rows = this.iterator( 'table', function ( settings ) {
			if ( row.nodeName && row.nodeName.toUpperCase() === 'TR' ) {
				return _fnAddTr( settings, row )[0];
			}
			return _fnAddData( settings, row );
		} );
	
		// Return an Api.rows() extended instance, with the newly added row selected
		return this.row( rows[0] );
	} );
	
	
	
	var __details_add = function ( ctx, row, data, klass )
	{
		// Convert to array of TR elements
		var rows = [];
		var addRow = function ( r, k ) {
			// Recursion to allow for arrays of jQuery objects
			if ( $.isArray( r ) || r instanceof $ ) {
				for ( var i=0, ien=r.length ; i<ien ; i++ ) {
					addRow( r[i], k );
				}
				return;
			}
	
			// If we get a TR element, then just add it directly - up to the dev
			// to add the correct number of columns etc
			if ( r.nodeName && r.nodeName.toLowerCase() === 'tr' ) {
				rows.push( r );
			}
			else {
				// Otherwise create a row with a wrapper
				var created = $('<tr><td/></tr>').addClass( k );
				$('td', created)
					.addClass( k )
					.html( r )
					[0].colSpan = _fnVisbleColumns( ctx );
	
				rows.push( created[0] );
			}
		};
	
		addRow( data, klass );
	
		if ( row._details ) {
			row._details.detach();
		}
	
		row._details = $(rows);
	
		// If the children were already shown, that state should be retained
		if ( row._detailsShow ) {
			row._details.insertAfter( row.nTr );
		}
	};
	
	
	var __details_remove = function ( api, idx )
	{
		var ctx = api.context;
	
		if ( ctx.length ) {
			var row = ctx[0].aoData[ idx !== undefined ? idx : api[0] ];
	
			if ( row && row._details ) {
				row._details.remove();
	
				row._detailsShow = undefined;
				row._details = undefined;
			}
		}
	};
	
	
	var __details_display = function ( api, show ) {
		var ctx = api.context;
	
		if ( ctx.length && api.length ) {
			var row = ctx[0].aoData[ api[0] ];
	
			if ( row._details ) {
				row._detailsShow = show;
	
				if ( show ) {
					row._details.insertAfter( row.nTr );
				}
				else {
					row._details.detach();
				}
	
				__details_events( ctx[0] );
			}
		}
	};
	
	
	var __details_events = function ( settings )
	{
		var api = new _Api( settings );
		var namespace = '.dt.DT_details';
		var drawEvent = 'draw'+namespace;
		var colvisEvent = 'column-visibility'+namespace;
		var destroyEvent = 'destroy'+namespace;
		var data = settings.aoData;
	
		api.off( drawEvent +' '+ colvisEvent +' '+ destroyEvent );
	
		if ( _pluck( data, '_details' ).length > 0 ) {
			// On each draw, insert the required elements into the document
			api.on( drawEvent, function ( e, ctx ) {
				if ( settings !== ctx ) {
					return;
				}
	
				api.rows( {page:'current'} ).eq(0).each( function (idx) {
					// Internal data grab
					var row = data[ idx ];
	
					if ( row._detailsShow ) {
						row._details.insertAfter( row.nTr );
					}
				} );
			} );
	
			// Column visibility change - update the colspan
			api.on( colvisEvent, function ( e, ctx, idx, vis ) {
				if ( settings !== ctx ) {
					return;
				}
	
				// Update the colspan for the details rows (note, only if it already has
				// a colspan)
				var row, visible = _fnVisbleColumns( ctx );
	
				for ( var i=0, ien=data.length ; i<ien ; i++ ) {
					row = data[i];
	
					if ( row._details ) {
						row._details.children('td[colspan]').attr('colspan', visible );
					}
				}
			} );
	
			// Table destroyed - nuke any child rows
			api.on( destroyEvent, function ( e, ctx ) {
				if ( settings !== ctx ) {
					return;
				}
	
				for ( var i=0, ien=data.length ; i<ien ; i++ ) {
					if ( data[i]._details ) {
						__details_remove( api, i );
					}
				}
			} );
		}
	};
	
	// Strings for the method names to help minification
	var _emp = '';
	var _child_obj = _emp+'row().child';
	var _child_mth = _child_obj+'()';
	
	// data can be:
	//  tr
	//  string
	//  jQuery or array of any of the above
	_api_register( _child_mth, function ( data, klass ) {
		var ctx = this.context;
	
		if ( data === undefined ) {
			// get
			return ctx.length && this.length ?
				ctx[0].aoData[ this[0] ]._details :
				undefined;
		}
		else if ( data === true ) {
			// show
			this.child.show();
		}
		else if ( data === false ) {
			// remove
			__details_remove( this );
		}
		else if ( ctx.length && this.length ) {
			// set
			__details_add( ctx[0], ctx[0].aoData[ this[0] ], data, klass );
		}
	
		return this;
	} );
	
	
	_api_register( [
		_child_obj+'.show()',
		_child_mth+'.show()' // only when `child()` was called with parameters (without
	], function ( show ) {   // it returns an object and this method is not executed)
		__details_display( this, true );
		return this;
	} );
	
	
	_api_register( [
		_child_obj+'.hide()',
		_child_mth+'.hide()' // only when `child()` was called with parameters (without
	], function () {         // it returns an object and this method is not executed)
		__details_display( this, false );
		return this;
	} );
	
	
	_api_register( [
		_child_obj+'.remove()',
		_child_mth+'.remove()' // only when `child()` was called with parameters (without
	], function () {           // it returns an object and this method is not executed)
		__details_remove( this );
		return this;
	} );
	
	
	_api_register( _child_obj+'.isShown()', function () {
		var ctx = this.context;
	
		if ( ctx.length && this.length ) {
			// _detailsShown as false or undefined will fall through to return false
			return ctx[0].aoData[ this[0] ]._detailsShow || false;
		}
		return false;
	} );
	
	
	
	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * Columns
	 *
	 * {integer}           - column index (>=0 count from left, <0 count from right)
	 * "{integer}:visIdx"  - visible column index (i.e. translate to column index)  (>=0 count from left, <0 count from right)
	 * "{integer}:visible" - alias for {integer}:visIdx  (>=0 count from left, <0 count from right)
	 * "{string}:name"     - column name
	 * "{string}"          - jQuery selector on column header nodes
	 *
	 */
	
	// can be an array of these items, comma separated list, or an array of comma
	// separated lists
	
	var __re_column_selector = /^([^:]+):(name|visIdx|visible)$/;
	
	
	// r1 and r2 are redundant - but it means that the parameters match for the
	// iterator callback in columns().data()
	var __columnData = function ( settings, column, r1, r2, rows ) {
		var a = [];
		for ( var row=0, ien=rows.length ; row<ien ; row++ ) {
			a.push( _fnGetCellData( settings, rows[row], column ) );
		}
		return a;
	};
	
	
	var __column_selector = function ( settings, selector, opts )
	{
		var
			columns = settings.aoColumns,
			names = _pluck( columns, 'sName' ),
			nodes = _pluck( columns, 'nTh' );
	
		var run = function ( s ) {
			var selInt = _intVal( s );
	
			// Selector - all
			if ( s === '' ) {
				return _range( columns.length );
			}
	
			// Selector - index
			if ( selInt !== null ) {
				return [ selInt >= 0 ?
					selInt : // Count from left
					columns.length + selInt // Count from right (+ because its a negative value)
				];
			}
	
			// Selector = function
			if ( typeof s === 'function' ) {
				var rows = _selector_row_indexes( settings, opts );
	
				return $.map( columns, function (col, idx) {
					return s(
							idx,
							__columnData( settings, idx, 0, 0, rows ),
							nodes[ idx ]
						) ? idx : null;
				} );
			}
	
			// jQuery or string selector
			var match = typeof s === 'string' ?
				s.match( __re_column_selector ) :
				'';
	
			if ( match ) {
				switch( match[2] ) {
					case 'visIdx':
					case 'visible':
						var idx = parseInt( match[1], 10 );
						// Visible index given, convert to column index
						if ( idx < 0 ) {
							// Counting from the right
							var visColumns = $.map( columns, function (col,i) {
								return col.bVisible ? i : null;
							} );
							return [ visColumns[ visColumns.length + idx ] ];
						}
						// Counting from the left
						return [ _fnVisibleToColumnIndex( settings, idx ) ];
	
					case 'name':
						// match by name. `names` is column index complete and in order
						return $.map( names, function (name, i) {
							return name === match[1] ? i : null;
						} );
	
					default:
						return [];
				}
			}
	
			// Cell in the table body
			if ( s.nodeName && s._DT_CellIndex ) {
				return [ s._DT_CellIndex.column ];
			}
	
			// jQuery selector on the TH elements for the columns
			var jqResult = $( nodes )
				.filter( s )
				.map( function () {
					return $.inArray( this, nodes ); // `nodes` is column index complete and in order
				} )
				.toArray();
	
			if ( jqResult.length || ! s.nodeName ) {
				return jqResult;
			}
	
			// Otherwise a node which might have a `dt-column` data attribute, or be
			// a child or such an element
			var host = $(s).closest('*[data-dt-column]');
			return host.length ?
				[ host.data('dt-column') ] :
				[];
		};
	
		return _selector_run( 'column', selector, run, settings, opts );
	};
	
	
	var __setColumnVis = function ( settings, column, vis ) {
		var
			cols = settings.aoColumns,
			col  = cols[ column ],
			data = settings.aoData,
			row, cells, i, ien, tr;
	
		// Get
		if ( vis === undefined ) {
			return col.bVisible;
		}
	
		// Set
		// No change
		if ( col.bVisible === vis ) {
			return;
		}
	
		if ( vis ) {
			// Insert column
			// Need to decide if we should use appendChild or insertBefore
			var insertBefore = $.inArray( true, _pluck(cols, 'bVisible'), column+1 );
	
			for ( i=0, ien=data.length ; i<ien ; i++ ) {
				tr = data[i].nTr;
				cells = data[i].anCells;
	
				if ( tr ) {
					// insertBefore can act like appendChild if 2nd arg is null
					tr.insertBefore( cells[ column ], cells[ insertBefore ] || null );
				}
			}
		}
		else {
			// Remove column
			$( _pluck( settings.aoData, 'anCells', column ) ).detach();
		}
	
		// Common actions
		col.bVisible = vis;
		_fnDrawHead( settings, settings.aoHeader );
		_fnDrawHead( settings, settings.aoFooter );
	
		_fnSaveState( settings );
	};
	
	
	_api_register( 'columns()', function ( selector, opts ) {
		// argument shifting
		if ( selector === undefined ) {
			selector = '';
		}
		else if ( $.isPlainObject( selector ) ) {
			opts = selector;
			selector = '';
		}
	
		opts = _selector_opts( opts );
	
		var inst = this.iterator( 'table', function ( settings ) {
			return __column_selector( settings, selector, opts );
		}, 1 );
	
		// Want argument shifting here and in _row_selector?
		inst.selector.cols = selector;
		inst.selector.opts = opts;
	
		return inst;
	} );
	
	_api_registerPlural( 'columns().header()', 'column().header()', function ( selector, opts ) {
		return this.iterator( 'column', function ( settings, column ) {
			return settings.aoColumns[column].nTh;
		}, 1 );
	} );
	
	_api_registerPlural( 'columns().footer()', 'column().footer()', function ( selector, opts ) {
		return this.iterator( 'column', function ( settings, column ) {
			return settings.aoColumns[column].nTf;
		}, 1 );
	} );
	
	_api_registerPlural( 'columns().data()', 'column().data()', function () {
		return this.iterator( 'column-rows', __columnData, 1 );
	} );
	
	_api_registerPlural( 'columns().dataSrc()', 'column().dataSrc()', function () {
		return this.iterator( 'column', function ( settings, column ) {
			return settings.aoColumns[column].mData;
		}, 1 );
	} );
	
	_api_registerPlural( 'columns().cache()', 'column().cache()', function ( type ) {
		return this.iterator( 'column-rows', function ( settings, column, i, j, rows ) {
			return _pluck_order( settings.aoData, rows,
				type === 'search' ? '_aFilterData' : '_aSortData', column
			);
		}, 1 );
	} );
	
	_api_registerPlural( 'columns().nodes()', 'column().nodes()', function () {
		return this.iterator( 'column-rows', function ( settings, column, i, j, rows ) {
			return _pluck_order( settings.aoData, rows, 'anCells', column ) ;
		}, 1 );
	} );
	
	_api_registerPlural( 'columns().visible()', 'column().visible()', function ( vis, calc ) {
		var ret = this.iterator( 'column', function ( settings, column ) {
			if ( vis === undefined ) {
				return settings.aoColumns[ column ].bVisible;
			} // else
			__setColumnVis( settings, column, vis );
		} );
	
		// Group the column visibility changes
		if ( vis !== undefined ) {
			// Second loop once the first is done for events
			this.iterator( 'column', function ( settings, column ) {
				_fnCallbackFire( settings, null, 'column-visibility', [settings, column, vis, calc] );
			} );
	
			if ( calc === undefined || calc ) {
				this.columns.adjust();
			}
		}
	
		return ret;
	} );
	
	_api_registerPlural( 'columns().indexes()', 'column().index()', function ( type ) {
		return this.iterator( 'column', function ( settings, column ) {
			return type === 'visible' ?
				_fnColumnIndexToVisible( settings, column ) :
				column;
		}, 1 );
	} );
	
	_api_register( 'columns.adjust()', function () {
		return this.iterator( 'table', function ( settings ) {
			_fnAdjustColumnSizing( settings );
		}, 1 );
	} );
	
	_api_register( 'column.index()', function ( type, idx ) {
		if ( this.context.length !== 0 ) {
			var ctx = this.context[0];
	
			if ( type === 'fromVisible' || type === 'toData' ) {
				return _fnVisibleToColumnIndex( ctx, idx );
			}
			else if ( type === 'fromData' || type === 'toVisible' ) {
				return _fnColumnIndexToVisible( ctx, idx );
			}
		}
	} );
	
	_api_register( 'column()', function ( selector, opts ) {
		return _selector_first( this.columns( selector, opts ) );
	} );
	
	
	
	var __cell_selector = function ( settings, selector, opts )
	{
		var data = settings.aoData;
		var rows = _selector_row_indexes( settings, opts );
		var cells = _removeEmpty( _pluck_order( data, rows, 'anCells' ) );
		var allCells = $( [].concat.apply([], cells) );
		var row;
		var columns = settings.aoColumns.length;
		var a, i, ien, j, o, host;
	
		var run = function ( s ) {
			var fnSelector = typeof s === 'function';
	
			if ( s === null || s === undefined || fnSelector ) {
				// All cells and function selectors
				a = [];
	
				for ( i=0, ien=rows.length ; i<ien ; i++ ) {
					row = rows[i];
	
					for ( j=0 ; j<columns ; j++ ) {
						o = {
							row: row,
							column: j
						};
	
						if ( fnSelector ) {
							// Selector - function
							host = data[ row ];
	
							if ( s( o, _fnGetCellData(settings, row, j), host.anCells ? host.anCells[j] : null ) ) {
								a.push( o );
							}
						}
						else {
							// Selector - all
							a.push( o );
						}
					}
				}
	
				return a;
			}
			
			// Selector - index
			if ( $.isPlainObject( s ) ) {
				return [s];
			}
	
			// Selector - jQuery filtered cells
			var jqResult = allCells
				.filter( s )
				.map( function (i, el) {
					return { // use a new object, in case someone changes the values
						row:    el._DT_CellIndex.row,
						column: el._DT_CellIndex.column
	 				};
				} )
				.toArray();
	
			if ( jqResult.length || ! s.nodeName ) {
				return jqResult;
			}
	
			// Otherwise the selector is a node, and there is one last option - the
			// element might be a child of an element which has dt-row and dt-column
			// data attributes
			host = $(s).closest('*[data-dt-row]');
			return host.length ?
				[ {
					row: host.data('dt-row'),
					column: host.data('dt-column')
				} ] :
				[];
		};
	
		return _selector_run( 'cell', selector, run, settings, opts );
	};
	
	
	
	
	_api_register( 'cells()', function ( rowSelector, columnSelector, opts ) {
		// Argument shifting
		if ( $.isPlainObject( rowSelector ) ) {
			// Indexes
			if ( rowSelector.row === undefined ) {
				// Selector options in first parameter
				opts = rowSelector;
				rowSelector = null;
			}
			else {
				// Cell index objects in first parameter
				opts = columnSelector;
				columnSelector = null;
			}
		}
		if ( $.isPlainObject( columnSelector ) ) {
			opts = columnSelector;
			columnSelector = null;
		}
	
		// Cell selector
		if ( columnSelector === null || columnSelector === undefined ) {
			return this.iterator( 'table', function ( settings ) {
				return __cell_selector( settings, rowSelector, _selector_opts( opts ) );
			} );
		}
	
		// Row + column selector
		var columns = this.columns( columnSelector, opts );
		var rows = this.rows( rowSelector, opts );
		var a, i, ien, j, jen;
	
		var cells = this.iterator( 'table', function ( settings, idx ) {
			a = [];
	
			for ( i=0, ien=rows[idx].length ; i<ien ; i++ ) {
				for ( j=0, jen=columns[idx].length ; j<jen ; j++ ) {
					a.push( {
						row:    rows[idx][i],
						column: columns[idx][j]
					} );
				}
			}
	
			return a;
		}, 1 );
	
		$.extend( cells.selector, {
			cols: columnSelector,
			rows: rowSelector,
			opts: opts
		} );
	
		return cells;
	} );
	
	
	_api_registerPlural( 'cells().nodes()', 'cell().node()', function () {
		return this.iterator( 'cell', function ( settings, row, column ) {
			var data = settings.aoData[ row ];
	
			return data && data.anCells ?
				data.anCells[ column ] :
				undefined;
		}, 1 );
	} );
	
	
	_api_register( 'cells().data()', function () {
		return this.iterator( 'cell', function ( settings, row, column ) {
			return _fnGetCellData( settings, row, column );
		}, 1 );
	} );
	
	
	_api_registerPlural( 'cells().cache()', 'cell().cache()', function ( type ) {
		type = type === 'search' ? '_aFilterData' : '_aSortData';
	
		return this.iterator( 'cell', function ( settings, row, column ) {
			return settings.aoData[ row ][ type ][ column ];
		}, 1 );
	} );
	
	
	_api_registerPlural( 'cells().render()', 'cell().render()', function ( type ) {
		return this.iterator( 'cell', function ( settings, row, column ) {
			return _fnGetCellData( settings, row, column, type );
		}, 1 );
	} );
	
	
	_api_registerPlural( 'cells().indexes()', 'cell().index()', function () {
		return this.iterator( 'cell', function ( settings, row, column ) {
			return {
				row: row,
				column: column,
				columnVisible: _fnColumnIndexToVisible( settings, column )
			};
		}, 1 );
	} );
	
	
	_api_registerPlural( 'cells().invalidate()', 'cell().invalidate()', function ( src ) {
		return this.iterator( 'cell', function ( settings, row, column ) {
			_fnInvalidate( settings, row, src, column );
		} );
	} );
	
	
	
	_api_register( 'cell()', function ( rowSelector, columnSelector, opts ) {
		return _selector_first( this.cells( rowSelector, columnSelector, opts ) );
	} );
	
	
	_api_register( 'cell().data()', function ( data ) {
		var ctx = this.context;
		var cell = this[0];
	
		if ( data === undefined ) {
			// Get
			return ctx.length && cell.length ?
				_fnGetCellData( ctx[0], cell[0].row, cell[0].column ) :
				undefined;
		}
	
		// Set
		_fnSetCellData( ctx[0], cell[0].row, cell[0].column, data );
		_fnInvalidate( ctx[0], cell[0].row, 'data', cell[0].column );
	
		return this;
	} );
	
	
	
	/**
	 * Get current ordering (sorting) that has been applied to the table.
	 *
	 * @returns {array} 2D array containing the sorting information for the first
	 *   table in the current context. Each element in the parent array represents
	 *   a column being sorted upon (i.e. multi-sorting with two columns would have
	 *   2 inner arrays). The inner arrays may have 2 or 3 elements. The first is
	 *   the column index that the sorting condition applies to, the second is the
	 *   direction of the sort (`desc` or `asc`) and, optionally, the third is the
	 *   index of the sorting order from the `column.sorting` initialisation array.
	 *//**
	 * Set the ordering for the table.
	 *
	 * @param {integer} order Column index to sort upon.
	 * @param {string} direction Direction of the sort to be applied (`asc` or `desc`)
	 * @returns {DataTables.Api} this
	 *//**
	 * Set the ordering for the table.
	 *
	 * @param {array} order 1D array of sorting information to be applied.
	 * @param {array} [...] Optional additional sorting conditions
	 * @returns {DataTables.Api} this
	 *//**
	 * Set the ordering for the table.
	 *
	 * @param {array} order 2D array of sorting information to be applied.
	 * @returns {DataTables.Api} this
	 */
	_api_register( 'order()', function ( order, dir ) {
		var ctx = this.context;
	
		if ( order === undefined ) {
			// get
			return ctx.length !== 0 ?
				ctx[0].aaSorting :
				undefined;
		}
	
		// set
		if ( typeof order === 'number' ) {
			// Simple column / direction passed in
			order = [ [ order, dir ] ];
		}
		else if ( order.length && ! $.isArray( order[0] ) ) {
			// Arguments passed in (list of 1D arrays)
			order = Array.prototype.slice.call( arguments );
		}
		// otherwise a 2D array was passed in
	
		return this.iterator( 'table', function ( settings ) {
			settings.aaSorting = order.slice();
		} );
	} );
	
	
	/**
	 * Attach a sort listener to an element for a given column
	 *
	 * @param {node|jQuery|string} node Identifier for the element(s) to attach the
	 *   listener to. This can take the form of a single DOM node, a jQuery
	 *   collection of nodes or a jQuery selector which will identify the node(s).
	 * @param {integer} column the column that a click on this node will sort on
	 * @param {function} [callback] callback function when sort is run
	 * @returns {DataTables.Api} this
	 */
	_api_register( 'order.listener()', function ( node, column, callback ) {
		return this.iterator( 'table', function ( settings ) {
			_fnSortAttachListener( settings, node, column, callback );
		} );
	} );
	
	
	_api_register( 'order.fixed()', function ( set ) {
		if ( ! set ) {
			var ctx = this.context;
			var fixed = ctx.length ?
				ctx[0].aaSortingFixed :
				undefined;
	
			return $.isArray( fixed ) ?
				{ pre: fixed } :
				fixed;
		}
	
		return this.iterator( 'table', function ( settings ) {
			settings.aaSortingFixed = $.extend( true, {}, set );
		} );
	} );
	
	
	// Order by the selected column(s)
	_api_register( [
		'columns().order()',
		'column().order()'
	], function ( dir ) {
		var that = this;
	
		return this.iterator( 'table', function ( settings, i ) {
			var sort = [];
	
			$.each( that[i], function (j, col) {
				sort.push( [ col, dir ] );
			} );
	
			settings.aaSorting = sort;
		} );
	} );
	
	
	
	_api_register( 'search()', function ( input, regex, smart, caseInsen ) {
		var ctx = this.context;
	
		if ( input === undefined ) {
			// get
			return ctx.length !== 0 ?
				ctx[0].oPreviousSearch.sSearch :
				undefined;
		}
	
		// set
		return this.iterator( 'table', function ( settings ) {
			if ( ! settings.oFeatures.bFilter ) {
				return;
			}
	
			_fnFilterComplete( settings, $.extend( {}, settings.oPreviousSearch, {
				"sSearch": input+"",
				"bRegex":  regex === null ? false : regex,
				"bSmart":  smart === null ? true  : smart,
				"bCaseInsensitive": caseInsen === null ? true : caseInsen
			} ), 1 );
		} );
	} );
	
	
	_api_registerPlural(
		'columns().search()',
		'column().search()',
		function ( input, regex, smart, caseInsen ) {
			return this.iterator( 'column', function ( settings, column ) {
				var preSearch = settings.aoPreSearchCols;
	
				if ( input === undefined ) {
					// get
					return preSearch[ column ].sSearch;
				}
	
				// set
				if ( ! settings.oFeatures.bFilter ) {
					return;
				}
	
				$.extend( preSearch[ column ], {
					"sSearch": input+"",
					"bRegex":  regex === null ? false : regex,
					"bSmart":  smart === null ? true  : smart,
					"bCaseInsensitive": caseInsen === null ? true : caseInsen
				} );
	
				_fnFilterComplete( settings, settings.oPreviousSearch, 1 );
			} );
		}
	);
	
	/*
	 * State API methods
	 */
	
	_api_register( 'state()', function () {
		return this.context.length ?
			this.context[0].oSavedState :
			null;
	} );
	
	
	_api_register( 'state.clear()', function () {
		return this.iterator( 'table', function ( settings ) {
			// Save an empty object
			settings.fnStateSaveCallback.call( settings.oInstance, settings, {} );
		} );
	} );
	
	
	_api_register( 'state.loaded()', function () {
		return this.context.length ?
			this.context[0].oLoadedState :
			null;
	} );
	
	
	_api_register( 'state.save()', function () {
		return this.iterator( 'table', function ( settings ) {
			_fnSaveState( settings );
		} );
	} );
	
	
	
	/**
	 * Provide a common method for plug-ins to check the version of DataTables being
	 * used, in order to ensure compatibility.
	 *
	 *  @param {string} version Version string to check for, in the format "X.Y.Z".
	 *    Note that the formats "X" and "X.Y" are also acceptable.
	 *  @returns {boolean} true if this version of DataTables is greater or equal to
	 *    the required version, or false if this version of DataTales is not
	 *    suitable
	 *  @static
	 *  @dtopt API-Static
	 *
	 *  @example
	 *    alert( $.fn.dataTable.versionCheck( '1.9.0' ) );
	 */
	DataTable.versionCheck = DataTable.fnVersionCheck = function( version )
	{
		var aThis = DataTable.version.split('.');
		var aThat = version.split('.');
		var iThis, iThat;
	
		for ( var i=0, iLen=aThat.length ; i<iLen ; i++ ) {
			iThis = parseInt( aThis[i], 10 ) || 0;
			iThat = parseInt( aThat[i], 10 ) || 0;
	
			// Parts are the same, keep comparing
			if (iThis === iThat) {
				continue;
			}
	
			// Parts are different, return immediately
			return iThis > iThat;
		}
	
		return true;
	};
	
	
	/**
	 * Check if a `<table>` node is a DataTable table already or not.
	 *
	 *  @param {node|jquery|string} table Table node, jQuery object or jQuery
	 *      selector for the table to test. Note that if more than more than one
	 *      table is passed on, only the first will be checked
	 *  @returns {boolean} true the table given is a DataTable, or false otherwise
	 *  @static
	 *  @dtopt API-Static
	 *
	 *  @example
	 *    if ( ! $.fn.DataTable.isDataTable( '#example' ) ) {
	 *      $('#example').dataTable();
	 *    }
	 */
	DataTable.isDataTable = DataTable.fnIsDataTable = function ( table )
	{
		var t = $(table).get(0);
		var is = false;
	
		if ( table instanceof DataTable.Api ) {
			return true;
		}
	
		$.each( DataTable.settings, function (i, o) {
			var head = o.nScrollHead ? $('table', o.nScrollHead)[0] : null;
			var foot = o.nScrollFoot ? $('table', o.nScrollFoot)[0] : null;
	
			if ( o.nTable === t || head === t || foot === t ) {
				is = true;
			}
		} );
	
		return is;
	};
	
	
	/**
	 * Get all DataTable tables that have been initialised - optionally you can
	 * select to get only currently visible tables.
	 *
	 *  @param {boolean} [visible=false] Flag to indicate if you want all (default)
	 *    or visible tables only.
	 *  @returns {array} Array of `table` nodes (not DataTable instances) which are
	 *    DataTables
	 *  @static
	 *  @dtopt API-Static
	 *
	 *  @example
	 *    $.each( $.fn.dataTable.tables(true), function () {
	 *      $(table).DataTable().columns.adjust();
	 *    } );
	 */
	DataTable.tables = DataTable.fnTables = function ( visible )
	{
		var api = false;
	
		if ( $.isPlainObject( visible ) ) {
			api = visible.api;
			visible = visible.visible;
		}
	
		var a = $.map( DataTable.settings, function (o) {
			if ( !visible || (visible && $(o.nTable).is(':visible')) ) {
				return o.nTable;
			}
		} );
	
		return api ?
			new _Api( a ) :
			a;
	};
	
	
	/**
	 * Convert from camel case parameters to Hungarian notation. This is made public
	 * for the extensions to provide the same ability as DataTables core to accept
	 * either the 1.9 style Hungarian notation, or the 1.10+ style camelCase
	 * parameters.
	 *
	 *  @param {object} src The model object which holds all parameters that can be
	 *    mapped.
	 *  @param {object} user The object to convert from camel case to Hungarian.
	 *  @param {boolean} force When set to `true`, properties which already have a
	 *    Hungarian value in the `user` object will be overwritten. Otherwise they
	 *    won't be.
	 */
	DataTable.camelToHungarian = _fnCamelToHungarian;
	
	
	
	/**
	 *
	 */
	_api_register( '$()', function ( selector, opts ) {
		var
			rows   = this.rows( opts ).nodes(), // Get all rows
			jqRows = $(rows);
	
		return $( [].concat(
			jqRows.filter( selector ).toArray(),
			jqRows.find( selector ).toArray()
		) );
	} );
	
	
	// jQuery functions to operate on the tables
	$.each( [ 'on', 'one', 'off' ], function (i, key) {
		_api_register( key+'()', function ( /* event, handler */ ) {
			var args = Array.prototype.slice.call(arguments);
	
			// Add the `dt` namespace automatically if it isn't already present
			args[0] = $.map( args[0].split( /\s/ ), function ( e ) {
				return ! e.match(/\.dt\b/) ?
					e+'.dt' :
					e;
				} ).join( ' ' );
	
			var inst = $( this.tables().nodes() );
			inst[key].apply( inst, args );
			return this;
		} );
	} );
	
	
	_api_register( 'clear()', function () {
		return this.iterator( 'table', function ( settings ) {
			_fnClearTable( settings );
		} );
	} );
	
	
	_api_register( 'settings()', function () {
		return new _Api( this.context, this.context );
	} );
	
	
	_api_register( 'init()', function () {
		var ctx = this.context;
		return ctx.length ? ctx[0].oInit : null;
	} );
	
	
	_api_register( 'data()', function () {
		return this.iterator( 'table', function ( settings ) {
			return _pluck( settings.aoData, '_aData' );
		} ).flatten();
	} );
	
	
	_api_register( 'destroy()', function ( remove ) {
		remove = remove || false;
	
		return this.iterator( 'table', function ( settings ) {
			var orig      = settings.nTableWrapper.parentNode;
			var classes   = settings.oClasses;
			var table     = settings.nTable;
			var tbody     = settings.nTBody;
			var thead     = settings.nTHead;
			var tfoot     = settings.nTFoot;
			var jqTable   = $(table);
			var jqTbody   = $(tbody);
			var jqWrapper = $(settings.nTableWrapper);
			var rows      = $.map( settings.aoData, function (r) { return r.nTr; } );
			var i, ien;
	
			// Flag to note that the table is currently being destroyed - no action
			// should be taken
			settings.bDestroying = true;
	
			// Fire off the destroy callbacks for plug-ins etc
			_fnCallbackFire( settings, "aoDestroyCallback", "destroy", [settings] );
	
			// If not being removed from the document, make all columns visible
			if ( ! remove ) {
				new _Api( settings ).columns().visible( true );
			}
	
			// Blitz all `DT` namespaced events (these are internal events, the
			// lowercase, `dt` events are user subscribed and they are responsible
			// for removing them
			jqWrapper.off('.DT').find(':not(tbody *)').off('.DT');
			$(window).off('.DT-'+settings.sInstance);
	
			// When scrolling we had to break the table up - restore it
			if ( table != thead.parentNode ) {
				jqTable.children('thead').detach();
				jqTable.append( thead );
			}
	
			if ( tfoot && table != tfoot.parentNode ) {
				jqTable.children('tfoot').detach();
				jqTable.append( tfoot );
			}
	
			settings.aaSorting = [];
			settings.aaSortingFixed = [];
			_fnSortingClasses( settings );
	
			$( rows ).removeClass( settings.asStripeClasses.join(' ') );
	
			$('th, td', thead).removeClass( classes.sSortable+' '+
				classes.sSortableAsc+' '+classes.sSortableDesc+' '+classes.sSortableNone
			);
	
			if ( settings.bJUI ) {
				$('th span.'+classes.sSortIcon+ ', td span.'+classes.sSortIcon, thead).detach();
				$('th, td', thead).each( function () {
					var wrapper = $('div.'+classes.sSortJUIWrapper, this);
					$(this).append( wrapper.contents() );
					wrapper.detach();
				} );
			}
	
			// Add the TR elements back into the table in their original order
			jqTbody.children().detach();
			jqTbody.append( rows );
	
			// Remove the DataTables generated nodes, events and classes
			var removedMethod = remove ? 'remove' : 'detach';
			jqTable[ removedMethod ]();
			jqWrapper[ removedMethod ]();
	
			// If we need to reattach the table to the document
			if ( ! remove && orig ) {
				// insertBefore acts like appendChild if !arg[1]
				orig.insertBefore( table, settings.nTableReinsertBefore );
	
				// Restore the width of the original table - was read from the style property,
				// so we can restore directly to that
				jqTable
					.css( 'width', settings.sDestroyWidth )
					.removeClass( classes.sTable );
	
				// If the were originally stripe classes - then we add them back here.
				// Note this is not fool proof (for example if not all rows had stripe
				// classes - but it's a good effort without getting carried away
				ien = settings.asDestroyStripes.length;
	
				if ( ien ) {
					jqTbody.children().each( function (i) {
						$(this).addClass( settings.asDestroyStripes[i % ien] );
					} );
				}
			}
	
			/* Remove the settings object from the settings array */
			var idx = $.inArray( settings, DataTable.settings );
			if ( idx !== -1 ) {
				DataTable.settings.splice( idx, 1 );
			}
		} );
	} );
	
	
	// Add the `every()` method for rows, columns and cells in a compact form
	$.each( [ 'column', 'row', 'cell' ], function ( i, type ) {
		_api_register( type+'s().every()', function ( fn ) {
			var opts = this.selector.opts;
			var api = this;
	
			return this.iterator( type, function ( settings, arg1, arg2, arg3, arg4 ) {
				// Rows and columns:
				//  arg1 - index
				//  arg2 - table counter
				//  arg3 - loop counter
				//  arg4 - undefined
				// Cells:
				//  arg1 - row index
				//  arg2 - column index
				//  arg3 - table counter
				//  arg4 - loop counter
				fn.call(
					api[ type ](
						arg1,
						type==='cell' ? arg2 : opts,
						type==='cell' ? opts : undefined
					),
					arg1, arg2, arg3, arg4
				);
			} );
		} );
	} );
	
	
	// i18n method for extensions to be able to use the language object from the
	// DataTable
	_api_register( 'i18n()', function ( token, def, plural ) {
		var ctx = this.context[0];
		var resolved = _fnGetObjectDataFn( token )( ctx.oLanguage );
	
		if ( resolved === undefined ) {
			resolved = def;
		}
	
		if ( plural !== undefined && $.isPlainObject( resolved ) ) {
			resolved = resolved[ plural ] !== undefined ?
				resolved[ plural ] :
				resolved._;
		}
	
		return resolved.replace( '%d', plural ); // nb: plural might be undefined,
	} );
	/**
	 * Version string for plug-ins to check compatibility. Allowed format is
	 * `a.b.c-d` where: a:int, b:int, c:int, d:string(dev|beta|alpha). `d` is used
	 * only for non-release builds. See http://semver.org/ for more information.
	 *  @member
	 *  @type string
	 *  @default Version number
	 */
	DataTable.version = "1.10.15";

	/**
	 * Private data store, containing all of the settings objects that are
	 * created for the tables on a given page.
	 *
	 * Note that the `DataTable.settings` object is aliased to
	 * `jQuery.fn.dataTableExt` through which it may be accessed and
	 * manipulated, or `jQuery.fn.dataTable.settings`.
	 *  @member
	 *  @type array
	 *  @default []
	 *  @private
	 */
	DataTable.settings = [];

	/**
	 * Object models container, for the various models that DataTables has
	 * available to it. These models define the objects that are used to hold
	 * the active state and configuration of the table.
	 *  @namespace
	 */
	DataTable.models = {};
	
	
	
	/**
	 * Template object for the way in which DataTables holds information about
	 * search information for the global filter and individual column filters.
	 *  @namespace
	 */
	DataTable.models.oSearch = {
		/**
		 * Flag to indicate if the filtering should be case insensitive or not
		 *  @type boolean
		 *  @default true
		 */
		"bCaseInsensitive": true,
	
		/**
		 * Applied search term
		 *  @type string
		 *  @default <i>Empty string</i>
		 */
		"sSearch": "",
	
		/**
		 * Flag to indicate if the search term should be interpreted as a
		 * regular expression (true) or not (false) and therefore and special
		 * regex characters escaped.
		 *  @type boolean
		 *  @default false
		 */
		"bRegex": false,
	
		/**
		 * Flag to indicate if DataTables is to use its smart filtering or not.
		 *  @type boolean
		 *  @default true
		 */
		"bSmart": true
	};
	
	
	
	
	/**
	 * Template object for the way in which DataTables holds information about
	 * each individual row. This is the object format used for the settings
	 * aoData array.
	 *  @namespace
	 */
	DataTable.models.oRow = {
		/**
		 * TR element for the row
		 *  @type node
		 *  @default null
		 */
		"nTr": null,
	
		/**
		 * Array of TD elements for each row. This is null until the row has been
		 * created.
		 *  @type array nodes
		 *  @default []
		 */
		"anCells": null,
	
		/**
		 * Data object from the original data source for the row. This is either
		 * an array if using the traditional form of DataTables, or an object if
		 * using mData options. The exact type will depend on the passed in
		 * data from the data source, or will be an array if using DOM a data
		 * source.
		 *  @type array|object
		 *  @default []
		 */
		"_aData": [],
	
		/**
		 * Sorting data cache - this array is ostensibly the same length as the
		 * number of columns (although each index is generated only as it is
		 * needed), and holds the data that is used for sorting each column in the
		 * row. We do this cache generation at the start of the sort in order that
		 * the formatting of the sort data need be done only once for each cell
		 * per sort. This array should not be read from or written to by anything
		 * other than the master sorting methods.
		 *  @type array
		 *  @default null
		 *  @private
		 */
		"_aSortData": null,
	
		/**
		 * Per cell filtering data cache. As per the sort data cache, used to
		 * increase the performance of the filtering in DataTables
		 *  @type array
		 *  @default null
		 *  @private
		 */
		"_aFilterData": null,
	
		/**
		 * Filtering data cache. This is the same as the cell filtering cache, but
		 * in this case a string rather than an array. This is easily computed with
		 * a join on `_aFilterData`, but is provided as a cache so the join isn't
		 * needed on every search (memory traded for performance)
		 *  @type array
		 *  @default null
		 *  @private
		 */
		"_sFilterRow": null,
	
		/**
		 * Cache of the class name that DataTables has applied to the row, so we
		 * can quickly look at this variable rather than needing to do a DOM check
		 * on className for the nTr property.
		 *  @type string
		 *  @default <i>Empty string</i>
		 *  @private
		 */
		"_sRowStripe": "",
	
		/**
		 * Denote if the original data source was from the DOM, or the data source
		 * object. This is used for invalidating data, so DataTables can
		 * automatically read data from the original source, unless uninstructed
		 * otherwise.
		 *  @type string
		 *  @default null
		 *  @private
		 */
		"src": null,
	
		/**
		 * Index in the aoData array. This saves an indexOf lookup when we have the
		 * object, but want to know the index
		 *  @type integer
		 *  @default -1
		 *  @private
		 */
		"idx": -1
	};
	
	
	/**
	 * Template object for the column information object in DataTables. This object
	 * is held in the settings aoColumns array and contains all the information that
	 * DataTables needs about each individual column.
	 *
	 * Note that this object is related to {@link DataTable.defaults.column}
	 * but this one is the internal data store for DataTables's cache of columns.
	 * It should NOT be manipulated outside of DataTables. Any configuration should
	 * be done through the initialisation options.
	 *  @namespace
	 */
	DataTable.models.oColumn = {
		/**
		 * Column index. This could be worked out on-the-fly with $.inArray, but it
		 * is faster to just hold it as a variable
		 *  @type integer
		 *  @default null
		 */
		"idx": null,
	
		/**
		 * A list of the columns that sorting should occur on when this column
		 * is sorted. That this property is an array allows multi-column sorting
		 * to be defined for a column (for example first name / last name columns
		 * would benefit from this). The values are integers pointing to the
		 * columns to be sorted on (typically it will be a single integer pointing
		 * at itself, but that doesn't need to be the case).
		 *  @type array
		 */
		"aDataSort": null,
	
		/**
		 * Define the sorting directions that are applied to the column, in sequence
		 * as the column is repeatedly sorted upon - i.e. the first value is used
		 * as the sorting direction when the column if first sorted (clicked on).
		 * Sort it again (click again) and it will move on to the next index.
		 * Repeat until loop.
		 *  @type array
		 */
		"asSorting": null,
	
		/**
		 * Flag to indicate if the column is searchable, and thus should be included
		 * in the filtering or not.
		 *  @type boolean
		 */
		"bSearchable": null,
	
		/**
		 * Flag to indicate if the column is sortable or not.
		 *  @type boolean
		 */
		"bSortable": null,
	
		/**
		 * Flag to indicate if the column is currently visible in the table or not
		 *  @type boolean
		 */
		"bVisible": null,
	
		/**
		 * Store for manual type assignment using the `column.type` option. This
		 * is held in store so we can manipulate the column's `sType` property.
		 *  @type string
		 *  @default null
		 *  @private
		 */
		"_sManualType": null,
	
		/**
		 * Flag to indicate if HTML5 data attributes should be used as the data
		 * source for filtering or sorting. True is either are.
		 *  @type boolean
		 *  @default false
		 *  @private
		 */
		"_bAttrSrc": false,
	
		/**
		 * Developer definable function that is called whenever a cell is created (Ajax source,
		 * etc) or processed for input (DOM source). This can be used as a compliment to mRender
		 * allowing you to modify the DOM element (add background colour for example) when the
		 * element is available.
		 *  @type function
		 *  @param {element} nTd The TD node that has been created
		 *  @param {*} sData The Data for the cell
		 *  @param {array|object} oData The data for the whole row
		 *  @param {int} iRow The row index for the aoData data store
		 *  @default null
		 */
		"fnCreatedCell": null,
	
		/**
		 * Function to get data from a cell in a column. You should <b>never</b>
		 * access data directly through _aData internally in DataTables - always use
		 * the method attached to this property. It allows mData to function as
		 * required. This function is automatically assigned by the column
		 * initialisation method
		 *  @type function
		 *  @param {array|object} oData The data array/object for the array
		 *    (i.e. aoData[]._aData)
		 *  @param {string} sSpecific The specific data type you want to get -
		 *    'display', 'type' 'filter' 'sort'
		 *  @returns {*} The data for the cell from the given row's data
		 *  @default null
		 */
		"fnGetData": null,
	
		/**
		 * Function to set data for a cell in the column. You should <b>never</b>
		 * set the data directly to _aData internally in DataTables - always use
		 * this method. It allows mData to function as required. This function
		 * is automatically assigned by the column initialisation method
		 *  @type function
		 *  @param {array|object} oData The data array/object for the array
		 *    (i.e. aoData[]._aData)
		 *  @param {*} sValue Value to set
		 *  @default null
		 */
		"fnSetData": null,
	
		/**
		 * Property to read the value for the cells in the column from the data
		 * source array / object. If null, then the default content is used, if a
		 * function is given then the return from the function is used.
		 *  @type function|int|string|null
		 *  @default null
		 */
		"mData": null,
	
		/**
		 * Partner property to mData which is used (only when defined) to get
		 * the data - i.e. it is basically the same as mData, but without the
		 * 'set' option, and also the data fed to it is the result from mData.
		 * This is the rendering method to match the data method of mData.
		 *  @type function|int|string|null
		 *  @default null
		 */
		"mRender": null,
	
		/**
		 * Unique header TH/TD element for this column - this is what the sorting
		 * listener is attached to (if sorting is enabled.)
		 *  @type node
		 *  @default null
		 */
		"nTh": null,
	
		/**
		 * Unique footer TH/TD element for this column (if there is one). Not used
		 * in DataTables as such, but can be used for plug-ins to reference the
		 * footer for each column.
		 *  @type node
		 *  @default null
		 */
		"nTf": null,
	
		/**
		 * The class to apply to all TD elements in the table's TBODY for the column
		 *  @type string
		 *  @default null
		 */
		"sClass": null,
	
		/**
		 * When DataTables calculates the column widths to assign to each column,
		 * it finds the longest string in each column and then constructs a
		 * temporary table and reads the widths from that. The problem with this
		 * is that "mmm" is much wider then "iiii", but the latter is a longer
		 * string - thus the calculation can go wrong (doing it properly and putting
		 * it into an DOM object and measuring that is horribly(!) slow). Thus as
		 * a "work around" we provide this option. It will append its value to the
		 * text that is found to be the longest string for the column - i.e. padding.
		 *  @type string
		 */
		"sContentPadding": null,
	
		/**
		 * Allows a default value to be given for a column's data, and will be used
		 * whenever a null data source is encountered (this can be because mData
		 * is set to null, or because the data source itself is null).
		 *  @type string
		 *  @default null
		 */
		"sDefaultContent": null,
	
		/**
		 * Name for the column, allowing reference to the column by name as well as
		 * by index (needs a lookup to work by name).
		 *  @type string
		 */
		"sName": null,
	
		/**
		 * Custom sorting data type - defines which of the available plug-ins in
		 * afnSortData the custom sorting will use - if any is defined.
		 *  @type string
		 *  @default std
		 */
		"sSortDataType": 'std',
	
		/**
		 * Class to be applied to the header element when sorting on this column
		 *  @type string
		 *  @default null
		 */
		"sSortingClass": null,
	
		/**
		 * Class to be applied to the header element when sorting on this column -
		 * when jQuery UI theming is used.
		 *  @type string
		 *  @default null
		 */
		"sSortingClassJUI": null,
	
		/**
		 * Title of the column - what is seen in the TH element (nTh).
		 *  @type string
		 */
		"sTitle": null,
	
		/**
		 * Column sorting and filtering type
		 *  @type string
		 *  @default null
		 */
		"sType": null,
	
		/**
		 * Width of the column
		 *  @type string
		 *  @default null
		 */
		"sWidth": null,
	
		/**
		 * Width of the column when it was first "encountered"
		 *  @type string
		 *  @default null
		 */
		"sWidthOrig": null
	};
	
	
	/*
	 * Developer note: The properties of the object below are given in Hungarian
	 * notation, that was used as the interface for DataTables prior to v1.10, however
	 * from v1.10 onwards the primary interface is camel case. In order to avoid
	 * breaking backwards compatibility utterly with this change, the Hungarian
	 * version is still, internally the primary interface, but is is not documented
	 * - hence the @name tags in each doc comment. This allows a Javascript function
	 * to create a map from Hungarian notation to camel case (going the other direction
	 * would require each property to be listed, which would at around 3K to the size
	 * of DataTables, while this method is about a 0.5K hit.
	 *
	 * Ultimately this does pave the way for Hungarian notation to be dropped
	 * completely, but that is a massive amount of work and will break current
	 * installs (therefore is on-hold until v2).
	 */
	
	/**
	 * Initialisation options that can be given to DataTables at initialisation
	 * time.
	 *  @namespace
	 */
	DataTable.defaults = {
		/**
		 * An array of data to use for the table, passed in at initialisation which
		 * will be used in preference to any data which is already in the DOM. This is
		 * particularly useful for constructing tables purely in Javascript, for
		 * example with a custom Ajax call.
		 *  @type array
		 *  @default null
		 *
		 *  @dtopt Option
		 *  @name DataTable.defaults.data
		 *
		 *  @example
		 *    // Using a 2D array data source
		 *    $(document).ready( function () {
		 *      $('#example').dataTable( {
		 *        "data": [
		 *          ['Trident', 'Internet Explorer 4.0', 'Win 95+', 4, 'X'],
		 *          ['Trident', 'Internet Explorer 5.0', 'Win 95+', 5, 'C'],
		 *        ],
		 *        "columns": [
		 *          { "title": "Engine" },
		 *          { "title": "Browser" },
		 *          { "title": "Platform" },
		 *          { "title": "Version" },
		 *          { "title": "Grade" }
		 *        ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Using an array of objects as a data source (`data`)
		 *    $(document).ready( function () {
		 *      $('#example').dataTable( {
		 *        "data": [
		 *          {
		 *            "engine":   "Trident",
		 *            "browser":  "Internet Explorer 4.0",
		 *            "platform": "Win 95+",
		 *            "version":  4,
		 *            "grade":    "X"
		 *          },
		 *          {
		 *            "engine":   "Trident",
		 *            "browser":  "Internet Explorer 5.0",
		 *            "platform": "Win 95+",
		 *            "version":  5,
		 *            "grade":    "C"
		 *          }
		 *        ],
		 *        "columns": [
		 *          { "title": "Engine",   "data": "engine" },
		 *          { "title": "Browser",  "data": "browser" },
		 *          { "title": "Platform", "data": "platform" },
		 *          { "title": "Version",  "data": "version" },
		 *          { "title": "Grade",    "data": "grade" }
		 *        ]
		 *      } );
		 *    } );
		 */
		"aaData": null,
	
	
		/**
		 * If ordering is enabled, then DataTables will perform a first pass sort on
		 * initialisation. You can define which column(s) the sort is performed
		 * upon, and the sorting direction, with this variable. The `sorting` array
		 * should contain an array for each column to be sorted initially containing
		 * the column's index and a direction string ('asc' or 'desc').
		 *  @type array
		 *  @default [[0,'asc']]
		 *
		 *  @dtopt Option
		 *  @name DataTable.defaults.order
		 *
		 *  @example
		 *    // Sort by 3rd column first, and then 4th column
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "order": [[2,'asc'], [3,'desc']]
		 *      } );
		 *    } );
		 *
		 *    // No initial sorting
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "order": []
		 *      } );
		 *    } );
		 */
		"aaSorting": [[0,'asc']],
	
	
		/**
		 * This parameter is basically identical to the `sorting` parameter, but
		 * cannot be overridden by user interaction with the table. What this means
		 * is that you could have a column (visible or hidden) which the sorting
		 * will always be forced on first - any sorting after that (from the user)
		 * will then be performed as required. This can be useful for grouping rows
		 * together.
		 *  @type array
		 *  @default null
		 *
		 *  @dtopt Option
		 *  @name DataTable.defaults.orderFixed
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "orderFixed": [[0,'asc']]
		 *      } );
		 *    } )
		 */
		"aaSortingFixed": [],
	
	
		/**
		 * DataTables can be instructed to load data to display in the table from a
		 * Ajax source. This option defines how that Ajax call is made and where to.
		 *
		 * The `ajax` property has three different modes of operation, depending on
		 * how it is defined. These are:
		 *
		 * * `string` - Set the URL from where the data should be loaded from.
		 * * `object` - Define properties for `jQuery.ajax`.
		 * * `function` - Custom data get function
		 *
		 * `string`
		 * --------
		 *
		 * As a string, the `ajax` property simply defines the URL from which
		 * DataTables will load data.
		 *
		 * `object`
		 * --------
		 *
		 * As an object, the parameters in the object are passed to
		 * [jQuery.ajax](http://api.jquery.com/jQuery.ajax/) allowing fine control
		 * of the Ajax request. DataTables has a number of default parameters which
		 * you can override using this option. Please refer to the jQuery
		 * documentation for a full description of the options available, although
		 * the following parameters provide additional options in DataTables or
		 * require special consideration:
		 *
		 * * `data` - As with jQuery, `data` can be provided as an object, but it
		 *   can also be used as a function to manipulate the data DataTables sends
		 *   to the server. The function takes a single parameter, an object of
		 *   parameters with the values that DataTables has readied for sending. An
		 *   object may be returned which will be merged into the DataTables
		 *   defaults, or you can add the items to the object that was passed in and
		 *   not return anything from the function. This supersedes `fnServerParams`
		 *   from DataTables 1.9-.
		 *
		 * * `dataSrc` - By default DataTables will look for the property `data` (or
		 *   `aaData` for compatibility with DataTables 1.9-) when obtaining data
		 *   from an Ajax source or for server-side processing - this parameter
		 *   allows that property to be changed. You can use Javascript dotted
		 *   object notation to get a data source for multiple levels of nesting, or
		 *   it my be used as a function. As a function it takes a single parameter,
		 *   the JSON returned from the server, which can be manipulated as
		 *   required, with the returned value being that used by DataTables as the
		 *   data source for the table. This supersedes `sAjaxDataProp` from
		 *   DataTables 1.9-.
		 *
		 * * `success` - Should not be overridden it is used internally in
		 *   DataTables. To manipulate / transform the data returned by the server
		 *   use `ajax.dataSrc`, or use `ajax` as a function (see below).
		 *
		 * `function`
		 * ----------
		 *
		 * As a function, making the Ajax call is left up to yourself allowing
		 * complete control of the Ajax request. Indeed, if desired, a method other
		 * than Ajax could be used to obtain the required data, such as Web storage
		 * or an AIR database.
		 *
		 * The function is given four parameters and no return is required. The
		 * parameters are:
		 *
		 * 1. _object_ - Data to send to the server
		 * 2. _function_ - Callback function that must be executed when the required
		 *    data has been obtained. That data should be passed into the callback
		 *    as the only parameter
		 * 3. _object_ - DataTables settings object for the table
		 *
		 * Note that this supersedes `fnServerData` from DataTables 1.9-.
		 *
		 *  @type string|object|function
		 *  @default null
		 *
		 *  @dtopt Option
		 *  @name DataTable.defaults.ajax
		 *  @since 1.10.0
		 *
		 * @example
		 *   // Get JSON data from a file via Ajax.
		 *   // Note DataTables expects data in the form `{ data: [ ...data... ] }` by default).
		 *   $('#example').dataTable( {
		 *     "ajax": "data.json"
		 *   } );
		 *
		 * @example
		 *   // Get JSON data from a file via Ajax, using `dataSrc` to change
		 *   // `data` to `tableData` (i.e. `{ tableData: [ ...data... ] }`)
		 *   $('#example').dataTable( {
		 *     "ajax": {
		 *       "url": "data.json",
		 *       "dataSrc": "tableData"
		 *     }
		 *   } );
		 *
		 * @example
		 *   // Get JSON data from a file via Ajax, using `dataSrc` to read data
		 *   // from a plain array rather than an array in an object
		 *   $('#example').dataTable( {
		 *     "ajax": {
		 *       "url": "data.json",
		 *       "dataSrc": ""
		 *     }
		 *   } );
		 *
		 * @example
		 *   // Manipulate the data returned from the server - add a link to data
		 *   // (note this can, should, be done using `render` for the column - this
		 *   // is just a simple example of how the data can be manipulated).
		 *   $('#example').dataTable( {
		 *     "ajax": {
		 *       "url": "data.json",
		 *       "dataSrc": function ( json ) {
		 *         for ( var i=0, ien=json.length ; i<ien ; i++ ) {
		 *           json[i][0] = '<a href="/message/'+json[i][0]+'>View message</a>';
		 *         }
		 *         return json;
		 *       }
		 *     }
		 *   } );
		 *
		 * @example
		 *   // Add data to the request
		 *   $('#example').dataTable( {
		 *     "ajax": {
		 *       "url": "data.json",
		 *       "data": function ( d ) {
		 *         return {
		 *           "extra_search": $('#extra').val()
		 *         };
		 *       }
		 *     }
		 *   } );
		 *
		 * @example
		 *   // Send request as POST
		 *   $('#example').dataTable( {
		 *     "ajax": {
		 *       "url": "data.json",
		 *       "type": "POST"
		 *     }
		 *   } );
		 *
		 * @example
		 *   // Get the data from localStorage (could interface with a form for
		 *   // adding, editing and removing rows).
		 *   $('#example').dataTable( {
		 *     "ajax": function (data, callback, settings) {
		 *       callback(
		 *         JSON.parse( localStorage.getItem('dataTablesData') )
		 *       );
		 *     }
		 *   } );
		 */
		"ajax": null,
	
	
		/**
		 * This parameter allows you to readily specify the entries in the length drop
		 * down menu that DataTables shows when pagination is enabled. It can be
		 * either a 1D array of options which will be used for both the displayed
		 * option and the value, or a 2D array which will use the array in the first
		 * position as the value, and the array in the second position as the
		 * displayed options (useful for language strings such as 'All').
		 *
		 * Note that the `pageLength` property will be automatically set to the
		 * first value given in this array, unless `pageLength` is also provided.
		 *  @type array
		 *  @default [ 10, 25, 50, 100 ]
		 *
		 *  @dtopt Option
		 *  @name DataTable.defaults.lengthMenu
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "lengthMenu": [[10, 25, 50, -1], [10, 25, 50, "All"]]
		 *      } );
		 *    } );
		 */
		"aLengthMenu": [ 10, 25, 50, 100 ],
	
	
		/**
		 * The `columns` option in the initialisation parameter allows you to define
		 * details about the way individual columns behave. For a full list of
		 * column options that can be set, please see
		 * {@link DataTable.defaults.column}. Note that if you use `columns` to
		 * define your columns, you must have an entry in the array for every single
		 * column that you have in your table (these can be null if you don't which
		 * to specify any options).
		 *  @member
		 *
		 *  @name DataTable.defaults.column
		 */
		"aoColumns": null,
	
		/**
		 * Very similar to `columns`, `columnDefs` allows you to target a specific
		 * column, multiple columns, or all columns, using the `targets` property of
		 * each object in the array. This allows great flexibility when creating
		 * tables, as the `columnDefs` arrays can be of any length, targeting the
		 * columns you specifically want. `columnDefs` may use any of the column
		 * options available: {@link DataTable.defaults.column}, but it _must_
		 * have `targets` defined in each object in the array. Values in the `targets`
		 * array may be:
		 *   <ul>
		 *     <li>a string - class name will be matched on the TH for the column</li>
		 *     <li>0 or a positive integer - column index counting from the left</li>
		 *     <li>a negative integer - column index counting from the right</li>
		 *     <li>the string "_all" - all columns (i.e. assign a default)</li>
		 *   </ul>
		 *  @member
		 *
		 *  @name DataTable.defaults.columnDefs
		 */
		"aoColumnDefs": null,
	
	
		/**
		 * Basically the same as `search`, this parameter defines the individual column
		 * filtering state at initialisation time. The array must be of the same size
		 * as the number of columns, and each element be an object with the parameters
		 * `search` and `escapeRegex` (the latter is optional). 'null' is also
		 * accepted and the default will be used.
		 *  @type array
		 *  @default []
		 *
		 *  @dtopt Option
		 *  @name DataTable.defaults.searchCols
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "searchCols": [
		 *          null,
		 *          { "search": "My filter" },
		 *          null,
		 *          { "search": "^[0-9]", "escapeRegex": false }
		 *        ]
		 *      } );
		 *    } )
		 */
		"aoSearchCols": [],
	
	
		/**
		 * An array of CSS classes that should be applied to displayed rows. This
		 * array may be of any length, and DataTables will apply each class
		 * sequentially, looping when required.
		 *  @type array
		 *  @default null <i>Will take the values determined by the `oClasses.stripe*`
		 *    options</i>
		 *
		 *  @dtopt Option
		 *  @name DataTable.defaults.stripeClasses
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "stripeClasses": [ 'strip1', 'strip2', 'strip3' ]
		 *      } );
		 *    } )
		 */
		"asStripeClasses": null,
	
	
		/**
		 * Enable or disable automatic column width calculation. This can be disabled
		 * as an optimisation (it takes some time to calculate the widths) if the
		 * tables widths are passed in using `columns`.
		 *  @type boolean
		 *  @default true
		 *
		 *  @dtopt Features
		 *  @name DataTable.defaults.autoWidth
		 *
		 *  @example
		 *    $(document).ready( function () {
		 *      $('#example').dataTable( {
		 *        "autoWidth": false
		 *      } );
		 *    } );
		 */
		"bAutoWidth": true,
	
	
		/**
		 * Deferred rendering can provide DataTables with a huge speed boost when you
		 * are using an Ajax or JS data source for the table. This option, when set to
		 * true, will cause DataTables to defer the creation of the table elements for
		 * each row until they are needed for a draw - saving a significant amount of
		 * time.
		 *  @type boolean
		 *  @default false
		 *
		 *  @dtopt Features
		 *  @name DataTable.defaults.deferRender
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "ajax": "sources/arrays.txt",
		 *        "deferRender": true
		 *      } );
		 *    } );
		 */
		"bDeferRender": false,
	
	
		/**
		 * Replace a DataTable which matches the given selector and replace it with
		 * one which has the properties of the new initialisation object passed. If no
		 * table matches the selector, then the new DataTable will be constructed as
		 * per normal.
		 *  @type boolean
		 *  @default false
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.destroy
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "srollY": "200px",
		 *        "paginate": false
		 *      } );
		 *
		 *      // Some time later....
		 *      $('#example').dataTable( {
		 *        "filter": false,
		 *        "destroy": true
		 *      } );
		 *    } );
		 */
		"bDestroy": false,
	
	
		/**
		 * Enable or disable filtering of data. Filtering in DataTables is "smart" in
		 * that it allows the end user to input multiple words (space separated) and
		 * will match a row containing those words, even if not in the order that was
		 * specified (this allow matching across multiple columns). Note that if you
		 * wish to use filtering in DataTables this must remain 'true' - to remove the
		 * default filtering input box and retain filtering abilities, please use
		 * {@link DataTable.defaults.dom}.
		 *  @type boolean
		 *  @default true
		 *
		 *  @dtopt Features
		 *  @name DataTable.defaults.searching
		 *
		 *  @example
		 *    $(document).ready( function () {
		 *      $('#example').dataTable( {
		 *        "searching": false
		 *      } );
		 *    } );
		 */
		"bFilter": true,
	
	
		/**
		 * Enable or disable the table information display. This shows information
		 * about the data that is currently visible on the page, including information
		 * about filtered data if that action is being performed.
		 *  @type boolean
		 *  @default true
		 *
		 *  @dtopt Features
		 *  @name DataTable.defaults.info
		 *
		 *  @example
		 *    $(document).ready( function () {
		 *      $('#example').dataTable( {
		 *        "info": false
		 *      } );
		 *    } );
		 */
		"bInfo": true,
	
	
		/**
		 * Enable jQuery UI ThemeRoller support (required as ThemeRoller requires some
		 * slightly different and additional mark-up from what DataTables has
		 * traditionally used).
		 *  @type boolean
		 *  @default false
		 *
		 *  @dtopt Features
		 *  @name DataTable.defaults.jQueryUI
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "jQueryUI": true
		 *      } );
		 *    } );
		 */
		"bJQueryUI": false,
	
	
		/**
		 * Allows the end user to select the size of a formatted page from a select
		 * menu (sizes are 10, 25, 50 and 100). Requires pagination (`paginate`).
		 *  @type boolean
		 *  @default true
		 *
		 *  @dtopt Features
		 *  @name DataTable.defaults.lengthChange
		 *
		 *  @example
		 *    $(document).ready( function () {
		 *      $('#example').dataTable( {
		 *        "lengthChange": false
		 *      } );
		 *    } );
		 */
		"bLengthChange": true,
	
	
		/**
		 * Enable or disable pagination.
		 *  @type boolean
		 *  @default true
		 *
		 *  @dtopt Features
		 *  @name DataTable.defaults.paging
		 *
		 *  @example
		 *    $(document).ready( function () {
		 *      $('#example').dataTable( {
		 *        "paging": false
		 *      } );
		 *    } );
		 */
		"bPaginate": true,
	
	
		/**
		 * Enable or disable the display of a 'processing' indicator when the table is
		 * being processed (e.g. a sort). This is particularly useful for tables with
		 * large amounts of data where it can take a noticeable amount of time to sort
		 * the entries.
		 *  @type boolean
		 *  @default false
		 *
		 *  @dtopt Features
		 *  @name DataTable.defaults.processing
		 *
		 *  @example
		 *    $(document).ready( function () {
		 *      $('#example').dataTable( {
		 *        "processing": true
		 *      } );
		 *    } );
		 */
		"bProcessing": false,
	
	
		/**
		 * Retrieve the DataTables object for the given selector. Note that if the
		 * table has already been initialised, this parameter will cause DataTables
		 * to simply return the object that has already been set up - it will not take
		 * account of any changes you might have made to the initialisation object
		 * passed to DataTables (setting this parameter to true is an acknowledgement
		 * that you understand this). `destroy` can be used to reinitialise a table if
		 * you need.
		 *  @type boolean
		 *  @default false
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.retrieve
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      initTable();
		 *      tableActions();
		 *    } );
		 *
		 *    function initTable ()
		 *    {
		 *      return $('#example').dataTable( {
		 *        "scrollY": "200px",
		 *        "paginate": false,
		 *        "retrieve": true
		 *      } );
		 *    }
		 *
		 *    function tableActions ()
		 *    {
		 *      var table = initTable();
		 *      // perform API operations with oTable
		 *    }
		 */
		"bRetrieve": false,
	
	
		/**
		 * When vertical (y) scrolling is enabled, DataTables will force the height of
		 * the table's viewport to the given height at all times (useful for layout).
		 * However, this can look odd when filtering data down to a small data set,
		 * and the footer is left "floating" further down. This parameter (when
		 * enabled) will cause DataTables to collapse the table's viewport down when
		 * the result set will fit within the given Y height.
		 *  @type boolean
		 *  @default false
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.scrollCollapse
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "scrollY": "200",
		 *        "scrollCollapse": true
		 *      } );
		 *    } );
		 */
		"bScrollCollapse": false,
	
	
		/**
		 * Configure DataTables to use server-side processing. Note that the
		 * `ajax` parameter must also be given in order to give DataTables a
		 * source to obtain the required data for each draw.
		 *  @type boolean
		 *  @default false
		 *
		 *  @dtopt Features
		 *  @dtopt Server-side
		 *  @name DataTable.defaults.serverSide
		 *
		 *  @example
		 *    $(document).ready( function () {
		 *      $('#example').dataTable( {
		 *        "serverSide": true,
		 *        "ajax": "xhr.php"
		 *      } );
		 *    } );
		 */
		"bServerSide": false,
	
	
		/**
		 * Enable or disable sorting of columns. Sorting of individual columns can be
		 * disabled by the `sortable` option for each column.
		 *  @type boolean
		 *  @default true
		 *
		 *  @dtopt Features
		 *  @name DataTable.defaults.ordering
		 *
		 *  @example
		 *    $(document).ready( function () {
		 *      $('#example').dataTable( {
		 *        "ordering": false
		 *      } );
		 *    } );
		 */
		"bSort": true,
	
	
		/**
		 * Enable or display DataTables' ability to sort multiple columns at the
		 * same time (activated by shift-click by the user).
		 *  @type boolean
		 *  @default true
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.orderMulti
		 *
		 *  @example
		 *    // Disable multiple column sorting ability
		 *    $(document).ready( function () {
		 *      $('#example').dataTable( {
		 *        "orderMulti": false
		 *      } );
		 *    } );
		 */
		"bSortMulti": true,
	
	
		/**
		 * Allows control over whether DataTables should use the top (true) unique
		 * cell that is found for a single column, or the bottom (false - default).
		 * This is useful when using complex headers.
		 *  @type boolean
		 *  @default false
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.orderCellsTop
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "orderCellsTop": true
		 *      } );
		 *    } );
		 */
		"bSortCellsTop": false,
	
	
		/**
		 * Enable or disable the addition of the classes `sorting\_1`, `sorting\_2` and
		 * `sorting\_3` to the columns which are currently being sorted on. This is
		 * presented as a feature switch as it can increase processing time (while
		 * classes are removed and added) so for large data sets you might want to
		 * turn this off.
		 *  @type boolean
		 *  @default true
		 *
		 *  @dtopt Features
		 *  @name DataTable.defaults.orderClasses
		 *
		 *  @example
		 *    $(document).ready( function () {
		 *      $('#example').dataTable( {
		 *        "orderClasses": false
		 *      } );
		 *    } );
		 */
		"bSortClasses": true,
	
	
		/**
		 * Enable or disable state saving. When enabled HTML5 `localStorage` will be
		 * used to save table display information such as pagination information,
		 * display length, filtering and sorting. As such when the end user reloads
		 * the page the display display will match what thy had previously set up.
		 *
		 * Due to the use of `localStorage` the default state saving is not supported
		 * in IE6 or 7. If state saving is required in those browsers, use
		 * `stateSaveCallback` to provide a storage solution such as cookies.
		 *  @type boolean
		 *  @default false
		 *
		 *  @dtopt Features
		 *  @name DataTable.defaults.stateSave
		 *
		 *  @example
		 *    $(document).ready( function () {
		 *      $('#example').dataTable( {
		 *        "stateSave": true
		 *      } );
		 *    } );
		 */
		"bStateSave": false,
	
	
		/**
		 * This function is called when a TR element is created (and all TD child
		 * elements have been inserted), or registered if using a DOM source, allowing
		 * manipulation of the TR element (adding classes etc).
		 *  @type function
		 *  @param {node} row "TR" element for the current row
		 *  @param {array} data Raw data array for this row
		 *  @param {int} dataIndex The index of this row in the internal aoData array
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.createdRow
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "createdRow": function( row, data, dataIndex ) {
		 *          // Bold the grade for all 'A' grade browsers
		 *          if ( data[4] == "A" )
		 *          {
		 *            $('td:eq(4)', row).html( '<b>A</b>' );
		 *          }
		 *        }
		 *      } );
		 *    } );
		 */
		"fnCreatedRow": null,
	
	
		/**
		 * This function is called on every 'draw' event, and allows you to
		 * dynamically modify any aspect you want about the created DOM.
		 *  @type function
		 *  @param {object} settings DataTables settings object
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.drawCallback
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "drawCallback": function( settings ) {
		 *          alert( 'DataTables has redrawn the table' );
		 *        }
		 *      } );
		 *    } );
		 */
		"fnDrawCallback": null,
	
	
		/**
		 * Identical to fnHeaderCallback() but for the table footer this function
		 * allows you to modify the table footer on every 'draw' event.
		 *  @type function
		 *  @param {node} foot "TR" element for the footer
		 *  @param {array} data Full table data (as derived from the original HTML)
		 *  @param {int} start Index for the current display starting point in the
		 *    display array
		 *  @param {int} end Index for the current display ending point in the
		 *    display array
		 *  @param {array int} display Index array to translate the visual position
		 *    to the full data array
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.footerCallback
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "footerCallback": function( tfoot, data, start, end, display ) {
		 *          tfoot.getElementsByTagName('th')[0].innerHTML = "Starting index is "+start;
		 *        }
		 *      } );
		 *    } )
		 */
		"fnFooterCallback": null,
	
	
		/**
		 * When rendering large numbers in the information element for the table
		 * (i.e. "Showing 1 to 10 of 57 entries") DataTables will render large numbers
		 * to have a comma separator for the 'thousands' units (e.g. 1 million is
		 * rendered as "1,000,000") to help readability for the end user. This
		 * function will override the default method DataTables uses.
		 *  @type function
		 *  @member
		 *  @param {int} toFormat number to be formatted
		 *  @returns {string} formatted string for DataTables to show the number
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.formatNumber
		 *
		 *  @example
		 *    // Format a number using a single quote for the separator (note that
		 *    // this can also be done with the language.thousands option)
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "formatNumber": function ( toFormat ) {
		 *          return toFormat.toString().replace(
		 *            /\B(?=(\d{3})+(?!\d))/g, "'"
		 *          );
		 *        };
		 *      } );
		 *    } );
		 */
		"fnFormatNumber": function ( toFormat ) {
			return toFormat.toString().replace(
				/\B(?=(\d{3})+(?!\d))/g,
				this.oLanguage.sThousands
			);
		},
	
	
		/**
		 * This function is called on every 'draw' event, and allows you to
		 * dynamically modify the header row. This can be used to calculate and
		 * display useful information about the table.
		 *  @type function
		 *  @param {node} head "TR" element for the header
		 *  @param {array} data Full table data (as derived from the original HTML)
		 *  @param {int} start Index for the current display starting point in the
		 *    display array
		 *  @param {int} end Index for the current display ending point in the
		 *    display array
		 *  @param {array int} display Index array to translate the visual position
		 *    to the full data array
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.headerCallback
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "fheaderCallback": function( head, data, start, end, display ) {
		 *          head.getElementsByTagName('th')[0].innerHTML = "Displaying "+(end-start)+" records";
		 *        }
		 *      } );
		 *    } )
		 */
		"fnHeaderCallback": null,
	
	
		/**
		 * The information element can be used to convey information about the current
		 * state of the table. Although the internationalisation options presented by
		 * DataTables are quite capable of dealing with most customisations, there may
		 * be times where you wish to customise the string further. This callback
		 * allows you to do exactly that.
		 *  @type function
		 *  @param {object} oSettings DataTables settings object
		 *  @param {int} start Starting position in data for the draw
		 *  @param {int} end End position in data for the draw
		 *  @param {int} max Total number of rows in the table (regardless of
		 *    filtering)
		 *  @param {int} total Total number of rows in the data set, after filtering
		 *  @param {string} pre The string that DataTables has formatted using it's
		 *    own rules
		 *  @returns {string} The string to be displayed in the information element.
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.infoCallback
		 *
		 *  @example
		 *    $('#example').dataTable( {
		 *      "infoCallback": function( settings, start, end, max, total, pre ) {
		 *        return start +" to "+ end;
		 *      }
		 *    } );
		 */
		"fnInfoCallback": null,
	
	
		/**
		 * Called when the table has been initialised. Normally DataTables will
		 * initialise sequentially and there will be no need for this function,
		 * however, this does not hold true when using external language information
		 * since that is obtained using an async XHR call.
		 *  @type function
		 *  @param {object} settings DataTables settings object
		 *  @param {object} json The JSON object request from the server - only
		 *    present if client-side Ajax sourced data is used
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.initComplete
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "initComplete": function(settings, json) {
		 *          alert( 'DataTables has finished its initialisation.' );
		 *        }
		 *      } );
		 *    } )
		 */
		"fnInitComplete": null,
	
	
		/**
		 * Called at the very start of each table draw and can be used to cancel the
		 * draw by returning false, any other return (including undefined) results in
		 * the full draw occurring).
		 *  @type function
		 *  @param {object} settings DataTables settings object
		 *  @returns {boolean} False will cancel the draw, anything else (including no
		 *    return) will allow it to complete.
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.preDrawCallback
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "preDrawCallback": function( settings ) {
		 *          if ( $('#test').val() == 1 ) {
		 *            return false;
		 *          }
		 *        }
		 *      } );
		 *    } );
		 */
		"fnPreDrawCallback": null,
	
	
		/**
		 * This function allows you to 'post process' each row after it have been
		 * generated for each table draw, but before it is rendered on screen. This
		 * function might be used for setting the row class name etc.
		 *  @type function
		 *  @param {node} row "TR" element for the current row
		 *  @param {array} data Raw data array for this row
		 *  @param {int} displayIndex The display index for the current table draw
		 *  @param {int} displayIndexFull The index of the data in the full list of
		 *    rows (after filtering)
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.rowCallback
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "rowCallback": function( row, data, displayIndex, displayIndexFull ) {
		 *          // Bold the grade for all 'A' grade browsers
		 *          if ( data[4] == "A" ) {
		 *            $('td:eq(4)', row).html( '<b>A</b>' );
		 *          }
		 *        }
		 *      } );
		 *    } );
		 */
		"fnRowCallback": null,
	
	
		/**
		 * __Deprecated__ The functionality provided by this parameter has now been
		 * superseded by that provided through `ajax`, which should be used instead.
		 *
		 * This parameter allows you to override the default function which obtains
		 * the data from the server so something more suitable for your application.
		 * For example you could use POST data, or pull information from a Gears or
		 * AIR database.
		 *  @type function
		 *  @member
		 *  @param {string} source HTTP source to obtain the data from (`ajax`)
		 *  @param {array} data A key/value pair object containing the data to send
		 *    to the server
		 *  @param {function} callback to be called on completion of the data get
		 *    process that will draw the data on the page.
		 *  @param {object} settings DataTables settings object
		 *
		 *  @dtopt Callbacks
		 *  @dtopt Server-side
		 *  @name DataTable.defaults.serverData
		 *
		 *  @deprecated 1.10. Please use `ajax` for this functionality now.
		 */
		"fnServerData": null,
	
	
		/**
		 * __Deprecated__ The functionality provided by this parameter has now been
		 * superseded by that provided through `ajax`, which should be used instead.
		 *
		 *  It is often useful to send extra data to the server when making an Ajax
		 * request - for example custom filtering information, and this callback
		 * function makes it trivial to send extra information to the server. The
		 * passed in parameter is the data set that has been constructed by
		 * DataTables, and you can add to this or modify it as you require.
		 *  @type function
		 *  @param {array} data Data array (array of objects which are name/value
		 *    pairs) that has been constructed by DataTables and will be sent to the
		 *    server. In the case of Ajax sourced data with server-side processing
		 *    this will be an empty array, for server-side processing there will be a
		 *    significant number of parameters!
		 *  @returns {undefined} Ensure that you modify the data array passed in,
		 *    as this is passed by reference.
		 *
		 *  @dtopt Callbacks
		 *  @dtopt Server-side
		 *  @name DataTable.defaults.serverParams
		 *
		 *  @deprecated 1.10. Please use `ajax` for this functionality now.
		 */
		"fnServerParams": null,
	
	
		/**
		 * Load the table state. With this function you can define from where, and how, the
		 * state of a table is loaded. By default DataTables will load from `localStorage`
		 * but you might wish to use a server-side database or cookies.
		 *  @type function
		 *  @member
		 *  @param {object} settings DataTables settings object
		 *  @param {object} callback Callback that can be executed when done. It
		 *    should be passed the loaded state object.
		 *  @return {object} The DataTables state object to be loaded
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.stateLoadCallback
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "stateSave": true,
		 *        "stateLoadCallback": function (settings, callback) {
		 *          $.ajax( {
		 *            "url": "/state_load",
		 *            "dataType": "json",
		 *            "success": function (json) {
		 *              callback( json );
		 *            }
		 *          } );
		 *        }
		 *      } );
		 *    } );
		 */
		"fnStateLoadCallback": function ( settings ) {
			try {
				return JSON.parse(
					(settings.iStateDuration === -1 ? sessionStorage : localStorage).getItem(
						'DataTables_'+settings.sInstance+'_'+location.pathname
					)
				);
			} catch (e) {}
		},
	
	
		/**
		 * Callback which allows modification of the saved state prior to loading that state.
		 * This callback is called when the table is loading state from the stored data, but
		 * prior to the settings object being modified by the saved state. Note that for
		 * plug-in authors, you should use the `stateLoadParams` event to load parameters for
		 * a plug-in.
		 *  @type function
		 *  @param {object} settings DataTables settings object
		 *  @param {object} data The state object that is to be loaded
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.stateLoadParams
		 *
		 *  @example
		 *    // Remove a saved filter, so filtering is never loaded
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "stateSave": true,
		 *        "stateLoadParams": function (settings, data) {
		 *          data.oSearch.sSearch = "";
		 *        }
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Disallow state loading by returning false
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "stateSave": true,
		 *        "stateLoadParams": function (settings, data) {
		 *          return false;
		 *        }
		 *      } );
		 *    } );
		 */
		"fnStateLoadParams": null,
	
	
		/**
		 * Callback that is called when the state has been loaded from the state saving method
		 * and the DataTables settings object has been modified as a result of the loaded state.
		 *  @type function
		 *  @param {object} settings DataTables settings object
		 *  @param {object} data The state object that was loaded
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.stateLoaded
		 *
		 *  @example
		 *    // Show an alert with the filtering value that was saved
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "stateSave": true,
		 *        "stateLoaded": function (settings, data) {
		 *          alert( 'Saved filter was: '+data.oSearch.sSearch );
		 *        }
		 *      } );
		 *    } );
		 */
		"fnStateLoaded": null,
	
	
		/**
		 * Save the table state. This function allows you to define where and how the state
		 * information for the table is stored By default DataTables will use `localStorage`
		 * but you might wish to use a server-side database or cookies.
		 *  @type function
		 *  @member
		 *  @param {object} settings DataTables settings object
		 *  @param {object} data The state object to be saved
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.stateSaveCallback
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "stateSave": true,
		 *        "stateSaveCallback": function (settings, data) {
		 *          // Send an Ajax request to the server with the state object
		 *          $.ajax( {
		 *            "url": "/state_save",
		 *            "data": data,
		 *            "dataType": "json",
		 *            "method": "POST"
		 *            "success": function () {}
		 *          } );
		 *        }
		 *      } );
		 *    } );
		 */
		"fnStateSaveCallback": function ( settings, data ) {
			try {
				(settings.iStateDuration === -1 ? sessionStorage : localStorage).setItem(
					'DataTables_'+settings.sInstance+'_'+location.pathname,
					JSON.stringify( data )
				);
			} catch (e) {}
		},
	
	
		/**
		 * Callback which allows modification of the state to be saved. Called when the table
		 * has changed state a new state save is required. This method allows modification of
		 * the state saving object prior to actually doing the save, including addition or
		 * other state properties or modification. Note that for plug-in authors, you should
		 * use the `stateSaveParams` event to save parameters for a plug-in.
		 *  @type function
		 *  @param {object} settings DataTables settings object
		 *  @param {object} data The state object to be saved
		 *
		 *  @dtopt Callbacks
		 *  @name DataTable.defaults.stateSaveParams
		 *
		 *  @example
		 *    // Remove a saved filter, so filtering is never saved
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "stateSave": true,
		 *        "stateSaveParams": function (settings, data) {
		 *          data.oSearch.sSearch = "";
		 *        }
		 *      } );
		 *    } );
		 */
		"fnStateSaveParams": null,
	
	
		/**
		 * Duration for which the saved state information is considered valid. After this period
		 * has elapsed the state will be returned to the default.
		 * Value is given in seconds.
		 *  @type int
		 *  @default 7200 <i>(2 hours)</i>
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.stateDuration
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "stateDuration": 60*60*24; // 1 day
		 *      } );
		 *    } )
		 */
		"iStateDuration": 7200,
	
	
		/**
		 * When enabled DataTables will not make a request to the server for the first
		 * page draw - rather it will use the data already on the page (no sorting etc
		 * will be applied to it), thus saving on an XHR at load time. `deferLoading`
		 * is used to indicate that deferred loading is required, but it is also used
		 * to tell DataTables how many records there are in the full table (allowing
		 * the information element and pagination to be displayed correctly). In the case
		 * where a filtering is applied to the table on initial load, this can be
		 * indicated by giving the parameter as an array, where the first element is
		 * the number of records available after filtering and the second element is the
		 * number of records without filtering (allowing the table information element
		 * to be shown correctly).
		 *  @type int | array
		 *  @default null
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.deferLoading
		 *
		 *  @example
		 *    // 57 records available in the table, no filtering applied
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "serverSide": true,
		 *        "ajax": "scripts/server_processing.php",
		 *        "deferLoading": 57
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // 57 records after filtering, 100 without filtering (an initial filter applied)
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "serverSide": true,
		 *        "ajax": "scripts/server_processing.php",
		 *        "deferLoading": [ 57, 100 ],
		 *        "search": {
		 *          "search": "my_filter"
		 *        }
		 *      } );
		 *    } );
		 */
		"iDeferLoading": null,
	
	
		/**
		 * Number of rows to display on a single page when using pagination. If
		 * feature enabled (`lengthChange`) then the end user will be able to override
		 * this to a custom setting using a pop-up menu.
		 *  @type int
		 *  @default 10
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.pageLength
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "pageLength": 50
		 *      } );
		 *    } )
		 */
		"iDisplayLength": 10,
	
	
		/**
		 * Define the starting point for data display when using DataTables with
		 * pagination. Note that this parameter is the number of records, rather than
		 * the page number, so if you have 10 records per page and want to start on
		 * the third page, it should be "20".
		 *  @type int
		 *  @default 0
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.displayStart
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "displayStart": 20
		 *      } );
		 *    } )
		 */
		"iDisplayStart": 0,
	
	
		/**
		 * By default DataTables allows keyboard navigation of the table (sorting, paging,
		 * and filtering) by adding a `tabindex` attribute to the required elements. This
		 * allows you to tab through the controls and press the enter key to activate them.
		 * The tabindex is default 0, meaning that the tab follows the flow of the document.
		 * You can overrule this using this parameter if you wish. Use a value of -1 to
		 * disable built-in keyboard navigation.
		 *  @type int
		 *  @default 0
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.tabIndex
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "tabIndex": 1
		 *      } );
		 *    } );
		 */
		"iTabIndex": 0,
	
	
		/**
		 * Classes that DataTables assigns to the various components and features
		 * that it adds to the HTML table. This allows classes to be configured
		 * during initialisation in addition to through the static
		 * {@link DataTable.ext.oStdClasses} object).
		 *  @namespace
		 *  @name DataTable.defaults.classes
		 */
		"oClasses": {},
	
	
		/**
		 * All strings that DataTables uses in the user interface that it creates
		 * are defined in this object, allowing you to modified them individually or
		 * completely replace them all as required.
		 *  @namespace
		 *  @name DataTable.defaults.language
		 */
		"oLanguage": {
			/**
			 * Strings that are used for WAI-ARIA labels and controls only (these are not
			 * actually visible on the page, but will be read by screenreaders, and thus
			 * must be internationalised as well).
			 *  @namespace
			 *  @name DataTable.defaults.language.aria
			 */
			"oAria": {
				/**
				 * ARIA label that is added to the table headers when the column may be
				 * sorted ascending by activing the column (click or return when focused).
				 * Note that the column header is prefixed to this string.
				 *  @type string
				 *  @default : activate to sort column ascending
				 *
				 *  @dtopt Language
				 *  @name DataTable.defaults.language.aria.sortAscending
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "language": {
				 *          "aria": {
				 *            "sortAscending": " - click/return to sort ascending"
				 *          }
				 *        }
				 *      } );
				 *    } );
				 */
				"sSortAscending": ": activate to sort column ascending",
	
				/**
				 * ARIA label that is added to the table headers when the column may be
				 * sorted descending by activing the column (click or return when focused).
				 * Note that the column header is prefixed to this string.
				 *  @type string
				 *  @default : activate to sort column ascending
				 *
				 *  @dtopt Language
				 *  @name DataTable.defaults.language.aria.sortDescending
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "language": {
				 *          "aria": {
				 *            "sortDescending": " - click/return to sort descending"
				 *          }
				 *        }
				 *      } );
				 *    } );
				 */
				"sSortDescending": ": activate to sort column descending"
			},
	
			/**
			 * Pagination string used by DataTables for the built-in pagination
			 * control types.
			 *  @namespace
			 *  @name DataTable.defaults.language.paginate
			 */
			"oPaginate": {
				/**
				 * Text to use when using the 'full_numbers' type of pagination for the
				 * button to take the user to the first page.
				 *  @type string
				 *  @default First
				 *
				 *  @dtopt Language
				 *  @name DataTable.defaults.language.paginate.first
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "language": {
				 *          "paginate": {
				 *            "first": "First page"
				 *          }
				 *        }
				 *      } );
				 *    } );
				 */
				"sFirst": "First",
	
	
				/**
				 * Text to use when using the 'full_numbers' type of pagination for the
				 * button to take the user to the last page.
				 *  @type string
				 *  @default Last
				 *
				 *  @dtopt Language
				 *  @name DataTable.defaults.language.paginate.last
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "language": {
				 *          "paginate": {
				 *            "last": "Last page"
				 *          }
				 *        }
				 *      } );
				 *    } );
				 */
				"sLast": "Last",
	
	
				/**
				 * Text to use for the 'next' pagination button (to take the user to the
				 * next page).
				 *  @type string
				 *  @default Next
				 *
				 *  @dtopt Language
				 *  @name DataTable.defaults.language.paginate.next
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "language": {
				 *          "paginate": {
				 *            "next": "Next page"
				 *          }
				 *        }
				 *      } );
				 *    } );
				 */
				"sNext": "Next",
	
	
				/**
				 * Text to use for the 'previous' pagination button (to take the user to
				 * the previous page).
				 *  @type string
				 *  @default Previous
				 *
				 *  @dtopt Language
				 *  @name DataTable.defaults.language.paginate.previous
				 *
				 *  @example
				 *    $(document).ready( function() {
				 *      $('#example').dataTable( {
				 *        "language": {
				 *          "paginate": {
				 *            "previous": "Previous page"
				 *          }
				 *        }
				 *      } );
				 *    } );
				 */
				"sPrevious": "Previous"
			},
	
			/**
			 * This string is shown in preference to `zeroRecords` when the table is
			 * empty of data (regardless of filtering). Note that this is an optional
			 * parameter - if it is not given, the value of `zeroRecords` will be used
			 * instead (either the default or given value).
			 *  @type string
			 *  @default No data available in table
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.emptyTable
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "emptyTable": "No data available in table"
			 *        }
			 *      } );
			 *    } );
			 */
			"sEmptyTable": "No data available in table",
	
	
			/**
			 * This string gives information to the end user about the information
			 * that is current on display on the page. The following tokens can be
			 * used in the string and will be dynamically replaced as the table
			 * display updates. This tokens can be placed anywhere in the string, or
			 * removed as needed by the language requires:
			 *
			 * * `\_START\_` - Display index of the first record on the current page
			 * * `\_END\_` - Display index of the last record on the current page
			 * * `\_TOTAL\_` - Number of records in the table after filtering
			 * * `\_MAX\_` - Number of records in the table without filtering
			 * * `\_PAGE\_` - Current page number
			 * * `\_PAGES\_` - Total number of pages of data in the table
			 *
			 *  @type string
			 *  @default Showing _START_ to _END_ of _TOTAL_ entries
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.info
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "info": "Showing page _PAGE_ of _PAGES_"
			 *        }
			 *      } );
			 *    } );
			 */
			"sInfo": "Showing _START_ to _END_ of _TOTAL_ entries",
	
	
			/**
			 * Display information string for when the table is empty. Typically the
			 * format of this string should match `info`.
			 *  @type string
			 *  @default Showing 0 to 0 of 0 entries
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.infoEmpty
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "infoEmpty": "No entries to show"
			 *        }
			 *      } );
			 *    } );
			 */
			"sInfoEmpty": "Showing 0 to 0 of 0 entries",
	
	
			/**
			 * When a user filters the information in a table, this string is appended
			 * to the information (`info`) to give an idea of how strong the filtering
			 * is. The variable _MAX_ is dynamically updated.
			 *  @type string
			 *  @default (filtered from _MAX_ total entries)
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.infoFiltered
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "infoFiltered": " - filtering from _MAX_ records"
			 *        }
			 *      } );
			 *    } );
			 */
			"sInfoFiltered": "(filtered from _MAX_ total entries)",
	
	
			/**
			 * If can be useful to append extra information to the info string at times,
			 * and this variable does exactly that. This information will be appended to
			 * the `info` (`infoEmpty` and `infoFiltered` in whatever combination they are
			 * being used) at all times.
			 *  @type string
			 *  @default <i>Empty string</i>
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.infoPostFix
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "infoPostFix": "All records shown are derived from real information."
			 *        }
			 *      } );
			 *    } );
			 */
			"sInfoPostFix": "",
	
	
			/**
			 * This decimal place operator is a little different from the other
			 * language options since DataTables doesn't output floating point
			 * numbers, so it won't ever use this for display of a number. Rather,
			 * what this parameter does is modify the sort methods of the table so
			 * that numbers which are in a format which has a character other than
			 * a period (`.`) as a decimal place will be sorted numerically.
			 *
			 * Note that numbers with different decimal places cannot be shown in
			 * the same table and still be sortable, the table must be consistent.
			 * However, multiple different tables on the page can use different
			 * decimal place characters.
			 *  @type string
			 *  @default 
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.decimal
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "decimal": ","
			 *          "thousands": "."
			 *        }
			 *      } );
			 *    } );
			 */
			"sDecimal": "",
	
	
			/**
			 * DataTables has a build in number formatter (`formatNumber`) which is
			 * used to format large numbers that are used in the table information.
			 * By default a comma is used, but this can be trivially changed to any
			 * character you wish with this parameter.
			 *  @type string
			 *  @default ,
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.thousands
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "thousands": "'"
			 *        }
			 *      } );
			 *    } );
			 */
			"sThousands": ",",
	
	
			/**
			 * Detail the action that will be taken when the drop down menu for the
			 * pagination length option is changed. The '_MENU_' variable is replaced
			 * with a default select list of 10, 25, 50 and 100, and can be replaced
			 * with a custom select box if required.
			 *  @type string
			 *  @default Show _MENU_ entries
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.lengthMenu
			 *
			 *  @example
			 *    // Language change only
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "lengthMenu": "Display _MENU_ records"
			 *        }
			 *      } );
			 *    } );
			 *
			 *  @example
			 *    // Language and options change
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "lengthMenu": 'Display <select>'+
			 *            '<option value="10">10</option>'+
			 *            '<option value="20">20</option>'+
			 *            '<option value="30">30</option>'+
			 *            '<option value="40">40</option>'+
			 *            '<option value="50">50</option>'+
			 *            '<option value="-1">All</option>'+
			 *            '</select> records'
			 *        }
			 *      } );
			 *    } );
			 */
			"sLengthMenu": "Show _MENU_ entries",
	
	
			/**
			 * When using Ajax sourced data and during the first draw when DataTables is
			 * gathering the data, this message is shown in an empty row in the table to
			 * indicate to the end user the the data is being loaded. Note that this
			 * parameter is not used when loading data by server-side processing, just
			 * Ajax sourced data with client-side processing.
			 *  @type string
			 *  @default Loading...
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.loadingRecords
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "loadingRecords": "Please wait - loading..."
			 *        }
			 *      } );
			 *    } );
			 */
			"sLoadingRecords": "Loading...",
	
	
			/**
			 * Text which is displayed when the table is processing a user action
			 * (usually a sort command or similar).
			 *  @type string
			 *  @default Processing...
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.processing
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "processing": "DataTables is currently busy"
			 *        }
			 *      } );
			 *    } );
			 */
			"sProcessing": "Processing...",
	
	
			/**
			 * Details the actions that will be taken when the user types into the
			 * filtering input text box. The variable "_INPUT_", if used in the string,
			 * is replaced with the HTML text box for the filtering input allowing
			 * control over where it appears in the string. If "_INPUT_" is not given
			 * then the input box is appended to the string automatically.
			 *  @type string
			 *  @default Search:
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.search
			 *
			 *  @example
			 *    // Input text box will be appended at the end automatically
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "search": "Filter records:"
			 *        }
			 *      } );
			 *    } );
			 *
			 *  @example
			 *    // Specify where the filter should appear
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "search": "Apply filter _INPUT_ to table"
			 *        }
			 *      } );
			 *    } );
			 */
			"sSearch": "Search:",
	
	
			/**
			 * Assign a `placeholder` attribute to the search `input` element
			 *  @type string
			 *  @default 
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.searchPlaceholder
			 */
			"sSearchPlaceholder": "",
	
	
			/**
			 * All of the language information can be stored in a file on the
			 * server-side, which DataTables will look up if this parameter is passed.
			 * It must store the URL of the language file, which is in a JSON format,
			 * and the object has the same properties as the oLanguage object in the
			 * initialiser object (i.e. the above parameters). Please refer to one of
			 * the example language files to see how this works in action.
			 *  @type string
			 *  @default <i>Empty string - i.e. disabled</i>
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.url
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "url": "http://www.sprymedia.co.uk/dataTables/lang.txt"
			 *        }
			 *      } );
			 *    } );
			 */
			"sUrl": "",
	
	
			/**
			 * Text shown inside the table records when the is no information to be
			 * displayed after filtering. `emptyTable` is shown when there is simply no
			 * information in the table at all (regardless of filtering).
			 *  @type string
			 *  @default No matching records found
			 *
			 *  @dtopt Language
			 *  @name DataTable.defaults.language.zeroRecords
			 *
			 *  @example
			 *    $(document).ready( function() {
			 *      $('#example').dataTable( {
			 *        "language": {
			 *          "zeroRecords": "No records to display"
			 *        }
			 *      } );
			 *    } );
			 */
			"sZeroRecords": "No matching records found"
		},
	
	
		/**
		 * This parameter allows you to have define the global filtering state at
		 * initialisation time. As an object the `search` parameter must be
		 * defined, but all other parameters are optional. When `regex` is true,
		 * the search string will be treated as a regular expression, when false
		 * (default) it will be treated as a straight string. When `smart`
		 * DataTables will use it's smart filtering methods (to word match at
		 * any point in the data), when false this will not be done.
		 *  @namespace
		 *  @extends DataTable.models.oSearch
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.search
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "search": {"search": "Initial search"}
		 *      } );
		 *    } )
		 */
		"oSearch": $.extend( {}, DataTable.models.oSearch ),
	
	
		/**
		 * __Deprecated__ The functionality provided by this parameter has now been
		 * superseded by that provided through `ajax`, which should be used instead.
		 *
		 * By default DataTables will look for the property `data` (or `aaData` for
		 * compatibility with DataTables 1.9-) when obtaining data from an Ajax
		 * source or for server-side processing - this parameter allows that
		 * property to be changed. You can use Javascript dotted object notation to
		 * get a data source for multiple levels of nesting.
		 *  @type string
		 *  @default data
		 *
		 *  @dtopt Options
		 *  @dtopt Server-side
		 *  @name DataTable.defaults.ajaxDataProp
		 *
		 *  @deprecated 1.10. Please use `ajax` for this functionality now.
		 */
		"sAjaxDataProp": "data",
	
	
		/**
		 * __Deprecated__ The functionality provided by this parameter has now been
		 * superseded by that provided through `ajax`, which should be used instead.
		 *
		 * You can instruct DataTables to load data from an external
		 * source using this parameter (use aData if you want to pass data in you
		 * already have). Simply provide a url a JSON object can be obtained from.
		 *  @type string
		 *  @default null
		 *
		 *  @dtopt Options
		 *  @dtopt Server-side
		 *  @name DataTable.defaults.ajaxSource
		 *
		 *  @deprecated 1.10. Please use `ajax` for this functionality now.
		 */
		"sAjaxSource": null,
	
	
		/**
		 * This initialisation variable allows you to specify exactly where in the
		 * DOM you want DataTables to inject the various controls it adds to the page
		 * (for example you might want the pagination controls at the top of the
		 * table). DIV elements (with or without a custom class) can also be added to
		 * aid styling. The follow syntax is used:
		 *   <ul>
		 *     <li>The following options are allowed:
		 *       <ul>
		 *         <li>'l' - Length changing</li>
		 *         <li>'f' - Filtering input</li>
		 *         <li>'t' - The table!</li>
		 *         <li>'i' - Information</li>
		 *         <li>'p' - Pagination</li>
		 *         <li>'r' - pRocessing</li>
		 *       </ul>
		 *     </li>
		 *     <li>The following constants are allowed:
		 *       <ul>
		 *         <li>'H' - jQueryUI theme "header" classes ('fg-toolbar ui-widget-header ui-corner-tl ui-corner-tr ui-helper-clearfix')</li>
		 *         <li>'F' - jQueryUI theme "footer" classes ('fg-toolbar ui-widget-header ui-corner-bl ui-corner-br ui-helper-clearfix')</li>
		 *       </ul>
		 *     </li>
		 *     <li>The following syntax is expected:
		 *       <ul>
		 *         <li>'&lt;' and '&gt;' - div elements</li>
		 *         <li>'&lt;"class" and '&gt;' - div with a class</li>
		 *         <li>'&lt;"#id" and '&gt;' - div with an ID</li>
		 *       </ul>
		 *     </li>
		 *     <li>Examples:
		 *       <ul>
		 *         <li>'&lt;"wrapper"flipt&gt;'</li>
		 *         <li>'&lt;lf&lt;t&gt;ip&gt;'</li>
		 *       </ul>
		 *     </li>
		 *   </ul>
		 *  @type string
		 *  @default lfrtip <i>(when `jQueryUI` is false)</i> <b>or</b>
		 *    <"H"lfr>t<"F"ip> <i>(when `jQueryUI` is true)</i>
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.dom
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "dom": '&lt;"top"i&gt;rt&lt;"bottom"flp&gt;&lt;"clear"&gt;'
		 *      } );
		 *    } );
		 */
		"sDom": "lfrtip",
	
	
		/**
		 * Search delay option. This will throttle full table searches that use the
		 * DataTables provided search input element (it does not effect calls to
		 * `dt-api search()`, providing a delay before the search is made.
		 *  @type integer
		 *  @default 0
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.searchDelay
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "searchDelay": 200
		 *      } );
		 *    } )
		 */
		"searchDelay": null,
	
	
		/**
		 * DataTables features six different built-in options for the buttons to
		 * display for pagination control:
		 *
		 * * `numbers` - Page number buttons only
		 * * `simple` - 'Previous' and 'Next' buttons only
		 * * 'simple_numbers` - 'Previous' and 'Next' buttons, plus page numbers
		 * * `full` - 'First', 'Previous', 'Next' and 'Last' buttons
		 * * `full_numbers` - 'First', 'Previous', 'Next' and 'Last' buttons, plus page numbers
		 * * `first_last_numbers` - 'First' and 'Last' buttons, plus page numbers
		 *  
		 * Further methods can be added using {@link DataTable.ext.oPagination}.
		 *  @type string
		 *  @default simple_numbers
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.pagingType
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "pagingType": "full_numbers"
		 *      } );
		 *    } )
		 */
		"sPaginationType": "simple_numbers",
	
	
		/**
		 * Enable horizontal scrolling. When a table is too wide to fit into a
		 * certain layout, or you have a large number of columns in the table, you
		 * can enable x-scrolling to show the table in a viewport, which can be
		 * scrolled. This property can be `true` which will allow the table to
		 * scroll horizontally when needed, or any CSS unit, or a number (in which
		 * case it will be treated as a pixel measurement). Setting as simply `true`
		 * is recommended.
		 *  @type boolean|string
		 *  @default <i>blank string - i.e. disabled</i>
		 *
		 *  @dtopt Features
		 *  @name DataTable.defaults.scrollX
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "scrollX": true,
		 *        "scrollCollapse": true
		 *      } );
		 *    } );
		 */
		"sScrollX": "",
	
	
		/**
		 * This property can be used to force a DataTable to use more width than it
		 * might otherwise do when x-scrolling is enabled. For example if you have a
		 * table which requires to be well spaced, this parameter is useful for
		 * "over-sizing" the table, and thus forcing scrolling. This property can by
		 * any CSS unit, or a number (in which case it will be treated as a pixel
		 * measurement).
		 *  @type string
		 *  @default <i>blank string - i.e. disabled</i>
		 *
		 *  @dtopt Options
		 *  @name DataTable.defaults.scrollXInner
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "scrollX": "100%",
		 *        "scrollXInner": "110%"
		 *      } );
		 *    } );
		 */
		"sScrollXInner": "",
	
	
		/**
		 * Enable vertical scrolling. Vertical scrolling will constrain the DataTable
		 * to the given height, and enable scrolling for any data which overflows the
		 * current viewport. This can be used as an alternative to paging to display
		 * a lot of data in a small area (although paging and scrolling can both be
		 * enabled at the same time). This property can be any CSS unit, or a number
		 * (in which case it will be treated as a pixel measurement).
		 *  @type string
		 *  @default <i>blank string - i.e. disabled</i>
		 *
		 *  @dtopt Features
		 *  @name DataTable.defaults.scrollY
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "scrollY": "200px",
		 *        "paginate": false
		 *      } );
		 *    } );
		 */
		"sScrollY": "",
	
	
		/**
		 * __Deprecated__ The functionality provided by this parameter has now been
		 * superseded by that provided through `ajax`, which should be used instead.
		 *
		 * Set the HTTP method that is used to make the Ajax call for server-side
		 * processing or Ajax sourced data.
		 *  @type string
		 *  @default GET
		 *
		 *  @dtopt Options
		 *  @dtopt Server-side
		 *  @name DataTable.defaults.serverMethod
		 *
		 *  @deprecated 1.10. Please use `ajax` for this functionality now.
		 */
		"sServerMethod": "GET",
	
	
		/**
		 * DataTables makes use of renderers when displaying HTML elements for
		 * a table. These renderers can be added or modified by plug-ins to
		 * generate suitable mark-up for a site. For example the Bootstrap
		 * integration plug-in for DataTables uses a paging button renderer to
		 * display pagination buttons in the mark-up required by Bootstrap.
		 *
		 * For further information about the renderers available see
		 * DataTable.ext.renderer
		 *  @type string|object
		 *  @default null
		 *
		 *  @name DataTable.defaults.renderer
		 *
		 */
		"renderer": null,
	
	
		/**
		 * Set the data property name that DataTables should use to get a row's id
		 * to set as the `id` property in the node.
		 *  @type string
		 *  @default DT_RowId
		 *
		 *  @name DataTable.defaults.rowId
		 */
		"rowId": "DT_RowId"
	};
	
	_fnHungarianMap( DataTable.defaults );
	
	
	
	/*
	 * Developer note - See note in model.defaults.js about the use of Hungarian
	 * notation and camel case.
	 */
	
	/**
	 * Column options that can be given to DataTables at initialisation time.
	 *  @namespace
	 */
	DataTable.defaults.column = {
		/**
		 * Define which column(s) an order will occur on for this column. This
		 * allows a column's ordering to take multiple columns into account when
		 * doing a sort or use the data from a different column. For example first
		 * name / last name columns make sense to do a multi-column sort over the
		 * two columns.
		 *  @type array|int
		 *  @default null <i>Takes the value of the column index automatically</i>
		 *
		 *  @name DataTable.defaults.column.orderData
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Using `columnDefs`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [
		 *          { "orderData": [ 0, 1 ], "targets": [ 0 ] },
		 *          { "orderData": [ 1, 0 ], "targets": [ 1 ] },
		 *          { "orderData": 2, "targets": [ 2 ] }
		 *        ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Using `columns`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columns": [
		 *          { "orderData": [ 0, 1 ] },
		 *          { "orderData": [ 1, 0 ] },
		 *          { "orderData": 2 },
		 *          null,
		 *          null
		 *        ]
		 *      } );
		 *    } );
		 */
		"aDataSort": null,
		"iDataSort": -1,
	
	
		/**
		 * You can control the default ordering direction, and even alter the
		 * behaviour of the sort handler (i.e. only allow ascending ordering etc)
		 * using this parameter.
		 *  @type array
		 *  @default [ 'asc', 'desc' ]
		 *
		 *  @name DataTable.defaults.column.orderSequence
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Using `columnDefs`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [
		 *          { "orderSequence": [ "asc" ], "targets": [ 1 ] },
		 *          { "orderSequence": [ "desc", "asc", "asc" ], "targets": [ 2 ] },
		 *          { "orderSequence": [ "desc" ], "targets": [ 3 ] }
		 *        ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Using `columns`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columns": [
		 *          null,
		 *          { "orderSequence": [ "asc" ] },
		 *          { "orderSequence": [ "desc", "asc", "asc" ] },
		 *          { "orderSequence": [ "desc" ] },
		 *          null
		 *        ]
		 *      } );
		 *    } );
		 */
		"asSorting": [ 'asc', 'desc' ],
	
	
		/**
		 * Enable or disable filtering on the data in this column.
		 *  @type boolean
		 *  @default true
		 *
		 *  @name DataTable.defaults.column.searchable
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Using `columnDefs`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [
		 *          { "searchable": false, "targets": [ 0 ] }
		 *        ] } );
		 *    } );
		 *
		 *  @example
		 *    // Using `columns`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columns": [
		 *          { "searchable": false },
		 *          null,
		 *          null,
		 *          null,
		 *          null
		 *        ] } );
		 *    } );
		 */
		"bSearchable": true,
	
	
		/**
		 * Enable or disable ordering on this column.
		 *  @type boolean
		 *  @default true
		 *
		 *  @name DataTable.defaults.column.orderable
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Using `columnDefs`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [
		 *          { "orderable": false, "targets": [ 0 ] }
		 *        ] } );
		 *    } );
		 *
		 *  @example
		 *    // Using `columns`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columns": [
		 *          { "orderable": false },
		 *          null,
		 *          null,
		 *          null,
		 *          null
		 *        ] } );
		 *    } );
		 */
		"bSortable": true,
	
	
		/**
		 * Enable or disable the display of this column.
		 *  @type boolean
		 *  @default true
		 *
		 *  @name DataTable.defaults.column.visible
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Using `columnDefs`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [
		 *          { "visible": false, "targets": [ 0 ] }
		 *        ] } );
		 *    } );
		 *
		 *  @example
		 *    // Using `columns`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columns": [
		 *          { "visible": false },
		 *          null,
		 *          null,
		 *          null,
		 *          null
		 *        ] } );
		 *    } );
		 */
		"bVisible": true,
	
	
		/**
		 * Developer definable function that is called whenever a cell is created (Ajax source,
		 * etc) or processed for input (DOM source). This can be used as a compliment to mRender
		 * allowing you to modify the DOM element (add background colour for example) when the
		 * element is available.
		 *  @type function
		 *  @param {element} td The TD node that has been created
		 *  @param {*} cellData The Data for the cell
		 *  @param {array|object} rowData The data for the whole row
		 *  @param {int} row The row index for the aoData data store
		 *  @param {int} col The column index for aoColumns
		 *
		 *  @name DataTable.defaults.column.createdCell
		 *  @dtopt Columns
		 *
		 *  @example
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [ {
		 *          "targets": [3],
		 *          "createdCell": function (td, cellData, rowData, row, col) {
		 *            if ( cellData == "1.7" ) {
		 *              $(td).css('color', 'blue')
		 *            }
		 *          }
		 *        } ]
		 *      });
		 *    } );
		 */
		"fnCreatedCell": null,
	
	
		/**
		 * This parameter has been replaced by `data` in DataTables to ensure naming
		 * consistency. `dataProp` can still be used, as there is backwards
		 * compatibility in DataTables for this option, but it is strongly
		 * recommended that you use `data` in preference to `dataProp`.
		 *  @name DataTable.defaults.column.dataProp
		 */
	
	
		/**
		 * This property can be used to read data from any data source property,
		 * including deeply nested objects / properties. `data` can be given in a
		 * number of different ways which effect its behaviour:
		 *
		 * * `integer` - treated as an array index for the data source. This is the
		 *   default that DataTables uses (incrementally increased for each column).
		 * * `string` - read an object property from the data source. There are
		 *   three 'special' options that can be used in the string to alter how
		 *   DataTables reads the data from the source object:
		 *    * `.` - Dotted Javascript notation. Just as you use a `.` in
		 *      Javascript to read from nested objects, so to can the options
		 *      specified in `data`. For example: `browser.version` or
		 *      `browser.name`. If your object parameter name contains a period, use
		 *      `\\` to escape it - i.e. `first\\.name`.
		 *    * `[]` - Array notation. DataTables can automatically combine data
		 *      from and array source, joining the data with the characters provided
		 *      between the two brackets. For example: `name[, ]` would provide a
		 *      comma-space separated list from the source array. If no characters
		 *      are provided between the brackets, the original array source is
		 *      returned.
		 *    * `()` - Function notation. Adding `()` to the end of a parameter will
		 *      execute a function of the name given. For example: `browser()` for a
		 *      simple function on the data source, `browser.version()` for a
		 *      function in a nested property or even `browser().version` to get an
		 *      object property if the function called returns an object. Note that
		 *      function notation is recommended for use in `render` rather than
		 *      `data` as it is much simpler to use as a renderer.
		 * * `null` - use the original data source for the row rather than plucking
		 *   data directly from it. This action has effects on two other
		 *   initialisation options:
		 *    * `defaultContent` - When null is given as the `data` option and
		 *      `defaultContent` is specified for the column, the value defined by
		 *      `defaultContent` will be used for the cell.
		 *    * `render` - When null is used for the `data` option and the `render`
		 *      option is specified for the column, the whole data source for the
		 *      row is used for the renderer.
		 * * `function` - the function given will be executed whenever DataTables
		 *   needs to set or get the data for a cell in the column. The function
		 *   takes three parameters:
		 *    * Parameters:
		 *      * `{array|object}` The data source for the row
		 *      * `{string}` The type call data requested - this will be 'set' when
		 *        setting data or 'filter', 'display', 'type', 'sort' or undefined
		 *        when gathering data. Note that when `undefined` is given for the
		 *        type DataTables expects to get the raw data for the object back<
		 *      * `{*}` Data to set when the second parameter is 'set'.
		 *    * Return:
		 *      * The return value from the function is not required when 'set' is
		 *        the type of call, but otherwise the return is what will be used
		 *        for the data requested.
		 *
		 * Note that `data` is a getter and setter option. If you just require
		 * formatting of data for output, you will likely want to use `render` which
		 * is simply a getter and thus simpler to use.
		 *
		 * Note that prior to DataTables 1.9.2 `data` was called `mDataProp`. The
		 * name change reflects the flexibility of this property and is consistent
		 * with the naming of mRender. If 'mDataProp' is given, then it will still
		 * be used by DataTables, as it automatically maps the old name to the new
		 * if required.
		 *
		 *  @type string|int|function|null
		 *  @default null <i>Use automatically calculated column index</i>
		 *
		 *  @name DataTable.defaults.column.data
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Read table data from objects
		 *    // JSON structure for each row:
		 *    //   {
		 *    //      "engine": {value},
		 *    //      "browser": {value},
		 *    //      "platform": {value},
		 *    //      "version": {value},
		 *    //      "grade": {value}
		 *    //   }
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "ajaxSource": "sources/objects.txt",
		 *        "columns": [
		 *          { "data": "engine" },
		 *          { "data": "browser" },
		 *          { "data": "platform" },
		 *          { "data": "version" },
		 *          { "data": "grade" }
		 *        ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Read information from deeply nested objects
		 *    // JSON structure for each row:
		 *    //   {
		 *    //      "engine": {value},
		 *    //      "browser": {value},
		 *    //      "platform": {
		 *    //         "inner": {value}
		 *    //      },
		 *    //      "details": [
		 *    //         {value}, {value}
		 *    //      ]
		 *    //   }
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "ajaxSource": "sources/deep.txt",
		 *        "columns": [
		 *          { "data": "engine" },
		 *          { "data": "browser" },
		 *          { "data": "platform.inner" },
		 *          { "data": "platform.details.0" },
		 *          { "data": "platform.details.1" }
		 *        ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Using `data` as a function to provide different information for
		 *    // sorting, filtering and display. In this case, currency (price)
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [ {
		 *          "targets": [ 0 ],
		 *          "data": function ( source, type, val ) {
		 *            if (type === 'set') {
		 *              source.price = val;
		 *              // Store the computed dislay and filter values for efficiency
		 *              source.price_display = val=="" ? "" : "$"+numberFormat(val);
		 *              source.price_filter  = val=="" ? "" : "$"+numberFormat(val)+" "+val;
		 *              return;
		 *            }
		 *            else if (type === 'display') {
		 *              return source.price_display;
		 *            }
		 *            else if (type === 'filter') {
		 *              return source.price_filter;
		 *            }
		 *            // 'sort', 'type' and undefined all just use the integer
		 *            return source.price;
		 *          }
		 *        } ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Using default content
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [ {
		 *          "targets": [ 0 ],
		 *          "data": null,
		 *          "defaultContent": "Click to edit"
		 *        } ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Using array notation - outputting a list from an array
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [ {
		 *          "targets": [ 0 ],
		 *          "data": "name[, ]"
		 *        } ]
		 *      } );
		 *    } );
		 *
		 */
		"mData": null,
	
	
		/**
		 * This property is the rendering partner to `data` and it is suggested that
		 * when you want to manipulate data for display (including filtering,
		 * sorting etc) without altering the underlying data for the table, use this
		 * property. `render` can be considered to be the the read only companion to
		 * `data` which is read / write (then as such more complex). Like `data`
		 * this option can be given in a number of different ways to effect its
		 * behaviour:
		 *
		 * * `integer` - treated as an array index for the data source. This is the
		 *   default that DataTables uses (incrementally increased for each column).
		 * * `string` - read an object property from the data source. There are
		 *   three 'special' options that can be used in the string to alter how
		 *   DataTables reads the data from the source object:
		 *    * `.` - Dotted Javascript notation. Just as you use a `.` in
		 *      Javascript to read from nested objects, so to can the options
		 *      specified in `data`. For example: `browser.version` or
		 *      `browser.name`. If your object parameter name contains a period, use
		 *      `\\` to escape it - i.e. `first\\.name`.
		 *    * `[]` - Array notation. DataTables can automatically combine data
		 *      from and array source, joining the data with the characters provided
		 *      between the two brackets. For example: `name[, ]` would provide a
		 *      comma-space separated list from the source array. If no characters
		 *      are provided between the brackets, the original array source is
		 *      returned.
		 *    * `()` - Function notation. Adding `()` to the end of a parameter will
		 *      execute a function of the name given. For example: `browser()` for a
		 *      simple function on the data source, `browser.version()` for a
		 *      function in a nested property or even `browser().version` to get an
		 *      object property if the function called returns an object.
		 * * `object` - use different data for the different data types requested by
		 *   DataTables ('filter', 'display', 'type' or 'sort'). The property names
		 *   of the object is the data type the property refers to and the value can
		 *   defined using an integer, string or function using the same rules as
		 *   `render` normally does. Note that an `_` option _must_ be specified.
		 *   This is the default value to use if you haven't specified a value for
		 *   the data type requested by DataTables.
		 * * `function` - the function given will be executed whenever DataTables
		 *   needs to set or get the data for a cell in the column. The function
		 *   takes three parameters:
		 *    * Parameters:
		 *      * {array|object} The data source for the row (based on `data`)
		 *      * {string} The type call data requested - this will be 'filter',
		 *        'display', 'type' or 'sort'.
		 *      * {array|object} The full data source for the row (not based on
		 *        `data`)
		 *    * Return:
		 *      * The return value from the function is what will be used for the
		 *        data requested.
		 *
		 *  @type string|int|function|object|null
		 *  @default null Use the data source value.
		 *
		 *  @name DataTable.defaults.column.render
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Create a comma separated list from an array of objects
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "ajaxSource": "sources/deep.txt",
		 *        "columns": [
		 *          { "data": "engine" },
		 *          { "data": "browser" },
		 *          {
		 *            "data": "platform",
		 *            "render": "[, ].name"
		 *          }
		 *        ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Execute a function to obtain data
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [ {
		 *          "targets": [ 0 ],
		 *          "data": null, // Use the full data source object for the renderer's source
		 *          "render": "browserName()"
		 *        } ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // As an object, extracting different data for the different types
		 *    // This would be used with a data source such as:
		 *    //   { "phone": 5552368, "phone_filter": "5552368 555-2368", "phone_display": "555-2368" }
		 *    // Here the `phone` integer is used for sorting and type detection, while `phone_filter`
		 *    // (which has both forms) is used for filtering for if a user inputs either format, while
		 *    // the formatted phone number is the one that is shown in the table.
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [ {
		 *          "targets": [ 0 ],
		 *          "data": null, // Use the full data source object for the renderer's source
		 *          "render": {
		 *            "_": "phone",
		 *            "filter": "phone_filter",
		 *            "display": "phone_display"
		 *          }
		 *        } ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Use as a function to create a link from the data source
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [ {
		 *          "targets": [ 0 ],
		 *          "data": "download_link",
		 *          "render": function ( data, type, full ) {
		 *            return '<a href="'+data+'">Download</a>';
		 *          }
		 *        } ]
		 *      } );
		 *    } );
		 */
		"mRender": null,
	
	
		/**
		 * Change the cell type created for the column - either TD cells or TH cells. This
		 * can be useful as TH cells have semantic meaning in the table body, allowing them
		 * to act as a header for a row (you may wish to add scope='row' to the TH elements).
		 *  @type string
		 *  @default td
		 *
		 *  @name DataTable.defaults.column.cellType
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Make the first column use TH cells
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [ {
		 *          "targets": [ 0 ],
		 *          "cellType": "th"
		 *        } ]
		 *      } );
		 *    } );
		 */
		"sCellType": "td",
	
	
		/**
		 * Class to give to each cell in this column.
		 *  @type string
		 *  @default <i>Empty string</i>
		 *
		 *  @name DataTable.defaults.column.class
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Using `columnDefs`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [
		 *          { "class": "my_class", "targets": [ 0 ] }
		 *        ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Using `columns`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columns": [
		 *          { "class": "my_class" },
		 *          null,
		 *          null,
		 *          null,
		 *          null
		 *        ]
		 *      } );
		 *    } );
		 */
		"sClass": "",
	
		/**
		 * When DataTables calculates the column widths to assign to each column,
		 * it finds the longest string in each column and then constructs a
		 * temporary table and reads the widths from that. The problem with this
		 * is that "mmm" is much wider then "iiii", but the latter is a longer
		 * string - thus the calculation can go wrong (doing it properly and putting
		 * it into an DOM object and measuring that is horribly(!) slow). Thus as
		 * a "work around" we provide this option. It will append its value to the
		 * text that is found to be the longest string for the column - i.e. padding.
		 * Generally you shouldn't need this!
		 *  @type string
		 *  @default <i>Empty string<i>
		 *
		 *  @name DataTable.defaults.column.contentPadding
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Using `columns`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columns": [
		 *          null,
		 *          null,
		 *          null,
		 *          {
		 *            "contentPadding": "mmm"
		 *          }
		 *        ]
		 *      } );
		 *    } );
		 */
		"sContentPadding": "",
	
	
		/**
		 * Allows a default value to be given for a column's data, and will be used
		 * whenever a null data source is encountered (this can be because `data`
		 * is set to null, or because the data source itself is null).
		 *  @type string
		 *  @default null
		 *
		 *  @name DataTable.defaults.column.defaultContent
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Using `columnDefs`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [
		 *          {
		 *            "data": null,
		 *            "defaultContent": "Edit",
		 *            "targets": [ -1 ]
		 *          }
		 *        ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Using `columns`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columns": [
		 *          null,
		 *          null,
		 *          null,
		 *          {
		 *            "data": null,
		 *            "defaultContent": "Edit"
		 *          }
		 *        ]
		 *      } );
		 *    } );
		 */
		"sDefaultContent": null,
	
	
		/**
		 * This parameter is only used in DataTables' server-side processing. It can
		 * be exceptionally useful to know what columns are being displayed on the
		 * client side, and to map these to database fields. When defined, the names
		 * also allow DataTables to reorder information from the server if it comes
		 * back in an unexpected order (i.e. if you switch your columns around on the
		 * client-side, your server-side code does not also need updating).
		 *  @type string
		 *  @default <i>Empty string</i>
		 *
		 *  @name DataTable.defaults.column.name
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Using `columnDefs`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [
		 *          { "name": "engine", "targets": [ 0 ] },
		 *          { "name": "browser", "targets": [ 1 ] },
		 *          { "name": "platform", "targets": [ 2 ] },
		 *          { "name": "version", "targets": [ 3 ] },
		 *          { "name": "grade", "targets": [ 4 ] }
		 *        ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Using `columns`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columns": [
		 *          { "name": "engine" },
		 *          { "name": "browser" },
		 *          { "name": "platform" },
		 *          { "name": "version" },
		 *          { "name": "grade" }
		 *        ]
		 *      } );
		 *    } );
		 */
		"sName": "",
	
	
		/**
		 * Defines a data source type for the ordering which can be used to read
		 * real-time information from the table (updating the internally cached
		 * version) prior to ordering. This allows ordering to occur on user
		 * editable elements such as form inputs.
		 *  @type string
		 *  @default std
		 *
		 *  @name DataTable.defaults.column.orderDataType
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Using `columnDefs`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [
		 *          { "orderDataType": "dom-text", "targets": [ 2, 3 ] },
		 *          { "type": "numeric", "targets": [ 3 ] },
		 *          { "orderDataType": "dom-select", "targets": [ 4 ] },
		 *          { "orderDataType": "dom-checkbox", "targets": [ 5 ] }
		 *        ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Using `columns`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columns": [
		 *          null,
		 *          null,
		 *          { "orderDataType": "dom-text" },
		 *          { "orderDataType": "dom-text", "type": "numeric" },
		 *          { "orderDataType": "dom-select" },
		 *          { "orderDataType": "dom-checkbox" }
		 *        ]
		 *      } );
		 *    } );
		 */
		"sSortDataType": "std",
	
	
		/**
		 * The title of this column.
		 *  @type string
		 *  @default null <i>Derived from the 'TH' value for this column in the
		 *    original HTML table.</i>
		 *
		 *  @name DataTable.defaults.column.title
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Using `columnDefs`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [
		 *          { "title": "My column title", "targets": [ 0 ] }
		 *        ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Using `columns`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columns": [
		 *          { "title": "My column title" },
		 *          null,
		 *          null,
		 *          null,
		 *          null
		 *        ]
		 *      } );
		 *    } );
		 */
		"sTitle": null,
	
	
		/**
		 * The type allows you to specify how the data for this column will be
		 * ordered. Four types (string, numeric, date and html (which will strip
		 * HTML tags before ordering)) are currently available. Note that only date
		 * formats understood by Javascript's Date() object will be accepted as type
		 * date. For example: "Mar 26, 2008 5:03 PM". May take the values: 'string',
		 * 'numeric', 'date' or 'html' (by default). Further types can be adding
		 * through plug-ins.
		 *  @type string
		 *  @default null <i>Auto-detected from raw data</i>
		 *
		 *  @name DataTable.defaults.column.type
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Using `columnDefs`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [
		 *          { "type": "html", "targets": [ 0 ] }
		 *        ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Using `columns`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columns": [
		 *          { "type": "html" },
		 *          null,
		 *          null,
		 *          null,
		 *          null
		 *        ]
		 *      } );
		 *    } );
		 */
		"sType": null,
	
	
		/**
		 * Defining the width of the column, this parameter may take any CSS value
		 * (3em, 20px etc). DataTables applies 'smart' widths to columns which have not
		 * been given a specific width through this interface ensuring that the table
		 * remains readable.
		 *  @type string
		 *  @default null <i>Automatic</i>
		 *
		 *  @name DataTable.defaults.column.width
		 *  @dtopt Columns
		 *
		 *  @example
		 *    // Using `columnDefs`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columnDefs": [
		 *          { "width": "20%", "targets": [ 0 ] }
		 *        ]
		 *      } );
		 *    } );
		 *
		 *  @example
		 *    // Using `columns`
		 *    $(document).ready( function() {
		 *      $('#example').dataTable( {
		 *        "columns": [
		 *          { "width": "20%" },
		 *          null,
		 *          null,
		 *          null,
		 *          null
		 *        ]
		 *      } );
		 *    } );
		 */
		"sWidth": null
	};
	
	_fnHungarianMap( DataTable.defaults.column );
	
	
	
	/**
	 * DataTables settings object - this holds all the information needed for a
	 * given table, including configuration, data and current application of the
	 * table options. DataTables does not have a single instance for each DataTable
	 * with the settings attached to that instance, but rather instances of the
	 * DataTable "class" are created on-the-fly as needed (typically by a
	 * $().dataTable() call) and the settings object is then applied to that
	 * instance.
	 *
	 * Note that this object is related to {@link DataTable.defaults} but this
	 * one is the internal data store for DataTables's cache of columns. It should
	 * NOT be manipulated outside of DataTables. Any configuration should be done
	 * through the initialisation options.
	 *  @namespace
	 *  @todo Really should attach the settings object to individual instances so we
	 *    don't need to create new instances on each $().dataTable() call (if the
	 *    table already exists). It would also save passing oSettings around and
	 *    into every single function. However, this is a very significant
	 *    architecture change for DataTables and will almost certainly break
	 *    backwards compatibility with older installations. This is something that
	 *    will be done in 2.0.
	 */
	DataTable.models.oSettings = {
		/**
		 * Primary features of DataTables and their enablement state.
		 *  @namespace
		 */
		"oFeatures": {
	
			/**
			 * Flag to say if DataTables should automatically try to calculate the
			 * optimum table and columns widths (true) or not (false).
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
			"bAutoWidth": null,
	
			/**
			 * Delay the creation of TR and TD elements until they are actually
			 * needed by a driven page draw. This can give a significant speed
			 * increase for Ajax source and Javascript source data, but makes no
			 * difference at all fro DOM and server-side processing tables.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
			"bDeferRender": null,
	
			/**
			 * Enable filtering on the table or not. Note that if this is disabled
			 * then there is no filtering at all on the table, including fnFilter.
			 * To just remove the filtering input use sDom and remove the 'f' option.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
			"bFilter": null,
	
			/**
			 * Table information element (the 'Showing x of y records' div) enable
			 * flag.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
			"bInfo": null,
	
			/**
			 * Present a user control allowing the end user to change the page size
			 * when pagination is enabled.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
			"bLengthChange": null,
	
			/**
			 * Pagination enabled or not. Note that if this is disabled then length
			 * changing must also be disabled.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
			"bPaginate": null,
	
			/**
			 * Processing indicator enable flag whenever DataTables is enacting a
			 * user request - typically an Ajax request for server-side processing.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
			"bProcessing": null,
	
			/**
			 * Server-side processing enabled flag - when enabled DataTables will
			 * get all data from the server for every draw - there is no filtering,
			 * sorting or paging done on the client-side.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
			"bServerSide": null,
	
			/**
			 * Sorting enablement flag.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
			"bSort": null,
	
			/**
			 * Multi-column sorting
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
			"bSortMulti": null,
	
			/**
			 * Apply a class to the columns which are being sorted to provide a
			 * visual highlight or not. This can slow things down when enabled since
			 * there is a lot of DOM interaction.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
			"bSortClasses": null,
	
			/**
			 * State saving enablement flag.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
			"bStateSave": null
		},
	
	
		/**
		 * Scrolling settings for a table.
		 *  @namespace
		 */
		"oScroll": {
			/**
			 * When the table is shorter in height than sScrollY, collapse the
			 * table container down to the height of the table (when true).
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type boolean
			 */
			"bCollapse": null,
	
			/**
			 * Width of the scrollbar for the web-browser's platform. Calculated
			 * during table initialisation.
			 *  @type int
			 *  @default 0
			 */
			"iBarWidth": 0,
	
			/**
			 * Viewport width for horizontal scrolling. Horizontal scrolling is
			 * disabled if an empty string.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type string
			 */
			"sX": null,
	
			/**
			 * Width to expand the table to when using x-scrolling. Typically you
			 * should not need to use this.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type string
			 *  @deprecated
			 */
			"sXInner": null,
	
			/**
			 * Viewport height for vertical scrolling. Vertical scrolling is disabled
			 * if an empty string.
			 * Note that this parameter will be set by the initialisation routine. To
			 * set a default use {@link DataTable.defaults}.
			 *  @type string
			 */
			"sY": null
		},
	
		/**
		 * Language information for the table.
		 *  @namespace
		 *  @extends DataTable.defaults.oLanguage
		 */
		"oLanguage": {
			/**
			 * Information callback function. See
			 * {@link DataTable.defaults.fnInfoCallback}
			 *  @type function
			 *  @default null
			 */
			"fnInfoCallback": null
		},
	
		/**
		 * Browser support parameters
		 *  @namespace
		 */
		"oBrowser": {
			/**
			 * Indicate if the browser incorrectly calculates width:100% inside a
			 * scrolling element (IE6/7)
			 *  @type boolean
			 *  @default false
			 */
			"bScrollOversize": false,
	
			/**
			 * Determine if the vertical scrollbar is on the right or left of the
			 * scrolling container - needed for rtl language layout, although not
			 * all browsers move the scrollbar (Safari).
			 *  @type boolean
			 *  @default false
			 */
			"bScrollbarLeft": false,
	
			/**
			 * Flag for if `getBoundingClientRect` is fully supported or not
			 *  @type boolean
			 *  @default false
			 */
			"bBounding": false,
	
			/**
			 * Browser scrollbar width
			 *  @type integer
			 *  @default 0
			 */
			"barWidth": 0
		},
	
	
		"ajax": null,
	
	
		/**
		 * Array referencing the nodes which are used for the features. The
		 * parameters of this object match what is allowed by sDom - i.e.
		 *   <ul>
		 *     <li>'l' - Length changing</li>
		 *     <li>'f' - Filtering input</li>
		 *     <li>'t' - The table!</li>
		 *     <li>'i' - Information</li>
		 *     <li>'p' - Pagination</li>
		 *     <li>'r' - pRocessing</li>
		 *   </ul>
		 *  @type array
		 *  @default []
		 */
		"aanFeatures": [],
	
		/**
		 * Store data information - see {@link DataTable.models.oRow} for detailed
		 * information.
		 *  @type array
		 *  @default []
		 */
		"aoData": [],
	
		/**
		 * Array of indexes which are in the current display (after filtering etc)
		 *  @type array
		 *  @default []
		 */
		"aiDisplay": [],
	
		/**
		 * Array of indexes for display - no filtering
		 *  @type array
		 *  @default []
		 */
		"aiDisplayMaster": [],
	
		/**
		 * Map of row ids to data indexes
		 *  @type object
		 *  @default {}
		 */
		"aIds": {},
	
		/**
		 * Store information about each column that is in use
		 *  @type array
		 *  @default []
		 */
		"aoColumns": [],
	
		/**
		 * Store information about the table's header
		 *  @type array
		 *  @default []
		 */
		"aoHeader": [],
	
		/**
		 * Store information about the table's footer
		 *  @type array
		 *  @default []
		 */
		"aoFooter": [],
	
		/**
		 * Store the applied global search information in case we want to force a
		 * research or compare the old search to a new one.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @namespace
		 *  @extends DataTable.models.oSearch
		 */
		"oPreviousSearch": {},
	
		/**
		 * Store the applied search for each column - see
		 * {@link DataTable.models.oSearch} for the format that is used for the
		 * filtering information for each column.
		 *  @type array
		 *  @default []
		 */
		"aoPreSearchCols": [],
	
		/**
		 * Sorting that is applied to the table. Note that the inner arrays are
		 * used in the following manner:
		 * <ul>
		 *   <li>Index 0 - column number</li>
		 *   <li>Index 1 - current sorting direction</li>
		 * </ul>
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type array
		 *  @todo These inner arrays should really be objects
		 */
		"aaSorting": null,
	
		/**
		 * Sorting that is always applied to the table (i.e. prefixed in front of
		 * aaSorting).
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type array
		 *  @default []
		 */
		"aaSortingFixed": [],
	
		/**
		 * Classes to use for the striping of a table.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type array
		 *  @default []
		 */
		"asStripeClasses": null,
	
		/**
		 * If restoring a table - we should restore its striping classes as well
		 *  @type array
		 *  @default []
		 */
		"asDestroyStripes": [],
	
		/**
		 * If restoring a table - we should restore its width
		 *  @type int
		 *  @default 0
		 */
		"sDestroyWidth": 0,
	
		/**
		 * Callback functions array for every time a row is inserted (i.e. on a draw).
		 *  @type array
		 *  @default []
		 */
		"aoRowCallback": [],
	
		/**
		 * Callback functions for the header on each draw.
		 *  @type array
		 *  @default []
		 */
		"aoHeaderCallback": [],
	
		/**
		 * Callback function for the footer on each draw.
		 *  @type array
		 *  @default []
		 */
		"aoFooterCallback": [],
	
		/**
		 * Array of callback functions for draw callback functions
		 *  @type array
		 *  @default []
		 */
		"aoDrawCallback": [],
	
		/**
		 * Array of callback functions for row created function
		 *  @type array
		 *  @default []
		 */
		"aoRowCreatedCallback": [],
	
		/**
		 * Callback functions for just before the table is redrawn. A return of
		 * false will be used to cancel the draw.
		 *  @type array
		 *  @default []
		 */
		"aoPreDrawCallback": [],
	
		/**
		 * Callback functions for when the table has been initialised.
		 *  @type array
		 *  @default []
		 */
		"aoInitComplete": [],
	
	
		/**
		 * Callbacks for modifying the settings to be stored for state saving, prior to
		 * saving state.
		 *  @type array
		 *  @default []
		 */
		"aoStateSaveParams": [],
	
		/**
		 * Callbacks for modifying the settings that have been stored for state saving
		 * prior to using the stored values to restore the state.
		 *  @type array
		 *  @default []
		 */
		"aoStateLoadParams": [],
	
		/**
		 * Callbacks for operating on the settings object once the saved state has been
		 * loaded
		 *  @type array
		 *  @default []
		 */
		"aoStateLoaded": [],
	
		/**
		 * Cache the table ID for quick access
		 *  @type string
		 *  @default <i>Empty string</i>
		 */
		"sTableId": "",
	
		/**
		 * The TABLE node for the main table
		 *  @type node
		 *  @default null
		 */
		"nTable": null,
	
		/**
		 * Permanent ref to the thead element
		 *  @type node
		 *  @default null
		 */
		"nTHead": null,
	
		/**
		 * Permanent ref to the tfoot element - if it exists
		 *  @type node
		 *  @default null
		 */
		"nTFoot": null,
	
		/**
		 * Permanent ref to the tbody element
		 *  @type node
		 *  @default null
		 */
		"nTBody": null,
	
		/**
		 * Cache the wrapper node (contains all DataTables controlled elements)
		 *  @type node
		 *  @default null
		 */
		"nTableWrapper": null,
	
		/**
		 * Indicate if when using server-side processing the loading of data
		 * should be deferred until the second draw.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type boolean
		 *  @default false
		 */
		"bDeferLoading": false,
	
		/**
		 * Indicate if all required information has been read in
		 *  @type boolean
		 *  @default false
		 */
		"bInitialised": false,
	
		/**
		 * Information about open rows. Each object in the array has the parameters
		 * 'nTr' and 'nParent'
		 *  @type array
		 *  @default []
		 */
		"aoOpenRows": [],
	
		/**
		 * Dictate the positioning of DataTables' control elements - see
		 * {@link DataTable.model.oInit.sDom}.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type string
		 *  @default null
		 */
		"sDom": null,
	
		/**
		 * Search delay (in mS)
		 *  @type integer
		 *  @default null
		 */
		"searchDelay": null,
	
		/**
		 * Which type of pagination should be used.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type string
		 *  @default two_button
		 */
		"sPaginationType": "two_button",
	
		/**
		 * The state duration (for `stateSave`) in seconds.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type int
		 *  @default 0
		 */
		"iStateDuration": 0,
	
		/**
		 * Array of callback functions for state saving. Each array element is an
		 * object with the following parameters:
		 *   <ul>
		 *     <li>function:fn - function to call. Takes two parameters, oSettings
		 *       and the JSON string to save that has been thus far created. Returns
		 *       a JSON string to be inserted into a json object
		 *       (i.e. '"param": [ 0, 1, 2]')</li>
		 *     <li>string:sName - name of callback</li>
		 *   </ul>
		 *  @type array
		 *  @default []
		 */
		"aoStateSave": [],
	
		/**
		 * Array of callback functions for state loading. Each array element is an
		 * object with the following parameters:
		 *   <ul>
		 *     <li>function:fn - function to call. Takes two parameters, oSettings
		 *       and the object stored. May return false to cancel state loading</li>
		 *     <li>string:sName - name of callback</li>
		 *   </ul>
		 *  @type array
		 *  @default []
		 */
		"aoStateLoad": [],
	
		/**
		 * State that was saved. Useful for back reference
		 *  @type object
		 *  @default null
		 */
		"oSavedState": null,
	
		/**
		 * State that was loaded. Useful for back reference
		 *  @type object
		 *  @default null
		 */
		"oLoadedState": null,
	
		/**
		 * Source url for AJAX data for the table.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type string
		 *  @default null
		 */
		"sAjaxSource": null,
	
		/**
		 * Property from a given object from which to read the table data from. This
		 * can be an empty string (when not server-side processing), in which case
		 * it is  assumed an an array is given directly.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type string
		 */
		"sAjaxDataProp": null,
	
		/**
		 * Note if draw should be blocked while getting data
		 *  @type boolean
		 *  @default true
		 */
		"bAjaxDataGet": true,
	
		/**
		 * The last jQuery XHR object that was used for server-side data gathering.
		 * This can be used for working with the XHR information in one of the
		 * callbacks
		 *  @type object
		 *  @default null
		 */
		"jqXHR": null,
	
		/**
		 * JSON returned from the server in the last Ajax request
		 *  @type object
		 *  @default undefined
		 */
		"json": undefined,
	
		/**
		 * Data submitted as part of the last Ajax request
		 *  @type object
		 *  @default undefined
		 */
		"oAjaxData": undefined,
	
		/**
		 * Function to get the server-side data.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type function
		 */
		"fnServerData": null,
	
		/**
		 * Functions which are called prior to sending an Ajax request so extra
		 * parameters can easily be sent to the server
		 *  @type array
		 *  @default []
		 */
		"aoServerParams": [],
	
		/**
		 * Send the XHR HTTP method - GET or POST (could be PUT or DELETE if
		 * required).
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type string
		 */
		"sServerMethod": null,
	
		/**
		 * Format numbers for display.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type function
		 */
		"fnFormatNumber": null,
	
		/**
		 * List of options that can be used for the user selectable length menu.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type array
		 *  @default []
		 */
		"aLengthMenu": null,
	
		/**
		 * Counter for the draws that the table does. Also used as a tracker for
		 * server-side processing
		 *  @type int
		 *  @default 0
		 */
		"iDraw": 0,
	
		/**
		 * Indicate if a redraw is being done - useful for Ajax
		 *  @type boolean
		 *  @default false
		 */
		"bDrawing": false,
	
		/**
		 * Draw index (iDraw) of the last error when parsing the returned data
		 *  @type int
		 *  @default -1
		 */
		"iDrawError": -1,
	
		/**
		 * Paging display length
		 *  @type int
		 *  @default 10
		 */
		"_iDisplayLength": 10,
	
		/**
		 * Paging start point - aiDisplay index
		 *  @type int
		 *  @default 0
		 */
		"_iDisplayStart": 0,
	
		/**
		 * Server-side processing - number of records in the result set
		 * (i.e. before filtering), Use fnRecordsTotal rather than
		 * this property to get the value of the number of records, regardless of
		 * the server-side processing setting.
		 *  @type int
		 *  @default 0
		 *  @private
		 */
		"_iRecordsTotal": 0,
	
		/**
		 * Server-side processing - number of records in the current display set
		 * (i.e. after filtering). Use fnRecordsDisplay rather than
		 * this property to get the value of the number of records, regardless of
		 * the server-side processing setting.
		 *  @type boolean
		 *  @default 0
		 *  @private
		 */
		"_iRecordsDisplay": 0,
	
		/**
		 * Flag to indicate if jQuery UI marking and classes should be used.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type boolean
		 */
		"bJUI": null,
	
		/**
		 * The classes to use for the table
		 *  @type object
		 *  @default {}
		 */
		"oClasses": {},
	
		/**
		 * Flag attached to the settings object so you can check in the draw
		 * callback if filtering has been done in the draw. Deprecated in favour of
		 * events.
		 *  @type boolean
		 *  @default false
		 *  @deprecated
		 */
		"bFiltered": false,
	
		/**
		 * Flag attached to the settings object so you can check in the draw
		 * callback if sorting has been done in the draw. Deprecated in favour of
		 * events.
		 *  @type boolean
		 *  @default false
		 *  @deprecated
		 */
		"bSorted": false,
	
		/**
		 * Indicate that if multiple rows are in the header and there is more than
		 * one unique cell per column, if the top one (true) or bottom one (false)
		 * should be used for sorting / title by DataTables.
		 * Note that this parameter will be set by the initialisation routine. To
		 * set a default use {@link DataTable.defaults}.
		 *  @type boolean
		 */
		"bSortCellsTop": null,
	
		/**
		 * Initialisation object that is used for the table
		 *  @type object
		 *  @default null
		 */
		"oInit": null,
	
		/**
		 * Destroy callback functions - for plug-ins to attach themselves to the
		 * destroy so they can clean up markup and events.
		 *  @type array
		 *  @default []
		 */
		"aoDestroyCallback": [],
	
	
		/**
		 * Get the number of records in the current record set, before filtering
		 *  @type function
		 */
		"fnRecordsTotal": function ()
		{
			return _fnDataSource( this ) == 'ssp' ?
				this._iRecordsTotal * 1 :
				this.aiDisplayMaster.length;
		},
	
		/**
		 * Get the number of records in the current record set, after filtering
		 *  @type function
		 */
		"fnRecordsDisplay": function ()
		{
			return _fnDataSource( this ) == 'ssp' ?
				this._iRecordsDisplay * 1 :
				this.aiDisplay.length;
		},
	
		/**
		 * Get the display end point - aiDisplay index
		 *  @type function
		 */
		"fnDisplayEnd": function ()
		{
			var
				len      = this._iDisplayLength,
				start    = this._iDisplayStart,
				calc     = start + len,
				records  = this.aiDisplay.length,
				features = this.oFeatures,
				paginate = features.bPaginate;
	
			if ( features.bServerSide ) {
				return paginate === false || len === -1 ?
					start + records :
					Math.min( start+len, this._iRecordsDisplay );
			}
			else {
				return ! paginate || calc>records || len===-1 ?
					records :
					calc;
			}
		},
	
		/**
		 * The DataTables object for this table
		 *  @type object
		 *  @default null
		 */
		"oInstance": null,
	
		/**
		 * Unique identifier for each instance of the DataTables object. If there
		 * is an ID on the table node, then it takes that value, otherwise an
		 * incrementing internal counter is used.
		 *  @type string
		 *  @default null
		 */
		"sInstance": null,
	
		/**
		 * tabindex attribute value that is added to DataTables control elements, allowing
		 * keyboard navigation of the table and its controls.
		 */
		"iTabIndex": 0,
	
		/**
		 * DIV container for the footer scrolling table if scrolling
		 */
		"nScrollHead": null,
	
		/**
		 * DIV container for the footer scrolling table if scrolling
		 */
		"nScrollFoot": null,
	
		/**
		 * Last applied sort
		 *  @type array
		 *  @default []
		 */
		"aLastSort": [],
	
		/**
		 * Stored plug-in instances
		 *  @type object
		 *  @default {}
		 */
		"oPlugins": {},
	
		/**
		 * Function used to get a row's id from the row's data
		 *  @type function
		 *  @default null
		 */
		"rowIdFn": null,
	
		/**
		 * Data location where to store a row's id
		 *  @type string
		 *  @default null
		 */
		"rowId": null
	};

	/**
	 * Extension object for DataTables that is used to provide all extension
	 * options.
	 *
	 * Note that the `DataTable.ext` object is available through
	 * `jQuery.fn.dataTable.ext` where it may be accessed and manipulated. It is
	 * also aliased to `jQuery.fn.dataTableExt` for historic reasons.
	 *  @namespace
	 *  @extends DataTable.models.ext
	 */
	
	
	/**
	 * DataTables extensions
	 * 
	 * This namespace acts as a collection area for plug-ins that can be used to
	 * extend DataTables capabilities. Indeed many of the build in methods
	 * use this method to provide their own capabilities (sorting methods for
	 * example).
	 *
	 * Note that this namespace is aliased to `jQuery.fn.dataTableExt` for legacy
	 * reasons
	 *
	 *  @namespace
	 */
	DataTable.ext = _ext = {
		/**
		 * Buttons. For use with the Buttons extension for DataTables. This is
		 * defined here so other extensions can define buttons regardless of load
		 * order. It is _not_ used by DataTables core.
		 *
		 *  @type object
		 *  @default {}
		 */
		buttons: {},
	
	
		/**
		 * Element class names
		 *
		 *  @type object
		 *  @default {}
		 */
		classes: {},
	
	
		/**
		 * DataTables build type (expanded by the download builder)
		 *
		 *  @type string
		 */
		builder: "-source-",
	
	
		/**
		 * Error reporting.
		 * 
		 * How should DataTables report an error. Can take the value 'alert',
		 * 'throw', 'none' or a function.
		 *
		 *  @type string|function
		 *  @default alert
		 */
		errMode: "alert",
	
	
		/**
		 * Feature plug-ins.
		 * 
		 * This is an array of objects which describe the feature plug-ins that are
		 * available to DataTables. These feature plug-ins are then available for
		 * use through the `dom` initialisation option.
		 * 
		 * Each feature plug-in is described by an object which must have the
		 * following properties:
		 * 
		 * * `fnInit` - function that is used to initialise the plug-in,
		 * * `cFeature` - a character so the feature can be enabled by the `dom`
		 *   instillation option. This is case sensitive.
		 *
		 * The `fnInit` function has the following input parameters:
		 *
		 * 1. `{object}` DataTables settings object: see
		 *    {@link DataTable.models.oSettings}
		 *
		 * And the following return is expected:
		 * 
		 * * {node|null} The element which contains your feature. Note that the
		 *   return may also be void if your plug-in does not require to inject any
		 *   DOM elements into DataTables control (`dom`) - for example this might
		 *   be useful when developing a plug-in which allows table control via
		 *   keyboard entry
		 *
		 *  @type array
		 *
		 *  @example
		 *    $.fn.dataTable.ext.features.push( {
		 *      "fnInit": function( oSettings ) {
		 *        return new TableTools( { "oDTSettings": oSettings } );
		 *      },
		 *      "cFeature": "T"
		 *    } );
		 */
		feature: [],
	
	
		/**
		 * Row searching.
		 * 
		 * This method of searching is complimentary to the default type based
		 * searching, and a lot more comprehensive as it allows you complete control
		 * over the searching logic. Each element in this array is a function
		 * (parameters described below) that is called for every row in the table,
		 * and your logic decides if it should be included in the searching data set
		 * or not.
		 *
		 * Searching functions have the following input parameters:
		 *
		 * 1. `{object}` DataTables settings object: see
		 *    {@link DataTable.models.oSettings}
		 * 2. `{array|object}` Data for the row to be processed (same as the
		 *    original format that was passed in as the data source, or an array
		 *    from a DOM data source
		 * 3. `{int}` Row index ({@link DataTable.models.oSettings.aoData}), which
		 *    can be useful to retrieve the `TR` element if you need DOM interaction.
		 *
		 * And the following return is expected:
		 *
		 * * {boolean} Include the row in the searched result set (true) or not
		 *   (false)
		 *
		 * Note that as with the main search ability in DataTables, technically this
		 * is "filtering", since it is subtractive. However, for consistency in
		 * naming we call it searching here.
		 *
		 *  @type array
		 *  @default []
		 *
		 *  @example
		 *    // The following example shows custom search being applied to the
		 *    // fourth column (i.e. the data[3] index) based on two input values
		 *    // from the end-user, matching the data in a certain range.
		 *    $.fn.dataTable.ext.search.push(
		 *      function( settings, data, dataIndex ) {
		 *        var min = document.getElementById('min').value * 1;
		 *        var max = document.getElementById('max').value * 1;
		 *        var version = data[3] == "-" ? 0 : data[3]*1;
		 *
		 *        if ( min == "" && max == "" ) {
		 *          return true;
		 *        }
		 *        else if ( min == "" && version < max ) {
		 *          return true;
		 *        }
		 *        else if ( min < version && "" == max ) {
		 *          return true;
		 *        }
		 *        else if ( min < version && version < max ) {
		 *          return true;
		 *        }
		 *        return false;
		 *      }
		 *    );
		 */
		search: [],
	
	
		/**
		 * Selector extensions
		 *
		 * The `selector` option can be used to extend the options available for the
		 * selector modifier options (`selector-modifier` object data type) that
		 * each of the three built in selector types offer (row, column and cell +
		 * their plural counterparts). For example the Select extension uses this
		 * mechanism to provide an option to select only rows, columns and cells
		 * that have been marked as selected by the end user (`{selected: true}`),
		 * which can be used in conjunction with the existing built in selector
		 * options.
		 *
		 * Each property is an array to which functions can be pushed. The functions
		 * take three attributes:
		 *
		 * * Settings object for the host table
		 * * Options object (`selector-modifier` object type)
		 * * Array of selected item indexes
		 *
		 * The return is an array of the resulting item indexes after the custom
		 * selector has been applied.
		 *
		 *  @type object
		 */
		selector: {
			cell: [],
			column: [],
			row: []
		},
	
	
		/**
		 * Internal functions, exposed for used in plug-ins.
		 * 
		 * Please note that you should not need to use the internal methods for
		 * anything other than a plug-in (and even then, try to avoid if possible).
		 * The internal function may change between releases.
		 *
		 *  @type object
		 *  @default {}
		 */
		internal: {},
	
	
		/**
		 * Legacy configuration options. Enable and disable legacy options that
		 * are available in DataTables.
		 *
		 *  @type object
		 */
		legacy: {
			/**
			 * Enable / disable DataTables 1.9 compatible server-side processing
			 * requests
			 *
			 *  @type boolean
			 *  @default null
			 */
			ajax: null
		},
	
	
		/**
		 * Pagination plug-in methods.
		 * 
		 * Each entry in this object is a function and defines which buttons should
		 * be shown by the pagination rendering method that is used for the table:
		 * {@link DataTable.ext.renderer.pageButton}. The renderer addresses how the
		 * buttons are displayed in the document, while the functions here tell it
		 * what buttons to display. This is done by returning an array of button
		 * descriptions (what each button will do).
		 *
		 * Pagination types (the four built in options and any additional plug-in
		 * options defined here) can be used through the `paginationType`
		 * initialisation parameter.
		 *
		 * The functions defined take two parameters:
		 *
		 * 1. `{int} page` The current page index
		 * 2. `{int} pages` The number of pages in the table
		 *
		 * Each function is expected to return an array where each element of the
		 * array can be one of:
		 *
		 * * `first` - Jump to first page when activated
		 * * `last` - Jump to last page when activated
		 * * `previous` - Show previous page when activated
		 * * `next` - Show next page when activated
		 * * `{int}` - Show page of the index given
		 * * `{array}` - A nested array containing the above elements to add a
		 *   containing 'DIV' element (might be useful for styling).
		 *
		 * Note that DataTables v1.9- used this object slightly differently whereby
		 * an object with two functions would be defined for each plug-in. That
		 * ability is still supported by DataTables 1.10+ to provide backwards
		 * compatibility, but this option of use is now decremented and no longer
		 * documented in DataTables 1.10+.
		 *
		 *  @type object
		 *  @default {}
		 *
		 *  @example
		 *    // Show previous, next and current page buttons only
		 *    $.fn.dataTableExt.oPagination.current = function ( page, pages ) {
		 *      return [ 'previous', page, 'next' ];
		 *    };
		 */
		pager: {},
	
	
		renderer: {
			pageButton: {},
			header: {}
		},
	
	
		/**
		 * Ordering plug-ins - custom data source
		 * 
		 * The extension options for ordering of data available here is complimentary
		 * to the default type based ordering that DataTables typically uses. It
		 * allows much greater control over the the data that is being used to
		 * order a column, but is necessarily therefore more complex.
		 * 
		 * This type of ordering is useful if you want to do ordering based on data
		 * live from the DOM (for example the contents of an 'input' element) rather
		 * than just the static string that DataTables knows of.
		 * 
		 * The way these plug-ins work is that you create an array of the values you
		 * wish to be ordering for the column in question and then return that
		 * array. The data in the array much be in the index order of the rows in
		 * the table (not the currently ordering order!). Which order data gathering
		 * function is run here depends on the `dt-init columns.orderDataType`
		 * parameter that is used for the column (if any).
		 *
		 * The functions defined take two parameters:
		 *
		 * 1. `{object}` DataTables settings object: see
		 *    {@link DataTable.models.oSettings}
		 * 2. `{int}` Target column index
		 *
		 * Each function is expected to return an array:
		 *
		 * * `{array}` Data for the column to be ordering upon
		 *
		 *  @type array
		 *
		 *  @example
		 *    // Ordering using `input` node values
		 *    $.fn.dataTable.ext.order['dom-text'] = function  ( settings, col )
		 *    {
		 *      return this.api().column( col, {order:'index'} ).nodes().map( function ( td, i ) {
		 *        return $('input', td).val();
		 *      } );
		 *    }
		 */
		order: {},
	
	
		/**
		 * Type based plug-ins.
		 *
		 * Each column in DataTables has a type assigned to it, either by automatic
		 * detection or by direct assignment using the `type` option for the column.
		 * The type of a column will effect how it is ordering and search (plug-ins
		 * can also make use of the column type if required).
		 *
		 * @namespace
		 */
		type: {
			/**
			 * Type detection functions.
			 *
			 * The functions defined in this object are used to automatically detect
			 * a column's type, making initialisation of DataTables super easy, even
			 * when complex data is in the table.
			 *
			 * The functions defined take two parameters:
			 *
		     *  1. `{*}` Data from the column cell to be analysed
		     *  2. `{settings}` DataTables settings object. This can be used to
		     *     perform context specific type detection - for example detection
		     *     based on language settings such as using a comma for a decimal
		     *     place. Generally speaking the options from the settings will not
		     *     be required
			 *
			 * Each function is expected to return:
			 *
			 * * `{string|null}` Data type detected, or null if unknown (and thus
			 *   pass it on to the other type detection functions.
			 *
			 *  @type array
			 *
			 *  @example
			 *    // Currency type detection plug-in:
			 *    $.fn.dataTable.ext.type.detect.push(
			 *      function ( data, settings ) {
			 *        // Check the numeric part
			 *        if ( ! $.isNumeric( data.substring(1) ) ) {
			 *          return null;
			 *        }
			 *
			 *        // Check prefixed by currency
			 *        if ( data.charAt(0) == '$' || data.charAt(0) == '&pound;' ) {
			 *          return 'currency';
			 *        }
			 *        return null;
			 *      }
			 *    );
			 */
			detect: [],
	
	
			/**
			 * Type based search formatting.
			 *
			 * The type based searching functions can be used to pre-format the
			 * data to be search on. For example, it can be used to strip HTML
			 * tags or to de-format telephone numbers for numeric only searching.
			 *
			 * Note that is a search is not defined for a column of a given type,
			 * no search formatting will be performed.
			 * 
			 * Pre-processing of searching data plug-ins - When you assign the sType
			 * for a column (or have it automatically detected for you by DataTables
			 * or a type detection plug-in), you will typically be using this for
			 * custom sorting, but it can also be used to provide custom searching
			 * by allowing you to pre-processing the data and returning the data in
			 * the format that should be searched upon. This is done by adding
			 * functions this object with a parameter name which matches the sType
			 * for that target column. This is the corollary of <i>afnSortData</i>
			 * for searching data.
			 *
			 * The functions defined take a single parameter:
			 *
		     *  1. `{*}` Data from the column cell to be prepared for searching
			 *
			 * Each function is expected to return:
			 *
			 * * `{string|null}` Formatted string that will be used for the searching.
			 *
			 *  @type object
			 *  @default {}
			 *
			 *  @example
			 *    $.fn.dataTable.ext.type.search['title-numeric'] = function ( d ) {
			 *      return d.replace(/\n/g," ").replace( /<.*?>/g, "" );
			 *    }
			 */
			search: {},
	
	
			/**
			 * Type based ordering.
			 *
			 * The column type tells DataTables what ordering to apply to the table
			 * when a column is sorted upon. The order for each type that is defined,
			 * is defined by the functions available in this object.
			 *
			 * Each ordering option can be described by three properties added to
			 * this object:
			 *
			 * * `{type}-pre` - Pre-formatting function
			 * * `{type}-asc` - Ascending order function
			 * * `{type}-desc` - Descending order function
			 *
			 * All three can be used together, only `{type}-pre` or only
			 * `{type}-asc` and `{type}-desc` together. It is generally recommended
			 * that only `{type}-pre` is used, as this provides the optimal
			 * implementation in terms of speed, although the others are provided
			 * for compatibility with existing Javascript sort functions.
			 *
			 * `{type}-pre`: Functions defined take a single parameter:
			 *
		     *  1. `{*}` Data from the column cell to be prepared for ordering
			 *
			 * And return:
			 *
			 * * `{*}` Data to be sorted upon
			 *
			 * `{type}-asc` and `{type}-desc`: Functions are typical Javascript sort
			 * functions, taking two parameters:
			 *
		     *  1. `{*}` Data to compare to the second parameter
		     *  2. `{*}` Data to compare to the first parameter
			 *
			 * And returning:
			 *
			 * * `{*}` Ordering match: <0 if first parameter should be sorted lower
			 *   than the second parameter, ===0 if the two parameters are equal and
			 *   >0 if the first parameter should be sorted height than the second
			 *   parameter.
			 * 
			 *  @type object
			 *  @default {}
			 *
			 *  @example
			 *    // Numeric ordering of formatted numbers with a pre-formatter
			 *    $.extend( $.fn.dataTable.ext.type.order, {
			 *      "string-pre": function(x) {
			 *        a = (a === "-" || a === "") ? 0 : a.replace( /[^\d\-\.]/g, "" );
			 *        return parseFloat( a );
			 *      }
			 *    } );
			 *
			 *  @example
			 *    // Case-sensitive string ordering, with no pre-formatting method
			 *    $.extend( $.fn.dataTable.ext.order, {
			 *      "string-case-asc": function(x,y) {
			 *        return ((x < y) ? -1 : ((x > y) ? 1 : 0));
			 *      },
			 *      "string-case-desc": function(x,y) {
			 *        return ((x < y) ? 1 : ((x > y) ? -1 : 0));
			 *      }
			 *    } );
			 */
			order: {}
		},
	
		/**
		 * Unique DataTables instance counter
		 *
		 * @type int
		 * @private
		 */
		_unique: 0,
	
	
		//
		// Depreciated
		// The following properties are retained for backwards compatiblity only.
		// The should not be used in new projects and will be removed in a future
		// version
		//
	
		/**
		 * Version check function.
		 *  @type function
		 *  @depreciated Since 1.10
		 */
		fnVersionCheck: DataTable.fnVersionCheck,
	
	
		/**
		 * Index for what 'this' index API functions should use
		 *  @type int
		 *  @deprecated Since v1.10
		 */
		iApiIndex: 0,
	
	
		/**
		 * jQuery UI class container
		 *  @type object
		 *  @deprecated Since v1.10
		 */
		oJUIClasses: {},
	
	
		/**
		 * Software version
		 *  @type string
		 *  @deprecated Since v1.10
		 */
		sVersion: DataTable.version
	};
	
	
	//
	// Backwards compatibility. Alias to pre 1.10 Hungarian notation counter parts
	//
	$.extend( _ext, {
		afnFiltering: _ext.search,
		aTypes:       _ext.type.detect,
		ofnSearch:    _ext.type.search,
		oSort:        _ext.type.order,
		afnSortData:  _ext.order,
		aoFeatures:   _ext.feature,
		oApi:         _ext.internal,
		oStdClasses:  _ext.classes,
		oPagination:  _ext.pager
	} );
	
	
	$.extend( DataTable.ext.classes, {
		"sTable": "dataTable",
		"sNoFooter": "no-footer",
	
		/* Paging buttons */
		"sPageButton": "paginate_button",
		"sPageButtonActive": "current",
		"sPageButtonDisabled": "disabled",
	
		/* Striping classes */
		"sStripeOdd": "odd",
		"sStripeEven": "even",
	
		/* Empty row */
		"sRowEmpty": "dataTables_empty",
	
		/* Features */
		"sWrapper": "dataTables_wrapper",
		"sFilter": "dataTables_filter",
		"sInfo": "dataTables_info",
		"sPaging": "dataTables_paginate paging_", /* Note that the type is postfixed */
		"sLength": "dataTables_length",
		"sProcessing": "dataTables_processing",
	
		/* Sorting */
		"sSortAsc": "sorting_asc",
		"sSortDesc": "sorting_desc",
		"sSortable": "sorting", /* Sortable in both directions */
		"sSortableAsc": "sorting_asc_disabled",
		"sSortableDesc": "sorting_desc_disabled",
		"sSortableNone": "sorting_disabled",
		"sSortColumn": "sorting_", /* Note that an int is postfixed for the sorting order */
	
		/* Filtering */
		"sFilterInput": "",
	
		/* Page length */
		"sLengthSelect": "",
	
		/* Scrolling */
		"sScrollWrapper": "dataTables_scroll",
		"sScrollHead": "dataTables_scrollHead",
		"sScrollHeadInner": "dataTables_scrollHeadInner",
		"sScrollBody": "dataTables_scrollBody",
		"sScrollFoot": "dataTables_scrollFoot",
		"sScrollFootInner": "dataTables_scrollFootInner",
	
		/* Misc */
		"sHeaderTH": "",
		"sFooterTH": "",
	
		// Deprecated
		"sSortJUIAsc": "",
		"sSortJUIDesc": "",
		"sSortJUI": "",
		"sSortJUIAscAllowed": "",
		"sSortJUIDescAllowed": "",
		"sSortJUIWrapper": "",
		"sSortIcon": "",
		"sJUIHeader": "",
		"sJUIFooter": ""
	} );
	
	
	(function() {
	
	// Reused strings for better compression. Closure compiler appears to have a
	// weird edge case where it is trying to expand strings rather than use the
	// variable version. This results in about 200 bytes being added, for very
	// little preference benefit since it this run on script load only.
	var _empty = '';
	_empty = '';
	
	var _stateDefault = _empty + 'ui-state-default';
	var _sortIcon     = _empty + 'css_right ui-icon ui-icon-';
	var _headerFooter = _empty + 'fg-toolbar ui-toolbar ui-widget-header ui-helper-clearfix';
	
	$.extend( DataTable.ext.oJUIClasses, DataTable.ext.classes, {
		/* Full numbers paging buttons */
		"sPageButton":         "fg-button ui-button "+_stateDefault,
		"sPageButtonActive":   "ui-state-disabled",
		"sPageButtonDisabled": "ui-state-disabled",
	
		/* Features */
		"sPaging": "dataTables_paginate fg-buttonset ui-buttonset fg-buttonset-multi "+
			"ui-buttonset-multi paging_", /* Note that the type is postfixed */
	
		/* Sorting */
		"sSortAsc":            _stateDefault+" sorting_asc",
		"sSortDesc":           _stateDefault+" sorting_desc",
		"sSortable":           _stateDefault+" sorting",
		"sSortableAsc":        _stateDefault+" sorting_asc_disabled",
		"sSortableDesc":       _stateDefault+" sorting_desc_disabled",
		"sSortableNone":       _stateDefault+" sorting_disabled",
		"sSortJUIAsc":         _sortIcon+"triangle-1-n",
		"sSortJUIDesc":        _sortIcon+"triangle-1-s",
		"sSortJUI":            _sortIcon+"carat-2-n-s",
		"sSortJUIAscAllowed":  _sortIcon+"carat-1-n",
		"sSortJUIDescAllowed": _sortIcon+"carat-1-s",
		"sSortJUIWrapper":     "DataTables_sort_wrapper",
		"sSortIcon":           "DataTables_sort_icon",
	
		/* Scrolling */
		"sScrollHead": "dataTables_scrollHead "+_stateDefault,
		"sScrollFoot": "dataTables_scrollFoot "+_stateDefault,
	
		/* Misc */
		"sHeaderTH":  _stateDefault,
		"sFooterTH":  _stateDefault,
		"sJUIHeader": _headerFooter+" ui-corner-tl ui-corner-tr",
		"sJUIFooter": _headerFooter+" ui-corner-bl ui-corner-br"
	} );
	
	}());
	
	
	
	var extPagination = DataTable.ext.pager;
	
	function _numbers ( page, pages ) {
		var
			numbers = [],
			buttons = extPagination.numbers_length,
			half = Math.floor( buttons / 2 ),
			i = 1;
	
		if ( pages <= buttons ) {
			numbers = _range( 0, pages );
		}
		else if ( page <= half ) {
			numbers = _range( 0, buttons-2 );
			numbers.push( 'ellipsis' );
			numbers.push( pages-1 );
		}
		else if ( page >= pages - 1 - half ) {
			numbers = _range( pages-(buttons-2), pages );
			numbers.splice( 0, 0, 'ellipsis' ); // no unshift in ie6
			numbers.splice( 0, 0, 0 );
		}
		else {
			numbers = _range( page-half+2, page+half-1 );
			numbers.push( 'ellipsis' );
			numbers.push( pages-1 );
			numbers.splice( 0, 0, 'ellipsis' );
			numbers.splice( 0, 0, 0 );
		}
	
		numbers.DT_el = 'span';
		return numbers;
	}
	
	
	$.extend( extPagination, {
		simple: function ( page, pages ) {
			return [ 'previous', 'next' ];
		},
	
		full: function ( page, pages ) {
			return [  'first', 'previous', 'next', 'last' ];
		},
	
		numbers: function ( page, pages ) {
			return [ _numbers(page, pages) ];
		},
	
		simple_numbers: function ( page, pages ) {
			return [ 'previous', _numbers(page, pages), 'next' ];
		},
	
		full_numbers: function ( page, pages ) {
			return [ 'first', 'previous', _numbers(page, pages), 'next', 'last' ];
		},
		
		first_last_numbers: function (page, pages) {
	 		return ['first', _numbers(page, pages), 'last'];
	 	},
	
		// For testing and plug-ins to use
		_numbers: _numbers,
	
		// Number of number buttons (including ellipsis) to show. _Must be odd!_
		numbers_length: 7
	} );
	
	
	$.extend( true, DataTable.ext.renderer, {
		pageButton: {
			_: function ( settings, host, idx, buttons, page, pages ) {
				var classes = settings.oClasses;
				var lang = settings.oLanguage.oPaginate;
				var aria = settings.oLanguage.oAria.paginate || {};
				var btnDisplay, btnClass, counter=0;
	
				var attach = function( container, buttons ) {
					var i, ien, node, button;
					var clickHandler = function ( e ) {
						_fnPageChange( settings, e.data.action, true );
					};
	
					for ( i=0, ien=buttons.length ; i<ien ; i++ ) {
						button = buttons[i];
	
						if ( $.isArray( button ) ) {
							var inner = $( '<'+(button.DT_el || 'div')+'/>' )
								.appendTo( container );
							attach( inner, button );
						}
						else {
							btnDisplay = null;
							btnClass = '';
	
							switch ( button ) {
								case 'ellipsis':
									container.append('<span class="ellipsis">&#x2026;</span>');
									break;
	
								case 'first':
									btnDisplay = lang.sFirst;
									btnClass = button + (page > 0 ?
										'' : ' '+classes.sPageButtonDisabled);
									break;
	
								case 'previous':
									btnDisplay = lang.sPrevious;
									btnClass = button + (page > 0 ?
										'' : ' '+classes.sPageButtonDisabled);
									break;
	
								case 'next':
									btnDisplay = lang.sNext;
									btnClass = button + (page < pages-1 ?
										'' : ' '+classes.sPageButtonDisabled);
									break;
	
								case 'last':
									btnDisplay = lang.sLast;
									btnClass = button + (page < pages-1 ?
										'' : ' '+classes.sPageButtonDisabled);
									break;
	
								default:
									btnDisplay = button + 1;
									btnClass = page === button ?
										classes.sPageButtonActive : '';
									break;
							}
	
							if ( btnDisplay !== null ) {
								node = $('<a>', {
										'class': classes.sPageButton+' '+btnClass,
										'aria-controls': settings.sTableId,
										'aria-label': aria[ button ],
										'data-dt-idx': counter,
										'tabindex': settings.iTabIndex,
										'id': idx === 0 && typeof button === 'string' ?
											settings.sTableId +'_'+ button :
											null
									} )
									.html( btnDisplay )
									.appendTo( container );
	
								_fnBindAction(
									node, {action: button}, clickHandler
								);
	
								counter++;
							}
						}
					}
				};
	
				// IE9 throws an 'unknown error' if document.activeElement is used
				// inside an iframe or frame. Try / catch the error. Not good for
				// accessibility, but neither are frames.
				var activeEl;
	
				try {
					// Because this approach is destroying and recreating the paging
					// elements, focus is lost on the select button which is bad for
					// accessibility. So we want to restore focus once the draw has
					// completed
					activeEl = $(host).find(document.activeElement).data('dt-idx');
				}
				catch (e) {}
	
				attach( $(host).empty(), buttons );
	
				if ( activeEl !== undefined ) {
					$(host).find( '[data-dt-idx='+activeEl+']' ).focus();
				}
			}
		}
	} );
	
	
	
	// Built in type detection. See model.ext.aTypes for information about
	// what is required from this methods.
	$.extend( DataTable.ext.type.detect, [
		// Plain numbers - first since V8 detects some plain numbers as dates
		// e.g. Date.parse('55') (but not all, e.g. Date.parse('22')...).
		function ( d, settings )
		{
			var decimal = settings.oLanguage.sDecimal;
			return _isNumber( d, decimal ) ? 'num'+decimal : null;
		},
	
		// Dates (only those recognised by the browser's Date.parse)
		function ( d, settings )
		{
			// V8 tries _very_ hard to make a string passed into `Date.parse()`
			// valid, so we need to use a regex to restrict date formats. Use a
			// plug-in for anything other than ISO8601 style strings
			if ( d && !(d instanceof Date) && ! _re_date.test(d) ) {
				return null;
			}
			var parsed = Date.parse(d);
			return (parsed !== null && !isNaN(parsed)) || _empty(d) ? 'date' : null;
		},
	
		// Formatted numbers
		function ( d, settings )
		{
			var decimal = settings.oLanguage.sDecimal;
			return _isNumber( d, decimal, true ) ? 'num-fmt'+decimal : null;
		},
	
		// HTML numeric
		function ( d, settings )
		{
			var decimal = settings.oLanguage.sDecimal;
			return _htmlNumeric( d, decimal ) ? 'html-num'+decimal : null;
		},
	
		// HTML numeric, formatted
		function ( d, settings )
		{
			var decimal = settings.oLanguage.sDecimal;
			return _htmlNumeric( d, decimal, true ) ? 'html-num-fmt'+decimal : null;
		},
	
		// HTML (this is strict checking - there must be html)
		function ( d, settings )
		{
			return _empty( d ) || (typeof d === 'string' && d.indexOf('<') !== -1) ?
				'html' : null;
		}
	] );
	
	
	
	// Filter formatting functions. See model.ext.ofnSearch for information about
	// what is required from these methods.
	// 
	// Note that additional search methods are added for the html numbers and
	// html formatted numbers by `_addNumericSort()` when we know what the decimal
	// place is
	
	
	$.extend( DataTable.ext.type.search, {
		html: function ( data ) {
			return _empty(data) ?
				data :
				typeof data === 'string' ?
					data
						.replace( _re_new_lines, " " )
						.replace( _re_html, "" ) :
					'';
		},
	
		string: function ( data ) {
			return _empty(data) ?
				data :
				typeof data === 'string' ?
					data.replace( _re_new_lines, " " ) :
					data;
		}
	} );
	
	
	
	var __numericReplace = function ( d, decimalPlace, re1, re2 ) {
		if ( d !== 0 && (!d || d === '-') ) {
			return -Infinity;
		}
	
		// If a decimal place other than `.` is used, it needs to be given to the
		// function so we can detect it and replace with a `.` which is the only
		// decimal place Javascript recognises - it is not locale aware.
		if ( decimalPlace ) {
			d = _numToDecimal( d, decimalPlace );
		}
	
		if ( d.replace ) {
			if ( re1 ) {
				d = d.replace( re1, '' );
			}
	
			if ( re2 ) {
				d = d.replace( re2, '' );
			}
		}
	
		return d * 1;
	};
	
	
	// Add the numeric 'deformatting' functions for sorting and search. This is done
	// in a function to provide an easy ability for the language options to add
	// additional methods if a non-period decimal place is used.
	function _addNumericSort ( decimalPlace ) {
		$.each(
			{
				// Plain numbers
				"num": function ( d ) {
					return __numericReplace( d, decimalPlace );
				},
	
				// Formatted numbers
				"num-fmt": function ( d ) {
					return __numericReplace( d, decimalPlace, _re_formatted_numeric );
				},
	
				// HTML numeric
				"html-num": function ( d ) {
					return __numericReplace( d, decimalPlace, _re_html );
				},
	
				// HTML numeric, formatted
				"html-num-fmt": function ( d ) {
					return __numericReplace( d, decimalPlace, _re_html, _re_formatted_numeric );
				}
			},
			function ( key, fn ) {
				// Add the ordering method
				_ext.type.order[ key+decimalPlace+'-pre' ] = fn;
	
				// For HTML types add a search formatter that will strip the HTML
				if ( key.match(/^html\-/) ) {
					_ext.type.search[ key+decimalPlace ] = _ext.type.search.html;
				}
			}
		);
	}
	
	
	// Default sort methods
	$.extend( _ext.type.order, {
		// Dates
		"date-pre": function ( d ) {
			return Date.parse( d ) || -Infinity;
		},
	
		// html
		"html-pre": function ( a ) {
			return _empty(a) ?
				'' :
				a.replace ?
					a.replace( /<.*?>/g, "" ).toLowerCase() :
					a+'';
		},
	
		// string
		"string-pre": function ( a ) {
			// This is a little complex, but faster than always calling toString,
			// http://jsperf.com/tostring-v-check
			return _empty(a) ?
				'' :
				typeof a === 'string' ?
					a.toLowerCase() :
					! a.toString ?
						'' :
						a.toString();
		},
	
		// string-asc and -desc are retained only for compatibility with the old
		// sort methods
		"string-asc": function ( x, y ) {
			return ((x < y) ? -1 : ((x > y) ? 1 : 0));
		},
	
		"string-desc": function ( x, y ) {
			return ((x < y) ? 1 : ((x > y) ? -1 : 0));
		}
	} );
	
	
	// Numeric sorting types - order doesn't matter here
	_addNumericSort( '' );
	
	
	$.extend( true, DataTable.ext.renderer, {
		header: {
			_: function ( settings, cell, column, classes ) {
				// No additional mark-up required
				// Attach a sort listener to update on sort - note that using the
				// `DT` namespace will allow the event to be removed automatically
				// on destroy, while the `dt` namespaced event is the one we are
				// listening for
				$(settings.nTable).on( 'order.dt.DT', function ( e, ctx, sorting, columns ) {
					if ( settings !== ctx ) { // need to check this this is the host
						return;               // table, not a nested one
					}
	
					var colIdx = column.idx;
	
					cell
						.removeClass(
							column.sSortingClass +' '+
							classes.sSortAsc +' '+
							classes.sSortDesc
						)
						.addClass( columns[ colIdx ] == 'asc' ?
							classes.sSortAsc : columns[ colIdx ] == 'desc' ?
								classes.sSortDesc :
								column.sSortingClass
						);
				} );
			},
	
			jqueryui: function ( settings, cell, column, classes ) {
				$('<div/>')
					.addClass( classes.sSortJUIWrapper )
					.append( cell.contents() )
					.append( $('<span/>')
						.addClass( classes.sSortIcon+' '+column.sSortingClassJUI )
					)
					.appendTo( cell );
	
				// Attach a sort listener to update on sort
				$(settings.nTable).on( 'order.dt.DT', function ( e, ctx, sorting, columns ) {
					if ( settings !== ctx ) {
						return;
					}
	
					var colIdx = column.idx;
	
					cell
						.removeClass( classes.sSortAsc +" "+classes.sSortDesc )
						.addClass( columns[ colIdx ] == 'asc' ?
							classes.sSortAsc : columns[ colIdx ] == 'desc' ?
								classes.sSortDesc :
								column.sSortingClass
						);
	
					cell
						.find( 'span.'+classes.sSortIcon )
						.removeClass(
							classes.sSortJUIAsc +" "+
							classes.sSortJUIDesc +" "+
							classes.sSortJUI +" "+
							classes.sSortJUIAscAllowed +" "+
							classes.sSortJUIDescAllowed
						)
						.addClass( columns[ colIdx ] == 'asc' ?
							classes.sSortJUIAsc : columns[ colIdx ] == 'desc' ?
								classes.sSortJUIDesc :
								column.sSortingClassJUI
						);
				} );
			}
		}
	} );
	
	/*
	 * Public helper functions. These aren't used internally by DataTables, or
	 * called by any of the options passed into DataTables, but they can be used
	 * externally by developers working with DataTables. They are helper functions
	 * to make working with DataTables a little bit easier.
	 */
	
	var __htmlEscapeEntities = function ( d ) {
		return typeof d === 'string' ?
			d.replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;') :
			d;
	};
	
	/**
	 * Helpers for `columns.render`.
	 *
	 * The options defined here can be used with the `columns.render` initialisation
	 * option to provide a display renderer. The following functions are defined:
	 *
	 * * `number` - Will format numeric data (defined by `columns.data`) for
	 *   display, retaining the original unformatted data for sorting and filtering.
	 *   It takes 5 parameters:
	 *   * `string` - Thousands grouping separator
	 *   * `string` - Decimal point indicator
	 *   * `integer` - Number of decimal points to show
	 *   * `string` (optional) - Prefix.
	 *   * `string` (optional) - Postfix (/suffix).
	 * * `text` - Escape HTML to help prevent XSS attacks. It has no optional
	 *   parameters.
	 *
	 * @example
	 *   // Column definition using the number renderer
	 *   {
	 *     data: "salary",
	 *     render: $.fn.dataTable.render.number( '\'', '.', 0, '$' )
	 *   }
	 *
	 * @namespace
	 */
	DataTable.render = {
		number: function ( thousands, decimal, precision, prefix, postfix ) {
			return {
				display: function ( d ) {
					if ( typeof d !== 'number' && typeof d !== 'string' ) {
						return d;
					}
	
					var negative = d < 0 ? '-' : '';
					var flo = parseFloat( d );
	
					// If NaN then there isn't much formatting that we can do - just
					// return immediately, escaping any HTML (this was supposed to
					// be a number after all)
					if ( isNaN( flo ) ) {
						return __htmlEscapeEntities( d );
					}
	
					flo = flo.toFixed( precision );
					d = Math.abs( flo );
	
					var intPart = parseInt( d, 10 );
					var floatPart = precision ?
						decimal+(d - intPart).toFixed( precision ).substring( 2 ):
						'';
	
					return negative + (prefix||'') +
						intPart.toString().replace(
							/\B(?=(\d{3})+(?!\d))/g, thousands
						) +
						floatPart +
						(postfix||'');
				}
			};
		},
	
		text: function () {
			return {
				display: __htmlEscapeEntities
			};
		}
	};
	
	
	/*
	 * This is really a good bit rubbish this method of exposing the internal methods
	 * publicly... - To be fixed in 2.0 using methods on the prototype
	 */
	
	
	/**
	 * Create a wrapper function for exporting an internal functions to an external API.
	 *  @param {string} fn API function name
	 *  @returns {function} wrapped function
	 *  @memberof DataTable#internal
	 */
	function _fnExternApiFunc (fn)
	{
		return function() {
			var args = [_fnSettingsFromNode( this[DataTable.ext.iApiIndex] )].concat(
				Array.prototype.slice.call(arguments)
			);
			return DataTable.ext.internal[fn].apply( this, args );
		};
	}
	
	
	/**
	 * Reference to internal functions for use by plug-in developers. Note that
	 * these methods are references to internal functions and are considered to be
	 * private. If you use these methods, be aware that they are liable to change
	 * between versions.
	 *  @namespace
	 */
	$.extend( DataTable.ext.internal, {
		_fnExternApiFunc: _fnExternApiFunc,
		_fnBuildAjax: _fnBuildAjax,
		_fnAjaxUpdate: _fnAjaxUpdate,
		_fnAjaxParameters: _fnAjaxParameters,
		_fnAjaxUpdateDraw: _fnAjaxUpdateDraw,
		_fnAjaxDataSrc: _fnAjaxDataSrc,
		_fnAddColumn: _fnAddColumn,
		_fnColumnOptions: _fnColumnOptions,
		_fnAdjustColumnSizing: _fnAdjustColumnSizing,
		_fnVisibleToColumnIndex: _fnVisibleToColumnIndex,
		_fnColumnIndexToVisible: _fnColumnIndexToVisible,
		_fnVisbleColumns: _fnVisbleColumns,
		_fnGetColumns: _fnGetColumns,
		_fnColumnTypes: _fnColumnTypes,
		_fnApplyColumnDefs: _fnApplyColumnDefs,
		_fnHungarianMap: _fnHungarianMap,
		_fnCamelToHungarian: _fnCamelToHungarian,
		_fnLanguageCompat: _fnLanguageCompat,
		_fnBrowserDetect: _fnBrowserDetect,
		_fnAddData: _fnAddData,
		_fnAddTr: _fnAddTr,
		_fnNodeToDataIndex: _fnNodeToDataIndex,
		_fnNodeToColumnIndex: _fnNodeToColumnIndex,
		_fnGetCellData: _fnGetCellData,
		_fnSetCellData: _fnSetCellData,
		_fnSplitObjNotation: _fnSplitObjNotation,
		_fnGetObjectDataFn: _fnGetObjectDataFn,
		_fnSetObjectDataFn: _fnSetObjectDataFn,
		_fnGetDataMaster: _fnGetDataMaster,
		_fnClearTable: _fnClearTable,
		_fnDeleteIndex: _fnDeleteIndex,
		_fnInvalidate: _fnInvalidate,
		_fnGetRowElements: _fnGetRowElements,
		_fnCreateTr: _fnCreateTr,
		_fnBuildHead: _fnBuildHead,
		_fnDrawHead: _fnDrawHead,
		_fnDraw: _fnDraw,
		_fnReDraw: _fnReDraw,
		_fnAddOptionsHtml: _fnAddOptionsHtml,
		_fnDetectHeader: _fnDetectHeader,
		_fnGetUniqueThs: _fnGetUniqueThs,
		_fnFeatureHtmlFilter: _fnFeatureHtmlFilter,
		_fnFilterComplete: _fnFilterComplete,
		_fnFilterCustom: _fnFilterCustom,
		_fnFilterColumn: _fnFilterColumn,
		_fnFilter: _fnFilter,
		_fnFilterCreateSearch: _fnFilterCreateSearch,
		_fnEscapeRegex: _fnEscapeRegex,
		_fnFilterData: _fnFilterData,
		_fnFeatureHtmlInfo: _fnFeatureHtmlInfo,
		_fnUpdateInfo: _fnUpdateInfo,
		_fnInfoMacros: _fnInfoMacros,
		_fnInitialise: _fnInitialise,
		_fnInitComplete: _fnInitComplete,
		_fnLengthChange: _fnLengthChange,
		_fnFeatureHtmlLength: _fnFeatureHtmlLength,
		_fnFeatureHtmlPaginate: _fnFeatureHtmlPaginate,
		_fnPageChange: _fnPageChange,
		_fnFeatureHtmlProcessing: _fnFeatureHtmlProcessing,
		_fnProcessingDisplay: _fnProcessingDisplay,
		_fnFeatureHtmlTable: _fnFeatureHtmlTable,
		_fnScrollDraw: _fnScrollDraw,
		_fnApplyToChildren: _fnApplyToChildren,
		_fnCalculateColumnWidths: _fnCalculateColumnWidths,
		_fnThrottle: _fnThrottle,
		_fnConvertToWidth: _fnConvertToWidth,
		_fnGetWidestNode: _fnGetWidestNode,
		_fnGetMaxLenString: _fnGetMaxLenString,
		_fnStringToCss: _fnStringToCss,
		_fnSortFlatten: _fnSortFlatten,
		_fnSort: _fnSort,
		_fnSortAria: _fnSortAria,
		_fnSortListener: _fnSortListener,
		_fnSortAttachListener: _fnSortAttachListener,
		_fnSortingClasses: _fnSortingClasses,
		_fnSortData: _fnSortData,
		_fnSaveState: _fnSaveState,
		_fnLoadState: _fnLoadState,
		_fnSettingsFromNode: _fnSettingsFromNode,
		_fnLog: _fnLog,
		_fnMap: _fnMap,
		_fnBindAction: _fnBindAction,
		_fnCallbackReg: _fnCallbackReg,
		_fnCallbackFire: _fnCallbackFire,
		_fnLengthOverflow: _fnLengthOverflow,
		_fnRenderer: _fnRenderer,
		_fnDataSource: _fnDataSource,
		_fnRowAttributes: _fnRowAttributes,
		_fnCalculateEnd: function () {} // Used by a lot of plug-ins, but redundant
		                                // in 1.10, so this dead-end function is
		                                // added to prevent errors
	} );
	

	// jQuery access
	$.fn.dataTable = DataTable;

	// Provide access to the host jQuery object (circular reference)
	DataTable.$ = $;

	// Legacy aliases
	$.fn.dataTableSettings = DataTable.settings;
	$.fn.dataTableExt = DataTable.ext;

	// With a capital `D` we return a DataTables API instance rather than a
	// jQuery object
	$.fn.DataTable = function ( opts ) {
		return $(this).dataTable( opts ).api();
	};

	// All properties that are available to $.fn.dataTable should also be
	// available on $.fn.DataTable
	$.each( DataTable, function ( prop, val ) {
		$.fn.DataTable[ prop ] = val;
	} );


	// Information about events fired by DataTables - for documentation.
	/**
	 * Draw event, fired whenever the table is redrawn on the page, at the same
	 * point as fnDrawCallback. This may be useful for binding events or
	 * performing calculations when the table is altered at all.
	 *  @name DataTable#draw.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	 */

	/**
	 * Search event, fired when the searching applied to the table (using the
	 * built-in global search, or column filters) is altered.
	 *  @name DataTable#search.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	 */

	/**
	 * Page change event, fired when the paging of the table is altered.
	 *  @name DataTable#page.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	 */

	/**
	 * Order event, fired when the ordering applied to the table is altered.
	 *  @name DataTable#order.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	 */

	/**
	 * DataTables initialisation complete event, fired when the table is fully
	 * drawn, including Ajax data loaded, if Ajax data is required.
	 *  @name DataTable#init.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} oSettings DataTables settings object
	 *  @param {object} json The JSON object request from the server - only
	 *    present if client-side Ajax sourced data is used</li></ol>
	 */

	/**
	 * State save event, fired when the table has changed state a new state save
	 * is required. This event allows modification of the state saving object
	 * prior to actually doing the save, including addition or other state
	 * properties (for plug-ins) or modification of a DataTables core property.
	 *  @name DataTable#stateSaveParams.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} oSettings DataTables settings object
	 *  @param {object} json The state information to be saved
	 */

	/**
	 * State load event, fired when the table is loading state from the stored
	 * data, but prior to the settings object being modified by the saved state
	 * - allowing modification of the saved state is required or loading of
	 * state for a plug-in.
	 *  @name DataTable#stateLoadParams.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} oSettings DataTables settings object
	 *  @param {object} json The saved state information
	 */

	/**
	 * State loaded event, fired when state has been loaded from stored data and
	 * the settings object has been modified by the loaded data.
	 *  @name DataTable#stateLoaded.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} oSettings DataTables settings object
	 *  @param {object} json The saved state information
	 */

	/**
	 * Processing event, fired when DataTables is doing some kind of processing
	 * (be it, order, searcg or anything else). It can be used to indicate to
	 * the end user that there is something happening, or that something has
	 * finished.
	 *  @name DataTable#processing.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} oSettings DataTables settings object
	 *  @param {boolean} bShow Flag for if DataTables is doing processing or not
	 */

	/**
	 * Ajax (XHR) event, fired whenever an Ajax request is completed from a
	 * request to made to the server for new data. This event is called before
	 * DataTables processed the returned data, so it can also be used to pre-
	 * process the data returned from the server, if needed.
	 *
	 * Note that this trigger is called in `fnServerData`, if you override
	 * `fnServerData` and which to use this event, you need to trigger it in you
	 * success function.
	 *  @name DataTable#xhr.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	 *  @param {object} json JSON returned from the server
	 *
	 *  @example
	 *     // Use a custom property returned from the server in another DOM element
	 *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {
	 *       $('#status').html( json.status );
	 *     } );
	 *
	 *  @example
	 *     // Pre-process the data returned from the server
	 *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {
	 *       for ( var i=0, ien=json.aaData.length ; i<ien ; i++ ) {
	 *         json.aaData[i].sum = json.aaData[i].one + json.aaData[i].two;
	 *       }
	 *       // Note no return - manipulate the data directly in the JSON object.
	 *     } );
	 */

	/**
	 * Destroy event, fired when the DataTable is destroyed by calling fnDestroy
	 * or passing the bDestroy:true parameter in the initialisation object. This
	 * can be used to remove bound events, added DOM nodes, etc.
	 *  @name DataTable#destroy.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	 */

	/**
	 * Page length change event, fired when number of records to show on each
	 * page (the length) is changed.
	 *  @name DataTable#length.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	 *  @param {integer} len New length
	 */

	/**
	 * Column sizing has changed.
	 *  @name DataTable#column-sizing.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	 */

	/**
	 * Column visibility has changed.
	 *  @name DataTable#column-visibility.dt
	 *  @event
	 *  @param {event} e jQuery event object
	 *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}
	 *  @param {int} column Column index
	 *  @param {bool} vis `false` if column now hidden, or `true` if visible
	 */

	return $.fn.dataTable;
}));


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(426);


/***/ }),

/***/ 421:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(0);

/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 426:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(421), __webpack_require__(427) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "binder",
	    name: "MVVM",
	    category: "framework",
	    description: "Model View ViewModel (MVVM) is a design pattern which helps developers separate the Model (the data) from the View (the UI).",
	    depends: [ "core", "data" ]
	};

	/*jshint eqnull: true */
	(function ($, undefined) {
	    var kendo = window.kendo,
	        Observable = kendo.Observable,
	        ObservableObject = kendo.data.ObservableObject,
	        ObservableArray = kendo.data.ObservableArray,
	        toString = {}.toString,
	        binders = {},
	        Class = kendo.Class,
	        proxy = $.proxy,
	        VALUE = "value",
	        SOURCE = "source",
	        EVENTS = "events",
	        CHECKED = "checked",
	        CSS = "css",
	        deleteExpando = true,
	        FUNCTION = "function",
	        CHANGE = "change";

	    (function() {
	        var a = document.createElement("a");

	        try {
	            delete a.test;
	        } catch(e) {
	            deleteExpando = false;
	        }
	    })();

	    var Binding = Observable.extend( {
	        init: function(parents, path) {
	            var that = this;

	            Observable.fn.init.call(that);

	            that.source = parents[0];
	            that.parents = parents;
	            that.path = path;
	            that.dependencies = {};
	            that.dependencies[path] = true;
	            that.observable = that.source instanceof Observable;

	            that._access = function(e) {
	                that.dependencies[e.field] = true;
	            };

	            if (that.observable) {
	                that._change = function(e) {
	                    that.change(e);
	                };

	                that.source.bind(CHANGE, that._change);
	            }
	        },

	        _parents: function() {
	            var parents = this.parents;
	            var value = this.get();

	            if (value && typeof value.parent == "function") {
	                var parent = value.parent();

	                if ($.inArray(parent, parents) < 0) {
	                    parents = [parent].concat(parents);
	                }
	            }

	            return parents;
	        },

	        change: function(e) {
	            var dependency,
	                ch,
	                field = e.field,
	                that = this;

	            if (that.path === "this") {
	                that.trigger(CHANGE, e);
	            } else {
	                for (dependency in that.dependencies) {
	                    if (dependency.indexOf(field) === 0) {
	                       ch = dependency.charAt(field.length);

	                       if (!ch || ch === "." || ch === "[") {
	                            that.trigger(CHANGE, e);
	                            break;
	                       }
	                    }
	                }
	            }
	        },

	        start: function(source) {
	            source.bind("get", this._access);
	        },

	        stop: function(source) {
	            source.unbind("get", this._access);
	        },

	        get: function() {

	            var that = this,
	                source = that.source,
	                index = 0,
	                path = that.path,
	                result = source;

	            if (!that.observable) {
	                return result;
	            }

	            that.start(that.source);

	            result = source.get(path);

	            // Traverse the observable hierarchy if the binding is not resolved at the current level.
	            while (result === undefined && source) {

	                source = that.parents[++index];

	                if (source instanceof ObservableObject) {
	                    result = source.get(path);
	                }
	            }

	            // second pass try to get the parent from the object hierarchy
	            if (result === undefined) {
	                source = that.source; //get the initial source

	                while (result === undefined && source) {
	                    source = source.parent();

	                    if (source instanceof ObservableObject) {
	                        result = source.get(path);
	                    }
	                }
	            }

	            // If the result is a function - invoke it
	            if (typeof result === "function") {
	                index = path.lastIndexOf(".");

	                // If the function is a member of a nested observable object make that nested observable the context (this) of the function
	                if (index > 0) {
	                    source = source.get(path.substring(0, index));
	                }

	                // Invoke the function
	                that.start(source);

	                if (source !== that.source) {
	                    result = result.call(source, that.source);
	                } else {
	                    result = result.call(source);
	                }

	                that.stop(source);
	            }

	            // If the binding is resolved by a parent object
	            if (source && source !== that.source) {

	                that.currentSource = source; // save parent object

	                // Listen for changes in the parent object
	                source.unbind(CHANGE, that._change)
	                      .bind(CHANGE, that._change);
	            }

	            that.stop(that.source);

	            return result;
	        },

	        set: function(value) {
	            var source = this.currentSource || this.source;

	            var field = kendo.getter(this.path)(source);

	            if (typeof field === "function") {
	                if (source !== this.source) {
	                    field.call(source, this.source, value);
	                } else {
	                    field.call(source, value);
	                }
	            } else {
	                source.set(this.path, value);
	            }
	        },

	        destroy: function() {
	            if (this.observable) {
	                this.source.unbind(CHANGE, this._change);
	                if(this.currentSource) {
	                    this.currentSource.unbind(CHANGE, this._change);
	                }
	            }

	            this.unbind();
	        }
	    });

	    var EventBinding = Binding.extend( {
	        get: function() {
	            var source = this.source,
	                path = this.path,
	                index = 0,
	                handler;

	            handler = source.get(path);

	            while (!handler && source) {
	                source = this.parents[++index];

	                if (source instanceof ObservableObject) {
	                    handler = source.get(path);
	                }
	            }

	            return proxy(handler, source);
	        }
	    });

	    var TemplateBinding = Binding.extend( {
	        init: function(source, path, template) {
	            var that = this;

	            Binding.fn.init.call(that, source, path);

	            that.template = template;
	        },

	        render: function(value) {
	            var html;

	            this.start(this.source);

	            html = kendo.render(this.template, value);

	            this.stop(this.source);

	            return html;
	        }
	    });

	    var Binder = Class.extend({
	        init: function(element, bindings, options) {
	            this.element = element;
	            this.bindings = bindings;
	            this.options = options;
	        },

	        bind: function(binding, attribute) {
	            var that = this;

	            binding = attribute ? binding[attribute] : binding;

	            binding.bind(CHANGE, function(e) {
	                that.refresh(attribute || e);
	            });

	            that.refresh(attribute);
	        },

	        destroy: function() {
	        }
	    });

	    var TypedBinder = Binder.extend({
	        dataType: function() {
	            var dataType = this.element.getAttribute("data-type") || this.element.type || "text";
	            return dataType.toLowerCase();
	        },

	        parsedValue: function() {
	            return this._parseValue(this.element.value, this.dataType());
	        },

	        _parseValue: function (value, dataType){
	            if (dataType == "date") {
	                value = kendo.parseDate(value, "yyyy-MM-dd");
	            } else if (dataType == "datetime-local") {
	                value = kendo.parseDate(value, ["yyyy-MM-ddTHH:mm:ss", "yyyy-MM-ddTHH:mm"] );
	            } else if (dataType == "number") {
	                value = kendo.parseFloat(value);
	            } else if (dataType == "boolean"){
	                value = value.toLowerCase();
	                if(kendo.parseFloat(value) !== null){
	                    value = Boolean(kendo.parseFloat(value));
	                }else{
	                    value = (value.toLowerCase() === "true");
	                }
	            }
	            return value;
	        }
	    });

	    binders.attr = Binder.extend({
	        refresh: function(key) {
	            this.element.setAttribute(key, this.bindings.attr[key].get());
	        }
	    });

	    binders.css = Binder.extend({
	        init: function(element, bindings, options) {
	            Binder.fn.init.call(this, element, bindings, options);
	            this.classes = {};
	        },
	        refresh: function(className) {
	            var element = $(this.element),
	                binding = this.bindings.css[className],
	                hasClass = this.classes[className] = binding.get();
	            if(hasClass){
	                element.addClass(className);
	            }else{
	                element.removeClass(className);
	            }
	        }
	    });

	    binders.style = Binder.extend({
	        refresh: function(key) {
	            this.element.style[key] = this.bindings.style[key].get() || "";
	        }
	    });

	    binders.enabled = Binder.extend({
	        refresh: function() {
	            if (this.bindings.enabled.get()) {
	                this.element.removeAttribute("disabled");
	            } else {
	                this.element.setAttribute("disabled", "disabled");
	            }
	        }
	    });

	    binders.readonly = Binder.extend({
	       refresh: function() {
	            if (this.bindings.readonly.get()) {
	                this.element.setAttribute("readonly", "readonly");
	            } else {
	                this.element.removeAttribute("readonly");
	            }
	       }
	    });

	    binders.disabled = Binder.extend({
	        refresh: function() {
	            if (this.bindings.disabled.get()) {
	                this.element.setAttribute("disabled", "disabled");
	            } else {
	                this.element.removeAttribute("disabled");
	            }
	        }
	    });

	    binders.events = Binder.extend({
	        init: function(element, bindings, options) {
	            Binder.fn.init.call(this, element, bindings, options);
	            this.handlers = {};
	        },

	        refresh: function(key) {
	            var element = $(this.element),
	                binding = this.bindings.events[key],
	                handler = this.handlers[key];

	            if (handler) {
	                element.off(key, handler);
	            }

	            handler = this.handlers[key] = binding.get();

	            element.on(key, binding.source, handler);
	        },

	        destroy: function() {
	            var element = $(this.element),
	                handler;

	            for (handler in this.handlers) {
	                element.off(handler, this.handlers[handler]);
	            }
	        }
	    });

	    binders.text = Binder.extend({
	        refresh: function() {
	            var text = this.bindings.text.get();
	            var dataFormat = this.element.getAttribute("data-format") || "";
	            if (text == null) {
	                text = "";
	            }

	            $(this.element).text(kendo.toString(text, dataFormat));
	        }
	    });

	    binders.visible = Binder.extend({
	        refresh: function() {
	            if (this.bindings.visible.get()) {
	                this.element.style.display = "";
	            } else {
	                this.element.style.display = "none";
	            }
	        }
	    });

	    binders.invisible = Binder.extend({
	        refresh: function() {
	            if (!this.bindings.invisible.get()) {
	                this.element.style.display = "";
	            } else {
	                this.element.style.display = "none";
	            }
	        }
	  });

	    binders.html = Binder.extend({
	        refresh: function() {
	            this.element.innerHTML = this.bindings.html.get();
	        }
	    });

	    binders.value = TypedBinder.extend({
	        init: function(element, bindings, options) {
	            TypedBinder.fn.init.call(this, element, bindings, options);

	            this._change = proxy(this.change, this);
	            this.eventName = options.valueUpdate || CHANGE;

	            $(this.element).on(this.eventName, this._change);

	            this._initChange = false;
	        },

	        change: function() {
	            this._initChange = this.eventName != CHANGE;

	            this.bindings[VALUE].set(this.parsedValue());

	            this._initChange = false;
	        },

	        refresh: function() {
	            if (!this._initChange) {
	                var value = this.bindings[VALUE].get();

	                if (value == null) {
	                    value = "";
	                }

	                var type = this.dataType();

	                if (type == "date") {
	                    value = kendo.toString(value, "yyyy-MM-dd");
	                } else if (type == "datetime-local") {
	                    value = kendo.toString(value, "yyyy-MM-ddTHH:mm:ss");
	                }

	                this.element.value = value;
	            }

	            this._initChange = false;
	        },

	        destroy: function() {
	            $(this.element).off(this.eventName, this._change);
	        }
	    });

	    binders.source = Binder.extend({
	        init: function(element, bindings, options) {
	            Binder.fn.init.call(this, element, bindings, options);

	            var source = this.bindings.source.get();

	            if (source instanceof kendo.data.DataSource && options.autoBind !== false) {
	                source.fetch();
	            }
	        },

	        refresh: function(e) {
	            var that = this,
	                source = that.bindings.source.get();

	            if (source instanceof ObservableArray || source instanceof kendo.data.DataSource) {
	                e = e || {};

	                if (e.action == "add") {
	                    that.add(e.index, e.items);
	                } else if (e.action == "remove") {
	                    that.remove(e.index, e.items);
	                } else if (e.action != "itemchange") {
	                    that.render();
	                }
	            } else {
	                that.render();
	            }
	        },

	        container: function() {
	            var element = this.element;

	            if (element.nodeName.toLowerCase() == "table") {
	                if (!element.tBodies[0]) {
	                    element.appendChild(document.createElement("tbody"));
	                }
	                element = element.tBodies[0];
	            }

	            return element;
	        },

	        template: function() {
	            var options = this.options,
	                template = options.template,
	                nodeName = this.container().nodeName.toLowerCase();

	            if (!template) {
	                if (nodeName == "select") {
	                    if (options.valueField || options.textField) {
	                        template = kendo.format('<option value="#:{0}#">#:{1}#</option>',
	                            options.valueField || options.textField, options.textField || options.valueField);
	                    } else {
	                        template = "<option>#:data#</option>";
	                    }
	                } else if (nodeName == "tbody") {
	                    template = "<tr><td>#:data#</td></tr>";
	                } else if (nodeName == "ul" || nodeName == "ol") {
	                    template = "<li>#:data#</li>";
	                } else {
	                    template = "#:data#";
	                }
	                template = kendo.template(template);
	            }

	            return template;
	        },

	        add: function(index, items) {
	            var element = this.container(),
	                parents,
	                idx,
	                length,
	                child,
	                clone = element.cloneNode(false),
	                reference = element.children[index];

	            $(clone).html(kendo.render(this.template(), items));

	            if (clone.children.length) {
	                parents = this.bindings.source._parents();

	                for (idx = 0, length = items.length; idx < length; idx++) {
	                    child = clone.children[0];
	                    element.insertBefore(child, reference || null);
	                    bindElement(child, items[idx], this.options.roles, [items[idx]].concat(parents));
	                }
	            }
	        },

	        remove: function(index, items) {
	            var idx, element = this.container();

	            for (idx = 0; idx < items.length; idx++) {
	                var child = element.children[index];
	                unbindElementTree(child, true);
	                if (child.parentNode == element) {
	                    element.removeChild(child);
	                }
	            }
	        },

	        render: function() {
	            var source = this.bindings.source.get(),
	                parents,
	                idx,
	                length,
	                element = this.container(),
	                template = this.template();

	            if (source == null) {
	                return;
	            }

	            if (source instanceof kendo.data.DataSource) {
	                source = source.view();
	            }

	            if (!(source instanceof ObservableArray) && toString.call(source) !== "[object Array]") {
	                source = [source];
	            }

	            if (this.bindings.template) {
	                unbindElementChildren(element, true);

	                $(element).html(this.bindings.template.render(source));

	                if (element.children.length) {
	                    parents = this.bindings.source._parents();

	                    for (idx = 0, length = source.length; idx < length; idx++) {
	                        bindElement(element.children[idx], source[idx], this.options.roles, [source[idx]].concat(parents));
	                    }
	                }
	            } else {
	                $(element).html(kendo.render(template, source));
	            }
	        }
	    });

	    binders.input = {
	        checked: TypedBinder.extend({
	            init: function(element, bindings, options) {
	                TypedBinder.fn.init.call(this, element, bindings, options);
	                this._change = proxy(this.change, this);

	                $(this.element).change(this._change);
	            },

	            change: function() {
	                var element = this.element;
	                var value = this.value();

	                if (element.type == "radio") {
	                    value = this.parsedValue();
	                    this.bindings[CHECKED].set(value);
	                } else if (element.type == "checkbox") {
	                    var source = this.bindings[CHECKED].get();
	                    var index;

	                    if (source instanceof ObservableArray) {
	                        value = this.parsedValue();
	                        if (value instanceof Date) {
	                            for(var i = 0; i < source.length; i++){
	                                if(source[i] instanceof Date && +source[i] === +value){
	                                    index = i;
	                                    break;
	                                }
	                            }
	                        }else{
	                            index = source.indexOf(value);
	                        }
	                        if (index > -1) {
	                            source.splice(index, 1);
	                        } else {
	                            source.push(value);
	                        }
	                    } else {
	                        this.bindings[CHECKED].set(value);
	                    }
	                }
	            },

	            refresh: function() {
	                var value = this.bindings[CHECKED].get(),
	                    source = value,
	                    type = this.dataType(),
	                    element = this.element;

	                if (element.type == "checkbox") {
	                    if (source instanceof ObservableArray) {
	                        var index = -1;
	                        value = this.parsedValue();
	                        if(value instanceof Date){
	                            for(var i = 0; i < source.length; i++){
	                                if(source[i] instanceof Date && +source[i] === +value){
	                                    index = i;
	                                    break;
	                                }
	                            }
	                        }else{
	                            index = source.indexOf(value);
	                        }
	                        element.checked = (index >= 0);
	                    }else{
	                        element.checked = source;
	                    }
	                } else if (element.type == "radio" && value != null) {
	                    if (type == "date") {
	                        value = kendo.toString(value, "yyyy-MM-dd");
	                    } else if (type == "datetime-local") {
	                        value = kendo.toString(value, "yyyy-MM-ddTHH:mm:ss");
	                    }
	                    if (element.value === value.toString()) {
	                        element.checked = true;
	                    }else{
	                        element.checked = false;
	                    }
	                }
	            },

	            value: function() {
	                var element = this.element,
	                    value = element.value;

	                if (element.type == "checkbox") {
	                    value = element.checked;
	                }

	                return value;
	            },
	            destroy: function() {
	                $(this.element).off(CHANGE, this._change);
	            }
	        })
	    };

	    binders.select = {
	        source: binders.source.extend({
	            refresh: function(e) {
	                var that = this,
	                    source = that.bindings.source.get();

	                if (source instanceof ObservableArray || source instanceof kendo.data.DataSource) {
	                    e = e || {};
	                    if (e.action == "add") {
	                        that.add(e.index, e.items);
	                    } else if (e.action == "remove") {
	                        that.remove(e.index, e.items);
	                    } else if (e.action == "itemchange" || e.action === undefined) {
	                        that.render();
	                        if(that.bindings.value){
	                            if (that.bindings.value) {
	                                var val = retrievePrimitiveValues(that.bindings.value.get(), $(that.element).data("valueField"));
	                                if(val === null) {
	                                    that.element.selectedIndex = -1;
	                                } else {
	                                    that.element.value = val;
	                                }
	                            }
	                        }
	                    }
	                } else {
	                    that.render();
	                }
	            }
	        }),
	        value: TypedBinder.extend({
	            init: function(target, bindings, options) {
	                TypedBinder.fn.init.call(this, target, bindings, options);

	                this._change = proxy(this.change, this);
	                $(this.element).change(this._change);
	            },

	            parsedValue : function() {
	                var dataType = this.dataType();
	                var values = [];
	                var value, option, idx, length;
	                for (idx = 0, length = this.element.options.length; idx < length; idx++) {
	                    option = this.element.options[idx];

	                    if (option.selected) {
	                        value = option.attributes.value;

	                        if (value && value.specified) {
	                            value = option.value;
	                        } else {
	                            value = option.text;
	                        }

	                        values.push(this._parseValue(value, dataType));
	                    }
	                }
	                return values;
	            },

	            change: function() {
	                var values = [],
	                    element = this.element,
	                    source,
	                    field = this.options.valueField || this.options.textField,
	                    valuePrimitive = this.options.valuePrimitive,
	                    option,
	                    valueIndex,
	                    value,
	                    idx,
	                    length;

	                for (idx = 0, length = element.options.length; idx < length; idx++) {
	                    option = element.options[idx];

	                    if (option.selected) {
	                        value = option.attributes.value;

	                        if (value && value.specified) {
	                            value = option.value;
	                        } else {
	                            value = option.text;
	                        }

	                        if (field) {
	                            values.push(value);
	                        } else {
	                            values.push(this._parseValue(value, this.dataType()));
	                        }

	                    }
	                }

	                if (field) {
	                    source = this.bindings.source.get();
	                    if (source instanceof kendo.data.DataSource) {
	                        source = source.view();
	                    }

	                    for (valueIndex = 0; valueIndex < values.length; valueIndex++) {
	                        for (idx = 0, length = source.length; idx < length; idx++) {
	                            var sourceValue = source[idx].get(field);
	                            var match = (String(sourceValue) === values[valueIndex]);
	                            if (match) {
	                                values[valueIndex] = source[idx];
	                                break;
	                            }
	                        }
	                    }
	                }

	                value = this.bindings[VALUE].get();
	                if (value instanceof ObservableArray) {
	                    value.splice.apply(value, [0, value.length].concat(values));
	                } else if (!valuePrimitive && (value instanceof ObservableObject || value === null || value === undefined || !field)) {
	                    this.bindings[VALUE].set(values[0]);
	                } else {
	                    this.bindings[VALUE].set(values[0].get(field));
	                }
	            },
	            refresh: function() {
	                var optionIndex,
	                    element = this.element,
	                    options = element.options,
	                    value = this.bindings[VALUE].get(),
	                    values = value,
	                    field = this.options.valueField || this.options.textField,
	                    found = false,
	                    type = this.dataType(),
	                    optionValue;

	                if (!(values instanceof ObservableArray)) {
	                    values = new ObservableArray([value]);
	                }

	                element.selectedIndex = -1;

	                for (var valueIndex = 0; valueIndex < values.length; valueIndex++) {
	                    value = values[valueIndex];


	                    if (field && value instanceof ObservableObject) {
	                        value = value.get(field);
	                    }

	                    if (type == "date") {
	                        value = kendo.toString(values[valueIndex], "yyyy-MM-dd");
	                    } else if (type == "datetime-local") {
	                        value = kendo.toString(values[valueIndex], "yyyy-MM-ddTHH:mm:ss");
	                    }

	                    for (optionIndex = 0; optionIndex < options.length; optionIndex++) {
	                        optionValue = options[optionIndex].value;

	                        if (optionValue === "" && value !== "") {
	                            optionValue = options[optionIndex].text;
	                        }

	                        if (value != null && optionValue == value.toString()) {
	                            options[optionIndex].selected = true;
	                            found = true;
	                        }
	                    }
	                }
	            },
	            destroy: function() {
	                $(this.element).off(CHANGE, this._change);
	            }
	        })
	    };

	    function dataSourceBinding(bindingName, fieldName, setter) {
	        return Binder.extend({
	            init: function(widget, bindings, options) {
	                var that = this;

	                Binder.fn.init.call(that, widget.element[0], bindings, options);

	                that.widget = widget;
	                that._dataBinding = proxy(that.dataBinding, that);
	                that._dataBound = proxy(that.dataBound, that);
	                that._itemChange = proxy(that.itemChange, that);
	            },

	            itemChange: function(e) {
	                bindElement(e.item[0], e.data, this._ns(e.ns), [e.data].concat(this.bindings[bindingName]._parents()));
	            },

	            dataBinding: function(e) {
	                var idx,
	                    length,
	                    widget = this.widget,
	                    items = e.removedItems || widget.items();

	                for (idx = 0, length = items.length; idx < length; idx++) {
	                    unbindElementTree(items[idx], false);
	                }
	            },

	            _ns: function(ns) {
	                ns = ns || kendo.ui;
	                var all = [ kendo.ui, kendo.dataviz.ui, kendo.mobile.ui ];
	                all.splice($.inArray(ns, all), 1);
	                all.unshift(ns);

	                return kendo.rolesFromNamespaces(all);
	            },

	            dataBound: function(e) {
	                var idx,
	                    length,
	                    widget = this.widget,
	                    items = e.addedItems || widget.items(),
	                    dataSource = widget[fieldName],
	                    view,
	                    parents,
	                    hds = kendo.data.HierarchicalDataSource;

	                if (hds && dataSource instanceof hds) {
	                    // suppress binding of HDS items, because calling view() on root
	                    // will return only root items, and widget.items() returns all items
	                    return;
	                }

	                if (items.length) {
	                    view = e.addedDataItems || dataSource.flatView();
	                    parents = this.bindings[bindingName]._parents();

	                    for (idx = 0, length = view.length; idx < length; idx++) {
	                        bindElement(items[idx], view[idx], this._ns(e.ns), [view[idx]].concat(parents));
	                    }
	                }
	            },

	            refresh: function(e) {
	                var that = this,
	                    source,
	                    widget = that.widget,
	                    select, multiselect;

	                e = e || {};

	                if (!e.action) {
	                    that.destroy();

	                    widget.bind("dataBinding", that._dataBinding);
	                    widget.bind("dataBound", that._dataBound);
	                    widget.bind("itemChange", that._itemChange);

	                    source = that.bindings[bindingName].get();

	                    if (widget[fieldName] instanceof kendo.data.DataSource && widget[fieldName] != source) {
	                        if (source instanceof kendo.data.DataSource) {
	                            widget[setter](source);
	                        } else if (source && source._dataSource) {
	                            widget[setter](source._dataSource);
	                        } else {
	                            widget[fieldName].data(source);

	                            select = kendo.ui.Select && widget instanceof kendo.ui.Select;
	                            multiselect = kendo.ui.MultiSelect && widget instanceof kendo.ui.MultiSelect;

	                            if (that.bindings.value && (select || multiselect)) {
	                                widget.value(retrievePrimitiveValues(that.bindings.value.get(), widget.options.dataValueField));
	                            }
	                        }
	                    }
	                }
	            },

	            destroy: function() {
	                var widget = this.widget;

	                widget.unbind("dataBinding", this._dataBinding);
	                widget.unbind("dataBound", this._dataBound);
	                widget.unbind("itemChange", this._itemChange);
	            }
	        });
	    }

	    binders.widget = {
	        events : Binder.extend({
	            init: function(widget, bindings, options) {
	                Binder.fn.init.call(this, widget.element[0], bindings, options);
	                this.widget = widget;
	                this.handlers = {};
	            },

	            refresh: function(key) {
	                var binding = this.bindings.events[key],
	                    handler = this.handlers[key];

	                if (handler) {
	                    this.widget.unbind(key, handler);
	                }

	                handler = binding.get();

	                this.handlers[key] = function(e) {
	                    e.data = binding.source;

	                    handler(e);

	                    if (e.data === binding.source) {
	                        delete e.data;
	                    }
	                };

	                this.widget.bind(key, this.handlers[key]);
	            },

	            destroy: function() {
	                var handler;

	                for (handler in this.handlers) {
	                    this.widget.unbind(handler, this.handlers[handler]);
	                }
	            }
	        }),

	        checked: Binder.extend({
	            init: function(widget, bindings, options) {
	                Binder.fn.init.call(this, widget.element[0], bindings, options);

	                this.widget = widget;
	                this._change = proxy(this.change, this);
	                this.widget.bind(CHANGE, this._change);
	            },
	            change: function() {
	                this.bindings[CHECKED].set(this.value());
	            },

	            refresh: function() {
	                this.widget.check(this.bindings[CHECKED].get() === true);
	            },

	            value: function() {
	                var element = this.element,
	                    value = element.value;

	                if (value == "on" || value == "off") {
	                    value = element.checked;
	                }

	                return value;
	            },

	            destroy: function() {
	                this.widget.unbind(CHANGE, this._change);
	            }
	        }),

	        visible: Binder.extend({
	            init: function(widget, bindings, options) {
	                Binder.fn.init.call(this, widget.element[0], bindings, options);

	                this.widget = widget;
	            },

	            refresh: function() {
	                var visible = this.bindings.visible.get();
	                this.widget.wrapper[0].style.display = visible ? "" : "none";
	            }
	        }),

	        invisible: Binder.extend({
	            init: function(widget, bindings, options) {
	                Binder.fn.init.call(this, widget.element[0], bindings, options);

	                this.widget = widget;
	            },

	            refresh: function() {
	                var invisible = this.bindings.invisible.get();
	                this.widget.wrapper[0].style.display = invisible ? "none" : "";
	            }
	        }),

	        enabled: Binder.extend({
	            init: function(widget, bindings, options) {
	                Binder.fn.init.call(this, widget.element[0], bindings, options);

	                this.widget = widget;
	            },

	            refresh: function() {
	                if (this.widget.enable) {
	                    this.widget.enable(this.bindings.enabled.get());
	                }
	            }
	        }),

	        disabled: Binder.extend({
	            init: function(widget, bindings, options) {
	                Binder.fn.init.call(this, widget.element[0], bindings, options);

	                this.widget = widget;
	            },

	            refresh: function() {
	                if (this.widget.enable) {
	                    this.widget.enable(!this.bindings.disabled.get());
	                }
	            }
	        }),

	        source: dataSourceBinding("source", "dataSource", "setDataSource"),

	        value: Binder.extend({
	            init: function(widget, bindings, options) {
	                Binder.fn.init.call(this, widget.element[0], bindings, options);

	                this.widget = widget;
	                this._change = $.proxy(this.change, this);
	                this.widget.first(CHANGE, this._change);

	                var value = this.bindings.value.get();

	                this._valueIsObservableObject = !options.valuePrimitive && (value == null || value instanceof ObservableObject);
	                this._valueIsObservableArray = value instanceof ObservableArray;
	                this._initChange = false;
	            },

	            _source: function() {
	                var source;

	                if (this.widget.dataItem) {
	                    source = this.widget.dataItem();
	                    if (source && source instanceof ObservableObject) {
	                        return [source];
	                    }
	                }

	                if (this.bindings.source) {
	                    source = this.bindings.source.get();
	                }

	                if (!source || source instanceof kendo.data.DataSource) {
	                    source = this.widget.dataSource.flatView();
	                }

	                return source;
	            },

	            change: function() {
	                var value = this.widget.value(),
	                    field = this.options.dataValueField || this.options.dataTextField,
	                    isArray = toString.call(value) === "[object Array]",
	                    isObservableObject = this._valueIsObservableObject,
	                    valueIndex, valueLength, values = [],
	                    sourceItem, sourceValue,
	                    idx, length, source;

	                this._initChange = true;

	                if (field) {

	                    if (value === "" && (isObservableObject || this.options.valuePrimitive)) {
	                        value = null;
	                    } else {
	                        source = this._source();

	                        if (isArray) {
	                            valueLength = value.length;
	                            values = value.slice(0);
	                        }

	                        for (idx = 0, length = source.length; idx < length; idx++) {
	                            sourceItem = source[idx];
	                            sourceValue = sourceItem.get(field);

	                            if (isArray) {
	                                for (valueIndex = 0; valueIndex < valueLength; valueIndex++) {
	                                    if (sourceValue == values[valueIndex]) {
	                                        values[valueIndex] = sourceItem;
	                                        break;
	                                    }
	                                }
	                            } else if (sourceValue == value) {
	                                value = isObservableObject ? sourceItem : sourceValue;
	                                break;
	                            }
	                        }

	                        if (values[0]) {
	                            if (this._valueIsObservableArray) {
	                                value = values;
	                            } else if (isObservableObject || !field) {
	                                value = values[0];
	                            } else {
	                                value = values[0].get(field);
	                            }
	                        }
	                    }
	                }

	                this.bindings.value.set(value);
	                this._initChange = false;
	            },

	            refresh: function() {
	                if (!this._initChange) {
	                    var widget = this.widget;
	                    var options = widget.options;
	                    var textField = options.dataTextField;
	                    var valueField = options.dataValueField || textField;
	                    var value = this.bindings.value.get();
	                    var text = options.text || "";
	                    var idx = 0, length;
	                    var values = [];

	                    if (value === undefined) {
	                        value = null;
	                    }

	                    if (valueField) {
	                        if (value instanceof ObservableArray) {
	                            for (length = value.length; idx < length; idx++) {
	                                values[idx] = value[idx].get(valueField);
	                            }
	                            value = values;
	                        } else if (value instanceof ObservableObject) {
	                            text = value.get(textField);
	                            value = value.get(valueField);
	                        }
	                    }

	                    if (options.autoBind === false && !options.cascadeFrom && widget.listView && !widget.listView.bound()) {
	                        if (textField === valueField && !text) {
	                            text = value;
	                        }

	                        if (!text && (value || value === 0) && options.valuePrimitive) {
	                            widget.value(value);
	                        } else {
	                            widget._preselect(value, text);
	                        }
	                    } else {
	                        widget.value(value);
	                    }
	                }

	                this._initChange = false;
	            },

	            destroy: function() {
	                this.widget.unbind(CHANGE, this._change);
	            }
	        }),

	        gantt: {
	            dependencies: dataSourceBinding("dependencies", "dependencies", "setDependenciesDataSource")
	        },

	        multiselect: {
	            value: Binder.extend({
	                init: function(widget, bindings, options) {
	                    Binder.fn.init.call(this, widget.element[0], bindings, options);

	                    this.widget = widget;
	                    this._change = $.proxy(this.change, this);
	                    this.widget.first(CHANGE, this._change);
	                    this._initChange = false;
	                },

	                change: function() {
	                    var that = this,
	                        oldValues = that.bindings[VALUE].get(),
	                        valuePrimitive = that.options.valuePrimitive,
	                        newValues = valuePrimitive ? that.widget.value() : that.widget.dataItems();

	                    var field = this.options.dataValueField || this.options.dataTextField;

	                    newValues = newValues.slice(0);

	                    that._initChange = true;

	                    if (oldValues instanceof ObservableArray) {
	                        var remove = [];

	                        var newLength = newValues.length;

	                        var i = 0, j = 0;
	                        var old = oldValues[i];
	                        var same = false;
	                        var removeIndex;
	                        var newValue;
	                        var found;

	                        while (old !== undefined) {
	                            found = false;
	                            for (j = 0; j < newLength; j++) {
	                                if (valuePrimitive) {
	                                    same = newValues[j] == old;
	                                } else {
	                                    newValue = newValues[j];

	                                    newValue = newValue.get ? newValue.get(field) : newValue;
	                                    same = newValue == (old.get ? old.get(field) : old);
	                                }

	                                if (same) {
	                                    newValues.splice(j, 1);
	                                    newLength -= 1;
	                                    found = true;
	                                    break;
	                                }
	                            }

	                            if (!found) {
	                                remove.push(old);
	                                arraySplice(oldValues, i, 1);
	                                removeIndex = i;
	                            } else {
	                                i += 1;
	                            }

	                            old = oldValues[i];
	                        }

	                        arraySplice(oldValues, oldValues.length, 0, newValues);

	                        if (remove.length) {
	                            oldValues.trigger("change", {
	                                action: "remove",
	                                items: remove,
	                                index: removeIndex
	                            });
	                        }

	                        if (newValues.length) {
	                            oldValues.trigger("change", {
	                                action: "add",
	                                items: newValues,
	                                index: oldValues.length - 1
	                            });
	                        }
	                    } else {
	                        that.bindings[VALUE].set(newValues);
	                    }

	                    that._initChange = false;
	                },

	                refresh: function() {
	                    if (!this._initChange) {
	                        var options = this.options,
	                            widget = this.widget,
	                            field = options.dataValueField || options.dataTextField,
	                            value = this.bindings.value.get(),
	                            data = value,
	                            idx = 0, length,
	                            values = [],
	                            selectedValue;

	                        if (value === undefined) {
	                            value = null;
	                        }

	                        if (field) {
	                            if (value instanceof ObservableArray) {
	                                for (length = value.length; idx < length; idx++) {
	                                    selectedValue = value[idx];
	                                    values[idx] = selectedValue.get ? selectedValue.get(field) : selectedValue;
	                                }
	                                value = values;
	                            } else if (value instanceof ObservableObject) {
	                                value = value.get(field);
	                            }
	                        }

	                        if (options.autoBind === false && options.valuePrimitive !== true && !widget._isBound()) {
	                            widget._preselect(data, value);
	                        } else {
	                            widget.value(value);
	                        }
	                    }
	                },

	                destroy: function() {
	                    this.widget.unbind(CHANGE, this._change);
	                }

	            })
	        },
	        scheduler: {
	            source: dataSourceBinding("source", "dataSource", "setDataSource").extend({
	                dataBound: function(e) {
	                    var idx;
	                    var length;
	                    var widget = this.widget;
	                    var elements = e.addedItems || widget.items();
	                    var data, parents;

	                    if (elements.length) {
	                        data = e.addedDataItems || widget.dataItems();
	                        parents = this.bindings.source._parents();

	                        for (idx = 0, length = data.length; idx < length; idx++) {
	                            bindElement(elements[idx], data[idx], this._ns(e.ns), [data[idx]].concat(parents));
	                        }
	                    }
	                }
	            })
	        }
	    };

	    var arraySplice = function(arr, idx, remove, add) {
	        add = add || [];
	        remove = remove || 0;

	        var addLength = add.length;
	        var oldLength = arr.length;

	        var shifted = [].slice.call(arr, idx + remove);
	        var shiftedLength = shifted.length;
	        var index;

	        if (addLength) {
	            addLength = idx + addLength;
	            index = 0;

	            for (; idx < addLength; idx++) {
	                arr[idx] = add[index];
	                index++;
	            }

	            arr.length = addLength;
	        } else if (remove) {
	            arr.length = idx;

	            remove += idx;
	            while (idx < remove) {
	                delete arr[--remove];
	            }
	        }

	        if (shiftedLength) {
	            shiftedLength = idx + shiftedLength;
	            index = 0;

	            for (; idx < shiftedLength; idx++) {
	                arr[idx] = shifted[index];
	                index++;
	            }

	            arr.length = shiftedLength;
	        }

	        idx = arr.length;

	        while (idx < oldLength) {
	            delete arr[idx];
	            idx++;
	        }
	    };

	    var BindingTarget = Class.extend( {
	        init: function(target, options) {
	            this.target = target;
	            this.options = options;
	            this.toDestroy = [];
	        },

	        bind: function(bindings) {
	            var key,
	                hasValue,
	                hasSource,
	                hasEvents,
	                hasChecked,
	                hasCss,
	                widgetBinding = this instanceof WidgetBindingTarget,
	                specificBinders = this.binders();

	            for (key in bindings) {
	                if (key == VALUE) {
	                    hasValue = true;
	                } else if (key == SOURCE) {
	                    hasSource = true;
	                } else if (key == EVENTS && !widgetBinding) {
	                    hasEvents = true;
	                } else if (key == CHECKED) {
	                    hasChecked = true;
	                } else if (key == CSS) {
	                    hasCss = true;
	                } else {
	                    this.applyBinding(key, bindings, specificBinders);
	                }
	            }
	            if (hasSource) {
	                this.applyBinding(SOURCE, bindings, specificBinders);
	            }

	            if (hasValue) {
	                this.applyBinding(VALUE, bindings, specificBinders);
	            }

	            if (hasChecked) {
	                this.applyBinding(CHECKED, bindings, specificBinders);
	            }

	            if (hasEvents && !widgetBinding) {
	                this.applyBinding(EVENTS, bindings, specificBinders);
	            }

	            if (hasCss && !widgetBinding) {
	                this.applyBinding(CSS, bindings, specificBinders);
	            }
	        },

	        binders: function() {
	            return binders[this.target.nodeName.toLowerCase()] || {};
	        },

	        applyBinding: function(name, bindings, specificBinders) {
	            var binder = specificBinders[name] || binders[name],
	                toDestroy = this.toDestroy,
	                attribute,
	                binding = bindings[name];

	            if (binder) {
	                binder = new binder(this.target, bindings, this.options);

	                toDestroy.push(binder);

	                if (binding instanceof Binding) {
	                    binder.bind(binding);
	                    toDestroy.push(binding);
	                } else {
	                    for (attribute in binding) {
	                        binder.bind(binding, attribute);
	                        toDestroy.push(binding[attribute]);
	                    }
	                }
	            } else if (name !== "template") {
	                throw new Error("The " + name + " binding is not supported by the " + this.target.nodeName.toLowerCase() + " element");
	            }
	        },

	        destroy: function() {
	            var idx,
	                length,
	                toDestroy = this.toDestroy;

	            for (idx = 0, length = toDestroy.length; idx < length; idx++) {
	                toDestroy[idx].destroy();
	            }
	        }
	    });

	    var WidgetBindingTarget = BindingTarget.extend( {
	        binders: function() {
	            return binders.widget[this.target.options.name.toLowerCase()] || {};
	        },

	        applyBinding: function(name, bindings, specificBinders) {
	            var binder = specificBinders[name] || binders.widget[name],
	                toDestroy = this.toDestroy,
	                attribute,
	                binding = bindings[name];

	            if (binder) {
	                binder = new binder(this.target, bindings, this.target.options);

	                toDestroy.push(binder);


	                if (binding instanceof Binding) {
	                    binder.bind(binding);
	                    toDestroy.push(binding);
	                } else {
	                    for (attribute in binding) {
	                        binder.bind(binding, attribute);
	                        toDestroy.push(binding[attribute]);
	                    }
	                }
	            } else {
	                throw new Error("The " + name + " binding is not supported by the " + this.target.options.name + " widget");
	            }
	        }
	    });

	    function bindingTargetForRole(element, roles) {
	        var widget = kendo.initWidget(element, {}, roles);

	        if (widget) {
	            return new WidgetBindingTarget(widget);
	        }
	    }

	    var keyValueRegExp = /[A-Za-z0-9_\-]+:(\{([^}]*)\}|[^,}]+)/g,
	        whiteSpaceRegExp = /\s/g;

	    function parseBindings(bind) {
	        var result = {},
	            idx,
	            length,
	            token,
	            colonIndex,
	            key,
	            value,
	            tokens;

	        tokens = bind.match(keyValueRegExp);

	        for (idx = 0, length = tokens.length; idx < length; idx++) {
	            token = tokens[idx];
	            colonIndex = token.indexOf(":");

	            key = token.substring(0, colonIndex);
	            value = token.substring(colonIndex + 1);

	            if (value.charAt(0) == "{") {
	                value = parseBindings(value);
	            }

	            result[key] = value;
	        }

	        return result;
	    }

	    function createBindings(bindings, source, type) {
	        var binding,
	            result = {};

	        for (binding in bindings) {
	            result[binding] = new type(source, bindings[binding]);
	        }

	        return result;
	    }

	    function bindElement(element, source, roles, parents) {
	        var role = element.getAttribute("data-" + kendo.ns + "role"),
	            idx,
	            bind = element.getAttribute("data-" + kendo.ns + "bind"),
	            childrenCopy = [],
	            deep = true,
	            bindings,
	            options = {},
	            target;

	        parents = parents || [source];

	        if (role || bind) {
	            unbindElement(element, false);
	        }

	        if (role) {
	            target = bindingTargetForRole(element, roles);
	        }

	        if (bind) {
	            bind = parseBindings(bind.replace(whiteSpaceRegExp, ""));

	            if (!target) {
	                options = kendo.parseOptions(element, {textField: "", valueField: "", template: "", valueUpdate: CHANGE, valuePrimitive: false, autoBind: true});
	                options.roles = roles;
	                target = new BindingTarget(element, options);
	            }

	            target.source = source;

	            bindings = createBindings(bind, parents, Binding);

	            if (options.template) {
	                bindings.template = new TemplateBinding(parents, "", options.template);
	            }

	            if (bindings.click) {
	                bind.events = bind.events || {};
	                bind.events.click = bind.click;
	                bindings.click.destroy();
	                delete bindings.click;
	            }

	            if (bindings.source) {
	                deep = false;
	            }

	            if (bind.attr) {
	                bindings.attr = createBindings(bind.attr, parents, Binding);
	            }

	            if (bind.style) {
	                bindings.style = createBindings(bind.style, parents, Binding);
	            }

	            if (bind.events) {
	                bindings.events = createBindings(bind.events, parents, EventBinding);
	            }

	            if (bind.css) {
	                bindings.css = createBindings(bind.css, parents, Binding);
	            }

	            target.bind(bindings);
	        }

	        if (target) {
	            element.kendoBindingTarget = target;
	        }

	        var children = element.children;
	        if (deep && children) {
	            // https://github.com/telerik/kendo/issues/1240 for the weirdness.
	            for (idx = 0; idx < children.length; idx++) {
	                childrenCopy[idx] = children[idx];
	            }

	            for (idx = 0; idx < childrenCopy.length; idx++) {
	                bindElement(childrenCopy[idx], source, roles, parents);
	            }
	        }
	    }

	    function bind(dom, object) {
	        var idx,
	            length,
	            node,
	            roles = kendo.rolesFromNamespaces([].slice.call(arguments, 2));

	        object = kendo.observable(object);
	        dom = $(dom);

	        for (idx = 0, length = dom.length; idx < length; idx++) {
	            node = dom[idx];
	            if (node.nodeType === 1) {
	                bindElement(node, object, roles);
	            }
	        }
	    }

	    function unbindElement(element, destroyWidget) {
	        var bindingTarget = element.kendoBindingTarget;

	        if (bindingTarget) {
	            bindingTarget.destroy();

	            if (deleteExpando) {
	                delete element.kendoBindingTarget;
	            } else if (element.removeAttribute) {
	                element.removeAttribute("kendoBindingTarget");
	            } else {
	                element.kendoBindingTarget = null;
	            }
	        }

	        if(destroyWidget) {
	            var widget = kendo.widgetInstance($(element));
	            if (widget && typeof widget.destroy === FUNCTION) {
	                widget.destroy();
	            }
	        }
	    }

	    function unbindElementTree(element, destroyWidgets) {
	        unbindElement(element, destroyWidgets);

	        unbindElementChildren(element, destroyWidgets);
	    }

	    function unbindElementChildren(element, destroyWidgets) {
	        var children = element.children;

	        if (children) {
	            for (var idx = 0, length = children.length; idx < length; idx++) {
	                unbindElementTree(children[idx], destroyWidgets);
	            }
	        }
	    }

	    function unbind(dom) {
	        var idx, length;

	        dom = $(dom);

	        for (idx = 0, length = dom.length; idx < length; idx++ ) {
	            unbindElementTree(dom[idx], false);
	        }
	    }

	    function notify(widget, namespace) {
	        var element = widget.element,
	            bindingTarget = element[0].kendoBindingTarget;

	        if (bindingTarget) {
	            bind(element, bindingTarget.source, namespace);
	        }
	    }

	    function retrievePrimitiveValues(value, valueField) {
	        var values = [];
	        var idx = 0;
	        var length;
	        var item;

	        if (!valueField) {
	            return value;
	        }

	        if (value instanceof ObservableArray) {
	            for (length = value.length; idx < length; idx++) {
	                item = value[idx];
	                values[idx] = item.get ? item.get(valueField) : item[valueField];
	            }
	            value = values;
	        } else if (value instanceof ObservableObject) {
	            value = value.get(valueField);
	        }

	        return value;
	    }

	    kendo.unbind = unbind;
	    kendo.bind = bind;
	    kendo.data.binders = binders;
	    kendo.data.Binder = Binder;
	    kendo.notify = notify;

	    kendo.observable = function(object) {
	        if (!(object instanceof ObservableObject)) {
	            object = new ObservableObject(object);
	        }

	        return object;
	    };

	    kendo.observableHierarchy = function(array) {
	        var dataSource = kendo.data.HierarchicalDataSource.create(array);

	        function recursiveRead(data) {
	            var i, children;

	            for (i = 0; i < data.length; i++) {
	                data[i]._initChildren();

	                children = data[i].children;

	                children.fetch();

	                data[i].items = children.data();

	                recursiveRead(data[i].items);
	            }
	        }

	        dataSource.fetch();

	        recursiveRead(dataSource.data());

	        dataSource._data._dataSource = dataSource;

	        return dataSource._data;
	    };

	})(window.kendo.jQuery);

	return window.kendo;


	}, __webpack_require__(422));


/***/ }),

/***/ 427:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(4);

/***/ })

/******/ });

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(446);


/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 433:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(1);

/***/ }),

/***/ 446:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(447), __webpack_require__(433) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "datepicker",
	    name: "DatePicker",
	    category: "web",
	    description: "The DatePicker widget allows the user to select a date from a calendar or by direct input.",
	    depends: [ "calendar", "popup" ]
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	    ui = kendo.ui,
	    Widget = ui.Widget,
	    parse = kendo.parseDate,
	    keys = kendo.keys,
	    template = kendo.template,
	    activeElement = kendo._activeElement,
	    DIV = "<div />",
	    SPAN = "<span />",
	    ns = ".kendoDatePicker",
	    CLICK = "click" + ns,
	    OPEN = "open",
	    CLOSE = "close",
	    CHANGE = "change",
	    DISABLED = "disabled",
	    READONLY = "readonly",
	    DEFAULT = "k-state-default",
	    FOCUSED = "k-state-focused",
	    SELECTED = "k-state-selected",
	    STATEDISABLED = "k-state-disabled",
	    HOVER = "k-state-hover",
	    HOVEREVENTS = "mouseenter" + ns + " mouseleave" + ns,
	    MOUSEDOWN = "mousedown" + ns,
	    ID = "id",
	    MIN = "min",
	    MAX = "max",
	    MONTH = "month",
	    ARIA_DISABLED = "aria-disabled",
	    ARIA_EXPANDED = "aria-expanded",
	    ARIA_HIDDEN = "aria-hidden",
	    calendar = kendo.calendar,
	    isInRange = calendar.isInRange,
	    restrictValue = calendar.restrictValue,
	    isEqualDatePart = calendar.isEqualDatePart,
	    extend = $.extend,
	    proxy = $.proxy,
	    DATE = Date;

	    function normalize(options) {
	        var parseFormats = options.parseFormats,
	            format = options.format;

	        calendar.normalize(options);


	        parseFormats = $.isArray(parseFormats) ? parseFormats : [parseFormats];

	        if (!parseFormats.length) {
	            parseFormats.push("yyyy-MM-dd");
	        }

	        if ($.inArray(format, parseFormats) === -1) {
	            parseFormats.splice(0, 0, options.format);
	        }

	        options.parseFormats = parseFormats;
	    }

	    function preventDefault(e) {
	        e.preventDefault();
	    }

	    var DateView = function(options) {
	        var that = this, id,
	            body = document.body,
	            div = $(DIV).attr(ARIA_HIDDEN, "true")
	                        .addClass("k-calendar-container")
	                        .appendTo(body);

	        that.options = options = options || {};
	        id = options.id;

	        if (id) {
	            id += "_dateview";

	            div.attr(ID, id);
	            that._dateViewID = id;
	        }

	        that.popup = new ui.Popup(div, extend(options.popup, options, { name: "Popup", isRtl: kendo.support.isRtl(options.anchor) }));
	        that.div = div;

	        that.value(options.value);
	    };

	    DateView.prototype = {
	        _calendar: function() {
	            var that = this;
	            var calendar = that.calendar;
	            var options = that.options;
	            var div;

	            if (!calendar) {
	                div = $(DIV).attr(ID, kendo.guid())
	                            .appendTo(that.popup.element)
	                            .on(MOUSEDOWN, preventDefault)
	                            .on(CLICK, "td:has(.k-link)", proxy(that._click, that));

	                that.calendar = calendar = new ui.Calendar(div);
	                that._setOptions(options);

	                kendo.calendar.makeUnselectable(calendar.element);

	                calendar.navigate(that._value || that._current, options.start);

	                that.value(that._value);
	            }
	        },

	        _setOptions: function(options) {
	            this.calendar.setOptions({
	                focusOnNav: false,
	                change: options.change,
	                culture: options.culture,
	                dates: options.dates,
	                depth: options.depth,
	                footer: options.footer,
	                format: options.format,
	                max: options.max,
	                min: options.min,
	                month: options.month,
	                weekNumber: options.weekNumber,
	                start: options.start,
	                disableDates: options.disableDates
	            });
	        },

	        setOptions: function(options) {
	            var old = this.options;
	            var disableDates = options.disableDates;

	            if (disableDates) {
	                options.disableDates = calendar.disabled(disableDates);
	            }

	            this.options = extend(old, options, {
	                change: old.change,
	                close: old.close,
	                open: old.open
	            });

	            if (this.calendar) {
	                this._setOptions(this.options);
	            }
	        },

	        destroy: function() {
	            this.popup.destroy();
	        },

	        open: function() {
	            var that = this;

	            that._calendar();
	            that.popup.open();
	        },

	        close: function() {
	            this.popup.close();
	        },

	        min: function(value) {
	            this._option(MIN, value);
	        },

	        max: function(value) {
	            this._option(MAX, value);
	        },

	        toggle: function() {
	            var that = this;

	            that[that.popup.visible() ? CLOSE : OPEN]();
	        },

	        move: function(e) {
	            var that = this,
	                key = e.keyCode,
	                calendar = that.calendar,
	                selectIsClicked = e.ctrlKey && key == keys.DOWN || key == keys.ENTER,
	                handled = false;

	            if (e.altKey) {
	                if (key == keys.DOWN) {
	                    that.open();
	                    e.preventDefault();
	                    handled = true;
	                } else if (key == keys.UP) {
	                    that.close();
	                    e.preventDefault();
	                    handled = true;
	                }

	            } else if (that.popup.visible()) {

	                if (key == keys.ESC || (selectIsClicked && calendar._cell.hasClass(SELECTED))) {
	                    that.close();
	                    e.preventDefault();
	                    return true;
	                }

	                that._current = calendar._move(e);
	                handled = true;
	            }

	            return handled;
	        },

	        current: function(date) {
	            this._current = date;
	            this.calendar._focus(date);
	        },

	        value: function(value) {
	            var that = this,
	                calendar = that.calendar,
	                options = that.options,
	                disabledDate = options.disableDates;

	            if (disabledDate && disabledDate(value)) {
	                value = null;
	            }

	            that._value = value;
	            that._current = new DATE(+restrictValue(value, options.min, options.max));

	            if (calendar) {
	                calendar.value(value);
	            }
	        },

	        _click: function(e) {

	            if (e.currentTarget.className.indexOf(SELECTED) !== -1) {
	                this.close();
	            }
	        },

	        _option: function(option, value) {
	            var that = this;
	            var calendar = that.calendar;

	            that.options[option] = value;

	            if (calendar) {
	                calendar[option](value);
	            }
	        }
	    };

	    DateView.normalize = normalize;

	    kendo.DateView = DateView;

	    var DatePicker = Widget.extend({
	        init: function(element, options) {
	            var that = this,
	                disabled,
	                div;

	            Widget.fn.init.call(that, element, options);
	            element = that.element;
	            options = that.options;

	            options.disableDates = kendo.calendar.disabled(options.disableDates);

	            options.min = parse(element.attr("min")) || parse(options.min);
	            options.max = parse(element.attr("max")) || parse(options.max);

	            normalize(options);

	            that._initialOptions = extend({}, options);

	            that._wrapper();

	            that.dateView = new DateView(extend({}, options, {
	                id: element.attr(ID),
	                anchor: that.wrapper,
	                change: function() {
	                    // calendar is the current scope
	                    that._change(this.value());
	                    that.close();
	                },
	                close: function(e) {
	                    if (that.trigger(CLOSE)) {
	                        e.preventDefault();
	                    } else {
	                        element.attr(ARIA_EXPANDED, false);
	                        div.attr(ARIA_HIDDEN, true);
	                    }
	                },
	                open: function(e) {
	                    var options = that.options,
	                        date;

	                    if (that.trigger(OPEN)) {
	                        e.preventDefault();
	                    } else {
	                        if (that.element.val() !== that._oldText) {
	                            date = parse(element.val(), options.parseFormats, options.culture);

	                            that.dateView[date ? "current" : "value"](date);
	                        }

	                        element.attr(ARIA_EXPANDED, true);
	                        div.attr(ARIA_HIDDEN, false);

	                        that._updateARIA(date);

	                    }
	                }
	            }));
	            div = that.dateView.div;

	            that._icon();

	            try {
	                element[0].setAttribute("type", "text");
	            } catch(e) {
	                element[0].type = "text";
	            }

	            element
	                .addClass("k-input")
	                .attr({
	                    role: "combobox",
	                    "aria-expanded": false,
	                    "aria-owns": that.dateView._dateViewID
	                });
	            that._reset();
	            that._template();

	            disabled = element.is("[disabled]") || $(that.element).parents("fieldset").is(':disabled');
	            if (disabled) {
	                that.enable(false);
	            } else {
	                that.readonly(element.is("[readonly]"));
	            }

	            if (options.dateInput) {
	                that._dateInput = new ui.DateInput(element, {
	                    culture: options.culture,
	                    format: options.format,
	                    min: options.min,
	                    max: options.max,
	                    value: options.value
	                });
	            }

	            that._old = that._update(options.value || that.element.val());
	            that._oldText = element.val();

	            kendo.notify(that);
	        },
	        events: [
	        OPEN,
	        CLOSE,
	        CHANGE],
	        options: {
	            name: "DatePicker",
	            value: null,
	            footer: "",
	            format: "",
	            culture: "",
	            parseFormats: [],
	            min: new Date(1900, 0, 1),
	            max: new Date(2099, 11, 31),
	            start: MONTH,
	            depth: MONTH,
	            animation: {},
	            month: {},
	            dates: [],
	            ARIATemplate: 'Current focused date is #=kendo.toString(data.current, "D")#',
	            dateInput: false
	        },

	        setOptions: function(options) {
	            var that = this;
	            var value = that._value;

	            Widget.fn.setOptions.call(that, options);

	            options = that.options;

	            options.min = parse(options.min);
	            options.max = parse(options.max);

	            normalize(options);

	            that.dateView.setOptions(options);
	            if (that._dateInput) {
	                that._dateInput.setOptions({
	                    culture: options.culture,
	                    format: options.format,
	                    min: options.min,
	                    max: options.max,
	                    value: options.value
	                });
	            }

	            if (value) {
	                that.element.val(kendo.toString(value, options.format, options.culture));
	                that._updateARIA(value);
	            }
	        },

	        _editable: function(options) {
	            var that = this,
	                icon = that._dateIcon.off(ns),
	                element = that.element.off(ns),
	                wrapper = that._inputWrapper.off(ns),
	                readonly = options.readonly,
	                disable = options.disable;

	            if (!readonly && !disable) {
	                wrapper
	                    .addClass(DEFAULT)
	                    .removeClass(STATEDISABLED)
	                    .on(HOVEREVENTS, that._toggleHover);

	                element.removeAttr(DISABLED)
	                       .removeAttr(READONLY)
	                       .attr(ARIA_DISABLED, false)
	                       .on("keydown" + ns, proxy(that._keydown, that))
	                       .on("focusout" + ns, proxy(that._blur, that))
	                       .on("focus" + ns, function() {
	                           that._inputWrapper.addClass(FOCUSED);
	                       });

	               icon.on(CLICK, proxy(that._click, that))
	                   .on(MOUSEDOWN, preventDefault);
	            } else {
	                wrapper
	                    .addClass(disable ? STATEDISABLED : DEFAULT)
	                    .removeClass(disable ? DEFAULT : STATEDISABLED);

	                element.attr(DISABLED, disable)
	                       .attr(READONLY, readonly)
	                       .attr(ARIA_DISABLED, disable);
	            }
	        },

	        readonly: function(readonly) {
	            this._editable({
	                readonly: readonly === undefined ? true : readonly,
	                disable: false
	            });
	        },

	        enable: function(enable) {
	            this._editable({
	                readonly: false,
	                disable: !(enable = enable === undefined ? true : enable)
	            });
	        },

	        destroy: function() {
	            var that = this;

	            Widget.fn.destroy.call(that);

	            that.dateView.destroy();

	            that.element.off(ns);
	            that._dateIcon.off(ns);
	            that._inputWrapper.off(ns);

	            if (that._form) {
	                that._form.off("reset", that._resetHandler);
	            }
	        },

	        open: function() {
	            this.dateView.open();
	        },

	        close: function() {
	            this.dateView.close();
	        },

	        min: function(value) {
	            return this._option(MIN, value);
	        },

	        max: function(value) {
	            return this._option(MAX, value);
	        },

	        value: function(value) {
	            var that = this;

	            if (value === undefined) {
	                return that._value;
	            }

	            that._old = that._update(value);

	            if (that._old === null) {
	                that.element.val("");
	            }

	            that._oldText = that.element.val();
	        },

	        _toggleHover: function(e) {
	            $(e.currentTarget).toggleClass(HOVER, e.type === "mouseenter");
	        },

	        _blur: function() {
	            var that = this,
	                value = that.element.val();

	            that.close();
	            if (value !== that._oldText) {
	                that._change(value);
	            }

	            that._inputWrapper.removeClass(FOCUSED);
	        },

	        _click: function() {
	            var that = this,
	                element = that.element;

	            that.dateView.toggle();

	            if (!kendo.support.touch && element[0] !== activeElement()) {
	                element.focus();
	            }
	        },

	        _change: function(value) {
	            var that = this,
	            oldValue = that.element.val(),
	            dateChanged;

	            value = that._update(value);
	            dateChanged = !kendo.calendar.isEqualDate(that._old, value);

	            var valueUpdated = dateChanged && !that._typing;
	            var textFormatted = oldValue !== that.element.val();

	            if (valueUpdated || textFormatted) {
	                that.element.trigger(CHANGE);
	            }

	            if (dateChanged) {
	                that._old = value;
	                that._oldText = that.element.val();

	                that.trigger(CHANGE);
	            }

	            that._typing = false;
	        },

	        _keydown: function(e) {
	            var that = this,
	                dateView = that.dateView,
	                value = that.element.val(),
	                handled = false;

	            if (!dateView.popup.visible() && e.keyCode == keys.ENTER && value !== that._oldText) {
	                that._change(value);
	            } else {
	                handled = dateView.move(e);
	                that._updateARIA(dateView._current);

	                if (!handled) {
	                    that._typing = true;
	                } else if (that._dateInput && e.stopImmediatePropagation) {
	                    e.stopImmediatePropagation();
	                }
	            }
	        },

	        _icon: function() {
	            var that = this,
	                element = that.element,
	                icon;

	            icon = element.next("span.k-select");

	            if (!icon[0]) {
	                icon = $('<span unselectable="on" class="k-select" aria-label="select"><span class="k-icon k-i-calendar"></span></span>').insertAfter(element);
	            }

	            that._dateIcon = icon.attr({
	                "role": "button",
	                "aria-controls": that.dateView._dateViewID
	            });
	        },

	        _option: function(option, value) {
	            var that = this,
	                options = that.options;

	            if (value === undefined) {
	                return options[option];
	            }

	            value = parse(value, options.parseFormats, options.culture);

	            if (!value) {
	                return;
	            }

	            options[option] = new DATE(+value);
	            that.dateView[option](value);
	        },

	        _update: function(value) {
	            var that = this,
	                options = that.options,
	                min = options.min,
	                max = options.max,
	                current = that._value,
	                date = parse(value, options.parseFormats, options.culture),
	                isSameType = (date === null && current === null) || (date instanceof Date && current instanceof Date),
	                formattedValue;

	            if (options.disableDates(date)) {
	                date = null;
	                if (!that._old && !that.element.val()) {
	                    value = null;
	                }
	            }

	            if (+date === +current && isSameType) {
	                formattedValue = kendo.toString(date, options.format, options.culture);

	                if (formattedValue !== value) {
	                    that.element.val(date === null ? value : formattedValue);
	                }

	                return date;
	            }

	            if (date !== null && isEqualDatePart(date, min)) {
	                date = restrictValue(date, min, max);
	            } else if (!isInRange(date, min, max)) {
	                date = null;
	            }

	            that._value = date;
	            that.dateView.value(date);
	            if (that._dateInput) {
	                that._dateInput.value(date || value);
	            } else {
	                that.element.val(kendo.toString(date || value, options.format, options.culture));
	            }
	            that._updateARIA(date);

	            return date;
	        },

	        _wrapper: function() {
	            var that = this,
	                element = that.element,
	                wrapper;

	            wrapper = element.parents(".k-datepicker");

	            if (!wrapper[0]) {
	                wrapper = element.wrap(SPAN).parent().addClass("k-picker-wrap k-state-default");
	                wrapper = wrapper.wrap(SPAN).parent();
	            }

	            wrapper[0].style.cssText = element[0].style.cssText;
	            element.css({
	                width: "100%",
	                height: element[0].style.height
	            });

	            that.wrapper = wrapper.addClass("k-widget k-datepicker k-header")
	                                  .addClass(element[0].className);

	            that._inputWrapper = $(wrapper[0].firstChild);
	        },

	        _reset: function() {
	            var that = this,
	                element = that.element,
	                formId = element.attr("form"),
	                form = formId ? $("#" + formId) : element.closest("form");

	            if (form[0]) {
	                that._resetHandler = function() {
	                    that.value(element[0].defaultValue);
	                    that.max(that._initialOptions.max);
	                    that.min(that._initialOptions.min);
	                };

	                that._form = form.on("reset", that._resetHandler);
	            }
	        },

	        _template: function() {
	            this._ariaTemplate = template(this.options.ARIATemplate);
	        },

	        _updateARIA: function(date) {
	            var cell;
	            var that = this;
	            var calendar = that.dateView.calendar;

	            that.element.removeAttr("aria-activedescendant");

	            if (calendar) {
	                cell = calendar._cell;
	                cell.attr("aria-label", that._ariaTemplate({ current: date || calendar.current() }));

	                that.element.attr("aria-activedescendant", cell.attr("id"));
	            }
	        }
	    });

	    ui.plugin(DatePicker);

	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(422));


/***/ }),

/***/ 447:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(24);

/***/ })

/******/ });

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(489);


/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 433:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(1);

/***/ }),

/***/ 489:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(433) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "mobile.shim",
	    name: "Shim",
	    category: "mobile",
	    description: "Mobile Shim",
	    depends: [ "popup" ],
	    hidden: true
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        ui = kendo.mobile.ui,
	        Popup = kendo.ui.Popup,
	        SHIM = '<div class="km-shim"/>',
	        HIDE = "hide",
	        Widget = ui.Widget;

	    var Shim = Widget.extend({
	        init: function(element, options) {
	            var that = this,
	                app = kendo.mobile.application,
	                os = kendo.support.mobileOS,
	                osname = app ? app.os.name : (os ? os.name : "ios"),
	                ioswp = osname === "ios" || osname === "wp" || (app ? app.os.skin : false),
	                bb = osname === "blackberry",
	                align = options.align || (ioswp ?  "bottom center" : bb ? "center right" : "center center"),
	                position = options.position || (ioswp ? "bottom center" : bb ? "center right" : "center center"),
	                effect = options.effect || (ioswp ? "slideIn:up" : bb ? "slideIn:left" : "fade:in"),
	                shim = $(SHIM).handler(that).hide();

	            Widget.fn.init.call(that, element, options);

	            that.shim = shim;
	            element = that.element;
	            options = that.options;

	            if (options.className) {
	                that.shim.addClass(options.className);
	            }

	            if (!options.modal) {
	                that.shim.on("down", "_hide");
	            }

	            (app ? app.element : $(document.body)).append(shim);

	            that.popup = new Popup(that.element, {
	                anchor: shim,
	                modal: true,
	                appendTo: shim,
	                origin: align,
	                position: position,
	                animation: {
	                    open: {
	                        effects: effect,
	                        duration: options.duration
	                    },
	                    close: {
	                        duration: options.duration
	                    }
	                },

	                close: function(e) {
	                    var prevented = false;

	                    if (!that._apiCall) {
	                        prevented = that.trigger(HIDE);
	                    }

	                    if (prevented) {
	                        e.preventDefault();
	                    }

	                    that._apiCall = false;
	                },

	                deactivate: function() { // Deactivate event can't be prevented.
	                    shim.hide();
	                },

	                open: function() {
	                    shim.show();
	                }
	            });

	            kendo.notify(that);
	        },

	        events: [ HIDE ],

	        options: {
	            name: "Shim",
	            modal: false,
	            align: undefined,
	            position: undefined,
	            effect: undefined,
	            duration: 200
	        },

	        show: function() {
	            this.popup.open();
	        },

	        hide: function() {
	            this._apiCall = true;
	            this.popup.close();
	        },

	        destroy: function() {
	            Widget.fn.destroy.call(this);
	            this.shim.kendoDestroy();
	            this.popup.destroy();
	            this.shim.remove();
	        },

	        _hide: function(e) {
	            if (!e || !$.contains(this.shim.children().children(".k-popup")[0], e.target)) {
	                this.popup.close();
	            }
	        }
	    });

	    ui.plugin(Shim);
	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(422));


/***/ })

/******/ });

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(505);


/***/ }),

/***/ 421:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(0);

/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 435:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(5);

/***/ }),

/***/ 505:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(421), __webpack_require__(435) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "selectable",
	    name: "Selectable",
	    category: "framework",
	    depends: [ "core", "userevents" ],
	    advanced: true
	};

	(function ($, undefined) {
	    var kendo = window.kendo,
	        Widget = kendo.ui.Widget,
	        proxy = $.proxy,
	        abs = Math.abs,
	        ARIASELECTED = "aria-selected",
	        SELECTED = "k-state-selected",
	        ACTIVE = "k-state-selecting",
	        SELECTABLE = "k-selectable",
	        CHANGE = "change",
	        NS = ".kendoSelectable",
	        UNSELECTING = "k-state-unselecting",
	        INPUTSELECTOR = "input,a,textarea,.k-multiselect-wrap,select,button,.k-button>span,.k-button>img,span.k-icon.k-i-arrow-60-down,span.k-icon.k-i-arrow-60-up",
	        msie = kendo.support.browser.msie,
	        supportEventDelegation = false;

	        (function($) {
	            (function() {
	                $('<div class="parent"><span /></div>')
	                .on("click", ">*", function() {
	                    supportEventDelegation = true;
	                })
	                .find("span")
	                .click()
	                .end()
	                .off();
	            })();
	        })($);

	    var Selectable = Widget.extend({
	        init: function(element, options) {
	            var that = this,
	                multiple;

	            Widget.fn.init.call(that, element, options);

	            that._marquee = $("<div class='k-marquee'><div class='k-marquee-color'></div></div>");
	            that._lastActive = null;
	            that.element.addClass(SELECTABLE);

	            that.relatedTarget = that.options.relatedTarget;

	            multiple = that.options.multiple;

	            if (this.options.aria && multiple) {
	                that.element.attr("aria-multiselectable", true);
	            }

	            that.userEvents = new kendo.UserEvents(that.element, {
	                global: true,
	                allowSelection: true,
	                filter: (!supportEventDelegation ? "." + SELECTABLE + " " : "") + that.options.filter,
	                tap: proxy(that._tap, that)
	            });

	            if (multiple) {
	                that.userEvents
	                   .bind("start", proxy(that._start, that))
	                   .bind("move", proxy(that._move, that))
	                   .bind("end", proxy(that._end, that))
	                   .bind("select", proxy(that._select, that));
	            }
	        },

	        events: [CHANGE],

	        options: {
	            name: "Selectable",
	            filter: ">*",
	            multiple: false,
	            relatedTarget: $.noop
	        },

	        _isElement: function(target) {
	            var elements = this.element;
	            var idx, length = elements.length, result = false;

	            target = target[0];

	            for (idx = 0; idx < length; idx ++) {
	                if (elements[idx] === target) {
	                    result = true;
	                    break;
	                }
	            }

	            return result;
	        },

	        _tap: function(e) {
	            var target = $(e.target),
	                that = this,
	                ctrlKey = e.event.ctrlKey || e.event.metaKey,
	                multiple = that.options.multiple,
	                shiftKey = multiple && e.event.shiftKey,
	                selected,
	                whichCode = e.event.which,
	                buttonCode = e.event.button;

	            //in case of hierarchy or right-click
	            if (!that._isElement(target.closest("." + SELECTABLE)) || whichCode && whichCode == 3 || buttonCode && buttonCode == 2) {
	                return;
	            }

	            if (!this._allowSelection(e.event.target)) {
	                return;
	            }

	            selected = target.hasClass(SELECTED);
	            if (!multiple || !ctrlKey) {
	                that.clear();
	            }

	            target = target.add(that.relatedTarget(target));

	            if (shiftKey) {
	                that.selectRange(that._firstSelectee(), target);
	            } else {
	                if (selected && ctrlKey) {
	                    that._unselect(target);
	                    that._notify(CHANGE);
	                } else {
	                    that.value(target);
	                }

	                that._lastActive = that._downTarget = target;
	            }
	        },

	        _start: function(e) {
	            var that = this,
	                target = $(e.target),
	                selected = target.hasClass(SELECTED),
	                currentElement,
	                ctrlKey = e.event.ctrlKey || e.event.metaKey;

	            if (!this._allowSelection(e.event.target)) {
	                return;
	            }

	            that._downTarget = target;

	            //in case of hierarchy
	            if (!that._isElement(target.closest("." + SELECTABLE))) {
	                that.userEvents.cancel();
	                return;
	            }

	            if (that.options.useAllItems) {
	                that._items = that.element.find(that.options.filter);
	            } else {
	                currentElement = target.closest(that.element);
	                that._items = currentElement.find(that.options.filter);
	            }

	            e.sender.capture();

	            that._marquee
	                .appendTo(document.body)
	                .css({
	                    left: e.x.client + 1,
	                    top: e.y.client + 1,
	                    width: 0,
	                    height: 0
	                });

	            if (!ctrlKey) {
	                that.clear();
	            }

	            target = target.add(that.relatedTarget(target));
	            if (selected) {
	                that._selectElement(target, true);
	                if (ctrlKey) {
	                    target.addClass(UNSELECTING);
	                }
	            }
	        },

	        _move: function(e) {
	            var that = this,
	                position = {
	                    left: e.x.startLocation > e.x.location ? e.x.location : e.x.startLocation,
	                    top: e.y.startLocation > e.y.location ? e.y.location : e.y.startLocation,
	                    width: abs(e.x.initialDelta),
	                    height: abs(e.y.initialDelta)
	                };

	            that._marquee.css(position);

	            that._invalidateSelectables(position, (e.event.ctrlKey || e.event.metaKey));

	            e.preventDefault();
	        },

	        _end: function() {
	            var that = this;

	            that._marquee.remove();

	            that._unselect(that.element
	                .find(that.options.filter + "." + UNSELECTING))
	                .removeClass(UNSELECTING);


	            var target = that.element.find(that.options.filter + "." + ACTIVE);
	            target = target.add(that.relatedTarget(target));

	            that.value(target);
	            that._lastActive = that._downTarget;
	            that._items = null;
	        },

	        _invalidateSelectables: function(position, ctrlKey) {
	            var idx,
	                length,
	                target = this._downTarget[0],
	                items = this._items,
	                related,
	                toSelect;

	            for (idx = 0, length = items.length; idx < length; idx ++) {
	                toSelect = items.eq(idx);
	                related = toSelect.add(this.relatedTarget(toSelect));

	                if (collision(toSelect, position)) {
	                    if(toSelect.hasClass(SELECTED)) {
	                        if(ctrlKey && target !== toSelect[0]) {
	                            related.removeClass(SELECTED).addClass(UNSELECTING);
	                        }
	                    } else if (!toSelect.hasClass(ACTIVE) && !toSelect.hasClass(UNSELECTING)) {
	                        related.addClass(ACTIVE);
	                    }
	                } else {
	                    if (toSelect.hasClass(ACTIVE)) {
	                        related.removeClass(ACTIVE);
	                    } else if(ctrlKey && toSelect.hasClass(UNSELECTING)) {
	                        related.removeClass(UNSELECTING).addClass(SELECTED);
	                    }
	                }
	            }
	        },

	        value: function(val) {
	            var that = this,
	                selectElement = proxy(that._selectElement, that);

	            if(val) {
	                val.each(function() {
	                    selectElement(this);
	                });

	                that._notify(CHANGE);
	                return;
	            }

	            return that.element.find(that.options.filter + "." + SELECTED);
	        },

	        _firstSelectee: function() {
	            var that = this,
	                selected;

	            if(that._lastActive !== null) {
	                return that._lastActive;
	            }

	            selected = that.value();
	            return selected.length > 0 ?
	                    selected[0] :
	                    that.element.find(that.options.filter)[0];
	        },

	        _selectElement: function(element, preventNotify) {
	            var toSelect = $(element),
	                isPrevented =  !preventNotify && this._notify("select", { element: element });

	            toSelect.removeClass(ACTIVE);
	            if(!isPrevented) {
	                 toSelect.addClass(SELECTED);

	                if (this.options.aria) {
	                    toSelect.attr(ARIASELECTED, true);
	                }
	            }
	        },

	        _notify: function(name, args) {
	            args = args || { };
	            return this.trigger(name, args);
	        },

	        _unselect: function(element) {
	            element.removeClass(SELECTED);

	            if (this.options.aria) {
	                element.attr(ARIASELECTED, false);
	            }

	            return element;
	        },

	        _select: function(e) {
	            if (this._allowSelection(e.event.target)) {
	                if (!msie || (msie && !$(kendo._activeElement()).is(INPUTSELECTOR))) {
	                    e.preventDefault();
	                }
	            }
	        },

	        _allowSelection: function(target) {
	            if ($(target).is(INPUTSELECTOR)) {
	                this.userEvents.cancel();
	                this._downTarget = null;
	                return false;
	            }

	            return true;
	        },

	        resetTouchEvents: function() {
	            this.userEvents.cancel();
	        },

	        clear: function() {
	            var items = this.element.find(this.options.filter + "." + SELECTED);
	            this._unselect(items);
	        },

	        selectRange: function(start, end) {
	            var that = this,
	                idx,
	                tmp,
	                items;

	            that.clear();

	            if (that.element.length > 1) {
	                items = that.options.continuousItems();
	            }

	            if (!items || !items.length) {
	                items = that.element.find(that.options.filter);
	            }

	            start = $.inArray($(start)[0], items);
	            end = $.inArray($(end)[0], items);

	            if (start > end) {
	                tmp = start;
	                start = end;
	                end = tmp;
	            }

	            if (!that.options.useAllItems) {
	                end += that.element.length - 1;
	            }

	            for (idx = start; idx <= end; idx ++ ) {
	                that._selectElement(items[idx]);
	            }

	            that._notify(CHANGE);
	        },

	        destroy: function() {
	            var that = this;

	            Widget.fn.destroy.call(that);

	            that.element.off(NS);

	            that.userEvents.destroy();

	            that._marquee = that._lastActive = that.element = that.userEvents = null;
	        }
	    });

	    Selectable.parseOptions = function(selectable) {
	        var asLowerString = typeof selectable === "string" && selectable.toLowerCase();

	        return {
	            multiple: asLowerString && asLowerString.indexOf("multiple") > -1,
	            cell: asLowerString && asLowerString.indexOf("cell") > -1
	        };
	    };

	    function collision(element, position) {
	        if (!element.is(":visible")) {
	            return false;
	        }

	        var elementPosition = kendo.getOffset(element),
	            right = position.left + position.width,
	            bottom = position.top + position.height;

	        elementPosition.right = elementPosition.left + kendo._outerWidth(element);
	        elementPosition.bottom = elementPosition.top + kendo._outerHeight(element);

	        return !(elementPosition.left > right||
	            elementPosition.right < position.left ||
	            elementPosition.top > bottom ||
	            elementPosition.bottom < position.top);
	    }

	    kendo.ui.plugin(Selectable);

	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(422));


/***/ })

/******/ });

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(2);
var settle = __webpack_require__(50);
var buildURL = __webpack_require__(53);
var parseHeaders = __webpack_require__(59);
var isURLSameOrigin = __webpack_require__(57);
var createError = __webpack_require__(21);
var btoa = (typeof window !== 'undefined' && window.btoa && window.btoa.bind(window)) || __webpack_require__(52);

module.exports = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;

    if (utils.isFormData(requestData)) {
      delete requestHeaders['Content-Type']; // Let the browser set it
    }

    var request = new XMLHttpRequest();
    var loadEvent = 'onreadystatechange';
    var xDomain = false;

    // For IE 8/9 CORS support
    // Only supports POST and GET calls and doesn't returns the response headers.
    // DON'T do this for testing b/c XMLHttpRequest is mocked, not XDomainRequest.
    if ("development" !== 'test' &&
        typeof window !== 'undefined' &&
        window.XDomainRequest && !('withCredentials' in request) &&
        !isURLSameOrigin(config.url)) {
      request = new window.XDomainRequest();
      loadEvent = 'onload';
      xDomain = true;
      request.onprogress = function handleProgress() {};
      request.ontimeout = function handleTimeout() {};
    }

    // HTTP basic authentication
    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password || '';
      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    }

    request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), true);

    // Set the request timeout in MS
    request.timeout = config.timeout;

    // Listen for ready state
    request[loadEvent] = function handleLoad() {
      if (!request || (request.readyState !== 4 && !xDomain)) {
        return;
      }

      // The request errored out and we didn't get a response, this will be
      // handled by onerror instead
      // With one exception: request that using file: protocol, most browsers
      // will return status as 0 even though it's a successful request
      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
        return;
      }

      // Prepare the response
      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
      var response = {
        data: responseData,
        // IE sends 1223 instead of 204 (https://github.com/mzabriskie/axios/issues/201)
        status: request.status === 1223 ? 204 : request.status,
        statusText: request.status === 1223 ? 'No Content' : request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };

      settle(resolve, reject, response);

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(createError('Network Error', config, null, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED',
        request));

      // Clean up request
      request = null;
    };

    // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.
    if (utils.isStandardBrowserEnv()) {
      var cookies = __webpack_require__(55);

      // Add xsrf header
      var xsrfValue = (config.withCredentials || isURLSameOrigin(config.url)) && config.xsrfCookieName ?
          cookies.read(config.xsrfCookieName) :
          undefined;

      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    }

    // Add headers to the request
    if ('setRequestHeader' in request) {
      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
          // Remove Content-Type if data is undefined
          delete requestHeaders[key];
        } else {
          // Otherwise add header to the request
          request.setRequestHeader(key, val);
        }
      });
    }

    // Add withCredentials to request if needed
    if (config.withCredentials) {
      request.withCredentials = true;
    }

    // Add responseType to request if needed
    if (config.responseType) {
      try {
        request.responseType = config.responseType;
      } catch (e) {
        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.
        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.
        if (config.responseType !== 'json') {
          throw e;
        }
      }
    }

    // Handle progress if needed
    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', config.onDownloadProgress);
    }

    // Not all browsers support upload events
    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', config.onUploadProgress);
    }

    if (config.cancelToken) {
      // Handle cancellation
      config.cancelToken.promise.then(function onCanceled(cancel) {
        if (!request) {
          return;
        }

        request.abort();
        reject(cancel);
        // Clean up request
        request = null;
      });
    }

    if (requestData === undefined) {
      requestData = null;
    }

    // Send the request
    request.send(requestData);
  });
};


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */
function Cancel(message) {
  this.message = message;
}

Cancel.prototype.toString = function toString() {
  return 'Cancel' + (this.message ? ': ' + this.message : '');
};

Cancel.prototype.__CANCEL__ = true;

module.exports = Cancel;


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function isCancel(value) {
  return !!(value && value.__CANCEL__);
};


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var enhanceError = __webpack_require__(49);

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */
module.exports = function createError(message, config, code, request, response) {
  var error = new Error(message);
  return enhanceError(error, config, code, request, response);
};


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }
    return fn.apply(thisArg, args);
  };
};


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(428);


/***/ }),

/***/ 421:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(0);

/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 428:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(421) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "button",
	    name: "Button",
	    category: "web",
	    description: "The Button widget displays styled buttons.",
	    depends: [ "core" ]
	};

	(function ($, undefined) {
	    var kendo = window.kendo,
	        Widget = kendo.ui.Widget,
	        proxy = $.proxy,
	        keys = kendo.keys,
	        CLICK = "click",
	        KBUTTON = "k-button",
	        KBUTTONICON = "k-button-icon",
	        KBUTTONICONTEXT = "k-button-icontext",
	        NS = ".kendoButton",
	        DISABLED = "disabled",
	        DISABLEDSTATE = "k-state-disabled",
	        FOCUSEDSTATE = "k-state-focused",
	        SELECTEDSTATE = "k-state-selected";

	    var Button = Widget.extend({
	        init: function(element, options) {
	            var that = this;

	            Widget.fn.init.call(that, element, options);

	            element = that.wrapper = that.element;
	            options = that.options;

	            element.addClass(KBUTTON).attr("role", "button");

	            options.enable = options.enable && !element.attr(DISABLED);
	            that.enable(options.enable);

	            that._tabindex();

	            that._graphics();

	            element
	                .on(CLICK + NS, proxy(that._click, that))
	                .on("focus" + NS, proxy(that._focus, that))
	                .on("blur" + NS, proxy(that._blur, that))
	                .on("keydown" + NS, proxy(that._keydown, that))
	                .on("keyup" + NS, proxy(that._keyup, that));

	            kendo.notify(that);
	        },

	        destroy: function() {
	            var that = this;

	            that.wrapper.off(NS);

	            Widget.fn.destroy.call(that);
	        },

	        events: [
	            CLICK
	        ],

	        options: {
	            name: "Button",
	            icon: "",
	            spriteCssClass: "",
	            imageUrl: "",
	            enable: true
	        },

	        _isNativeButton: function() {
	            return this.element.prop("tagName").toLowerCase() == "button";
	        },

	        _click: function(e) {
	            if (this.options.enable) {
	                if (this.trigger(CLICK, { event: e })) {
	                    e.preventDefault();
	                }
	            }
	        },

	        _focus: function() {
	            if (this.options.enable) {
	                this.element.addClass(FOCUSEDSTATE);
	            }
	        },

	        _blur: function() {
	            this.element.removeClass(FOCUSEDSTATE);
	        },

	        _keydown: function(e) {
	            var that = this;
	            if (!that._isNativeButton()) {
	                if (e.keyCode == keys.ENTER || e.keyCode == keys.SPACEBAR) {
	                    if (e.keyCode == keys.SPACEBAR) {
	                        e.preventDefault();
	                        if (that.options.enable) {
	                            that.element.addClass(SELECTEDSTATE);
	                        }
	                    }
	                    that._click(e);
	                }
	            }
	        },

	        _keyup: function() {
	            this.element.removeClass(SELECTEDSTATE);
	        },

	        _graphics: function() {
	            var that = this,
	                element = that.element,
	                options = that.options,
	                icon = options.icon,
	                spriteCssClass = options.spriteCssClass,
	                imageUrl = options.imageUrl,
	                span, img, isEmpty;

	            if (spriteCssClass || imageUrl || icon) {
	                isEmpty = true;

	                element.contents().filter(function() {
	                    return (!$(this).hasClass("k-sprite") && !$(this).hasClass("k-icon") && !$(this).hasClass("k-image"));
	                }).each(function(idx, el){
	                    if (el.nodeType == 1 || el.nodeType == 3 && $.trim(el.nodeValue).length > 0) {
	                        isEmpty = false;
	                    }
	                });

	                if (isEmpty) {
	                    element.addClass(KBUTTONICON);
	                } else {
	                    element.addClass(KBUTTONICONTEXT);
	                }
	            }

	            if (icon) {
	                span = element.children("span.k-icon").first();
	                if (!span[0]) {
	                    span = $('<span class="k-icon"></span>').prependTo(element);
	                }
	                span.addClass("k-i-" + icon);
	            } else if (spriteCssClass) {
	                span = element.children("span.k-sprite").first();
	                if (!span[0]) {
	                    span = $('<span class="k-sprite"></span>').prependTo(element);
	                }
	                span.addClass(spriteCssClass);
	            } else if (imageUrl) {
	                img = element.children("img.k-image").first();
	                if (!img[0]) {
	                    img = $('<img alt="icon" class="k-image" />').prependTo(element);
	                }
	                img.attr("src", imageUrl);
	            }
	        },

	        enable: function(enable) {
	            var that = this,
	                element = that.element;

	            if (enable === undefined) {
	                enable = true;
	            }

	            enable = !!enable;
	            that.options.enable = enable;
	            element.toggleClass(DISABLEDSTATE, !enable)
	                   .attr("aria-disabled", !enable)
	                   .attr(DISABLED, !enable);
	            // prevent 'Unspecified error' in IE when inside iframe
	            try {
	                element.blur();
	            } catch (err) {
	            }
	        }
	    });

	    kendo.ui.plugin(Button);

	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(422));


/***/ })

/******/ });

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(429);


/***/ }),

/***/ 421:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(0);

/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 429:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(421) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "calendar",
	    name: "Calendar",
	    category: "web",
	    description: "The Calendar widget renders a graphical calendar that supports navigation and selection.",
	    depends: [ "core" ]
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        support = kendo.support,
	        ui = kendo.ui,
	        Widget = ui.Widget,
	        keys = kendo.keys,
	        parse = kendo.parseDate,
	        adjustDST = kendo.date.adjustDST,
	        getDate = kendo.date.getDate,
	        weekInYear = kendo.date.weekInYear,
	        extractFormat = kendo._extractFormat,
	        template = kendo.template,
	        getCulture = kendo.getCulture,
	        transitions = kendo.support.transitions,
	        transitionOrigin = transitions ? transitions.css + "transform-origin" : "",
	        cellTemplate = template('<td#=data.cssClass# role="gridcell"><a tabindex="-1" class="k-link" href="\\#" data-#=data.ns#value="#=data.dateString#">#=data.value#</a></td>', { useWithBlock: false }),
	        emptyCellTemplate = template('<td role="gridcell">&nbsp;</td>', { useWithBlock: false }),
	        weekNumberTemplate = template('<td class="k-alt">#= data.weekNumber #</td>', { useWithBlock: false }),
	        browser = kendo.support.browser,
	        isIE8 = browser.msie && browser.version < 9,
	        outerHeight = kendo._outerHeight,
	        outerWidth = kendo._outerWidth,
	        ns = ".kendoCalendar",
	        CLICK = "click" + ns,
	        KEYDOWN_NS = "keydown" + ns,
	        ID = "id",
	        MIN = "min",
	        LEFT = "left",
	        SLIDE = "slideIn",
	        MONTH = "month",
	        CENTURY = "century",
	        CHANGE = "change",
	        NAVIGATE = "navigate",
	        VALUE = "value",
	        HOVER = "k-state-hover",
	        DISABLED = "k-state-disabled",
	        FOCUSED = "k-state-focused",
	        OTHERMONTH = "k-other-month",
	        OTHERMONTHCLASS = ' class="' + OTHERMONTH + '"',
	        TODAY = "k-nav-today",
	        CELLSELECTOR = "td:has(.k-link)",
	        BLUR = "blur" + ns,
	        FOCUS = "focus",
	        FOCUS_WITH_NS = FOCUS + ns,
	        MOUSEENTER = support.touch ? "touchstart" : "mouseenter",
	        MOUSEENTER_WITH_NS = support.touch ? "touchstart" + ns : "mouseenter" + ns,
	        MOUSELEAVE = support.touch ? "touchend" + ns + " touchmove" + ns : "mouseleave" + ns,
	        MS_PER_MINUTE = 60000,
	        MS_PER_DAY = 86400000,
	        PREVARROW = "_prevArrow",
	        NEXTARROW = "_nextArrow",
	        ARIA_DISABLED = "aria-disabled",
	        ARIA_SELECTED = "aria-selected",
	        ARIA_LABEL = "aria-label",
	        proxy = $.proxy,
	        extend = $.extend,
	        DATE = Date,
	        views = {
	            month: 0,
	            year: 1,
	            decade: 2,
	            century: 3
	        };

	    var Calendar = Widget.extend({
	        init: function(element, options) {
	            var that = this, value, id;

	            Widget.fn.init.call(that, element, options);

	            element = that.wrapper = that.element;
	            options = that.options;

	            options.url = window.unescape(options.url);

	            that.options.disableDates = getDisabledExpr(that.options.disableDates);

	            that._templates();

	            that._header();

	            that._footer(that.footer);

	            id = element
	                    .addClass("k-widget k-calendar " + (options.weekNumber ? " k-week-number" : ""))
	                    .on(MOUSEENTER_WITH_NS + " " + MOUSELEAVE, CELLSELECTOR, mousetoggle)
	                    .on(KEYDOWN_NS, "table.k-content", proxy(that._move, that))
	                    .on(CLICK, CELLSELECTOR, function(e) {
	                        var link = e.currentTarget.firstChild,
	                            value = that._toDateObject(link);

	                        if (link.href.indexOf("#") != -1) {
	                            e.preventDefault();
	                        }

	                        if (that._view.name == "month" && that.options.disableDates(value)) {
	                            return;
	                        }

	                        that._click($(link));
	                    })
	                    .on("mouseup" + ns, "table.k-content, .k-footer", function() {
	                        that._focusView(that.options.focusOnNav !== false);
	                    })
	                    .attr(ID);

	            if (id) {
	                that._cellID = id + "_cell_selected";
	            }

	            normalize(options);
	            value = parse(options.value, options.format, options.culture);

	            that._index = views[options.start];

	            that._current = new DATE(+restrictValue(value, options.min, options.max));

	            that._addClassProxy = function() {
	                that._active = true;

	                if (that._cell.hasClass(DISABLED)) {
	                    var todayString = that._view.toDateString(getToday());
	                    that._cell = that._cellByDate(todayString);
	                }

	                that._cell.addClass(FOCUSED);
	            };

	            that._removeClassProxy = function() {
	                that._active = false;
	                that._cell.removeClass(FOCUSED);
	            };

	            that.value(value);

	            kendo.notify(that);
	        },

	        options: {
	            name: "Calendar",
	            value: null,
	            min: new DATE(1900, 0, 1),
	            max: new DATE(2099, 11, 31),
	            dates: [],
	            url: "",
	            culture: "",
	            footer : "",
	            format : "",
	            month : {},
	            weekNumber: false,
	            start: MONTH,
	            depth: MONTH,
	            animation: {
	                horizontal: {
	                    effects: SLIDE,
	                    reverse: true,
	                    duration: 500,
	                    divisor: 2
	                },
	                vertical: {
	                    effects: "zoomIn",
	                    duration: 400
	                }
	            },
	            messages: {
	                weekColumnHeader: ""
	            }
	        },

	        events: [
	            CHANGE,
	            NAVIGATE
	        ],

	        setOptions: function(options) {
	            var that = this;

	            normalize(options);

	            options.disableDates = getDisabledExpr(options.disableDates);

	            Widget.fn.setOptions.call(that, options);

	            that._templates();

	            that._footer(that.footer);
	            that._index = views[that.options.start];

	            that.navigate();
	        },

	        destroy: function() {
	            var that = this,
	            today = that._today;

	            that.element.off(ns);
	            that._title.off(ns);
	            that[PREVARROW].off(ns);
	            that[NEXTARROW].off(ns);

	            kendo.destroy(that._table);

	            if (today) {
	                kendo.destroy(today.off(ns));
	            }

	            Widget.fn.destroy.call(that);
	        },

	        current: function() {
	            return this._current;
	        },

	        view: function() {
	            return this._view;
	        },

	        focus: function(table) {
	            table = table || this._table;
	            this._bindTable(table);
	            table.focus();
	        },

	        min: function(value) {
	            return this._option(MIN, value);
	        },

	        max: function(value) {
	            return this._option("max", value);
	        },

	        navigateToPast: function() {
	            this._navigate(PREVARROW, -1);
	        },

	        navigateToFuture: function() {
	            this._navigate(NEXTARROW, 1);
	        },

	        navigateUp: function() {
	            var that = this,
	            index = that._index;

	            if (that._title.hasClass(DISABLED)) {
	                return;
	            }

	            that.navigate(that._current, ++index);
	        },

	        navigateDown: function(value) {
	            var that = this,
	            index = that._index,
	            depth = that.options.depth;

	            if (!value) {
	                return;
	            }

	            if (index === views[depth]) {
	                if (!isEqualDate(that._value, that._current) || !isEqualDate(that._value, value)) {
	                    that.value(value);
	                    that.trigger(CHANGE);
	                }
	                return;
	            }

	            that.navigate(value, --index);
	        },

	        navigate: function(value, view) {
	            view = isNaN(view) ? views[view] : view;

	            var that = this,
	                options = that.options,
	                culture = options.culture,
	                min = options.min,
	                max = options.max,
	                title = that._title,
	                from = that._table,
	                old = that._oldTable,
	                selectedValue = that._value,
	                currentValue = that._current,
	                future = value && +value > +currentValue,
	                vertical = view !== undefined && view !== that._index,
	                to, currentView, compare,
	                disabled;
	            if (!value) {
	                value = currentValue;
	            }

	            that._current = value = new DATE(+restrictValue(value, min, max));

	            if (view === undefined) {
	                view = that._index;
	            } else {
	                that._index = view;
	            }

	            that._view = currentView = calendar.views[view];
	            compare = currentView.compare;

	            disabled = view === views[CENTURY];
	            title.toggleClass(DISABLED, disabled).attr(ARIA_DISABLED, disabled);

	            disabled = compare(value, min) < 1;
	            that[PREVARROW].toggleClass(DISABLED, disabled).attr(ARIA_DISABLED, disabled);

	            disabled = compare(value, max) > -1;
	            that[NEXTARROW].toggleClass(DISABLED, disabled).attr(ARIA_DISABLED, disabled);

	            if (from && old && old.data("animating")) {
	                old.kendoStop(true, true);
	                from.kendoStop(true, true);
	            }

	            that._oldTable = from;

	            if (!from || that._changeView) {
	                title.html(currentView.title(value, min, max, culture));

	                that._table = to = $(currentView.content(extend({
	                    min: min,
	                    max: max,
	                    date: value,
	                    url: options.url,
	                    dates: options.dates,
	                    format: options.format,
	                    culture: culture,
	                    disableDates: options.disableDates,
	                    isWeekColumnVisible: options.weekNumber,
	                    messages: options.messages
	                }, that[currentView.name])));

	                addClassToViewContainer(to, currentView.name);
	                makeUnselectable(to);
	                var replace = from && from.data("start") === to.data("start");
	                that._animate({
	                    from: from,
	                    to: to,
	                    vertical: vertical,
	                    future: future,
	                    replace: replace
	                });

	                that.trigger(NAVIGATE);

	                that._focus(value);
	            }

	            if (view === views[options.depth] && selectedValue && !that.options.disableDates(selectedValue)) {
	                that._class("k-state-selected", selectedValue);
	            }

	            that._class(FOCUSED, value);

	            if (!from && that._cell) {
	                that._cell.removeClass(FOCUSED);
	            }

	            that._changeView = true;
	        },

	        value: function(value) {
	            var that = this,
	                view = that._view,
	                options = that.options,
	                old = that._view,
	                min = options.min,
	                max = options.max;

	            if (value === undefined) {
	                return that._value;
	            }

	            if (value === null) {
	                that._current = new Date(that._current.getFullYear(), that._current.getMonth(), that._current.getDate());
	            }

	            value = parse(value, options.format, options.culture);

	            if (value !== null) {
	                value = new DATE(+value);

	                if (!isInRange(value, min, max)) {
	                    value = null;
	                }
	            }

	            if (value === null || !that.options.disableDates(value)) {
	                that._value = value;
	            } else if (that._value === undefined) {
	                that._value = null;
	            }

	            if (old && value === null && that._cell) {
	                that._cell.removeClass("k-state-selected");
	            } else {
	                that._changeView = !value || view && view.compare(value, that._current) !== 0;
	                that.navigate(value);
	            }
	        },

	        _move: function(e) {
	            var that = this,
	                options = that.options,
	                key = e.keyCode,
	                view = that._view,
	                index = that._index,
	                min = that.options.min,
	                max = that.options.max,
	                currentValue = new DATE(+that._current),
	                isRtl = kendo.support.isRtl(that.wrapper),
	                isDisabled = that.options.disableDates,
	                value, prevent, method, temp;

	            if (e.target === that._table[0]) {
	                that._active = true;
	            }

	            if (e.ctrlKey) {
	                if (key == keys.RIGHT && !isRtl || key == keys.LEFT && isRtl) {
	                    that.navigateToFuture();
	                    prevent = true;
	                } else if (key == keys.LEFT && !isRtl || key == keys.RIGHT && isRtl) {
	                    that.navigateToPast();
	                    prevent = true;
	                } else if (key == keys.UP) {
	                    that.navigateUp();
	                    prevent = true;
	                } else if (key == keys.DOWN) {
	                    that._click($(that._cell[0].firstChild));
	                    prevent = true;
	                }
	            } else {
	                if (key == keys.RIGHT && !isRtl || key == keys.LEFT && isRtl) {
	                    value = 1;
	                    prevent = true;
	                } else if (key == keys.LEFT && !isRtl || key == keys.RIGHT && isRtl) {
	                    value = -1;
	                    prevent = true;
	                } else if (key == keys.UP) {
	                    value = index === 0 ? -7 : -4;
	                    prevent = true;
	                } else if (key == keys.DOWN) {
	                    value = index === 0 ? 7 : 4;
	                    prevent = true;
	                } else if (key == keys.ENTER) {
	                    that._click($(that._cell[0].firstChild));
	                    prevent = true;
	                } else if (key == keys.HOME || key == keys.END) {
	                    method = key == keys.HOME ? "first" : "last";
	                    temp = view[method](currentValue);
	                    currentValue = new DATE(temp.getFullYear(), temp.getMonth(), temp.getDate(), currentValue.getHours(), currentValue.getMinutes(), currentValue.getSeconds(), currentValue.getMilliseconds());
	                    prevent = true;
	                } else if (key == keys.PAGEUP) {
	                    prevent = true;
	                    that.navigateToPast();
	                } else if (key == keys.PAGEDOWN) {
	                    prevent = true;
	                    that.navigateToFuture();
	                }

	                if (value || method) {
	                    if (!method) {
	                        view.setDate(currentValue, value);
	                    }

	                    if (isDisabled(currentValue)) {
	                        currentValue = that._nextNavigatable(currentValue, value);
	                    }

	                    min = getDate(min);
	                    if (isInRange(currentValue, min, max)) {
	                        that._focus(restrictValue(currentValue, options.min, options.max));
	                    }
	                }
	            }

	            if (prevent) {
	                e.preventDefault();
	            }

	            return that._current;
	        },

	        _nextNavigatable: function(currentValue, value) {
	            var that = this,
	            disabled = true,
	            view = that._view,
	            min = that.options.min,
	            max = that.options.max,
	            isDisabled = that.options.disableDates,
	            navigatableDate = new Date(currentValue.getTime());

	            view.setDate(navigatableDate, -value);

	            while (disabled) {
	                view.setDate(currentValue, value);

	                if (!isInRange(currentValue, min, max)) {
	                    currentValue = navigatableDate;
	                    break;
	                }
	                disabled = isDisabled(currentValue);
	            }
	            return currentValue;
	        },

	        _animate: function(options) {
	            var that = this,
	            from = options.from,
	            to = options.to,
	            active = that._active;

	            if (!from) {
	                to.insertAfter(that.element[0].firstChild);
	                that._bindTable(to);
	            } else if (from.parent().data("animating")) {
	                from.off(ns);
	                from.parent().kendoStop(true, true).remove();
	                from.remove();

	                to.insertAfter(that.element[0].firstChild);
	                that._focusView(active);
	            } else if (!from.is(":visible") || that.options.animation === false || options.replace) {
	                to.insertAfter(from);
	                from.off(ns).remove();

	                that._focusView(active);
	            } else {
	                that[options.vertical ? "_vertical" : "_horizontal"](from, to, options.future);
	            }
	        },

	        _horizontal: function(from, to, future) {
	            var that = this,
	                active = that._active,
	                horizontal = that.options.animation.horizontal,
	                effects = horizontal.effects,
	                viewWidth = outerWidth(from);

	            if (effects && effects.indexOf(SLIDE) != -1) {
	                from.add(to).css({ width: viewWidth });

	                from.wrap("<div/>");

	                that._focusView(active, from);

	                from.parent()
	                .css({
	                    position: "relative",
	                    width: viewWidth * 2,
	                    "float": LEFT,
	                    "margin-left": future ? 0 : -viewWidth
	                });

	                to[future ? "insertAfter" : "insertBefore"](from);

	                extend(horizontal, {
	                    effects: SLIDE + ":" + (future ? "right" : LEFT),
	                    complete: function() {
	                        from.off(ns).remove();
	                        that._oldTable = null;

	                        to.unwrap();

	                        that._focusView(active);

	                    }
	                });

	                from.parent().kendoStop(true, true).kendoAnimate(horizontal);
	            }
	        },

	        _vertical: function(from, to) {
	            var that = this,
	                vertical = that.options.animation.vertical,
	                effects = vertical.effects,
	                active = that._active, //active state before from's blur
	                cell, position;

	            if (effects && effects.indexOf("zoom") != -1) {
	                to.css({
	                    position: "absolute",
	                    top: outerHeight(from.prev()),
	                    left: 0
	                }).insertBefore(from);

	                if (transitionOrigin) {
	                    cell = that._cellByDate(that._view.toDateString(that._current));
	                    position = cell.position();
	                    position = (position.left + parseInt(cell.width() / 2, 10)) + "px" + " " + (position.top + parseInt(cell.height() / 2, 10) + "px");
	                    to.css(transitionOrigin, position);
	                }

	                from.kendoStop(true, true).kendoAnimate({
	                    effects: "fadeOut",
	                    duration: 600,
	                    complete: function() {
	                        from.off(ns).remove();
	                        that._oldTable = null;

	                        to.css({
	                            position: "static",
	                            top: 0,
	                            left: 0
	                        });

	                        that._focusView(active);
	                    }
	                });

	                to.kendoStop(true, true).kendoAnimate(vertical);
	            }
	        },

	        _cellByDate: function(value) {
	            return this._table.find("td:not(." + OTHERMONTH + ")")
	            .filter(function() {
	                return $(this.firstChild).attr(kendo.attr(VALUE)) === value;
	            });
	        },

	        _class: function(className, date) {
	            var that = this,
	                id = that._cellID,
	                cell = that._cell,
	                value = that._view.toDateString(date),
	                disabledDate;

	            if (cell) {
	                cell.removeAttr(ARIA_SELECTED)
	                .removeAttr(ARIA_LABEL)
	                .removeAttr(ID);
	            }

	            if (date && that._view.name == "month") {
	                disabledDate = that.options.disableDates(date);
	            }

	            cell = that._table
	            .find("td:not(." + OTHERMONTH + ")")
	            .removeClass(className)
	            .filter(function() {
	                return $(this.firstChild).attr(kendo.attr(VALUE)) === value;
	            })
	            .attr(ARIA_SELECTED, true);

	            if (className === FOCUSED && !that._active && that.options.focusOnNav !== false || disabledDate) {
	                className = "";
	            }

	            cell.addClass(className);

	            if (cell[0]) {
	                that._cell = cell;
	            }

	            if (id) {
	                cell.attr(ID, id);
	                that._table.removeAttr("aria-activedescendant").attr("aria-activedescendant", id);
	            }
	        },

	        _bindTable: function (table) {
	            table
	            .on(FOCUS_WITH_NS, this._addClassProxy)
	            .on(BLUR, this._removeClassProxy);
	        },

	        _click: function(link) {
	            var that = this,
	            options = that.options,
	            currentValue = new Date(+that._current),
	            value = that._toDateObject(link);

	            adjustDST(value, 0);

	            if (that._view.name == "month" && that.options.disableDates(value)) {
	                value = that._value;
	            }

	            that._view.setDate(currentValue, value);

	            that.navigateDown(restrictValue(currentValue, options.min, options.max));
	        },

	        _focus: function(value) {
	            var that = this,
	            view = that._view;

	            if (view.compare(value, that._current) !== 0) {
	                that.navigate(value);
	            } else {
	                that._current = value;
	                that._class(FOCUSED, value);
	            }
	        },

	        _focusView: function(active, table) {
	            if (active) {
	                this.focus(table);
	            }
	        },

	        _footer: function(template) {
	            var that = this,
	            today = getToday(),
	            element = that.element,
	            footer = element.find(".k-footer");

	            if (!template) {
	                that._toggle(false);
	                footer.hide();
	                return;
	            }

	            if (!footer[0]) {
	                footer = $('<div class="k-footer"><a href="#" class="k-link k-nav-today"></a></div>').appendTo(element);
	            }

	            that._today = footer.show()
	            .find(".k-link")
	            .html(template(today))
	            .attr("title", kendo.toString(today, "D", that.options.culture));

	            that._toggle();
	        },

	        _header: function() {
	            var that = this,
	            element = that.element,
	            links;

	            if (!element.find(".k-header")[0]) {
	                element.html('<div class="k-header">' +
	                    '<a href="#" role="button" class="k-link k-nav-prev" ' + ARIA_LABEL + '="Previous"><span class="k-icon k-i-arrow-60-left"></span></a>' +
	                    '<a href="#" role="button" aria-live="assertive" aria-atomic="true" class="k-link k-nav-fast"></a>' +
	                    '<a href="#" role="button" class="k-link k-nav-next" ' + ARIA_LABEL + '="Next"><span class="k-icon k-i-arrow-60-right"></span></a>' +
	                '</div>');
	            }

	            links = element.find(".k-link")
	            .on(MOUSEENTER_WITH_NS + " " + MOUSELEAVE + " " + FOCUS_WITH_NS + " " + BLUR, mousetoggle)
	            .click(false);

	            that._title = links.eq(1).on(CLICK, function() { that._active = that.options.focusOnNav !== false; that.navigateUp(); });
	            that[PREVARROW] = links.eq(0).on(CLICK, function() { that._active = that.options.focusOnNav !== false; that.navigateToPast(); });
	            that[NEXTARROW] = links.eq(2).on(CLICK, function() { that._active = that.options.focusOnNav !== false; that.navigateToFuture(); });
	        },

	        _navigate: function(arrow, modifier) {
	            var that = this,
	            index = that._index + 1,
	            currentValue = new DATE(+that._current);

	            arrow = that[arrow];

	            if (!arrow.hasClass(DISABLED)) {
	                if (index > 3) {
	                    currentValue.setFullYear(currentValue.getFullYear() + 100 * modifier);
	                } else {
	                    calendar.views[index].setDate(currentValue, modifier);
	                }

	                that.navigate(currentValue);
	            }
	        },

	        _option: function(option, value) {
	            var that = this,
	                options = that.options,
	                currentValue = that._value || that._current,
	                isBigger;

	            if (value === undefined) {
	                return options[option];
	            }

	            value = parse(value, options.format, options.culture);

	            if (!value) {
	                return;
	            }

	            options[option] = new DATE(+value);

	            if (option === MIN) {
	                isBigger = value > currentValue;
	            } else {
	                isBigger = currentValue > value;
	            }

	            if (isBigger || isEqualMonth(currentValue, value)) {
	                if (isBigger) {
	                    that._value = null;
	                }
	                that._changeView = true;
	            }

	            if (!that._changeView) {
	                that._changeView = !!(options.month.content || options.month.empty);
	            }

	            that.navigate(that._value);

	            that._toggle();
	        },

	        _toggle: function(toggle) {
	            var that = this,
	                options = that.options,
	                isTodayDisabled = that.options.disableDates(getToday()),
	                link = that._today;

	            if (toggle === undefined) {
	                toggle = isInRange(getToday(), options.min, options.max);
	            }

	            if (link) {
	                link.off(CLICK);

	                if (toggle && !isTodayDisabled) {
	                    link.addClass(TODAY)
	                    .removeClass(DISABLED)
	                    .on(CLICK, proxy(that._todayClick, that));
	                } else {
	                    link.removeClass(TODAY)
	                    .addClass(DISABLED)
	                    .on(CLICK, prevent);
	                }
	            }
	        },

	        _todayClick: function(e) {
	            var that = this,
	            depth = views[that.options.depth],
	            disabled = that.options.disableDates,
	            today = getToday();

	            e.preventDefault();

	            if (disabled(today)) {
	                return;
	            }

	            if (that._view.compare(that._current, today) === 0 && that._index == depth) {
	                that._changeView = false;
	            }

	            that._value = today;
	            that.navigate(today, depth);

	            that.trigger(CHANGE);
	        },

	        _toDateObject: function(link) {
	            var value = $(link).attr(kendo.attr(VALUE)).split("/");
	            //Safari cannot create correctly date from "1/1/2090"
	            value = new DATE(value[0], value[1], value[2]);

	            return value;
	        },

	        _templates: function() {
	            var that = this,
	                options = that.options,
	                footer = options.footer,
	                month = options.month,
	                content = month.content,
	                weekNumber = month.weekNumber,
	                empty = month.empty;

	            that.month = {
	                content: template('<td#=data.cssClass# role="gridcell"><a tabindex="-1" class="k-link#=data.linkClass#" href="#=data.url#" ' + kendo.attr("value") + '="#=data.dateString#" title="#=data.title#">' + (content || "#=data.value#") + '</a></td>', { useWithBlock: !!content }),
	                empty: template('<td role="gridcell">' + (empty || "&nbsp;") + "</td>", { useWithBlock: !!empty }),
	                weekNumber: template('<td class="k-alt">' + (weekNumber || "#= data.weekNumber #") + "</td>", { useWithBlock: !!weekNumber })
	            };

	            that.footer = footer !== false ? template(footer || '#= kendo.toString(data,"D","' + options.culture +'") #', { useWithBlock: false }) : null;
	        }
	    });

	    ui.plugin(Calendar);

	    var calendar = {
	        firstDayOfMonth: function (date) {
	            return new DATE(
	                date.getFullYear(),
	                date.getMonth(),
	                1
	            );
	        },

	        firstVisibleDay: function (date, calendarInfo) {
	            calendarInfo = calendarInfo || kendo.culture().calendar;

	            var firstDay = calendarInfo.firstDay,
	            firstVisibleDay = new DATE(date.getFullYear(), date.getMonth(), 0, date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());

	            while (firstVisibleDay.getDay() != firstDay) {
	                calendar.setTime(firstVisibleDay, -1 * MS_PER_DAY);
	            }

	            return firstVisibleDay;
	        },

	        setTime: function (date, time) {
	            var tzOffsetBefore = date.getTimezoneOffset(),
	            resultDATE = new DATE(date.getTime() + time),
	            tzOffsetDiff = resultDATE.getTimezoneOffset() - tzOffsetBefore;

	            date.setTime(resultDATE.getTime() + tzOffsetDiff * MS_PER_MINUTE);
	        },
	        views: [{
	            name: MONTH,
	            title: function(date, min, max, culture) {
	                return getCalendarInfo(culture).months.names[date.getMonth()] + " " + date.getFullYear();
	            },
	            content: function(options) {
	                var that = this,
	                idx = 0,
	                min = options.min,
	                max = options.max,
	                date = options.date,
	                dates = options.dates,
	                format = options.format,
	                culture = options.culture,
	                navigateUrl = options.url,
	                isWeekColumnVisible = options.isWeekColumnVisible,
	                hasUrl = navigateUrl && dates[0],
	                currentCalendar = getCalendarInfo(culture),
	                firstDayIdx = currentCalendar.firstDay,
	                days = currentCalendar.days,
	                names = shiftArray(days.names, firstDayIdx),
	                shortNames = shiftArray(days.namesShort, firstDayIdx),
	                start = calendar.firstVisibleDay(date, currentCalendar),
	                firstDayOfMonth = that.first(date),
	                lastDayOfMonth = that.last(date),
	                toDateString = that.toDateString,
	                today = new DATE(),
	                html = '<table tabindex="0" role="grid" class="k-content" cellspacing="0" data-start="' + toDateString(start) + '"><thead><tr role="row">';
	                if (isWeekColumnVisible) {
	                    html += '<th scope="col" class="k-alt">' + options.messages.weekColumnHeader + '</th>';
	                }

	                for (; idx < 7; idx++) {
	                    html += '<th scope="col" title="' + names[idx] + '">' + shortNames[idx] + '</th>';
	                }

	                today = new DATE(today.getFullYear(), today.getMonth(), today.getDate());
	                adjustDST(today, 0);
	                today = +today;

	                return view({
	                    cells: 42,
	                    perRow: 7,
	                    html: html += '</tr></thead><tbody><tr role="row">',
	                    start: start,
	                    isWeekColumnVisible: isWeekColumnVisible,
	                    weekNumber: options.weekNumber,
	                    min: new DATE(min.getFullYear(), min.getMonth(), min.getDate()),
	                    max: new DATE(max.getFullYear(), max.getMonth(), max.getDate()),
	                    content: options.content,
	                    empty: options.empty,
	                    setter: that.setDate,
	                    disableDates: options.disableDates,
	                    build: function(date, idx, disableDates) {
	                        var cssClass = [],
	                        day = date.getDay(),
	                        linkClass = "",
	                        url = "#";

	                        if (date < firstDayOfMonth || date > lastDayOfMonth) {
	                            cssClass.push(OTHERMONTH);
	                        }

	                        if (disableDates(date)) {
	                            cssClass.push(DISABLED);
	                        }

	                        if (+date === today) {
	                            cssClass.push("k-today");
	                        }

	                        if (day === 0 || day === 6) {
	                            cssClass.push("k-weekend");
	                        }

	                        if (hasUrl && inArray(+date, dates)) {
	                            url = navigateUrl.replace("{0}", kendo.toString(date, format, culture));
	                            linkClass = " k-action-link";
	                        }

	                        return {
	                            date: date,
	                            dates: dates,
	                            ns: kendo.ns,
	                            title: kendo.toString(date, "D", culture),
	                            value: date.getDate(),
	                            dateString: toDateString(date),
	                            cssClass: cssClass[0] ? ' class="' + cssClass.join(" ") + '"' : "",
	                            linkClass: linkClass,
	                            url: url
	                        };
	                    },
	                    weekNumberBuild: function(date) {
	                        return {
	                            weekNumber: weekInYear(date, kendo.culture().calendar.firstDay),
	                            currentDate: date
	                        };
	                    }
	                });
	            },
	            first: function(date) {
	                return calendar.firstDayOfMonth(date);
	            },
	            last: function(date) {
	                var last = new DATE(date.getFullYear(), date.getMonth() + 1, 0),
	                first = calendar.firstDayOfMonth(date),
	                timeOffset = Math.abs(last.getTimezoneOffset() - first.getTimezoneOffset());

	                if (timeOffset) {
	                    last.setHours(first.getHours() + (timeOffset / 60));
	                }

	                return last;
	            },
	            compare: function(date1, date2) {
	                var result,
	                month1 = date1.getMonth(),
	                year1 = date1.getFullYear(),
	                month2 = date2.getMonth(),
	                year2 = date2.getFullYear();

	                if (year1 > year2) {
	                    result = 1;
	                } else if (year1 < year2) {
	                    result = -1;
	                } else {
	                    result = month1 == month2 ? 0 : month1 > month2 ? 1 : -1;
	                }

	                return result;
	            },
	            setDate: function(date, value) {
	                var hours = date.getHours();
	                if (value instanceof DATE) {
	                    date.setFullYear(value.getFullYear(), value.getMonth(), value.getDate());
	                } else {
	                    calendar.setTime(date, value * MS_PER_DAY);
	                }
	                adjustDST(date, hours);
	            },
	            toDateString: function(date) {
	                return date.getFullYear() + "/" + date.getMonth() + "/" + date.getDate();
	            }
	        },
	        {
	            name: "year",
	            title: function(date) {
	                return date.getFullYear();
	            },
	            content: function(options) {
	                var namesAbbr = getCalendarInfo(options.culture).months.namesAbbr,
	                toDateString = this.toDateString,
	                min = options.min,
	                max = options.max;

	                return view({
	                    min: new DATE(min.getFullYear(), min.getMonth(), 1),
	                    max: new DATE(max.getFullYear(), max.getMonth(), 1),
	                    start: new DATE(options.date.getFullYear(), 0, 1),
	                    setter: this.setDate,
	                    build: function(date) {
	                        return {
	                            value: namesAbbr[date.getMonth()],
	                            ns: kendo.ns,
	                            dateString: toDateString(date),
	                            cssClass: ""
	                        };
	                    }
	                });
	            },
	            first: function(date) {
	                return new DATE(date.getFullYear(), 0, date.getDate());
	            },
	            last: function(date) {
	                return new DATE(date.getFullYear(), 11, date.getDate());
	            },
	            compare: function(date1, date2){
	                return compare(date1, date2);
	            },
	            setDate: function(date, value) {
	                var month,
	                hours = date.getHours();

	                if (value instanceof DATE) {
	                    month = value.getMonth();

	                    date.setFullYear(value.getFullYear(), month, date.getDate());

	                    if (month !== date.getMonth()) {
	                        date.setDate(0);
	                    }
	                } else {
	                    month = date.getMonth() + value;

	                    date.setMonth(month);

	                    if (month > 11) {
	                        month -= 12;
	                    }

	                    if (month > 0 && date.getMonth() != month) {
	                        date.setDate(0);
	                    }
	                }

	                adjustDST(date, hours);
	            },
	            toDateString: function(date) {
	                return date.getFullYear() + "/" + date.getMonth() + "/1";
	            }
	        },
	        {
	            name: "decade",
	            title: function(date, min, max) {
	                return title(date, min, max, 10);
	            },
	            content: function(options) {
	                var year = options.date.getFullYear(),
	                toDateString = this.toDateString;

	                return view({
	                    start: new DATE(year - year % 10 - 1, 0, 1),
	                    min: new DATE(options.min.getFullYear(), 0, 1),
	                    max: new DATE(options.max.getFullYear(), 0, 1),
	                    setter: this.setDate,
	                    build: function(date, idx) {
	                        return {
	                            value: date.getFullYear(),
	                            ns: kendo.ns,
	                            dateString: toDateString(date),
	                            cssClass: idx === 0 || idx == 11 ? OTHERMONTHCLASS : ""
	                        };
	                    }
	                });
	            },
	            first: function(date) {
	                var year = date.getFullYear();
	                return new DATE(year - year % 10, date.getMonth(), date.getDate());
	            },
	            last: function(date) {
	                var year = date.getFullYear();
	                return new DATE(year - year % 10 + 9, date.getMonth(), date.getDate());
	            },
	            compare: function(date1, date2) {
	                return compare(date1, date2, 10);
	            },
	            setDate: function(date, value) {
	                setDate(date, value, 1);
	            },
	            toDateString: function(date) {
	                return date.getFullYear() + "/0/1";
	            }
	        },
	        {
	            name: CENTURY,
	            title: function(date, min, max) {
	                return title(date, min, max, 100);
	            },
	            content: function(options) {
	                var year = options.date.getFullYear(),
	                min = options.min.getFullYear(),
	                max = options.max.getFullYear(),
	                toDateString = this.toDateString,
	                minYear = min,
	                maxYear = max;

	                minYear = minYear - minYear % 10;
	                maxYear = maxYear - maxYear % 10;

	                if (maxYear - minYear < 10) {
	                    maxYear = minYear + 9;
	                }

	                return view({
	                    start: new DATE(year - year % 100 - 10, 0, 1),
	                    min: new DATE(minYear, 0, 1),
	                    max: new DATE(maxYear, 0, 1),
	                    setter: this.setDate,
	                    build: function(date, idx) {
	                        var start = date.getFullYear(),
	                        end = start + 9;

	                        if (start < min) {
	                            start = min;
	                        }

	                        if (end > max) {
	                            end = max;
	                        }

	                        return {
	                            ns: kendo.ns,
	                            value: start + " - " + end,
	                            dateString: toDateString(date),
	                            cssClass: idx === 0 || idx == 11 ? OTHERMONTHCLASS : ""
	                        };
	                    }
	                });
	            },
	            first: function(date) {
	                var year = date.getFullYear();
	                return new DATE(year - year % 100, date.getMonth(), date.getDate());
	            },
	            last: function(date) {
	                var year = date.getFullYear();
	                return new DATE(year - year % 100 + 99, date.getMonth(), date.getDate());
	            },
	            compare: function(date1, date2) {
	                return compare(date1, date2, 100);
	            },
	            setDate: function(date, value) {
	                setDate(date, value, 10);
	            },
	            toDateString: function(date) {
	                var year = date.getFullYear();
	                return (year - year % 10) + "/0/1";
	            }
	        }]
	    };

	    function title(date, min, max, modular) {
	        var start = date.getFullYear(),
	            minYear = min.getFullYear(),
	            maxYear = max.getFullYear(),
	            end;

	        start = start - start % modular;
	        end = start + (modular - 1);

	        if (start < minYear) {
	            start = minYear;
	        }
	        if (end > maxYear) {
	            end = maxYear;
	        }

	        return start + "-" + end;
	    }

	    function view(options) {
	        var idx = 0,
	            data,
	            min = options.min,
	            max = options.max,
	            start = options.start,
	            setter = options.setter,
	            build = options.build,
	            weekNumberBuild = options.weekNumberBuild,
	            length = options.cells || 12,
	            isWeekColumnVisible = options.isWeekColumnVisible,
	            cellsPerRow = options.perRow || 4,
	            weekNumber = options.weekNumber || weekNumberTemplate,
	            content = options.content || cellTemplate,
	            empty = options.empty || emptyCellTemplate,
	            html = options.html || '<table tabindex="0" role="grid" class="k-content k-meta-view" cellspacing="0"><tbody><tr role="row">';
	            if(isWeekColumnVisible) {
	                html += weekNumber(weekNumberBuild(start));
	            }


	        for(; idx < length; idx++) {
	            if (idx > 0 && idx % cellsPerRow === 0) {
	                html += '</tr><tr role="row">';
	                if(isWeekColumnVisible) {
	                    html += weekNumber(weekNumberBuild(start));
	                }
	            }

	            start = new DATE(start.getFullYear(), start.getMonth(), start.getDate(), 0, 0, 0);
	            adjustDST(start, 0);

	            data = build(start, idx, options.disableDates);

	            html += isInRange(start, min, max) ? content(data) : empty(data);

	            setter(start, 1);
	        }

	        return html + "</tr></tbody></table>";
	    }

	    function compare(date1, date2, modifier) {
	        var year1 = date1.getFullYear(),
	            start  = date2.getFullYear(),
	            end = start,
	            result = 0;

	        if (modifier) {
	            start = start - start % modifier;
	            end = start - start % modifier + modifier - 1;
	        }

	        if (year1 > end) {
	            result = 1;
	        } else if (year1 < start) {
	            result = -1;
	        }

	        return result;
	    }

	    function getToday() {
	        var today = new DATE();
	        return new DATE(today.getFullYear(), today.getMonth(), today.getDate());
	    }

	    function restrictValue (value, min, max) {
	        var today = getToday();

	        if (value) {
	            today = new DATE(+value);
	        }

	        if (min > today) {
	            today = new DATE(+min);
	        } else if (max < today) {
	            today = new DATE(+max);
	        }
	        return today;
	    }

	    function isInRange(date, min, max) {
	        return +date >= +min && +date <= +max;
	    }

	    function shiftArray(array, idx) {
	        return array.slice(idx).concat(array.slice(0, idx));
	    }

	    function setDate(date, value, multiplier) {
	        value = value instanceof DATE ? value.getFullYear() : date.getFullYear() + multiplier * value;
	        date.setFullYear(value);
	    }

	    function mousetoggle(e) {
	        var disabled = $(this).hasClass("k-state-disabled");

	        if (!disabled) {
	            $(this).toggleClass(HOVER, MOUSEENTER.indexOf(e.type) > -1 || e.type == FOCUS);
	        }
	    }

	    function prevent (e) {
	        e.preventDefault();
	    }

	    function getCalendarInfo(culture) {
	        return getCulture(culture).calendars.standard;
	    }

	    function normalize(options) {
	        var start = views[options.start],
	            depth = views[options.depth],
	            culture = getCulture(options.culture);

	        options.format = extractFormat(options.format || culture.calendars.standard.patterns.d);

	        if (isNaN(start)) {
	            start = 0;
	            options.start = MONTH;
	        }

	        if (depth === undefined || depth > start) {
	            options.depth = MONTH;
	        }

	        if (options.dates === null) {
	            options.dates = [];
	        }
	    }

	    function makeUnselectable(element) {
	        if (isIE8) {
	            element.find("*").attr("unselectable", "on");
	        }
	    }

	    function addClassToViewContainer(element, currentView) {
	        element.addClass("k-" + currentView);
	    }

	    function inArray(date, dates) {
	        for(var i = 0, length = dates.length; i < length; i++) {
	            if (date === +dates[i]) {
	                return true;
	            }
	        }
	        return false;
	    }

	    function isEqualDatePart(value1, value2) {
	        if (value1) {
	            return value1.getFullYear() === value2.getFullYear() &&
	                value1.getMonth() === value2.getMonth() &&
	                value1.getDate() === value2.getDate();
	        }

	        return false;
	    }

	    function isEqualMonth(value1, value2) {
	        if (value1) {
	            return value1.getFullYear() === value2.getFullYear() &&
	                value1.getMonth() === value2.getMonth();
	        }

	        return false;
	    }


	    function getDisabledExpr(option) {
	        if (kendo.isFunction(option)) {
	            return option;
	        }

	        if ($.isArray(option)) {
	            return createDisabledExpr(option);
	        }
	        return $.noop;
	    }

	    function convertDatesArray(dates) {
	        var result = [];
	        for (var i = 0; i < dates.length; i++) {
	            result.push(dates[i].setHours(0, 0, 0, 0));
	        }
	        return result;
	    }

	    function createDisabledExpr(dates) {
	        var body, callback,
	            disabledDates = [],
	            days = ["su", "mo", "tu", "we", "th", "fr", "sa"],
	            searchExpression = "if (found) {"+
	                    " return true " +
	                "} else {" +
	                    "return false" +
	                "}";

	        if (dates[0] instanceof DATE) {
	            disabledDates = convertDatesArray(dates);
	            body = "var found = date && $.inArray(date.setHours(0, 0, 0, 0),["+ disabledDates +"]) > -1;" + searchExpression;
	        } else {
	            for (var i = 0; i < dates.length; i++) {
	                var day = dates[i].slice(0,2).toLowerCase();
	                var index = $.inArray(day, days);
	                if (index > -1) {
	                    disabledDates.push(index);
	                }
	            }
	            body = "var found = date && $.inArray(date.getDay(),["+ disabledDates +"]) > -1;" + searchExpression;
	        }

	        callback = new Function("date", body); //jshint ignore:line

	        return callback;
	    }

	    function isEqualDate(oldValue, newValue) {
	       if (oldValue instanceof Date && newValue instanceof Date) {
	           oldValue = oldValue.getTime();
	           newValue = newValue.getTime();
	       }

	       return oldValue === newValue;
	    }

	    calendar.isEqualDatePart = isEqualDatePart;
	    calendar.isEqualDate = isEqualDate;
	    calendar.makeUnselectable =  makeUnselectable;
	    calendar.restrictValue = restrictValue;
	    calendar.isInRange = isInRange;
	    calendar.addClassToViewContainer = addClassToViewContainer;
	    calendar.normalize = normalize;
	    calendar.viewsEnum = views;
	    calendar.disabled = getDisabledExpr;

	    kendo.calendar = calendar;
	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(422));


/***/ })

/******/ });

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(442);


/***/ }),

/***/ 421:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(0);

/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 442:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(421) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "data.odata",
	    name: "OData",
	    category: "framework",
	    depends: [ "core" ],
	    hidden: true
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        extend = $.extend,
	        odataFilters = {
	            eq: "eq",
	            neq: "ne",
	            gt: "gt",
	            gte: "ge",
	            lt: "lt",
	            lte: "le",
	            contains : "substringof",
	            doesnotcontain: "substringof",
	            endswith: "endswith",
	            startswith: "startswith",
	            isnull: "eq",
	            isnotnull: "ne",
	            isempty: "eq",
	            isnotempty: "ne"
	        },
	        odataFiltersVersionFour = extend({}, odataFilters, {
	            contains: "contains"
	        }),
	        mappers = {
	            pageSize: $.noop,
	            page: $.noop,
	            filter: function(params, filter, useVersionFour) {
	                if (filter) {
	                    filter = toOdataFilter(filter, useVersionFour);
	                    if (filter) {
	                        params.$filter = filter;
	                    }
	                }
	            },
	            sort: function(params, orderby) {
	                var expr = $.map(orderby, function(value) {
	                    var order = value.field.replace(/\./g, "/");

	                    if (value.dir === "desc") {
	                        order += " desc";
	                    }

	                    return order;
	                }).join(",");

	                if (expr) {
	                    params.$orderby = expr;
	                }
	            },
	            skip: function(params, skip) {
	                if (skip) {
	                    params.$skip = skip;
	                }
	            },
	            take: function(params, take) {
	                if (take) {
	                    params.$top = take;
	                }
	            }
	        },
	        defaultDataType = {
	            read: {
	                dataType: "jsonp"
	            }
	        };

	    function toOdataFilter(filter, useOdataFour) {
	        var result = [],
	            logic = filter.logic || "and",
	            idx,
	            length,
	            field,
	            type,
	            format,
	            operator,
	            value,
	            ignoreCase,
	            filters = filter.filters;

	        for (idx = 0, length = filters.length; idx < length; idx++) {
	            filter = filters[idx];
	            field = filter.field;
	            value = filter.value;
	            operator = filter.operator;

	            if (filter.filters) {
	                filter = toOdataFilter(filter, useOdataFour);
	            } else {
	                ignoreCase = filter.ignoreCase;
	                field = field.replace(/\./g, "/");
	                filter = odataFilters[operator];
	                if (useOdataFour) {
	                    filter = odataFiltersVersionFour[operator];
	                }

	                if (operator === "isnull" || operator === "isnotnull") {
	                    filter = kendo.format("{0} {1} null", field, filter);
	                } else if (operator === "isempty" || operator === "isnotempty") {
	                    filter = kendo.format("{0} {1} ''", field, filter);
	                } else if (filter && value !== undefined) {
	                    type = $.type(value);
	                    if (type === "string") {
	                        format = "'{1}'";
	                        value = value.replace(/'/g, "''");

	                        if (ignoreCase === true) {
	                            field = "tolower(" + field + ")";
	                        }

	                    } else if (type === "date") {
	                        if (useOdataFour) {
	                            format = "{1:yyyy-MM-ddTHH:mm:ss+00:00}";
	                            value = kendo.timezone.apply(value, 'Etc/UTC');
	                        } else {
	                            format = "datetime'{1:yyyy-MM-ddTHH:mm:ss}'";
	                        }
	                    } else {
	                        format = "{1}";
	                    }

	                    if (filter.length > 3) {
	                        if (filter !== "substringof") {
	                            format = "{0}({2}," + format + ")";
	                        } else {
	                            format = "{0}(" + format + ",{2})";
	                            if (operator === "doesnotcontain") {
	                                if (useOdataFour) {
	                                    format = "{0}({2},'{1}') eq -1";
	                                    filter = "indexof";
	                                } else {
	                                    format += " eq false";
	                                }
	                            }
	                        }
	                    } else {
	                        format = "{2} {0} " + format;
	                    }

	                    filter = kendo.format(format, filter, value, field);
	                }
	            }

	            result.push(filter);
	        }

	        filter = result.join(" " + logic + " ");

	        if (result.length > 1) {
	            filter = "(" + filter + ")";
	        }

	        return filter;
	    }

	    function stripMetadata(obj) {
	        for (var name in obj) {
	            if(name.indexOf("@odata") === 0) {
	                delete obj[name];
	            }
	        }
	    }

	    extend(true, kendo.data, {
	        schemas: {
	            odata: {
	                type: "json",
	                data: function(data) {
	                    return data.d.results || [data.d];
	                },
	                total: "d.__count"
	            }
	        },
	        transports: {
	            odata: {
	                read: {
	                    cache: true, // to prevent jQuery from adding cache buster
	                    dataType: "jsonp",
	                    jsonp: "$callback"
	                },
	                update: {
	                    cache: true,
	                    dataType: "json",
	                    contentType: "application/json", // to inform the server the the request body is JSON encoded
	                    type: "PUT" // can be PUT or MERGE
	                },
	                create: {
	                    cache: true,
	                    dataType: "json",
	                    contentType: "application/json",
	                    type: "POST" // must be POST to create new entity
	                },
	                destroy: {
	                    cache: true,
	                    dataType: "json",
	                    type: "DELETE"
	                },
	                parameterMap: function(options, type, useVersionFour) {
	                    var params,
	                        value,
	                        option,
	                        dataType;

	                    options = options || {};
	                    type = type || "read";
	                    dataType = (this.options || defaultDataType)[type];
	                    dataType = dataType ? dataType.dataType : "json";

	                    if (type === "read") {
	                        params = {
	                            $inlinecount: "allpages"
	                        };

	                        if (dataType != "json") {
	                            params.$format = "json";
	                        }

	                        for (option in options) {
	                            if (mappers[option]) {
	                                mappers[option](params, options[option], useVersionFour);
	                            } else {
	                                params[option] = options[option];
	                            }
	                        }
	                    } else {
	                        if (dataType !== "json") {
	                            throw new Error("Only json dataType can be used for " + type + " operation.");
	                        }

	                        if (type !== "destroy") {
	                            for (option in options) {
	                                value = options[option];
	                                if (typeof value === "number") {
	                                    options[option] = value + "";
	                                }
	                            }

	                            params = kendo.stringify(options);
	                        }
	                    }

	                    return params;
	                }
	            }
	        }
	    });

	    extend(true, kendo.data, {
	        schemas: {
	            "odata-v4": {
	                type: "json",
	                data: function(data) {
	                    data = $.extend({}, data);
	                    stripMetadata(data);

	                    if (data.value) {
	                        return data.value;
	                    }
	                    return [data];
	                },
	                total: function(data) {
	                    return data["@odata.count"];
	                }
	            }
	        },
	        transports: {
	            "odata-v4": {
	                read: {
	                    cache: true, // to prevent jQuery from adding cache buster
	                    dataType: "json"
	                },
	                update: {
	                    cache: true,
	                    dataType: "json",
	                    contentType: "application/json;IEEE754Compatible=true", // to inform the server the the request body is JSON encoded
	                    type: "PUT" // can be PUT or MERGE
	                },
	                create: {
	                    cache: true,
	                    dataType: "json",
	                    contentType: "application/json;IEEE754Compatible=true",
	                    type: "POST" // must be POST to create new entity
	                },
	                destroy: {
	                    cache: true,
	                    dataType: "json",
	                    type: "DELETE"
	                },
	                parameterMap: function(options, type) {
	                    var result = kendo.data.transports.odata.parameterMap(options, type, true);
	                    if (type == "read") {
	                        result.$count = true;
	                        delete result.$inlinecount;
	                    }

	                    return result;
	                }
	            }
	        }
	    });

	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(422));


/***/ })

/******/ });

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(444);


/***/ }),

/***/ 421:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(0);

/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 444:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(421) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "data.xml",
	    name: "XML",
	    category: "framework",
	    depends: [ "core" ],
	    hidden: true
	};

	/*jshint  eqnull: true, boss: true */
	(function($, undefined) {
	    var kendo = window.kendo,
	        isArray = $.isArray,
	        isPlainObject = $.isPlainObject,
	        map = $.map,
	        each = $.each,
	        extend = $.extend,
	        getter = kendo.getter,
	        Class = kendo.Class;

	    var XmlDataReader = Class.extend({
	        init: function(options) {
	            var that = this,
	                total = options.total,
	                model = options.model,
	                parse = options.parse,
	                errors = options.errors,
	                serialize = options.serialize,
	                data = options.data;

	            if (model) {
	                if (isPlainObject(model)) {
	                    var base = options.modelBase || kendo.data.Model;

	                    if (model.fields) {
	                        each(model.fields, function(field, value) {
	                            if (isPlainObject(value) && value.field) {
	                                if (!$.isFunction(value.field)) {
	                                    value = extend(value, { field: that.getter(value.field) });
	                                }
	                            } else {
	                                value = { field: that.getter(value) };
	                            }
	                            model.fields[field] = value;
	                        });
	                    }

	                    var id = model.id;
	                    if (id) {
	                        var idField = {};

	                        idField[that.xpathToMember(id, true)] = { field : that.getter(id) };
	                        model.fields = extend(idField, model.fields);
	                        model.id = that.xpathToMember(id);
	                    }
	                    model = base.define(model);
	                }

	                that.model = model;
	            }

	            if (total) {
	                if (typeof total == "string") {
	                    total = that.getter(total);
	                    that.total = function(data) {
	                        return parseInt(total(data), 10);
	                    };
	                } else if (typeof total == "function"){
	                    that.total = total;
	                }
	            }

	            if (errors) {
	                if (typeof errors == "string") {
	                    errors = that.getter(errors);
	                    that.errors = function(data) {
	                        return errors(data) || null;
	                    };
	                } else if (typeof errors == "function"){
	                    that.errors = errors;
	                }
	            }

	            if (data) {
	                if (typeof data == "string") {
	                    data = that.xpathToMember(data);
	                    that.data = function(value) {
	                        var result = that.evaluate(value, data),
	                            modelInstance;

	                        result = isArray(result) ? result : [result];

	                        if (that.model && model.fields) {
	                            modelInstance = new that.model();

	                            return map(result, function(value) {
	                                if (value) {
	                                    var record = {}, field;

	                                    for (field in model.fields) {
	                                        record[field] = modelInstance._parse(field, model.fields[field].field(value));
	                                    }

	                                    return record;
	                                }
	                            });
	                        }

	                        return result;
	                    };
	                } else if (typeof data == "function") {
	                    that.data = data;
	                }
	            }

	            if (typeof parse == "function") {
	                var xmlParse = that.parse;

	                that.parse = function(data) {
	                    var xml = parse.call(that, data);
	                    return xmlParse.call(that, xml);
	                };
	            }

	            if (typeof serialize == "function") {
	                that.serialize = serialize;
	            }
	        },
	        total: function(result) {
	            return this.data(result).length;
	        },
	        errors: function(data) {
	            return data ? data.errors : null;
	        },
	        serialize: function(data) {
	            return data;
	        },
	        parseDOM: function(element) {
	            var result = {},
	                parsedNode,
	                node,
	                nodeType,
	                nodeName,
	                member,
	                attribute,
	                attributes = element.attributes,
	                attributeCount = attributes.length,
	                idx;

	            for (idx = 0; idx < attributeCount; idx++) {
	                attribute = attributes[idx];
	                result["@" + attribute.nodeName] = attribute.nodeValue;
	            }

	            for (node = element.firstChild; node; node = node.nextSibling) {
	                nodeType = node.nodeType;

	                if (nodeType === 3 || nodeType === 4) {
	                    // text nodes or CDATA are stored as #text field
	                    result["#text"] = node.nodeValue;
	                } else if (nodeType === 1) {
	                    // elements are stored as fields
	                    parsedNode = this.parseDOM(node);

	                    nodeName = node.nodeName;

	                    member = result[nodeName];

	                    if (isArray(member)) {
	                        // elements of same nodeName are stored as array
	                        member.push(parsedNode);
	                    } else if (member !== undefined) {
	                        member = [member, parsedNode];
	                    } else {
	                        member = parsedNode;
	                    }

	                    result[nodeName] = member;
	                }
	            }
	            return result;
	        },

	        evaluate: function(value, expression) {
	            var members = expression.split("."),
	                member,
	                result,
	                length,
	                intermediateResult,
	                idx;

	            while (member = members.shift()) {
	                value = value[member];

	                if (isArray(value)) {
	                    result = [];
	                    expression = members.join(".");

	                    for (idx = 0, length = value.length; idx < length; idx++) {
	                        intermediateResult = this.evaluate(value[idx], expression);

	                        intermediateResult = isArray(intermediateResult) ? intermediateResult : [intermediateResult];

	                        result.push.apply(result, intermediateResult);
	                    }

	                    return result;
	                }
	            }

	            return value;
	        },

	        parse: function(xml) {
	            var documentElement,
	                tree,
	                result = {};

	            documentElement = xml.documentElement || $.parseXML(xml).documentElement;

	            tree = this.parseDOM(documentElement);

	            result[documentElement.nodeName] = tree;

	            return result;
	        },

	        xpathToMember: function(member, raw) {
	            if (!member) {
	                return "";
	            }

	            member = member.replace(/^\//, "") // remove the first "/"
	                           .replace(/\//g, "."); // replace all "/" with "."

	            if (member.indexOf("@") >= 0) {
	                // replace @attribute with '["@attribute"]'
	                return member.replace(/\.?(@.*)/, raw? '$1':'["$1"]');
	            }

	            if (member.indexOf("text()") >= 0) {
	                // replace ".text()" with '["#text"]'
	                return member.replace(/(\.?text\(\))/, raw? '#text':'["#text"]');
	            }

	            return member;
	        },
	        getter: function(member) {
	            return getter(this.xpathToMember(member), true);
	        }
	    });

	    $.extend(true, kendo.data, {
	        XmlDataReader: XmlDataReader,
	        readers: {
	            xml: XmlDataReader
	        }
	    });
	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(422));


/***/ })

/******/ });

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(454);


/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 449:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(15);

/***/ }),

/***/ 454:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(449), __webpack_require__(455), __webpack_require__(456), __webpack_require__(457) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "editable",
	    name: "Editable",
	    category: "framework",
	    depends: [ "datepicker", "numerictextbox", "validator", "binder" ],
	    hidden: true
	};

	/* jshint eqnull: true */
	(function($, undefined) {
	    var kendo = window.kendo,
	        ui = kendo.ui,
	        Widget = ui.Widget,
	        extend = $.extend,
	        oldIE = kendo.support.browser.msie && kendo.support.browser.version < 9,
	        isFunction = kendo.isFunction,
	        isPlainObject = $.isPlainObject,
	        inArray = $.inArray,
	        nameSpecialCharRegExp = /("|\%|'|\[|\]|\$|\.|\,|\:|\;|\+|\*|\&|\!|\#|\(|\)|<|>|\=|\?|\@|\^|\{|\}|\~|\/|\||`)/g,
	        ERRORTEMPLATE = '<div class="k-widget k-tooltip k-tooltip-validation" style="margin:0.5em"><span class="k-icon k-i-warning"> </span>' +
	                    '#=message#<div class="k-callout k-callout-n"></div></div>',
	        CHANGE = "change";

	    var specialRules = ["url", "email", "number", "date", "boolean"];

	    function fieldType(field) {
	        field = field != null ? field : "";
	        return field.type || $.type(field) || "string";
	    }

	    function convertToValueBinding(container) {
	        container.find(":input:not(:button, [" + kendo.attr("role") + "=upload], [" + kendo.attr("skip") + "], [type=file]), select").each(function() {
	            var bindAttr = kendo.attr("bind"),
	                binding = this.getAttribute(bindAttr) || "",
	                bindingName = this.type === "checkbox" ||  this.type === "radio" ? "checked:" : "value:",
	                fieldName = this.name;

	            if (binding.indexOf(bindingName) === -1 && fieldName) {
	                binding += (binding.length ? "," : "") + bindingName + fieldName;

	                $(this).attr(bindAttr, binding);
	            }
	        });
	    }

	    function createAttributes(options) {
	        var field = (options.model.fields || options.model)[options.field],
	            type = fieldType(field),
	            validation = field ? field.validation : {},
	            ruleName,
	            DATATYPE = kendo.attr("type"),
	            BINDING = kendo.attr("bind"),
	            rule,
	            attr = {
	                name: options.field,
	                title: options.title
	            };

	        for (ruleName in validation) {
	            rule = validation[ruleName];

	            if (inArray(ruleName, specialRules) >= 0) {
	                attr[DATATYPE] = ruleName;
	            } else if (!isFunction(rule)) {
	                attr[ruleName] = isPlainObject(rule) ? rule.value || ruleName : rule;
	            }

	            attr[kendo.attr(ruleName + "-msg")] = rule.message;
	        }

	        if (inArray(type, specialRules) >= 0) {
	            attr[DATATYPE] = type;
	        }

	        attr[BINDING] = (type === "boolean" ? "checked:" : "value:") + options.field;

	        return attr;
	    }

	    function convertItems(items) {
	        var idx,
	            length,
	            item,
	            value,
	            text,
	            result;

	        if (items && items.length) {
	            result = [];
	            for (idx = 0, length = items.length; idx < length; idx++) {
	                item = items[idx];
	                text = item.text || item.value || item;
	                value = item.value == null ? (item.text || item) : item.value;

	                result[idx] = { text: text, value: value };
	            }
	        }
	        return result;
	    }

	    var editors = {
	        "number": function(container, options) {
	            var attr = createAttributes(options);
	            $('<input type="text"/>').attr(attr).appendTo(container).kendoNumericTextBox({ format: options.format });
	            $('<span ' + kendo.attr("for") + '="' + options.field + '" class="k-invalid-msg"/>').hide().appendTo(container);
	        },
	        "date": function(container, options) {
	            var attr = createAttributes(options),
	                format = options.format;

	            if (format) {
	                format = kendo._extractFormat(format);
	            }

	            attr[kendo.attr("format")] = format;

	            $('<input type="text"/>').attr(attr).appendTo(container).kendoDatePicker({ format: options.format });
	            $('<span ' + kendo.attr("for") + '="' + options.field + '" class="k-invalid-msg"/>').hide().appendTo(container);
	        },
	        "string": function(container, options) {
	            var attr = createAttributes(options);

	            $('<input type="text" class="k-input k-textbox"/>').attr(attr).appendTo(container);
	        },
	        "boolean": function(container, options) {
	            var attr = createAttributes(options);
	            $('<input type="checkbox" />').attr(attr).appendTo(container);
	        },
	        "values": function(container, options) {
	            var attr = createAttributes(options);
	            var items = kendo.stringify(convertItems(options.values));
	            $('<select ' + kendo.attr("text-field") + '="text"' + kendo.attr("value-field") + '="value"' +
	                kendo.attr("source") + "=\'" + (items ? items.replace(/\'/g,"&apos;") : items) +
	                "\'" + kendo.attr("role") + '="dropdownlist"/>') .attr(attr).appendTo(container);
	            $('<span ' + kendo.attr("for") + '="' + options.field + '" class="k-invalid-msg"/>').hide().appendTo(container);
	        }
	    };

	    function addValidationRules(modelField, rules) {
	        var validation = modelField ? (modelField.validation || {}) : {},
	            rule,
	            descriptor;

	        for (rule in validation) {
	            descriptor = validation[rule];

	            if (isPlainObject(descriptor) && descriptor.value) {
	                descriptor = descriptor.value;
	            }

	            if (isFunction(descriptor)) {
	                rules[rule] = descriptor;
	            }
	        }
	    }

	    var Editable = Widget.extend({
	        init: function(element, options) {
	            var that = this;

	            if (options.target) {
	                options.$angular = options.target.options.$angular;
	            }
	            Widget.fn.init.call(that, element, options);
	            that._validateProxy = $.proxy(that._validate, that);
	            that.refresh();
	        },

	        events: [CHANGE],

	        options: {
	            name: "Editable",
	            editors: editors,
	            clearContainer: true,
	            errorTemplate: ERRORTEMPLATE
	        },

	        editor: function(field, modelField) {
	            var that = this,
	                editors = that.options.editors,
	                isObject = isPlainObject(field),
	                fieldName = isObject ? field.field : field,
	                model = that.options.model || {},
	                isValuesEditor = isObject && field.values,
	                type = isValuesEditor ? "values" : fieldType(modelField),
	                isCustomEditor = isObject && field.editor,
	                editor = isCustomEditor ? field.editor : editors[type],
	                container = that.element.find("[" + kendo.attr("container-for") + "=" + fieldName.replace(nameSpecialCharRegExp, "\\$1")+ "]");

	            editor = editor ? editor : editors.string;

	            if (isCustomEditor && typeof field.editor === "string") {
	                editor = function(container) {
	                    container.append(field.editor);
	                };
	            }

	            container = container.length ? container : that.element;
	            editor(container, extend(true, {}, isObject ? field : { field: fieldName }, { model: model }));
	        },

	        _validate: function(e) {
	            var that = this,
	                input,
	                value = e.value,
	                preventChangeTrigger = that._validationEventInProgress,
	                values = {},
	                bindAttribute = kendo.attr("bind"),
	                fieldName = e.field.replace(nameSpecialCharRegExp, "\\$1"),
	                bindingRegex = new RegExp("(value|checked)\\s*:\\s*" + fieldName + "\\s*(,|$)");

	            values[e.field] = e.value;

	            input = $(':input[' + bindAttribute + '*="' + fieldName + '"]', that.element)
	                .filter("[" + kendo.attr("validate") + "!='false']").filter(function() {
	                   return bindingRegex.test($(this).attr(bindAttribute));
	                });
	            if (input.length > 1) {
	                input = input.filter(function () {
	                    var element = $(this);
	                    return !element.is(":radio") || element.val() == value;
	                });
	            }

	            try {
	                that._validationEventInProgress = true;

	                if (!that.validatable.validateInput(input) || (!preventChangeTrigger && that.trigger(CHANGE, { values: values }))) {
	                    e.preventDefault();
	                }

	            } finally {
	                that._validationEventInProgress = false;
	            }
	        },

	        end: function() {
	            return this.validatable.validate();
	        },

	        destroy: function() {
	            var that = this;

	            that.angular("cleanup", function(){
	                return { elements: that.element };
	            });

	            Widget.fn.destroy.call(that);

	            that.options.model.unbind("set", that._validateProxy);

	            kendo.unbind(that.element);

	            if (that.validatable) {
	                that.validatable.destroy();
	            }
	            kendo.destroy(that.element);

	            that.element.removeData("kendoValidator");

	            if (that.element.is("[" + kendo.attr("role") + "=editable]")) {
	                that.element.removeAttr(kendo.attr("role"));
	            }
	        },

	        refresh: function() {
	            var that = this,
	                idx,
	                length,
	                fields = that.options.fields || [],
	                container = that.options.clearContainer ? that.element.empty() : that.element,
	                model = that.options.model || {},
	                rules = {},
	                field,
	                isObject,
	                fieldName,
	                modelField,
	                modelFields;

	            if (!$.isArray(fields)) {
	                fields = [fields];
	            }

	            for (idx = 0, length = fields.length; idx < length; idx++) {
	                 field = fields[idx];
	                 isObject = isPlainObject(field);
	                 fieldName = isObject ? field.field : field;
	                 modelField = (model.fields || model)[fieldName];

	                 addValidationRules(modelField, rules);

	                 that.editor(field, modelField);
	            }

	            if (that.options.target) {
	                that.angular("compile", function(){
	                    return {
	                        elements: container,
	                        data: container.map(function() { return { dataItem: model }; })
	                    };
	                });
	            }

	            if (!length) {
	                modelFields = model.fields || model;
	                for (fieldName in modelFields) {
	                    addValidationRules(modelFields[fieldName], rules);
	               }
	            }

	            convertToValueBinding(container);

	            if (that.validatable) {
	                that.validatable.destroy();
	            }

	            kendo.bind(container, that.options.model);

	            that.options.model.unbind("set", that._validateProxy);
	            that.options.model.bind("set", that._validateProxy);

	            that.validatable = new kendo.ui.Validator(container, {
	                validateOnBlur: false,
	                errorTemplate: that.options.errorTemplate || undefined,
	                rules: rules });

	            var focusable = container.find(":kendoFocusable").eq(0).focus();
	            if (oldIE) {
	                focusable.focus();
	            }
	        }
	   });

	   ui.plugin(Editable);
	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(422));


/***/ }),

/***/ 455:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(31);

/***/ }),

/***/ 456:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(36);

/***/ }),

/***/ 457:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(14);

/***/ })

/******/ });

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(473);


/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 435:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(5);

/***/ }),

/***/ 473:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(435) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "mobile.button",
	    name: "Button",
	    category: "mobile",
	    description: "The Button widget navigates between mobile Application views when pressed.",
	    depends: [ "userevents" ]
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        mobile = kendo.mobile,
	        ui = mobile.ui,
	        Widget = ui.Widget,
	        support = kendo.support,
	        os = support.mobileOS,
	        ANDROID3UP = os.android && os.flatVersion >= 300,
	        CLICK = "click",
	        DISABLED = "disabled",
	        DISABLEDSTATE = "km-state-disabled";

	    function highlightButton(widget, event, highlight) {
	        $(event.target).closest(".km-button,.km-detail").toggleClass("km-state-active", highlight);

	        if (ANDROID3UP && widget.deactivateTimeoutID) {
	            clearTimeout(widget.deactivateTimeoutID);
	            widget.deactivateTimeoutID = 0;
	        }
	    }

	    function createBadge(value) {
	        return $('<span class="km-badge">' + value + '</span>');
	    }

	    var Button = Widget.extend({
	        init: function(element, options) {
	            var that = this;

	            Widget.fn.init.call(that, element, options);
	            var useTap = that.options.clickOn === "up";

	            that._wrap();
	            that._style();

	            if (!useTap) {
	                that.element.attr("data-navigate-on-press", true);
	            }

	            that.options.enable = that.options.enable && !that.element.attr(DISABLED);
	            that.enable(that.options.enable);

	            that._userEvents = new kendo.UserEvents(that.element, {
	                allowSelection: !useTap,
	                fastTap: true,
	                press: function(e) {
	                    that._activate(e);
	                },
	                release: function(e) {
	                    highlightButton(that, e, false);
	                    if (!useTap) { e.event.stopPropagation(); }
	                }
	            });

	            that._userEvents.bind(useTap ? "tap" : "press", function(e) {
	                that._release(e);
	            });


	            if (ANDROID3UP) {
	                that.element.on("move", function(e) { that._timeoutDeactivate(e); });
	            }
	        },

	        destroy: function() {
	            Widget.fn.destroy.call(this);
	            this._userEvents.destroy();
	        },

	        events: [
	            CLICK
	        ],

	        options: {
	            name: "Button",
	            icon: "",
	            style: "",
	            badge: "",
	            clickOn: "up",
	            enable: true
	        },

	        badge: function (value) {
	            var badge = this.badgeElement = this.badgeElement || createBadge(value).appendTo(this.element);

	            if (value || value === 0) {
	                badge.html(value);
	                return this;
	            }

	            if (value === false) {
	                badge.empty().remove();
	                this.badgeElement = false;
	                return this;
	            }

	            return badge.html();
	        },

	        enable: function(enable) {
	            var element = this.element;

	            if(typeof enable == "undefined") {
	                enable = true;
	            }

	            this.options.enable = enable;

	            if(enable) {
	                element.removeAttr(DISABLED);
	            } else {
	                element.attr(DISABLED, DISABLED);
	            }

	            element.toggleClass(DISABLEDSTATE, !enable);
	        },

	        _timeoutDeactivate: function(e) {
	            if (!this.deactivateTimeoutID) {
	                this.deactivateTimeoutID = setTimeout(highlightButton, 500, this, e, false);
	            }
	        },

	        _activate: function(e) {
	            var activeElement = document.activeElement,
	                nodeName = activeElement ? activeElement.nodeName : "";

	            if(this.options.enable) {
	                highlightButton(this, e, true);

	                if (nodeName == "INPUT" || nodeName == "TEXTAREA") {
	                    activeElement.blur(); // Hide device keyboard
	                }
	            }
	        },

	        _release: function(e) {
	            var that = this;

	            if (e.which > 1) {
	                return;
	            }

	            if(!that.options.enable) {
	                e.preventDefault();
	                return;
	            }

	            if (that.trigger(CLICK, {target: $(e.target), button: that.element})) {
	                e.preventDefault();
	            }
	        },

	        _style: function() {
	            var style = this.options.style,
	                element = this.element,
	                styles;

	            if (style) {
	                styles = style.split(" ");
	                $.each(styles, function() {
	                    element.addClass("km-" + this);
	                });
	            }
	        },

	        _wrap: function() {
	            var that = this,
	                icon = that.options.icon,
	                badge = that.options.badge,
	                iconSpan = '<span class="km-icon km-' + icon,
	                element = that.element.addClass("km-button"),
	                span = element.children("span:not(.km-icon)").addClass("km-text"),
	                image = element.find("img").addClass("km-image");

	            if (!span[0] && element.html()) {
	                span = element.wrapInner('<span class="km-text" />').children("span.km-text");
	            }

	            if (!image[0] && icon) {
	                if (!span[0]) {
	                    iconSpan += " km-notext";
	                }
	                that.iconElement = element.prepend($(iconSpan + '" />'));
	            }

	            if (badge || badge === 0) {
	                that.badgeElement = createBadge(badge).appendTo(element);
	            }
	        }
	    });

	    var BackButton = Button.extend({
	        options: {
	            name: "BackButton",
	            style: "back"
	        },

	        init: function(element, options) {
	            var that = this;
	            Button.fn.init.call(that, element, options);

	            if (typeof that.element.attr("href") === "undefined") {
	                that.element.attr("href", "#:back");
	            }
	        }
	    });

	    var DetailButton = Button.extend({
	        options: {
	            name: "DetailButton",
	            style: ""
	        },

	        init: function(element, options) {
	            Button.fn.init.call(this, element, options);
	        },

	        _style: function() {
	            var style = this.options.style + " detail",
	                element = this.element;

	            if (style) {
	                var styles = style.split(" ");
	                $.each(styles, function() {
	                    element.addClass("km-" + this);
	                });
	            }
	        },

	        _wrap: function() {
	            var that = this,
	                icon = that.options.icon,
	                iconSpan = '<span class="km-icon km-' + icon,
	                element = that.element,
	                span = element.children("span"),
	                image = element.find("img").addClass("km-image");

	            if (!image[0] && icon) {
	                if (!span[0]) {
	                    iconSpan += " km-notext";
	                }
	                element.prepend($(iconSpan + '" />'));
	            }
	        }

	    });

	    ui.plugin(Button);
	    ui.plugin(BackButton);
	    ui.plugin(DetailButton);
	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(422));


/***/ })

/******/ });

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(480);


/***/ }),

/***/ 421:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(0);

/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 480:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(421) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "mobile.loader",
	    name: "Loader",
	    category: "mobile",
	    description: "Mobile Loader",
	    depends: [ "core" ],
	    hidden: true
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        ui = kendo.mobile.ui,
	        Widget = ui.Widget,
	        CAPTURE_EVENTS = $.map(kendo.eventMap, function(value) { return value; }).join(" ").split(" ");

	    var Loader = Widget.extend({
	        init: function(container, options) {
	            var that = this,
	                element = $('<div class="km-loader"><span class="km-loading km-spin"></span><span class="km-loading-left"></span><span class="km-loading-right"></span></div>');

	            Widget.fn.init.call(that, element, options);

	            that.container = container;
	            that.captureEvents = false;

	            that._attachCapture();

	            element.append(that.options.loading).hide().appendTo(container);
	        },

	        options: {
	            name: "Loader",
	            loading: "<h1>Loading...</h1>",
	            timeout: 100
	        },

	        show: function() {
	            var that = this;

	            clearTimeout(that._loading);

	            if (that.options.loading === false) {
	                return;
	            }

	            that.captureEvents = true;
	            that._loading = setTimeout(function() {
	                that.element.show();
	            }, that.options.timeout);
	        },

	        hide: function() {
	            this.captureEvents = false;
	            clearTimeout(this._loading);
	            this.element.hide();
	        },

	        changeMessage: function(message) {
	            this.options.loading = message;
	            this.element.find(">h1").html(message);
	        },

	        transition: function() {
	            this.captureEvents = true;
	            this.container.css("pointer-events", "none");
	        },

	        transitionDone: function() {
	            this.captureEvents = false;
	            this.container.css("pointer-events", "");
	        },

	        _attachCapture: function() {
	            var that = this;
	            that.captureEvents = false;

	            function capture(e) {
	                if (that.captureEvents) {
	                    e.preventDefault();
	                }
	            }

	            for (var i = 0; i < CAPTURE_EVENTS.length; i ++) {
	                that.container[0].addEventListener(CAPTURE_EVENTS[i], capture, true);
	            }
	        }
	    });

	    ui.plugin(Loader);
	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(422));


/***/ })

/******/ });

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(485);


/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 433:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(1);

/***/ }),

/***/ 471:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(10);

/***/ }),

/***/ 485:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(433), __webpack_require__(471) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "mobile.popover",
	    name: "PopOver",
	    category: "mobile",
	    description: "The mobile PopOver widget represents a transient view which is displayed when the user taps on a navigational widget or area on the screen. ",
	    depends: [ "popup", "mobile.pane" ]
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        mobile = kendo.mobile,
	        ui = mobile.ui,
	        HIDE = "hide",
	        OPEN = "open",
	        CLOSE = "close",
	        WRAPPER = '<div class="km-popup-wrapper" />',
	        ARROW = '<div class="km-popup-arrow" />',
	        OVERLAY = '<div class="km-popup-overlay" />',
	        DIRECTION_CLASSES = "km-up km-down km-left km-right",
	        Widget = ui.Widget,
	        DIRECTIONS = {
	            "down": {
	                origin: "bottom center",
	                position: "top center"
	            },
	            "up": {
	                origin: "top center",
	                position: "bottom center"
	            },
	            "left": {
	                origin: "center left",
	                position: "center right",
	                collision: "fit flip"
	            },
	            "right": {
	                origin: "center right",
	                position: "center left",
	                collision: "fit flip"
	            }
	        },

	        ANIMATION = {
	            animation: {
	                open: {
	                    effects: "fade:in",
	                    duration: 0
	                },
	                close: {
	                    effects: "fade:out",
	                    duration: 400
	                }
	            }
	        },
	        DIMENSIONS = {
	            "horizontal": { offset: "top", size: "height" },
	            "vertical": { offset: "left", size: "width" }
	        },

	        REVERSE = {
	            "up": "down",
	            "down": "up",
	            "left": "right",
	            "right": "left"
	        };

	    var Popup = Widget.extend({
	        init: function(element, options) {
	            var that = this,
	                containerPopup = element.closest(".km-modalview-wrapper"),
	                viewport = element.closest(".km-root").children('.km-pane').first(),
	                container = containerPopup[0] ? containerPopup : viewport,
	                popupOptions,
	                axis;

	            if (options.viewport) {
	                viewport = options.viewport;
	            } else if (!viewport[0]) {
	                viewport = window;
	            }

	            if (options.container) {
	                container = options.container;
	            } else if (!container[0]) {
	                container = document.body;
	            }

	            popupOptions = {
	                viewport: viewport,
	                copyAnchorStyles: false,
	                autosize: true,
	                open: function() {
	                    that.overlay.show();
	                },

	                activate: $.proxy(that._activate, that),

	                deactivate: function() {
	                    that.overlay.hide();
	                    if (!that._apiCall) {
	                        that.trigger(HIDE);
	                    }

	                    that._apiCall = false;
	                }
	            };

	            Widget.fn.init.call(that, element, options);

	            element = that.element;
	            options = that.options;

	            element.wrap(WRAPPER).addClass("km-popup").show();

	            axis = that.options.direction.match(/left|right/) ? "horizontal" : "vertical";

	            that.dimensions = DIMENSIONS[axis];

	            that.wrapper = element.parent().css({
	                width: options.width,
	                height: options.height
	            }).addClass("km-popup-wrapper km-" + options.direction).hide();

	            that.arrow = $(ARROW).prependTo(that.wrapper).hide();

	            that.overlay = $(OVERLAY).appendTo(container).hide();
	            popupOptions.appendTo = that.overlay;

	            if (options.className) {
	                that.overlay.addClass(options.className);
	            }

	            that.popup = new kendo.ui.Popup(that.wrapper, $.extend(true, popupOptions, ANIMATION, DIRECTIONS[options.direction]));
	        },

	        options: {
	            name: "Popup",
	            width: 240,
	            height: "",
	            direction: "down",
	            container: null,
	            viewport: null
	        },

	        events: [
	            HIDE
	        ],

	        show: function(target) {
	            this.popup.options.anchor = $(target);
	            this.popup.open();
	        },

	        hide: function() {
	            this._apiCall = true;
	            this.popup.close();
	        },

	        destroy: function() {
	            Widget.fn.destroy.call(this);
	            this.popup.destroy();
	            this.overlay.remove();
	        },

	        target: function() {
	            return this.popup.options.anchor;
	        },

	        _activate: function() {
	            var that = this,
	                direction = that.options.direction,
	                dimensions = that.dimensions,
	                offset = dimensions.offset,
	                popup = that.popup,
	                anchor = popup.options.anchor,
	                anchorOffset = $(anchor).offset(),
	                elementOffset = $(popup.element).offset(),
	                cssClass = popup.flipped ? REVERSE[direction] : direction,
	                min = that.arrow[dimensions.size]() * 2,
	                max = that.element[dimensions.size]() - that.arrow[dimensions.size](),
	                size = $(anchor)[dimensions.size](),
	                offsetAmount = anchorOffset[offset] - elementOffset[offset] + (size / 2);

	            if (offsetAmount < min) {
	                offsetAmount = min;
	            }

	            if (offsetAmount > max) {
	                offsetAmount = max;
	            }

	            that.wrapper.removeClass(DIRECTION_CLASSES).addClass("km-" + cssClass);
	            that.arrow.css(offset, offsetAmount).show();
	        }
	    });

	    var PopOver = Widget.extend({
	        init: function(element, options) {
	            var that = this,
	                popupOptions;

	            that.initialOpen = false;

	            Widget.fn.init.call(that, element, options);

	            popupOptions = $.extend({
	                className: "km-popover-root",
	                hide: function() { that.trigger(CLOSE); }
	            }, this.options.popup);

	            that.popup = new Popup(that.element, popupOptions);
	            that.popup.overlay.on("move", function(e) {
	                if (e.target == that.popup.overlay[0]) {
	                    e.preventDefault();
	                }
	            });

	            that.pane = new ui.Pane(that.element, $.extend(this.options.pane, { $angular: this.options.$angular }));

	            kendo.notify(that, ui);
	        },

	        options: {
	            name: "PopOver",
	            popup: { },
	            pane: { }
	        },

	        events: [
	            OPEN,
	            CLOSE
	        ],

	        open: function(target) {
	            this.popup.show(target);

	            if (!this.initialOpen) {
	                if (!this.pane.navigateToInitial()) {
	                    this.pane.navigate("");
	                }

	                this.popup.popup._position();
	                this.initialOpen = true;
	            } else {
	                this.pane.view()._invokeNgController();
	            }
	        },

	        openFor: function(target) {
	            this.open(target);
	            this.trigger(OPEN, { target: this.popup.target() });
	        },

	        close: function() {
	            this.popup.hide();
	        },

	        destroy: function() {
	            Widget.fn.destroy.call(this);
	            this.pane.destroy();
	            this.popup.destroy();

	            kendo.destroy(this.element);
	        }
	    });

	    ui.plugin(Popup);
	    ui.plugin(PopOver);
	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(422));


/***/ })

/******/ });

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(497);


/***/ }),

/***/ 421:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(0);

/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 435:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(5);

/***/ }),

/***/ 497:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(421), __webpack_require__(435) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "numerictextbox",
	    name: "NumericTextBox",
	    category: "web",
	    description: "The NumericTextBox widget can format and display numeric, percentage or currency textbox.",
	    depends: [ "core", "userevents" ]
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        caret = kendo.caret,
	        keys = kendo.keys,
	        ui = kendo.ui,
	        Widget = ui.Widget,
	        activeElement = kendo._activeElement,
	        extractFormat = kendo._extractFormat,
	        parse = kendo.parseFloat,
	        placeholderSupported = kendo.support.placeholder,
	        getCulture = kendo.getCulture,
	        CHANGE = "change",
	        DISABLED = "disabled",
	        READONLY = "readonly",
	        INPUT = "k-input",
	        SPIN = "spin",
	        ns = ".kendoNumericTextBox",
	        TOUCHEND = "touchend",
	        MOUSELEAVE = "mouseleave" + ns,
	        HOVEREVENTS = "mouseenter" + ns + " " + MOUSELEAVE,
	        DEFAULT = "k-state-default",
	        FOCUSED = "k-state-focused",
	        HOVER = "k-state-hover",
	        FOCUS = "focus",
	        POINT = ".",
	        CLASS_ICON = "k-icon",
	        SELECTED = "k-state-selected",
	        STATEDISABLED = "k-state-disabled",
	        STATE_INVALID = "k-state-invalid",
	        ARIA_DISABLED = "aria-disabled",
	        INTEGER_REGEXP = /^(-)?(\d*)$/,
	        NULL = null,
	        proxy = $.proxy,
	        extend = $.extend;

	    var NumericTextBox = Widget.extend({
	         init: function(element, options) {
	             var that = this,
	             isStep = options && options.step !== undefined,
	             min, max, step, value, disabled;

	             Widget.fn.init.call(that, element, options);

	             options = that.options;
	             element = that.element
	                           .on("focusout" + ns, proxy(that._focusout, that))
	                           .attr("role", "spinbutton");

	             options.placeholder = options.placeholder || element.attr("placeholder");

	             that._initialOptions = extend({}, options);

	             min = that.min(element.attr("min"));
	             max = that.max(element.attr("max"));
	             step = that._parse(element.attr("step"));

	             if (options.min === NULL && min !== NULL) {
	                 options.min = min;
	             }

	             if (options.max === NULL && max !== NULL) {
	                 options.max = max;
	             }

	             if (!isStep && step !== NULL) {
	                 options.step = step;
	             }

	             that._reset();
	             that._wrapper();
	             that._arrows();
	             that._validation();
	             that._input();

	             if (!kendo.support.mobileOS) {
	                 that._text.on(FOCUS + ns, proxy(that._click, that));
	             } else {
	                 that._text.on(TOUCHEND + ns + " " + FOCUS + ns, function() {
	                     if (kendo.support.browser.edge) {
	                         that._text.one(FOCUS + ns, function() {
	                             that._toggleText(false);
	                             element.focus();
	                         });
	                     } else {
	                         that._toggleText(false);
	                         element.focus();
	                     }
	                 });
	             }

	             element.attr("aria-valuemin", options.min !== NULL ? options.min*options.factor : options.min)
	                    .attr("aria-valuemax", options.max !== NULL ? options.max*options.factor : options.max);

	             options.format = extractFormat(options.format);

	             value = options.value;
	             that.value(value !== NULL ? value : element.val());

	             disabled = element.is("[disabled]") || $(that.element).parents("fieldset").is(':disabled');

	             if (disabled) {
	                 that.enable(false);
	             } else {
	                 that.readonly(element.is("[readonly]"));
	             }

	             kendo.notify(that);
	         },

	        options: {
	            name: "NumericTextBox",
	            decimals: NULL,
	            restrictDecimals: false,
	            min: NULL,
	            max: NULL,
	            value: NULL,
	            step: 1,
	            round: true,
	            culture: "",
	            format: "n",
	            spinners: true,
	            placeholder: "",
	            factor: 1,
	            upArrowText: "Increase value",
	            downArrowText: "Decrease value"
	        },
	        events: [
	            CHANGE,
	            SPIN
	        ],

	        _editable: function(options) {
	            var that = this,
	                element = that.element,
	                disable = options.disable,
	                readonly = options.readonly,
	                text = that._text.add(element),
	                wrapper = that._inputWrapper.off(HOVEREVENTS);

	            that._toggleText(true);

	            that._upArrowEventHandler.unbind("press");
	            that._downArrowEventHandler.unbind("press");
	            element
	                .off("keydown" + ns)
	                .off("keypress" + ns)
	                .off("keyup" + ns)
	                .off("paste" + ns);

	            if (!readonly && !disable) {
	                wrapper
	                    .addClass(DEFAULT)
	                    .removeClass(STATEDISABLED)
	                    .on(HOVEREVENTS, that._toggleHover);

	                text.removeAttr(DISABLED)
	                    .removeAttr(READONLY)
	                    .attr(ARIA_DISABLED, false);

	                that._upArrowEventHandler.bind("press", function(e) {
	                    e.preventDefault();
	                    that._spin(1);
	                    that._upArrow.addClass(SELECTED);
	                });

	                that._downArrowEventHandler.bind("press", function(e) {
	                    e.preventDefault();
	                    that._spin(-1);
	                    that._downArrow.addClass(SELECTED);
	                });

	                that.element
	                    .on("keydown" + ns, proxy(that._keydown, that))
	                    .on("keypress" + ns, proxy(that._keypress, that))
	                    .on("keyup" + ns, proxy(that._keyup, that))
	                    .on("paste" + ns, proxy(that._paste, that));

	            } else {
	                wrapper
	                    .addClass(disable ? STATEDISABLED : DEFAULT)
	                    .removeClass(disable ? DEFAULT : STATEDISABLED);

	                text.attr(DISABLED, disable)
	                    .attr(READONLY, readonly)
	                    .attr(ARIA_DISABLED, disable);
	            }
	        },

	        readonly: function(readonly) {
	            this._editable({
	                readonly: readonly === undefined ? true : readonly,
	                disable: false
	            });
	        },

	        enable: function(enable) {
	            this._editable({
	                readonly: false,
	                disable: !(enable = enable === undefined ? true : enable)
	            });
	        },

	        destroy: function() {
	            var that = this;

	            that.element
	                .add(that._text)
	                .add(that._upArrow)
	                .add(that._downArrow)
	                .add(that._inputWrapper)
	                .off(ns);

	            that._upArrowEventHandler.destroy();
	            that._downArrowEventHandler.destroy();

	            if (that._form) {
	                that._form.off("reset", that._resetHandler);
	            }

	            Widget.fn.destroy.call(that);
	        },

	        min: function(value) {
	            return this._option("min", value);
	        },

	        max: function(value) {
	            return this._option("max", value);
	        },

	        step: function(value) {
	            return this._option("step", value);
	        },

	        value: function(value) {
	            var that = this, adjusted;

	            if (value === undefined) {
	                return that._value;
	            }

	            value = that._parse(value);
	            adjusted = that._adjust(value);

	            if (value !== adjusted) {
	                return;
	            }

	            that._update(value);
	            that._old = that._value;
	        },

	        focus: function() {
	            this._focusin();
	        },

	        _adjust: function(value) {
	            var that = this,
	            options = that.options,
	            min = options.min,
	            max = options.max;

	            if (value === NULL) {
	                return value;
	            }

	            if (min !== NULL && value < min) {
	                value = min;
	            } else if (max !== NULL && value > max) {
	                value = max;
	            }

	            return value;
	        },

	        _arrows: function() {
	            var that = this,
	            arrows,
	            _release = function() {
	                clearTimeout( that._spinning );
	                arrows.removeClass(SELECTED);
	            },
	            options = that.options,
	            spinners = options.spinners,
	            element = that.element;

	            arrows = element.siblings("." + CLASS_ICON);

	            if (!arrows[0]) {
	                arrows = $(buttonHtml("increase", options.upArrowText) + buttonHtml("decrease", options.downArrowText))
	                        .insertAfter(element);

	                arrows.wrapAll('<span class="k-select"/>');
	            }

	            if (!spinners) {
	                arrows.parent().toggle(spinners);
	                that._inputWrapper.addClass("k-expand-padding");
	            }

	            that._upArrow = arrows.eq(0);
	            that._upArrowEventHandler = new kendo.UserEvents(that._upArrow, { release: _release });
	            that._downArrow = arrows.eq(1);
	            that._downArrowEventHandler = new kendo.UserEvents(that._downArrow, { release: _release });
	        },

	        _validation: function () {
	            var that = this;
	            var element = that.element;

	            that._validationIcon = $("<span class='" + CLASS_ICON + " k-i-warning'></span>")
	                .hide()
	                .insertAfter(element);
	        },

	        _blur: function() {
	            var that = this;
	            
	            that._toggleText(true);
	            
	            that._change(that.element.val());
	        },

	        _click: function(e) {
	            var that = this;

	            clearTimeout(that._focusing);
	            that._focusing = setTimeout(function() {
	                var input = e.target,
	                    idx = caret(input)[0],
	                    value = input.value.substring(0, idx),
	                    format = that._format(that.options.format),
	                    group = format[","],
	                    result, groupRegExp, extractRegExp,
	                    caretPosition = 0;

	                if (group) {
	                    groupRegExp = new RegExp("\\" + group, "g");
	                    extractRegExp = new RegExp("([\\d\\" + group + "]+)(\\" + format[POINT] + ")?(\\d+)?");
	                }

	                if (extractRegExp) {
	                    result = extractRegExp.exec(value);
	                }

	                if (result) {
	                    caretPosition = result[0].replace(groupRegExp, "").length;

	                    if (value.indexOf("(") != -1 && that._value < 0) {
	                        caretPosition++;
	                    }
	                }

	                that._focusin();

	                caret(that.element[0], caretPosition);
	            });
	        },

	        _change: function(value) {
	            var that = this,
	                factor = that.options.factor;

	            if(factor && factor !== 1){
	                value = parseFloat(value);
	                if(value !== null) {
	                    value = value/factor;
	                }
	            }

	            that._update(value);
	            value = that._value;

	            if (that._old != value) {
	                that._old = value;

	                if (!that._typing) {
	                    // trigger the DOM change event so any subscriber gets notified
	                    that.element.trigger(CHANGE);
	                }

	                that.trigger(CHANGE);
	            }

	            that._typing = false;
	        },

	        _culture: function(culture) {
	            return culture || getCulture(this.options.culture);
	        },

	        _focusin: function() {
	            var that = this;
	            that._inputWrapper.addClass(FOCUSED);
	            that._toggleText(false);
	            that.element[0].focus();
	        },

	        _focusout: function() {
	            var that = this;

	            clearTimeout(that._focusing);
	            that._inputWrapper.removeClass(FOCUSED).removeClass(HOVER);
	            that._blur();
	            that._removeInvalidState();
	        },

	        _format: function(format, culture) {
	            var numberFormat = this._culture(culture).numberFormat;

	            format = format.toLowerCase();

	            if (format.indexOf("c") > -1) {
	                numberFormat = numberFormat.currency;
	            } else if (format.indexOf("p") > -1) {
	                numberFormat = numberFormat.percent;
	            }

	            return numberFormat;
	        },

	        _input: function() {
	            var that = this,
	                options = that.options,
	                CLASSNAME = "k-formatted-value",
	                element = that.element.addClass(INPUT).show()[0],
	                accessKey = element.accessKey,
	                wrapper = that.wrapper,
	                text;

	            text = wrapper.find(POINT + CLASSNAME);

	            if (!text[0]) {
	                text = $('<input type="text"/>').insertBefore(element).addClass(CLASSNAME);
	            }

	            try {
	                element.setAttribute("type", "text");
	            } catch(e) {
	                element.type = "text";
	            }

	            that._initialTitle = element.title;
	            text[0].title = element.title;
	            text[0].tabIndex = element.tabIndex;
	            text[0].style.cssText = element.style.cssText;
	            text.prop("placeholder", options.placeholder);

	            if (accessKey) {
	                text.attr("accesskey", accessKey);
	                element.accessKey = "";
	            }


	            that._text = text.addClass(element.className)
	                             .attr({
	                                 "role": "spinbutton",
	                                 "aria-valuemin": options.min !== NULL ? options.min*options.factor : options.min,
	                                 "aria-valuemax": options.max !== NULL ? options.max*options.factor : options.max
	                             });
	        },

	        _keydown: function(e) {
	            var that = this,
	                key = e.keyCode;

	            that._key = key;

	            if (key == keys.DOWN) {
	                that._step(-1);
	            } else if (key == keys.UP) {
	                that._step(1);
	            } else if (key == keys.ENTER) {
	                that._change(that.element.val());
	            } else {
	                that._typing = true;
	            }

	        },

	        _keypress: function(e) {
	            if (e.which === 0 || e.metaKey || e.ctrlKey || e.keyCode === keys.BACKSPACE || e.keyCode === keys.ENTER) {
	                return;
	            }

	            var that = this;
	            var min = that.options.min;
	            var element = that.element;
	            var selection = caret(element);
	            var selectionStart = selection[0];
	            var selectionEnd = selection[1];
	            var character = String.fromCharCode(e.which);
	            var numberFormat = that._format(that.options.format);
	            var isNumPadDecimal = that._key === keys.NUMPAD_DOT;
	            var value = element.val();
	            var isValid;

	            if (isNumPadDecimal) {
	                character = numberFormat[POINT];
	            }

	            value = value.substring(0, selectionStart) + character + value.substring(selectionEnd);
	            isValid = that._numericRegex(numberFormat).test(value);

	            if (isValid && isNumPadDecimal) {
	                element.val(value);
	                caret(element, selectionStart + character.length);

	                e.preventDefault();
	            } else if ((min !== null && min >= 0 && value.charAt(0) === "-") || !isValid) {
	                that._addInvalidState();
	                e.preventDefault();
	            }

	            that._key = 0;
	        },

	        _keyup: function () {
	            this._removeInvalidState();
	        },

	        _addInvalidState: function () {
	            var that = this;
	            that._inputWrapper.addClass(STATE_INVALID);
	            that._validationIcon.show();
	        },

	        _removeInvalidState: function () {
	            var that = this;
	            that._inputWrapper.removeClass(STATE_INVALID);
	            that._validationIcon.hide();
	        },

	        _numericRegex: function(numberFormat) {
	            var that = this;
	            var separator = numberFormat[POINT];
	            var precision = that.options.decimals;
	            var fractionRule = "*";

	            if (separator === POINT) {
	                separator = "\\" + separator;
	            }

	            if (precision === NULL) {
	                precision = numberFormat.decimals;
	            }

	            if (precision === 0) {
	                return INTEGER_REGEXP;
	            }

	            if (that.options.restrictDecimals) {
	                fractionRule = "{0," + precision + "}";
	            }

	            if (that._separator !== separator) {
	                that._separator = separator;
	                that._floatRegExp = new RegExp("^(-)?(((\\d+(" + separator + "\\d" + fractionRule + ")?)|(" + separator + "\\d" + fractionRule + ")))?$");
	            }

	            return that._floatRegExp;
	        },

	        _paste: function(e) {
	            var that = this;
	            var element = e.target;
	            var value = element.value;
	            var numberFormat = that._format(that.options.format);

	            setTimeout(function() {
	                var result = that._parse(element.value);

	                if (result === NULL) {
	                    that._update(value);
	                } else {
	                    element.value = result.toString().replace(POINT, numberFormat[POINT]);
	                    if (that._adjust(result) !== result || !that._numericRegex(numberFormat).test(element.value)) {
	                        that._update(value);
	                    }
	                }
	            });
	        },

	        _option: function(option, value) {
	            var that = this,
	                element = that.element,
	                options = that.options;

	            if (value === undefined) {
	                return options[option];
	            }

	            value = that._parse(value);

	            if (!value && option === "step") {
	                return;
	            }

	            options[option] = value;
	            element
	                .add(that._text)
	                .attr("aria-value" + option, value);

	            element.attr(option, value);
	        },

	        _spin: function(step, timeout) {
	            var that = this;

	            timeout = timeout || 500;

	            clearTimeout( that._spinning );
	            that._spinning = setTimeout(function() {
	                that._spin(step, 50);
	            }, timeout );

	            that._step(step);
	        },

	        _step: function(step) {
	            var that = this,
	                element = that.element,
	                value = that._parse(element.val()) || 0;

	            if (activeElement() != element[0]) {
	                that._focusin();
	            }

	            if(that.options.factor && value) {
	                value = value/that.options.factor;
	            }

	            value += that.options.step * step;

	            that._update(that._adjust(value));
	            that._typing = false;

	            that.trigger(SPIN);
	        },

	        _toggleHover: function(e) {
	            $(e.currentTarget).toggleClass(HOVER, e.type === "mouseenter");
	        },

	        _toggleText: function(toggle) {
	            var that = this;

	            that._text.toggle(toggle);
	            that.element.toggle(!toggle);
	        },

	        _parse: function(value, culture) {
	            return parse(value, this._culture(culture), this.options.format);
	        },

	        _round: function(value, precision) {
	            var rounder = this.options.round ? kendo._round : truncate;

	            return rounder(value, precision);
	        },

	        _update: function(value) {
	            var that = this,
	                options = that.options,
	                factor = options.factor,
	                format = options.format,
	                decimals = options.decimals,
	                culture = that._culture(),
	                numberFormat = that._format(format, culture),
	                isNotNull;

	            if (decimals === NULL) {
	                decimals = numberFormat.decimals;
	            }

	            value = that._parse(value, culture);

	            isNotNull = value !== NULL;

	            if (isNotNull) {
	                value = parseFloat(that._round(value, decimals), 10);
	            }

	            that._value = value = that._adjust(value);
	            that._placeholder(kendo.toString(value, format, culture));

	            if (isNotNull) {
	                if(factor) {
	                    value =  parseFloat(that._round(value*factor, decimals), 10);
	                }
	                value = value.toString();
	                if (value.indexOf("e") !== -1) {
	                    value = that._round(+value, decimals);
	                }
	                value = value.replace(POINT, numberFormat[POINT]);
	            } else {
	                value = null;
	            }

	            that.element.val(value);
	            that.element.add(that._text).attr("aria-valuenow", value);
	        },

	        _placeholder: function(value) {
	            var input = this._text;

	            input.val(value);
	            if (!placeholderSupported && !value) {
	                input.val(this.options.placeholder);
	            }

	            input.attr("title", this._initialTitle || input.val());
	        },

	        _wrapper: function() {
	            var that = this,
	                element = that.element,
	                DOMElement = element[0],
	                wrapper;

	            wrapper = element.parents(".k-numerictextbox");

	            if (!wrapper.is("span.k-numerictextbox")) {
	                wrapper = element.hide().wrap('<span class="k-numeric-wrap k-state-default" />').parent();
	                wrapper = wrapper.wrap("<span/>").parent();
	            }

	            wrapper[0].style.cssText = DOMElement.style.cssText;
	            DOMElement.style.width = "";
	            that.wrapper = wrapper.addClass("k-widget k-numerictextbox")
	                                  .addClass(DOMElement.className)
	                                  .css("display", "");

	            that._inputWrapper = $(wrapper[0].firstChild);
	        },

	        _reset: function() {
	            var that = this,
	                element = that.element,
	                formId = element.attr("form"),
	                form = formId ? $("#" + formId) : element.closest("form");

	            if (form[0]) {
	                that._resetHandler = function() {
	                    setTimeout(function() {
	                        that.value(element[0].value);
	                        that.max(that._initialOptions.max);
	                        that.min(that._initialOptions.min);
	                    });
	                };

	                that._form = form.on("reset", that._resetHandler);
	            }
	        }
	    });

	    function buttonHtml(direction, text) {
	        var className = "k-i-arrow-" + (direction === "increase" ? "60-up" : "60-down");

	        return (
	            '<span unselectable="on" class="k-link k-link-' + direction + '" aria-label="' + text + '" title="' + text + '">' +
	                '<span unselectable="on" class="' + CLASS_ICON + ' ' + className + '"></span>' +
	            '</span>'
	        );
	    }

	    function truncate(value, precision) {
	        var parts = parseFloat(value, 10).toString().split(POINT);

	        if (parts[1]) {
	            parts[1] = parts[1].substring(0, precision);
	        }

	        return parts.join(POINT);

	    }

	    ui.plugin(NumericTextBox);
	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(422));


/***/ })

/******/ });

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(502);


/***/ }),

/***/ 421:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(0);

/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 461:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(6);

/***/ }),

/***/ 502:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(421), __webpack_require__(461) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "resizable",
	    name: "Resizable",
	    category: "framework",
	    depends: [ "core", "draganddrop" ],
	    advanced: true
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        ui = kendo.ui,
	        Widget = ui.Widget,
	        proxy = $.proxy,
	        isFunction = kendo.isFunction,
	        extend = $.extend,
	        HORIZONTAL = "horizontal",
	        VERTICAL = "vertical",
	        START = "start",
	        RESIZE = "resize",
	        RESIZEEND = "resizeend";

	    var Resizable = Widget.extend({
	        init: function(element, options) {
	            var that = this;

	            Widget.fn.init.call(that, element, options);

	            that.orientation = that.options.orientation.toLowerCase() != VERTICAL ? HORIZONTAL : VERTICAL;
	            that._positionMouse = that.orientation == HORIZONTAL ? "x" : "y";
	            that._position = that.orientation == HORIZONTAL ? "left" : "top";
	            that._sizingDom = that.orientation == HORIZONTAL ? "outerWidth" : "outerHeight";

	            that.draggable = new ui.Draggable(options.draggableElement || element, {
	                distance: 1,
	                filter: options.handle,
	                drag: proxy(that._resize, that),
	                dragcancel: proxy(that._cancel, that),
	                dragstart: proxy(that._start, that),
	                dragend: proxy(that._stop, that)
	            });

	            that.userEvents = that.draggable.userEvents;
	        },

	        events: [
	            RESIZE,
	            RESIZEEND,
	            START
	        ],

	        options: {
	            name: "Resizable",
	            orientation: HORIZONTAL
	        },

	        resize: function() {
	            // Overrides base widget resize
	        },

	        _max: function(e) {
	            var that = this,
	                hintSize = that.hint ? that.hint[that._sizingDom]() : 0,
	                size = that.options.max;

	            return isFunction(size) ? size(e) : size !== undefined ? (that._initialElementPosition + size) - hintSize : size;
	        },

	        _min: function(e) {
	            var that = this,
	                size = that.options.min;

	            return isFunction(size) ? size(e) : size !== undefined ? that._initialElementPosition + size : size;
	        },

	        _start: function(e) {
	            var that = this,
	                hint = that.options.hint,
	                el = $(e.currentTarget);

	            that._initialElementPosition = el.position()[that._position];
	            that._initialMousePosition = e[that._positionMouse].startLocation;

	            if (hint) {
	                that.hint = isFunction(hint) ? $(hint(el)) : hint;

	                that.hint.css({
	                    position: "absolute"
	                })
	                .css(that._position, that._initialElementPosition)
	                .appendTo(that.element);
	            }

	            that.trigger(START, e);

	            that._maxPosition = that._max(e);
	            that._minPosition = that._min(e);

	            $(document.body).css("cursor", el.css("cursor"));
	        },

	        _resize: function(e) {
	            var that = this,
	                maxPosition = that._maxPosition,
	                minPosition = that._minPosition,
	                currentPosition = that._initialElementPosition + (e[that._positionMouse].location - that._initialMousePosition),
	                position;

	            position = minPosition !== undefined ? Math.max(minPosition, currentPosition) : currentPosition;
	            that.position = position =  maxPosition !== undefined ? Math.min(maxPosition, position) : position;

	            if(that.hint) {
	                that.hint.toggleClass(that.options.invalidClass || "", position == maxPosition || position == minPosition)
	                         .css(that._position, position);
	            }

	            that.resizing = true;
	            that.trigger(RESIZE, extend(e, { position: position }));
	        },

	        _stop: function(e) {
	            var that = this;

	            if(that.hint) {
	                that.hint.remove();
	            }

	            that.resizing = false;
	            that.trigger(RESIZEEND, extend(e, { position: that.position }));
	            $(document.body).css("cursor", "");
	        },

	        _cancel: function(e) {
	            var that = this;

	            if (that.hint) {
	                that.position = undefined;
	                that.hint.css(that._position, that._initialElementPosition);
	                that._stop(e);
	            }
	        },

	        destroy: function() {
	            var that = this;

	            Widget.fn.destroy.call(that);

	            if (that.draggable) {
	                that.draggable.destroy();
	            }
	        },

	        press: function(target) {
	            if (!target) {
	                return;
	            }

	            var position = target.position(),
	                that = this;

	            that.userEvents.press(position.left, position.top, target[0]);
	            that.targetPosition = position;
	            that.target = target;
	        },

	        move: function(delta) {
	            var that = this,
	                orientation = that._position,
	                position = that.targetPosition,
	                current = that.position;

	            if (current === undefined) {
	                current = position[orientation];
	            }

	            position[orientation] = current + delta;

	            that.userEvents.move(position.left, position.top);
	        },

	        end: function() {
	            this.userEvents.end();
	            this.target = this.position = undefined;
	        }
	    });

	    kendo.ui.plugin(Resizable);

	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(422));


/***/ })

/******/ });

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(504);


/***/ }),

/***/ 421:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(0);

/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 504:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(421) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "router",
	    name: "Router",
	    category: "framework",
	    description: "The Router class is responsible for tracking the application state and navigating between the application states.",
	    depends: [ "core" ],
	    hidden: false
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        CHANGE = "change",
	        BACK = "back",
	        SAME = "same",
	        support = kendo.support,
	        location = window.location,
	        history = window.history,
	        CHECK_URL_INTERVAL = 50,
	        BROKEN_BACK_NAV = kendo.support.browser.msie,
	        hashStrip = /^#*/,
	        document = window.document;

	    function absoluteURL(path, pathPrefix) {
	        if (!pathPrefix) {
	            return path;
	        }

	        if (path + "/" === pathPrefix) {
	            path = pathPrefix;
	        }

	        var regEx = new RegExp("^" + pathPrefix, "i");

	        if (!regEx.test(path)) {
	            path = pathPrefix + "/" + path;
	        }

	        return location.protocol + '//' + (location.host + "/" + path).replace(/\/\/+/g, '/');
	    }

	    function hashDelimiter(bang) {
	        return bang ? "#!" : "#";
	    }

	    function locationHash(hashDelimiter) {
	        var href = location.href;

	        // ignore normal anchors if in hashbang mode - however, still return "" if no hash present
	        if (hashDelimiter === "#!" && href.indexOf("#") > -1 && href.indexOf("#!") < 0) {
	            return null;
	        }

	        return href.split(hashDelimiter)[1] || "";
	    }

	    function stripRoot(root, url) {
	        if (url.indexOf(root) === 0) {
	            return (url.substr(root.length)).replace(/\/\//g, '/');
	        } else {
	            return url;
	        }
	    }

	    var HistoryAdapter = kendo.Class.extend({
	        back: function() {
	            if (BROKEN_BACK_NAV) {
	                setTimeout(function() { history.back(); });
	            } else {
	                history.back();
	            }
	        },

	        forward: function() {
	            if (BROKEN_BACK_NAV) {
	                setTimeout(function() { history.forward(); });
	            } else {
	                history.forward();
	            }
	        },

	        length: function() {
	            return history.length;
	        },

	        replaceLocation: function(url) {
	            location.replace(url);
	        }
	    });

	    var PushStateAdapter = HistoryAdapter.extend({
	        init: function(root) {
	            this.root = root;
	        },

	        navigate: function(to) {
	            history.pushState({}, document.title, absoluteURL(to, this.root));
	        },

	        replace: function(to) {
	            history.replaceState({}, document.title, absoluteURL(to, this.root));
	        },

	        normalize: function(url) {
	            return stripRoot(this.root, url);
	        },

	        current: function() {
	            var current = location.pathname;

	            if (location.search) {
	                current += location.search;
	            }

	            return stripRoot(this.root, current);
	        },

	        change: function(callback) {
	            $(window).bind("popstate.kendo", callback);
	        },

	        stop: function() {
	            $(window).unbind("popstate.kendo");
	        },

	        normalizeCurrent: function(options) {
	            var fixedUrl,
	                root = options.root,
	                pathname = location.pathname,
	                hash = locationHash(hashDelimiter(options.hashBang));

	            if (root === pathname + "/") {
	                fixedUrl = root;
	            }

	            if (root === pathname && hash) {
	                fixedUrl = absoluteURL(hash.replace(hashStrip, ''), root);
	            }

	            if (fixedUrl) {
	                history.pushState({}, document.title, fixedUrl);
	            }
	        }
	    });

	    function fixHash(url) {
	        return url.replace(/^(#)?/, "#");
	    }

	    function fixBang(url) {
	        return url.replace(/^(#(!)?)?/, "#!");
	    }

	    var HashAdapter = HistoryAdapter.extend({
	        init: function(bang) {
	            this._id = kendo.guid();
	            this.prefix = hashDelimiter(bang);
	            this.fix = bang ? fixBang : fixHash;
	        },

	        navigate: function(to) {
	            location.hash = this.fix(to);
	        },

	        replace: function(to) {
	            this.replaceLocation(this.fix(to));
	        },

	        normalize: function(url) {
	            if (url.indexOf(this.prefix) < 0) {
	               return url;
	            } else {
	                return url.split(this.prefix)[1];
	            }
	        },

	        change: function(callback) {
	            if (support.hashChange) {
	                $(window).on("hashchange." + this._id, callback);
	            } else {
	                this._interval = setInterval(callback, CHECK_URL_INTERVAL);
	            }
	        },

	        stop: function() {
	            $(window).off("hashchange." + this._id);
	            clearInterval(this._interval);
	        },

	        current: function() {
	            return locationHash(this.prefix);
	        },

	        normalizeCurrent: function(options) {
	            var pathname = location.pathname,
	                root = options.root;

	            if (options.pushState && root !== pathname) {
	                this.replaceLocation(root + this.prefix + stripRoot(root, pathname));
	                return true; // browser will reload at this point.
	            }

	            return false;
	        }
	    });

	    var History = kendo.Observable.extend({
	        start: function(options) {
	            options = options || {};

	            this.bind([CHANGE, BACK, SAME], options);

	            if (this._started) {
	                return;
	            }

	            this._started = true;

	            options.root = options.root || "/";

	            var adapter = this.createAdapter(options),
	                current;

	            // adapter may reload the document
	            if (adapter.normalizeCurrent(options)) {
	                return;
	            }

	            current = adapter.current();

	            $.extend(this, {
	                adapter: adapter,
	                root: options.root,
	                historyLength: adapter.length(),
	                current: current,
	                locations: [current]
	            });

	            adapter.change($.proxy(this, "_checkUrl"));
	        },

	        createAdapter:function(options) {
	           return support.pushState && options.pushState ? new PushStateAdapter(options.root) : new HashAdapter(options.hashBang);
	        },

	        stop: function() {
	            if (!this._started) {
	                return;
	            }
	            this.adapter.stop();
	            this.unbind(CHANGE);
	            this._started = false;
	        },

	        change: function(callback) {
	            this.bind(CHANGE, callback);
	        },

	        replace: function(to, silent) {

	            this._navigate(to, silent, function(adapter) {
	                adapter.replace(to);
	                this.locations[this.locations.length - 1] = this.current;
	            });
	        },

	        navigate: function(to, silent) {
	            if (to === "#:back") {
	                this.backCalled = true;
	                this.adapter.back();
	                return;
	            }

	            this._navigate(to, silent, function(adapter) {
	                adapter.navigate(to);
	                this.locations.push(this.current);
	            });
	        },

	        _navigate: function(to, silent, callback) {
	            var adapter = this.adapter;

	            to = adapter.normalize(to);

	            if (this.current === to || this.current === decodeURIComponent(to)) {
	                this.trigger(SAME);
	                return;
	            }

	            if (!silent) {
	                if (this.trigger(CHANGE, { url: to, decode: false })) {
	                    return;
	                }
	            }

	            this.current = to;

	            callback.call(this, adapter);

	            this.historyLength = adapter.length();
	        },

	        _checkUrl: function() {
	            var adapter = this.adapter,
	                current = adapter.current(),
	                newLength = adapter.length(),
	                navigatingInExisting = this.historyLength === newLength,
	                back = current === this.locations[this.locations.length - 2] && navigatingInExisting,
	                backCalled = this.backCalled,
	                prev = this.current;

	            if (current === null || this.current === current || this.current === decodeURIComponent(current)) {
	                return true;
	            }

	            this.historyLength = newLength;
	            this.backCalled = false;

	            this.current = current;

	            if (back && this.trigger("back", { url: prev, to: current })) {
	                adapter.forward();
	                this.current = prev;
	                return;
	            }

	            if (this.trigger(CHANGE, { url: current, backButtonPressed: !backCalled })) {
	                if (back) {
	                    adapter.forward();
	                } else {
	                    adapter.back();
	                    this.historyLength --;
	                }
	                this.current = prev;
	                return;
	            }

	            if (back) {
	                this.locations.pop();
	            } else {
	                this.locations.push(current);
	            }
	        }
	    });

	    kendo.History = History;
	    kendo.History.HistoryAdapter = HistoryAdapter;
	    kendo.History.HashAdapter = HashAdapter;
	    kendo.History.PushStateAdapter = PushStateAdapter;
	    kendo.absoluteURL = absoluteURL;
	    kendo.history = new History();
	})(window.kendo.jQuery);

	(function() {
	    var kendo = window.kendo,
	        history = kendo.history,
	        Observable = kendo.Observable,
	        INIT = "init",
	        ROUTE_MISSING = "routeMissing",
	        CHANGE = "change",
	        BACK = "back",
	        SAME = "same",
	        optionalParam = /\((.*?)\)/g,
	        namedParam = /(\(\?)?:\w+/g,
	        splatParam = /\*\w+/g,
	        escapeRegExp = /[\-{}\[\]+?.,\\\^$|#\s]/g;

	    function namedParamReplace(match, optional) {
	        return optional ? match : '([^\/]+)';
	    }

	    function routeToRegExp(route, ignoreCase) {
	        return new RegExp('^' + route
	            .replace(escapeRegExp, '\\$&')
	            .replace(optionalParam, '(?:$1)?')
	            .replace(namedParam, namedParamReplace)
	            .replace(splatParam, '(.*?)') + '$', ignoreCase ? "i" : "");
	    }

	    function stripUrl(url) {
	        return url.replace(/(\?.*)|(#.*)/g, "");
	    }

	    var Route = kendo.Class.extend({
	        init: function(route, callback, ignoreCase) {
	            if (!(route instanceof RegExp)) {
	                route = routeToRegExp(route, ignoreCase);
	            }

	            this.route = route;
	            this._callback = callback;
	        },

	        callback: function(url, back, decode) {
	            var params,
	                idx = 0,
	                length,
	                queryStringParams = kendo.parseQueryStringParams(url);
	                queryStringParams._back = back;

	            url = stripUrl(url);
	            params = this.route.exec(url).slice(1);
	            length = params.length;

	            if (decode) {
	                for (; idx < length; idx ++) {
	                    if (typeof params[idx] !== 'undefined') {
	                        params[idx] = decodeURIComponent(params[idx]);
	                    }
	                }
	            }

	            params.push(queryStringParams);

	            this._callback.apply(null, params);
	        },

	        worksWith: function(url, back, decode) {
	            if (this.route.test(stripUrl(url))) {
	                this.callback(url, back, decode);
	                return true;
	            } else {
	                return false;
	            }
	        }
	    });

	    var Router = Observable.extend({
	        init: function(options) {
	            if (!options) {
	                options = {};
	            }

	            Observable.fn.init.call(this);

	            this.routes = [];
	            this.pushState = options.pushState;
	            this.hashBang = options.hashBang;
	            this.root = options.root;
	            this.ignoreCase = options.ignoreCase !== false;

	            this.bind([INIT, ROUTE_MISSING, CHANGE, SAME], options);
	        },

	        destroy: function() {
	            history.unbind(CHANGE, this._urlChangedProxy);
	            history.unbind(SAME, this._sameProxy);
	            history.unbind(BACK, this._backProxy);
	            this.unbind();
	        },

	        start: function() {
	            var that = this,
	                sameProxy = function() { that._same(); },
	                backProxy = function(e) { that._back(e); },
	                urlChangedProxy = function(e) { that._urlChanged(e); };

	            history.start({
	                same: sameProxy,
	                change: urlChangedProxy,
	                back: backProxy,
	                pushState: that.pushState,
	                hashBang: that.hashBang,
	                root: that.root
	            });

	            var initEventObject = { url: history.current || "/", preventDefault: $.noop };

	            if (!that.trigger(INIT, initEventObject)) {
	                that._urlChanged(initEventObject);
	            }

	            this._urlChangedProxy = urlChangedProxy;
	            this._backProxy = backProxy;
	        },

	        route: function(route, callback) {
	            this.routes.push(new Route(route, callback, this.ignoreCase));
	        },

	        navigate: function(url, silent) {
	            kendo.history.navigate(url, silent);
	        },

	        replace: function(url, silent) {
	            kendo.history.replace(url, silent);
	        },

	        _back: function(e) {
	            if (this.trigger(BACK, { url: e.url, to: e.to })) {
	                e.preventDefault();
	            }
	        },

	        _same: function() {
	            this.trigger(SAME);
	        },

	        _urlChanged: function(e) {
	            var url = e.url;
	            var decode = typeof e.decode === 'undefined';
	            var back = e.backButtonPressed;

	            if (!url) {
	                url = "/";
	            }

	            if (this.trigger(CHANGE, { url: e.url, params: kendo.parseQueryStringParams(e.url), backButtonPressed: back })) {
	                e.preventDefault();
	                return;
	            }

	            var idx = 0,
	                routes = this.routes,
	                route,
	                length = routes.length;

	            for (; idx < length; idx ++) {
	                 route = routes[idx];

	                 if (route.worksWith(url, back, decode)) {
	                    return;
	                 }
	            }

	            if (this.trigger(ROUTE_MISSING, { url: url, params: kendo.parseQueryStringParams(url), backButtonPressed: back })) {
	                e.preventDefault();
	            }
	        }
	    });

	    kendo.Router = Router;
	})();

	return window.kendo;

	}, __webpack_require__(422));


/***/ })

/******/ });

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(506);


/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 461:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(6);

/***/ }),

/***/ 506:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(461) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "slider",
	    name: "Slider",
	    category: "web",
	    description: "The Slider widget provides a rich input for selecting values or ranges of values.",
	    depends: [ "draganddrop" ]
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        Widget = kendo.ui.Widget,
	        Draggable = kendo.ui.Draggable,
	        outerWidth = kendo._outerWidth,
	        outerHeight = kendo._outerHeight,
	        extend = $.extend,
	        format = kendo.format,
	        parse = kendo.parseFloat,
	        proxy = $.proxy,
	        isArray = $.isArray,
	        math = Math,
	        support = kendo.support,
	        pointers = support.pointers,
	        msPointers = support.msPointers,
	        CHANGE = "change",
	        SLIDE = "slide",
	        NS = ".slider",
	        MOUSE_DOWN = "touchstart" + NS + " mousedown" + NS,
	        TRACK_MOUSE_DOWN = pointers ? "pointerdown" + NS : (msPointers ? "MSPointerDown" + NS : MOUSE_DOWN),
	        MOUSE_UP = "touchend" + NS + " mouseup" + NS,
	        TRACK_MOUSE_UP = pointers ? "pointerup" : (msPointers ? "MSPointerUp" + NS : MOUSE_UP),
	        MOVE_SELECTION = "moveSelection",
	        KEY_DOWN = "keydown" + NS,
	        CLICK = "click" + NS,
	        MOUSE_OVER = "mouseover" + NS,
	        FOCUS = "focus" + NS,
	        BLUR = "blur" + NS,
	        DRAG_HANDLE = ".k-draghandle",
	        TRACK_SELECTOR = ".k-slider-track",
	        TICK_SELECTOR = ".k-tick",
	        STATE_SELECTED = "k-state-selected",
	        STATE_FOCUSED = "k-state-focused",
	        STATE_DEFAULT = "k-state-default",
	        STATE_DISABLED = "k-state-disabled",
	        DISABLED = "disabled",
	        UNDEFINED = "undefined",
	        TABINDEX = "tabindex",
	        getTouches = kendo.getTouches;

	    var SliderBase = Widget.extend({
	        init: function(element, options) {
	            var that = this;

	            Widget.fn.init.call(that, element, options);

	            options = that.options;
	            that._isHorizontal = options.orientation == "horizontal";
	            that._isRtl = that._isHorizontal && kendo.support.isRtl(element);
	            that._position = that._isHorizontal ? "left" : "bottom";
	            that._sizeFn = that._isHorizontal ? "width" : "height";
	            that._outerSize = that._isHorizontal ? outerWidth : outerHeight;

	            options.tooltip.format = options.tooltip.enabled ? options.tooltip.format || "{0}" : "{0}";

	            if (options.smallStep <= 0) {
	                throw new Error('Kendo UI Slider smallStep must be a positive number.');
	            }

	            that._createHtml();
	            that.wrapper = that.element.closest(".k-slider");
	            that._trackDiv = that.wrapper.find(TRACK_SELECTOR);

	            that._setTrackDivWidth();

	            that._maxSelection = that._trackDiv[that._sizeFn]();

	            that._sliderItemsInit();

	            that._reset();

	            that._tabindex(that.wrapper.find(DRAG_HANDLE));
	            that[options.enabled ? "enable" : "disable"]();

	            var rtlDirectionSign = kendo.support.isRtl(that.wrapper) ? -1 : 1;

	            that._keyMap = {
	                37: step(-1 * rtlDirectionSign * options.smallStep), // left arrow
	                40: step(-options.smallStep), // down arrow
	                39: step(+1 * rtlDirectionSign * options.smallStep), // right arrow
	                38: step(+options.smallStep), // up arrow
	                35: setValue(options.max), // end
	                36: setValue(options.min), // home
	                33: step(+options.largeStep), // page up
	                34: step(-options.largeStep)  // page down
	            };

	            kendo.notify(that);
	        },

	        events: [
	            CHANGE,
	            SLIDE
	        ],

	        options: {
	            enabled: true,
	            min: 0,
	            max: 10,
	            smallStep: 1,
	            largeStep: 5,
	            orientation: "horizontal",
	            tickPlacement: "both",
	            tooltip: { enabled: true, format: "{0}" }
	        },

	        _distance: function(){
	            return round(this.options.max - this.options.min);
	        },

	        _resize: function() {
	            this._setTrackDivWidth();
	            this.wrapper.find(".k-slider-items").remove();

	            this._maxSelection = this._trackDiv[this._sizeFn]();
	            this._sliderItemsInit();
	            this._refresh();

	            if (this.options.enabled) {
	                this.enable(true);
	            }
	        },

	        _sliderItemsInit: function() {
	            var that = this,
	                options = that.options;

	            var sizeBetweenTicks = that._maxSelection / ((options.max - options.min) / options.smallStep);
	            var pixelWidths = that._calculateItemsWidth(math.floor(that._distance() / options.smallStep));

	            if (options.tickPlacement != "none" && sizeBetweenTicks >= 2) {
	                $(this.element).parent().find(".k-slider-items").remove();
	                that._trackDiv.before(createSliderItems(options, that._distance()));
	                that._setItemsWidth(pixelWidths);
	                that._setItemsTitle();
	            }

	            that._calculateSteps(pixelWidths);

	            if (options.tickPlacement != "none" && sizeBetweenTicks >= 2 &&
	                options.largeStep >= options.smallStep) {
	                that._setItemsLargeTick();
	            }
	        },

	        getSize: function() {
	            return kendo.dimensions(this.wrapper);
	        },

	        _setTrackDivWidth: function() {
	            var that = this,
	                trackDivPosition = parseFloat(that._trackDiv.css(that._isRtl ? "right" : that._position), 10) * 2;

	            that._trackDiv[that._sizeFn]((that.wrapper[that._sizeFn]() - 2) - trackDivPosition);
	        },

	        _setItemsWidth: function(pixelWidths) {
	            var that = this,
	                options = that.options,
	                first = 0,
	                last = pixelWidths.length - 1,
	                items = that.wrapper.find(TICK_SELECTOR),
	                i,
	                paddingTop = 0,
	                bordersWidth = 2,
	                count = items.length,
	                selection = 0;

	            for (i = 0; i < count - 2; i++) {
	                $(items[i + 1])[that._sizeFn](pixelWidths[i]);
	            }

	            if (that._isHorizontal) {
	                $(items[first]).addClass("k-first")[that._sizeFn](pixelWidths[last - 1]);
	                $(items[last]).addClass("k-last")[that._sizeFn](pixelWidths[last]);
	            } else {
	                $(items[last]).addClass("k-first")[that._sizeFn](pixelWidths[last]);
	                $(items[first]).addClass("k-last")[that._sizeFn](pixelWidths[last - 1]);
	            }

	            if (that._distance() % options.smallStep !== 0 && !that._isHorizontal) {
	                for (i = 0; i < pixelWidths.length; i++) {
	                    selection += pixelWidths[i];
	                }

	                paddingTop = that._maxSelection - selection;
	                paddingTop += parseFloat(that._trackDiv.css(that._position), 10) + bordersWidth;

	                that.wrapper.find(".k-slider-items").css("padding-top", paddingTop);
	            }
	        },

	        _setItemsTitle: function() {
	            var that = this,
	                options = that.options,
	                items = that.wrapper.find(TICK_SELECTOR),
	                titleNumber = options.min,
	                count = items.length,
	                i = that._isHorizontal && !that._isRtl ? 0 : count - 1,
	                limit = that._isHorizontal && !that._isRtl ? count : -1,
	                increment = that._isHorizontal && !that._isRtl ? 1 : -1;

	            for (; i - limit !== 0 ; i += increment) {
	                $(items[i]).attr("title", format(options.tooltip.format, round(titleNumber)));
	                titleNumber += options.smallStep;
	            }
	        },

	        _setItemsLargeTick: function() {
	            var that = this,
	                options = that.options,
	                items = that.wrapper.find(TICK_SELECTOR),
	                i = 0, item, value;

	            if (removeFraction(options.largeStep) % removeFraction(options.smallStep) === 0 || that._distance() / options.largeStep >= 3) {
	                if (!that._isHorizontal && !that._isRtl) {
	                    items = $.makeArray(items).reverse();
	                }

	                for (i = 0; i < items.length; i++) {
	                    item = $(items[i]);
	                    value = that._values[i];
	                    var valueWithoutFraction = round(removeFraction(value - this.options.min));
	                    if (valueWithoutFraction % removeFraction(options.smallStep) === 0 && valueWithoutFraction % removeFraction(options.largeStep) === 0) {
	                        item.addClass("k-tick-large")
	                            .html("<span class='k-label'>" + item.attr("title") + "</span>");

	                        if (i !== 0 && i !== items.length - 1) {
	                            item.css("line-height", item[that._sizeFn]() + "px");
	                        }
	                    }
	                }
	            }
	        },

	        _calculateItemsWidth: function(itemsCount) {
	            var that = this,
	                options = that.options,
	                trackDivSize = parseFloat(that._trackDiv.css(that._sizeFn)) + 1,
	                distance = that._distance(),
	                pixelStep = trackDivSize / distance,
	                itemWidth,
	                pixelWidths,
	                i;

	            if ((distance / options.smallStep) - math.floor(distance / options.smallStep) > 0) {
	                trackDivSize -= ((distance % options.smallStep) * pixelStep);
	            }

	            itemWidth = trackDivSize / itemsCount;
	            pixelWidths = [];

	            for (i = 0; i < itemsCount - 1; i++) {
	                pixelWidths[i] = itemWidth;
	            }

	            pixelWidths[itemsCount - 1] = pixelWidths[itemsCount] = itemWidth / 2;
	            return that._roundWidths(pixelWidths);
	        },

	        _roundWidths: function(pixelWidthsArray) {
	            var balance = 0,
	                count = pixelWidthsArray.length,
	                i;

	            for (i = 0; i < count; i++) {
	                balance += (pixelWidthsArray[i] - math.floor(pixelWidthsArray[i]));
	                pixelWidthsArray[i] = math.floor(pixelWidthsArray[i]);
	            }

	            balance = math.round(balance);

	            return this._addAdditionalSize(balance, pixelWidthsArray);
	        },

	        _addAdditionalSize: function(additionalSize, pixelWidthsArray) {
	            if (additionalSize === 0) {
	                return pixelWidthsArray;
	            }

	            //set step size
	            var step = parseFloat(pixelWidthsArray.length - 1) / parseFloat(additionalSize == 1 ? additionalSize : additionalSize - 1),
	                i;

	            for (i = 0; i < additionalSize; i++) {
	                pixelWidthsArray[parseInt(math.round(step * i), 10)] += 1;
	            }

	            return pixelWidthsArray;
	        },

	        _calculateSteps: function(pixelWidths) {
	            var that = this,
	                options = that.options,
	                val = options.min,
	                selection = 0,
	                distance = that._distance(),
	                itemsCount = math.ceil(distance / options.smallStep),
	                i = 1,
	                lastItem;

	            itemsCount += (distance / options.smallStep) % 1 === 0 ? 1 : 0;
	            pixelWidths.splice(0, 0, pixelWidths[itemsCount - 2] * 2);
	            pixelWidths.splice(itemsCount -1, 1, pixelWidths.pop() * 2);

	            that._pixelSteps = [selection];
	            that._values = [val];

	            if (itemsCount === 0) {
	                return;
	            }

	            while (i < itemsCount) {
	                selection += (pixelWidths[i - 1] + pixelWidths[i]) / 2;
	                that._pixelSteps[i] = selection;
	                val += options.smallStep;
	                that._values[i] = round(val);

	                i++;
	            }

	            lastItem = distance % options.smallStep === 0 ? itemsCount - 1 : itemsCount;

	            that._pixelSteps[lastItem] = that._maxSelection;
	            that._values[lastItem] = options.max;

	            if (that._isRtl) {
	                that._pixelSteps.reverse();
	                that._values.reverse();
	            }
	        },

	        _getValueFromPosition: function(mousePosition, dragableArea) {
	            var that = this,
	                options = that.options,
	                step = math.max(options.smallStep * (that._maxSelection / that._distance()), 0),
	                position = 0,
	                halfStep = (step / 2),
	                i;

	            if (that._isHorizontal) {
	                position = mousePosition - dragableArea.startPoint;
	                if (that._isRtl) {
	                    position = that._maxSelection - position;
	                }
	            } else {
	                position = dragableArea.startPoint - mousePosition;
	            }

	            if (that._maxSelection - ((parseInt(that._maxSelection % step, 10) - 3) / 2) < position) {
	                return options.max;
	            }

	            for (i = 0; i < that._pixelSteps.length; i++) {
	                if (math.abs(that._pixelSteps[i] - position) - 1 <= halfStep) {
	                    return round(that._values[i]);
	                }
	            }
	        },

	        _getFormattedValue: function(val, drag) {
	            var that = this,
	                html = "",
	                tooltip = that.options.tooltip,
	                tooltipTemplate,
	                selectionStart,
	                selectionEnd;

	            if (isArray(val)) {
	                selectionStart = val[0];
	                selectionEnd = val[1];
	            } else if (drag && drag.type) {
	                selectionStart = drag.selectionStart;
	                selectionEnd = drag.selectionEnd;
	            }

	            if (drag) {
	                tooltipTemplate = drag.tooltipTemplate;
	            }

	            if (!tooltipTemplate && tooltip.template) {
	                tooltipTemplate = kendo.template(tooltip.template);
	            }

	            if (isArray(val) || (drag && drag.type)) {

	                if (tooltipTemplate) {
	                    html = tooltipTemplate({
	                        selectionStart: selectionStart,
	                        selectionEnd: selectionEnd
	                    });
	                } else {
	                    selectionStart = format(tooltip.format, selectionStart);
	                    selectionEnd = format(tooltip.format, selectionEnd);
	                    html = selectionStart + " - " + selectionEnd;
	                }
	            } else {
	                if (drag) {
	                    drag.val = val;
	                }

	                if (tooltipTemplate) {
	                    html = tooltipTemplate({
	                        value: val
	                    });
	                } else {
	                    html = format(tooltip.format, val);
	                }
	            }
	            return html;
	        },

	        _getDraggableArea: function() {
	            var that = this,
	                offset = kendo.getOffset(that._trackDiv);

	            return {
	                startPoint: that._isHorizontal ? offset.left : offset.top + that._maxSelection,
	                endPoint: that._isHorizontal ? offset.left + that._maxSelection : offset.top
	            };
	        },

	        _createHtml: function() {
	            var that = this,
	                element = that.element,
	                options = that.options,
	                inputs = element.find("input");

	            if (inputs.length == 2) {
	                inputs.eq(0).prop("value", formatValue(options.selectionStart));
	                inputs.eq(1).prop("value", formatValue(options.selectionEnd));
	            } else {
	                element.prop("value", formatValue(options.value));
	            }

	            element.wrap(createWrapper(options, element, that._isHorizontal)).hide();

	            if (options.showButtons) {
	                element.before(createButton(options, "increase", that._isHorizontal, that._isRtl))
	                       .before(createButton(options, "decrease", that._isHorizontal, that._isRtl));
	            }

	            element.before(createTrack(options, element));
	        },

	        _focus: function(e) {
	            var that = this,
	                target = e.target,
	                val = that.value(),
	                drag = that._drag;

	            if (!drag) {
	                if (target == that.wrapper.find(DRAG_HANDLE).eq(0)[0]) {
	                    drag = that._firstHandleDrag;
	                    that._activeHandle = 0;
	                } else {
	                    drag = that._lastHandleDrag;
	                    that._activeHandle = 1;
	                }
	                val = val[that._activeHandle];
	            }

	            $(target).addClass(STATE_FOCUSED + " " + STATE_SELECTED);

	            if (drag) {
	                that._activeHandleDrag = drag;

	                drag.selectionStart = that.options.selectionStart;
	                drag.selectionEnd = that.options.selectionEnd;

	                drag._updateTooltip(val);
	            }
	        },

	        _focusWithMouse: function(target) {
	            target = $(target);

	            var that = this,
	                idx = target.is(DRAG_HANDLE) ? target.index() : 0;

	            window.setTimeout(function(){
	                that.wrapper.find(DRAG_HANDLE)[idx == 2 ? 1 : 0].focus();
	            }, 1);

	            that._setTooltipTimeout();
	        },

	        _blur: function(e) {
	            var that = this,
	                drag = that._activeHandleDrag;

	            $(e.target).removeClass(STATE_FOCUSED + " " + STATE_SELECTED);

	            if (drag) {
	                drag._removeTooltip();
	                delete that._activeHandleDrag;
	                delete that._activeHandle;
	            }
	        },

	        _setTooltipTimeout: function() {
	            var that = this;
	            that._tooltipTimeout = window.setTimeout(function(){
	                var drag = that._drag || that._activeHandleDrag;
	                if (drag) {
	                    drag._removeTooltip();
	                }
	            }, 300);
	        },

	        _clearTooltipTimeout: function() {
	            var that = this;
	            window.clearTimeout(this._tooltipTimeout);
	            var drag = that._drag || that._activeHandleDrag;
	            if (drag && drag.tooltipDiv) {
	                drag.tooltipDiv.stop(true, false).css("opacity", 1);
	            }
	        },

	        _reset: function () {
	            var that = this,
	                element = that.element,
	                formId = element.attr("form"),
	                form = formId ? $("#" + formId) : element.closest("form");

	            if (form[0]) {
	                that._form = form.on("reset", proxy(that._formResetHandler, that));
	            }
	        },

	        min: function(value){
	            if(!value){
	                return this.options.min;
	            }
	            this.setOptions({"min":value});
	        },

	        max: function(value){
	            if(!value){
	                return this.options.max;
	            }
	            this.setOptions({"max":value});
	        },

	        setOptions: function(options) {
	            Widget.fn.setOptions.call(this, options);
	            this._sliderItemsInit();
	            this._refresh();
	        },

	        destroy: function () {
	            if (this._form) {
	                this._form.off("reset", this._formResetHandler);
	            }
	            Widget.fn.destroy.call(this);
	        }
	    });

	    function createWrapper (options, element, isHorizontal) {
	        var orientationCssClass = isHorizontal ? " k-slider-horizontal" : " k-slider-vertical",
	            style = options.style ? options.style : element.attr("style"),
	            cssClasses = element.attr("class") ? (" " + element.attr("class")) : "",
	            tickPlacementCssClass = "";

	        if (options.tickPlacement == "bottomRight") {
	            tickPlacementCssClass = " k-slider-bottomright";
	        } else if (options.tickPlacement == "topLeft") {
	            tickPlacementCssClass = " k-slider-topleft";
	        }

	        style = style ? " style='" + style + "'" : "";

	        return "<div class='k-widget k-slider" + orientationCssClass + cssClasses + "'" + style + ">" +
	               "<div class='k-slider-wrap" + (options.showButtons ? " k-slider-buttons" : "") + tickPlacementCssClass +
	               "'></div></div>";
	    }

	    function createButton (options, type, isHorizontal, isRtl) {
	        var buttonCssClass = "";

	        if(isHorizontal) {
	            if ((!isRtl && type == "increase") || (isRtl && type != "increase")) {
	                buttonCssClass = "k-i-arrow-60-right";
	            } else {
	                buttonCssClass = "k-i-arrow-60-left";
	            }
	        } else {
	            if (type == "increase") {
	                buttonCssClass = "k-i-arrow-60-up";
	            } else {
	                buttonCssClass = "k-i-arrow-60-down";
	            }
	        }

	        return "<a class='k-button k-button-" + type + "' " +
	                "title='" + options[type + "ButtonTitle"] + "' " +
	                "aria-label='" + options[type + "ButtonTitle"] + "'>" +
	                "<span class='k-icon " + buttonCssClass + "'></span></a>";
	    }

	    function createSliderItems (options, distance) {
	        var result = "<ul class='k-reset k-slider-items'>",
	            count = math.floor(round(distance / options.smallStep)) + 1,
	            i;
	       
	        for(i = 0; i < count; i++) {
	            result += "<li class='k-tick' role='presentation'>&nbsp;</li>";
	        }

	        result += "</ul>";

	        return result;
	    }

	    function createTrack (options, element) {
	        var dragHandleCount = element.is("input") ? 1 : 2,
	            firstDragHandleTitle = dragHandleCount == 2 ? options.leftDragHandleTitle : options.dragHandleTitle;

	        return "<div class='k-slider-track'><div class='k-slider-selection'><!-- --></div>" +
	               "<a href='#' class='k-draghandle' title='" + firstDragHandleTitle + "' role='slider' aria-valuemin='" + options.min + "' aria-valuemax='" + options.max + "' aria-valuenow='" + (dragHandleCount > 1 ? (options.selectionStart || options.min) : options.value || options.min) + "'>Drag</a>" +
	               (dragHandleCount > 1 ? "<a href='#' class='k-draghandle' title='" + options.rightDragHandleTitle + "'role='slider' aria-valuemin='" + options.min + "' aria-valuemax='" + options.max + "' aria-valuenow='" + (options.selectionEnd || options.max) + "'>Drag</a>" : "") +
	               "</div>";
	    }

	    function step(stepValue) {
	        return function (value) {
	            return value + stepValue;
	        };
	    }

	    function setValue(value) {
	        return function () {
	            return value;
	        };
	    }

	    function formatValue(value) {
	        return (value + "").replace(".", kendo.cultures.current.numberFormat["."]);
	    }

	    function calculatePrecision(value) {
	        var number = value.toString();
	        var precision = 0;

	        number = number.split(".");

	        if (number[1]) {
	            precision = number[1].length;
	        }

	        precision = precision > 10 ? 10 : precision;
	        return precision;
	    }

	    function round(value) {
	        var precision, power;

	        value = parseFloat(value, 10);
	        precision = calculatePrecision(value);
	        power = math.pow(10, precision || 0);

	        return math.round(value * power) / power;
	    }

	    function parseAttr(element, name) {
	        var value = parse(element.getAttribute(name));
	        if (value === null) {
	            value = undefined;
	        }
	        return value;
	    }

	    function defined(value) {
	        return typeof value !== UNDEFINED;
	    }

	    function removeFraction(value) {
	        return value * 10000;
	    }

	    var Slider = SliderBase.extend({
	        init: function(element, options) {
	            var that = this,
	                dragHandle;

	            element.type = "text";
	            options = extend({}, {
	                value: parseAttr(element, "value"),
	                min: parseAttr(element, "min"),
	                max: parseAttr(element, "max"),
	                smallStep: parseAttr(element, "step")
	            }, options);

	            element = $(element);

	            if (options && options.enabled === undefined) {
	                options.enabled = !element.is("[disabled]");
	            }

	            SliderBase.fn.init.call(that, element, options);
	            options = that.options;
	            if (!defined(options.value) || options.value === null) {
	                options.value = options.min;
	                element.prop("value", formatValue(options.min));
	            }
	            options.value = math.max(math.min(options.value, options.max), options.min);

	            dragHandle = that.wrapper.find(DRAG_HANDLE);

	            this._selection = new Slider.Selection(dragHandle, that, options);
	            that._drag = new Slider.Drag(dragHandle, "", that, options);
	        },

	        options: {
	            name: "Slider",
	            showButtons: true,
	            increaseButtonTitle: "Increase",
	            decreaseButtonTitle: "Decrease",
	            dragHandleTitle: "drag",
	            tooltip: { format: "{0:#,#.##}" },
	            value: null
	        },

	        enable: function (enable) {
	            var that = this,
	                options = that.options,
	                clickHandler,
	                move;

	            that.disable();
	            if (enable === false) {
	                return;
	            }

	            that.wrapper
	                .removeClass(STATE_DISABLED)
	                .addClass(STATE_DEFAULT);

	            that.wrapper.find("input").removeAttr(DISABLED);

	            clickHandler = function (e) {
	                var touch = getTouches(e)[0];

	                if (!touch) {
	                    return;
	                }

	                var mousePosition = that._isHorizontal ? touch.location.pageX : touch.location.pageY,
	                    dragableArea = that._getDraggableArea(),
	                    target = $(e.target);

	                if (target.hasClass("k-draghandle")) {
	                    target.addClass(STATE_FOCUSED + " " + STATE_SELECTED);
	                    return;
	                }

	                that._update(that._getValueFromPosition(mousePosition, dragableArea));

	                that._focusWithMouse(e.target);

	                that._drag.dragstart(e);
	                e.preventDefault();
	            };

	            that.wrapper
	                .find(TICK_SELECTOR + ", " + TRACK_SELECTOR)
	                    .on(TRACK_MOUSE_DOWN, clickHandler)
	                    .end()
	                    .on(TRACK_MOUSE_DOWN, function() {
	                        $(document.documentElement).one("selectstart", kendo.preventDefault);
	                    })
	                    .on(TRACK_MOUSE_UP, function() {
	                        that._drag._end();
	                    });

	            that.wrapper
	                .find(DRAG_HANDLE)
	                .attr(TABINDEX, 0)
	                .on(MOUSE_UP, function () {
	                    that._setTooltipTimeout();
	                })
	                .on(CLICK, function (e) {
	                    that._focusWithMouse(e.target);
	                    e.preventDefault();
	                })
	                .on(FOCUS, proxy(that._focus, that))
	                .on(BLUR, proxy(that._blur, that));

	            move = proxy(function (sign) {
	                var newVal = that._nextValueByIndex(that._valueIndex + (sign * 1));
	                that._setValueInRange(newVal);
	                that._drag._updateTooltip(newVal);
	            }, that);

	            if (options.showButtons) {
	                var mouseDownHandler = proxy(function(e, sign) {
	                    this._clearTooltipTimeout();
	                    if (e.which === 1 || (support.touch && e.which === 0)) {
	                        move(sign);

	                        this.timeout = setTimeout(proxy(function () {
	                            this.timer = setInterval(function () {
	                                move(sign);
	                            }, 60);
	                        }, this), 200);
	                    }
	                }, that);

	                that.wrapper.find(".k-button")
	                    .on(MOUSE_UP, proxy(function (e) {
	                        this._clearTimer();
	                        that._focusWithMouse(e.target);
	                    }, that))
	                    .on(MOUSE_OVER, function (e) {
	                        $(e.currentTarget).addClass("k-state-hover");
	                    })
	                    .on("mouseout" + NS, proxy(function (e) {
	                        $(e.currentTarget).removeClass("k-state-hover");
	                        this._clearTimer();
	                    }, that))
	                    .eq(0)
	                    .on(MOUSE_DOWN, proxy(function (e) {
	                        mouseDownHandler(e, 1);
	                    }, that))
	                    .click(false)
	                    .end()
	                    .eq(1)
	                    .on(MOUSE_DOWN, proxy(function (e) {
	                        mouseDownHandler(e, -1);
	                    }, that))
	                    .click(kendo.preventDefault);
	            }

	            that.wrapper
	                .find(DRAG_HANDLE)
	                .off(KEY_DOWN, false)
	                .on(KEY_DOWN, proxy(this._keydown, that));

	            options.enabled = true;
	        },

	        disable: function () {
	            var that = this;

	            that.wrapper
	                .removeClass(STATE_DEFAULT)
	                .addClass(STATE_DISABLED);

	            $(that.element).prop(DISABLED, DISABLED);

	            that.wrapper
	                .find(".k-button")
	                .off(MOUSE_DOWN)
	                .on(MOUSE_DOWN, function(e) {
	                    e.preventDefault();
	                    $(this).addClass("k-state-active");
	                })
	                .off(MOUSE_UP)
	                .on(MOUSE_UP, function(e) {
	                    e.preventDefault();
	                    $(this).removeClass("k-state-active");
	                })
	                .off("mouseleave" + NS)
	                .on("mouseleave" + NS, kendo.preventDefault)
	                .off(MOUSE_OVER)
	                .on(MOUSE_OVER, kendo.preventDefault);

	            that.wrapper
	                .find(TICK_SELECTOR + ", " + TRACK_SELECTOR).off(TRACK_MOUSE_DOWN).off(TRACK_MOUSE_UP);

	            that.wrapper
	                .find(DRAG_HANDLE)
	                .attr(TABINDEX, -1)
	                .off(MOUSE_UP)
	                .off(KEY_DOWN)
	                .off(CLICK)
	                .off(FOCUS)
	                .off(BLUR);

	            that.options.enabled = false;
	        },

	        _update: function (val) {
	            var that = this,
	                change = that.value() != val;

	            that.value(val);

	            if (change) {
	                that.trigger(CHANGE, { value: that.options.value });
	            }
	        },

	        value: function (value) {
	            var that = this,
	                options = that.options;

	            value = round(value);
	            if (isNaN(value)) {
	                return options.value;
	            }

	            if (value >= options.min && value <= options.max) {
	                if (options.value != value) {
	                    that.element.prop("value", formatValue(value));
	                    options.value = value;
	                    that._refreshAriaAttr(value);
	                    that._refresh();
	                }
	            }
	        },

	        _refresh: function () {
	            this.trigger(MOVE_SELECTION, { value: this.options.value });
	        },

	        _refreshAriaAttr: function(value) {
	            var that = this,
	                drag = that._drag,
	                formattedValue;

	            if (drag && drag._tooltipDiv) {
	                formattedValue = drag._tooltipDiv.text();
	            } else {
	                formattedValue = that._getFormattedValue(value, null);
	            }
	            this.wrapper.find(DRAG_HANDLE).attr("aria-valuenow", value).attr("aria-valuetext", formattedValue);
	        },

	        _clearTimer: function () {
	            clearTimeout(this.timeout);
	            clearInterval(this.timer);
	        },

	        _keydown: function (e) {
	            var that = this;

	            if (e.keyCode in that._keyMap) {
	                that._clearTooltipTimeout();
	                that._setValueInRange(that._keyMap[e.keyCode](that.options.value));
	                that._drag._updateTooltip(that.value());
	                e.preventDefault();
	            }
	        },

	        _setValueInRange: function (val) {
	            var that = this,
	                options = that.options;

	            val = round(val);
	            if (isNaN(val)) {
	                that._update(options.min);
	                return;
	            }

	            val = math.max(math.min(val, options.max), options.min);
	            that._update(val);
	        },

	        _nextValueByIndex: function (index) {
	            var count = this._values.length;
	            if (this._isRtl) {
	                index = count - 1 - index;
	            }
	            return this._values[math.max(0, math.min(index, count - 1))];
	        },

	        _formResetHandler: function () {
	            var that = this,
	                min = that.options.min;

	            setTimeout(function () {
	                var value = that.element[0].value;
	                that.value(value === "" || isNaN(value) ? min : value);
	            });
	        },

	        destroy: function() {
	            var that = this;

	            SliderBase.fn.destroy.call(that);

	            that.wrapper.off(NS)
	                .find(".k-button").off(NS)
	                .end()
	                .find(DRAG_HANDLE).off(NS)
	                .end()
	                .find(TICK_SELECTOR + ", " + TRACK_SELECTOR).off(NS)
	                .end();

	            that._drag.draggable.destroy();
	            that._drag._removeTooltip(true);
	        }
	    });

	    Slider.Selection = function (dragHandle, that, options) {
	        function moveSelection (val) {
	            var selectionValue = val - options.min,
	                index = that._valueIndex = math.ceil(round(selectionValue / options.smallStep)),
	                selection = parseInt(that._pixelSteps[index], 10),
	                selectionDiv = that._trackDiv.find(".k-slider-selection"),

	                halfDragHanndle = parseInt(that._outerSize(dragHandle) / 2, 10),
	                rtlCorrection = that._isRtl ? 2 : 0;

	            selectionDiv[that._sizeFn](that._isRtl ? that._maxSelection - selection : selection);
	            dragHandle.css(that._position, selection - halfDragHanndle - rtlCorrection);
	        }

	        moveSelection(options.value);

	        that.bind([SLIDE, MOVE_SELECTION], function (e) {
	            moveSelection(parseFloat(e.value, 10));
	        });

	        that.bind(CHANGE, function (e) {
	            moveSelection(parseFloat(e.sender.value(), 10));
	        });
	    };

	    Slider.Drag = function (element, type, owner, options) {
	        var that = this;
	        that.owner = owner;
	        that.options = options;
	        that.element = element;
	        that.type = type;

	        that.draggable = new Draggable(element, {
	            distance: 0,
	            dragstart: proxy(that._dragstart, that),
	            drag: proxy(that.drag, that),
	            dragend: proxy(that.dragend, that),
	            dragcancel: proxy(that.dragcancel, that)
	        });

	        element.click(false);
	    };

	    Slider.Drag.prototype = {
	        dragstart: function(e) {
	            // add reference to the last active drag handle.
	            this.owner._activeDragHandle = this;
	            // HACK to initiate click on the line
	            this.draggable.userEvents.cancel();
	            this._dragstart(e);
	            this.dragend();
	        },

	        _dragstart: function(e) {
	            var that = this,
	                owner = that.owner,
	                options = that.options;

	            if (!options.enabled) {
	                e.preventDefault();
	                return;
	            }

	            // add reference to the last active drag handle.
	            this.owner._activeDragHandle = this;

	            owner.element.off(MOUSE_OVER);
	            owner.wrapper.find("." + STATE_FOCUSED).removeClass(STATE_FOCUSED + " " + STATE_SELECTED);
	            that.element.addClass(STATE_FOCUSED + " " + STATE_SELECTED);
	            $(document.documentElement).css("cursor", "pointer");

	            that.dragableArea = owner._getDraggableArea();
	            that.step = math.max(options.smallStep * (owner._maxSelection / owner._distance()), 0);

	            if (that.type) {
	                that.selectionStart = options.selectionStart;
	                that.selectionEnd = options.selectionEnd;
	                owner._setZIndex(that.type);
	            } else {
	                that.oldVal = that.val = options.value;
	            }

	            that._removeTooltip(true);
	            that._createTooltip();
	        },

	        _createTooltip: function() {
	            var that = this,
	                owner = that.owner,
	                tooltip = that.options.tooltip,
	                html = '',
	                wnd = $(window),
	                tooltipTemplate, colloutCssClass;

	            if (!tooltip.enabled) {
	                return;
	            }

	            if (tooltip.template) {
	                tooltipTemplate = that.tooltipTemplate = kendo.template(tooltip.template);
	            }

	            $(".k-slider-tooltip").remove(); // if user changes window while tooltip is visible, a second one will be created
	            that.tooltipDiv = $("<div class='k-widget k-tooltip k-slider-tooltip'><!-- --></div>").appendTo(document.body);

	            html = owner._getFormattedValue(that.val || owner.value(), that);

	            if (!that.type) {
	                colloutCssClass = "k-callout-" + (owner._isHorizontal ? 's' : 'e');
	                that.tooltipInnerDiv = "<div class='k-callout " + colloutCssClass + "'><!-- --></div>";
	                html += that.tooltipInnerDiv;
	            }

	            that.tooltipDiv.html(html);

	            that._scrollOffset = {
	                top: wnd.scrollTop(),
	                left: wnd.scrollLeft()
	            };

	            that.moveTooltip();
	        },

	        drag: function (e) {
	            var that = this,
	                owner = that.owner,
	                x = e.x.location,
	                y = e.y.location,
	                startPoint = that.dragableArea.startPoint,
	                endPoint = that.dragableArea.endPoint,
	                slideParams;

	            e.preventDefault();

	            if (owner._isHorizontal) {
	                if (owner._isRtl) {
	                    that.val = that.constrainValue(x, startPoint, endPoint, x < endPoint);
	                } else {
	                    that.val = that.constrainValue(x, startPoint, endPoint, x >= endPoint);
	                }
	            } else {
	                that.val = that.constrainValue(y, endPoint, startPoint, y <= endPoint);
	            }

	            if (that.oldVal != that.val) {
	                that.oldVal = that.val;

	                if (that.type) {
	                    if (that.type == "firstHandle") {
	                        if (that.val < that.selectionEnd) {
	                            that.selectionStart = that.val;
	                        } else {
	                            that.selectionStart = that.selectionEnd = that.val;
	                        }
	                    } else {
	                        if (that.val > that.selectionStart) {
	                            that.selectionEnd = that.val;
	                        } else {
	                            that.selectionStart = that.selectionEnd = that.val;
	                        }
	                    }
	                    slideParams = {
	                        values: [that.selectionStart, that.selectionEnd],
	                        value: [that.selectionStart, that.selectionEnd]
	                    };
	                } else {
	                    slideParams = { value: that.val };
	                }

	                owner.trigger(SLIDE, slideParams);
	            }
	            that._updateTooltip(that.val);
	        },

	        _updateTooltip: function(val) {
	            var that = this,
	                options = that.options,
	                tooltip = options.tooltip,
	                html = "";

	            if (!tooltip.enabled) {
	                return;
	            }

	            if (!that.tooltipDiv) {
	                that._createTooltip();
	            }

	            html = that.owner._getFormattedValue(round(val), that);

	            if (!that.type) {
	                html += that.tooltipInnerDiv;
	            }

	            that.tooltipDiv.html(html);
	            that.moveTooltip();
	        },

	        dragcancel: function() {
	            this.owner._refresh();
	            $(document.documentElement).css("cursor", "");
	            return this._end();
	        },

	        dragend: function() {
	            var that = this,
	                owner = that.owner;

	            $(document.documentElement).css("cursor", "");

	            if (that.type) {
	                owner._update(that.selectionStart, that.selectionEnd);
	            } else {
	                owner._update(that.val);
	                that.draggable.userEvents._disposeAll();
	            }

	            that.draggable.userEvents.cancel();
	            return that._end();
	        },

	        _end: function() {
	            var that = this,
	                owner = that.owner;

	            owner._focusWithMouse(that.element);

	            owner.element.on(MOUSE_OVER);

	            return false;
	        },

	        _removeTooltip: function(noAnimation) {
	            var that = this,
	                owner = that.owner;

	            if (that.tooltipDiv && owner.options.tooltip.enabled && owner.options.enabled) {
	                if (noAnimation) {
	                    that.tooltipDiv.remove();
	                    that.tooltipDiv = null;
	                } else {
	                    that.tooltipDiv.fadeOut("slow", function(){
	                        $(this).remove();
	                        that.tooltipDiv = null;
	                    });
	                }
	            }
	        },

	        moveTooltip: function () {
	            var that = this,
	                owner = that.owner,
	                top = 0,
	                left = 0,
	                element = that.element,
	                offset = kendo.getOffset(element),
	                margin = 8,
	                viewport = $(window),
	                callout = that.tooltipDiv.find(".k-callout"),
	                width = outerWidth(that.tooltipDiv),
	                height = outerHeight(that.tooltipDiv),
	                dragHandles, sdhOffset, diff, anchorSize;

	            if (that.type) {
	                dragHandles = owner.wrapper.find(DRAG_HANDLE);
	                offset = kendo.getOffset(dragHandles.eq(0));
	                sdhOffset = kendo.getOffset(dragHandles.eq(1));

	                if (owner._isHorizontal) {
	                    top = sdhOffset.top;
	                    left = offset.left + ((sdhOffset.left - offset.left) / 2);
	                } else {
	                    top = offset.top + ((sdhOffset.top - offset.top) / 2);
	                    left = sdhOffset.left;
	                }

	                anchorSize = outerWidth(dragHandles.eq(0)) + 2 * margin;
	            } else {
	                top = offset.top;
	                left = offset.left;
	                anchorSize = outerWidth(element) + 2 * margin;
	            }

	            if (owner._isHorizontal) {
	                left -= parseInt((width - owner._outerSize(element)) / 2, 10);
	                top -= height + callout.height() + margin;
	            } else {
	                top -= parseInt((height - owner._outerSize(element)) / 2, 10);
	                left -= width + callout.width() + margin;
	            }

	            if (owner._isHorizontal) {
	                diff = that._flip(top, height, anchorSize, outerHeight(viewport) + that._scrollOffset.top);
	                top += diff;
	                left += that._fit(left, width, outerWidth(viewport) + that._scrollOffset.left);
	            } else {
	                diff = that._flip(left, width, anchorSize, outerWidth(viewport) + that._scrollOffset.left);
	                top += that._fit(top, height, outerHeight(viewport) + that._scrollOffset.top);
	                left += diff;
	            }

	            if (diff > 0 && callout) {
	                callout.removeClass();
	                callout.addClass("k-callout k-callout-" + (owner._isHorizontal ? "n" : "w"));
	            }

	            that.tooltipDiv.css({ top: top, left: left });
	        },

	        _fit: function(position, size, viewPortEnd) {
	            var output = 0;

	            if (position + size > viewPortEnd) {
	                output = viewPortEnd - (position + size);
	            }

	            if (position < 0) {
	                output = -position;
	            }

	            return output;
	        },

	        _flip: function(offset, size, anchorSize, viewPortEnd) {
	            var output = 0;

	            if (offset + size > viewPortEnd) {
	                output += -(anchorSize + size);
	            }

	            if (offset + output < 0) {
	                output += anchorSize + size;
	            }

	            return output;
	        },

	        constrainValue: function (position, min, max, maxOverflow) {
	            var that = this,
	                val = 0;

	            if (min < position && position < max) {
	                val = that.owner._getValueFromPosition(position, that.dragableArea);
	            } else {
	                if (maxOverflow ) {
	                    val = that.options.max;
	                } else {
	                    val = that.options.min;
	                }
	            }

	            return val;
	        }

	    };

	    kendo.ui.plugin(Slider);

	    var RangeSlider = SliderBase.extend({
	        init: function(element, options) {
	            var that = this,
	                inputs = $(element).find("input"),
	                firstInput = inputs.eq(0)[0],
	                secondInput = inputs.eq(1)[0];

	            firstInput.type = "text";
	            secondInput.type = "text";

	            if (options && options.showButtons) {
	                if (window.console) {
	                    window.console.warn("showbuttons option is not supported for the range slider, ignoring");
	                }

	                options.showButtons = false;
	            }

	            options = extend({}, {
	                selectionStart: parseAttr(firstInput, "value"),
	                min: parseAttr(firstInput, "min"),
	                max: parseAttr(firstInput, "max"),
	                smallStep: parseAttr(firstInput, "step")
	            }, {
	                selectionEnd: parseAttr(secondInput, "value"),
	                min: parseAttr(secondInput, "min"),
	                max: parseAttr(secondInput, "max"),
	                smallStep: parseAttr(secondInput, "step")
	            }, options);

	            if (options && options.enabled === undefined) {
	                options.enabled = !inputs.is("[disabled]");
	            }

	            SliderBase.fn.init.call(that, element, options);
	            options = that.options;
	            if (!defined(options.selectionStart) || options.selectionStart === null) {
	                options.selectionStart = options.min;
	                inputs.eq(0).prop("value", formatValue(options.min));
	            }

	            if (!defined(options.selectionEnd) || options.selectionEnd === null) {
	                options.selectionEnd = options.max;
	                inputs.eq(1).prop("value", formatValue(options.max));
	            }

	            var dragHandles = that.wrapper.find(DRAG_HANDLE);

	            this._selection = new RangeSlider.Selection(dragHandles, that, options);
	            that._firstHandleDrag = new Slider.Drag(dragHandles.eq(0), "firstHandle", that, options);
	            that._lastHandleDrag = new Slider.Drag(dragHandles.eq(1), "lastHandle" , that, options);
	        },

	        options: {
	            name: "RangeSlider",
	            leftDragHandleTitle: "drag",
	            rightDragHandleTitle: "drag",
	            tooltip: { format: "{0:#,#.##}" },
	            selectionStart: null,
	            selectionEnd: null
	        },

	        enable: function (enable) {
	            var that = this,
	                options = that.options,
	                clickHandler;

	            that.disable();
	            if (enable === false) {
	                return;
	            }

	            that.wrapper
	                .removeClass(STATE_DISABLED)
	                .addClass(STATE_DEFAULT);

	            that.wrapper.find("input").removeAttr(DISABLED);

	            clickHandler = function (e) {
	                var touch = getTouches(e)[0];

	                if (!touch) {
	                    return;
	                }

	                var mousePosition = that._isHorizontal ? touch.location.pageX : touch.location.pageY,
	                    dragableArea = that._getDraggableArea(),
	                    val = that._getValueFromPosition(mousePosition, dragableArea),
	                    target = $(e.target),
	                    from, to, drag;

	                if (target.hasClass("k-draghandle")) {
	                    that.wrapper.find("." + STATE_FOCUSED).removeClass(STATE_FOCUSED + " " + STATE_SELECTED);
	                    target.addClass(STATE_FOCUSED + " " + STATE_SELECTED);
	                    return;
	                }

	                if (val < options.selectionStart) {
	                    from = val;
	                    to = options.selectionEnd;
	                    drag = that._firstHandleDrag;
	                } else if (val > that.selectionEnd) {
	                    from = options.selectionStart;
	                    to = val;
	                    drag = that._lastHandleDrag;
	                } else {
	                    if (val - options.selectionStart <= options.selectionEnd - val) {
	                        from = val;
	                        to = options.selectionEnd;
	                        drag = that._firstHandleDrag;
	                    } else {
	                        from = options.selectionStart;
	                        to = val;
	                        drag = that._lastHandleDrag;
	                    }
	                }

	                drag.dragstart(e);
	                that._setValueInRange(from, to);
	                that._focusWithMouse(drag.element);
	            };

	            that.wrapper
	                .find(TICK_SELECTOR + ", " + TRACK_SELECTOR)
	                    .on(TRACK_MOUSE_DOWN, clickHandler)
	                    .end()
	                    .on(TRACK_MOUSE_DOWN, function() {
	                        $(document.documentElement).one("selectstart", kendo.preventDefault);
	                    })
	                    .on(TRACK_MOUSE_UP, function() {
	                        if (that._activeDragHandle) {
	                            that._activeDragHandle._end();
	                        }
	                    });

	            that.wrapper
	                .find(DRAG_HANDLE)
	                .attr(TABINDEX, 0)
	                .on(MOUSE_UP, function () {
	                    that._setTooltipTimeout();
	                })
	                .on(CLICK, function (e) {
	                    that._focusWithMouse(e.target);
	                    e.preventDefault();
	                })
	                .on(FOCUS, proxy(that._focus, that))
	                .on(BLUR, proxy(that._blur, that));

	            that.wrapper.find(DRAG_HANDLE)
	                .off(KEY_DOWN, kendo.preventDefault)
	                .eq(0).on(KEY_DOWN,
	                    proxy(function(e) {
	                        this._keydown(e, "firstHandle");
	                    }, that)
	                )
	                .end()
	                .eq(1).on(KEY_DOWN,
	                    proxy(function(e) {
	                        this._keydown(e, "lastHandle");
	                    }, that)
	                );

	            that.options.enabled = true;
	        },

	        disable: function () {
	            var that = this;

	            that.wrapper
	                .removeClass(STATE_DEFAULT)
	                .addClass(STATE_DISABLED);

	            that.wrapper.find("input").prop(DISABLED, DISABLED);

	            that.wrapper
	                .find(TICK_SELECTOR + ", " + TRACK_SELECTOR).off(TRACK_MOUSE_DOWN).off(TRACK_MOUSE_UP);

	            that.wrapper
	                .find(DRAG_HANDLE)
	                .attr(TABINDEX, -1)
	                .off(MOUSE_UP)
	                .off(KEY_DOWN)
	                .off(CLICK)
	                .off(FOCUS)
	                .off(BLUR);

	            that.options.enabled = false;
	        },

	        _keydown: function (e, handle) {
	            var that = this,
	                selectionStartValue = that.options.selectionStart,
	                selectionEndValue = that.options.selectionEnd,
	                dragSelectionStart,
	                dragSelectionEnd,
	                activeHandleDrag;

	            if (e.keyCode in that._keyMap) {

	                that._clearTooltipTimeout();

	                if (handle == "firstHandle") {
	                    activeHandleDrag = that._activeHandleDrag = that._firstHandleDrag;
	                    selectionStartValue = that._keyMap[e.keyCode](selectionStartValue);

	                    if (selectionStartValue > selectionEndValue) {
	                        selectionEndValue = selectionStartValue;
	                    }
	                } else {
	                    activeHandleDrag = that._activeHandleDrag = that._lastHandleDrag;
	                    selectionEndValue = that._keyMap[e.keyCode](selectionEndValue);

	                    if (selectionStartValue > selectionEndValue) {
	                        selectionStartValue = selectionEndValue;
	                    }
	                }

	                that._setValueInRange(round(selectionStartValue), round(selectionEndValue));

	                dragSelectionStart = Math.max(selectionStartValue, that.options.selectionStart);
	                dragSelectionEnd = Math.min(selectionEndValue, that.options.selectionEnd);

	                activeHandleDrag.selectionEnd = Math.max(dragSelectionEnd, that.options.selectionStart);
	                activeHandleDrag.selectionStart = Math.min(dragSelectionStart, that.options.selectionEnd);

	                activeHandleDrag._updateTooltip(that.value()[that._activeHandle]);

	                e.preventDefault();
	            }
	        },

	        _update: function (selectionStart, selectionEnd) {
	            var that = this,
	                values = that.value();

	            var change = values[0] != selectionStart || values[1] != selectionEnd;

	            that.value([selectionStart, selectionEnd]);

	            if (change) {
	                that.trigger(CHANGE, {
	                    values: [selectionStart, selectionEnd],
	                    value: [selectionStart, selectionEnd]
	                });
	            }
	        },

	        value: function(value) {
	            if (value && value.length) {
	                return this._value(value[0], value[1]);
	            } else {
	                return this._value();
	            }
	        },

	        _value: function(start, end) {
	            var that = this,
	                options = that.options,
	                selectionStart = options.selectionStart,
	                selectionEnd = options.selectionEnd;

	            if (isNaN(start) && isNaN(end)) {
	                return [selectionStart, selectionEnd];
	            } else {
	                start = round(start);
	                end = round(end);
	            }

	            if (start >= options.min && start <= options.max &&
	                end >= options.min && end <= options.max && start <= end) {
	                if (selectionStart != start || selectionEnd != end) {
	                    that.element.find("input")
	                        .eq(0).prop("value", formatValue(start))
	                        .end()
	                        .eq(1).prop("value", formatValue(end));

	                    options.selectionStart = start;
	                    options.selectionEnd = end;
	                    that._refresh();
	                    that._refreshAriaAttr(start, end);
	                }
	            }
	        },

	        values: function (start, end) {
	            if (isArray(start)) {
	                return this._value(start[0], start[1]);
	            } else {
	                return this._value(start, end);
	            }
	        },

	        _refresh: function() {
	            var that = this,
	                options = that.options;

	            that.trigger(MOVE_SELECTION, {
	                values: [options.selectionStart, options.selectionEnd],
	                value: [options.selectionStart, options.selectionEnd]
	            });

	            if (options.selectionStart == options.max && options.selectionEnd == options.max) {
	                that._setZIndex("firstHandle");
	            }
	        },

	        _refreshAriaAttr: function(start, end) {
	            var that = this,
	                dragHandles = that.wrapper.find(DRAG_HANDLE),
	                drag = that._activeHandleDrag,
	                formattedValue;

	            formattedValue = that._getFormattedValue([start, end], drag);

	            dragHandles.eq(0).attr("aria-valuenow", start);
	            dragHandles.eq(1).attr("aria-valuenow", end);
	            dragHandles.attr("aria-valuetext", formattedValue);
	        },

	        _setValueInRange: function (selectionStart, selectionEnd) {
	            var options = this.options;

	            selectionStart = math.max(math.min(selectionStart, options.max), options.min);

	            selectionEnd = math.max(math.min(selectionEnd, options.max), options.min);

	            if (selectionStart == options.max && selectionEnd == options.max) {
	                this._setZIndex("firstHandle");
	            }

	            this._update(math.min(selectionStart, selectionEnd), math.max(selectionStart, selectionEnd));
	        },

	        _setZIndex: function (type) {
	            this.wrapper.find(DRAG_HANDLE).each(function (index) {
	                $(this).css("z-index", type == "firstHandle" ? 1 - index : index);
	            });
	        },

	        _formResetHandler: function () {
	            var that = this,
	                options = that.options;

	            setTimeout(function () {
	                var inputs = that.element.find("input");
	                var start = inputs[0].value;
	                var end = inputs[1].value;
	                that.values(start === "" || isNaN(start) ? options.min : start, end === "" || isNaN(end) ? options.max : end);
	            });
	        },

	        destroy: function() {
	            var that = this;

	            SliderBase.fn.destroy.call(that);

	            that.wrapper.off(NS)
	                .find(TICK_SELECTOR + ", " + TRACK_SELECTOR).off(NS)
	                .end()
	                .find(DRAG_HANDLE).off(NS);

	            that._firstHandleDrag.draggable.destroy();
	            that._lastHandleDrag.draggable.destroy();
	        }
	    });

	    RangeSlider.Selection = function (dragHandles, that, options) {
	        function moveSelection(value) {
	            value = value || [];
	            var selectionStartValue = value[0] - options.min,
	                selectionEndValue = value[1] - options.min,
	                selectionStartIndex = math.ceil(round(selectionStartValue / options.smallStep)),
	                selectionEndIndex = math.ceil(round(selectionEndValue / options.smallStep)),
	                selectionStart = that._pixelSteps[selectionStartIndex],
	                selectionEnd = that._pixelSteps[selectionEndIndex],
	                halfHandle = parseInt(that._outerSize(dragHandles.eq(0)) / 2, 10),
	                rtlCorrection = that._isRtl ? 2 : 0;

	            dragHandles.eq(0).css(that._position, selectionStart - halfHandle - rtlCorrection)
	                       .end()
	                       .eq(1).css(that._position, selectionEnd - halfHandle - rtlCorrection);

	            makeSelection(selectionStart, selectionEnd);
	        }

	        function makeSelection(selectionStart, selectionEnd) {
	            var selection,
	                selectionPosition,
	                selectionDiv = that._trackDiv.find(".k-slider-selection");

	            selection = math.abs(selectionStart - selectionEnd);

	            selectionDiv[that._sizeFn](selection);
	            if (that._isRtl) {
	                selectionPosition = math.max(selectionStart, selectionEnd);
	                selectionDiv.css("right", that._maxSelection - selectionPosition - 1);
	            } else {
	                selectionPosition = math.min(selectionStart, selectionEnd);
	                selectionDiv.css(that._position, selectionPosition - 1);
	            }
	        }

	        moveSelection(that.value());

	        that.bind([ CHANGE, SLIDE, MOVE_SELECTION ], function (e) {
	            moveSelection(e.values);
	        });
	    };

	    kendo.ui.plugin(RangeSlider);

	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(422));


/***/ })

/******/ });

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(511);


/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 433:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(1);

/***/ }),

/***/ 511:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(433) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "timepicker",
	    name: "TimePicker",
	    category: "web",
	    description: "The TimePicker widget allows the end user to select a value from a list of predefined values or to type a new value.",
	    depends: [ "popup" ]
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        keys = kendo.keys,
	        parse = kendo.parseDate,
	        activeElement = kendo._activeElement,
	        extractFormat = kendo._extractFormat,
	        support = kendo.support,
	        browser = support.browser,
	        ui = kendo.ui,
	        Widget = ui.Widget,
	        OPEN = "open",
	        CLOSE = "close",
	        CHANGE = "change",
	        ns = ".kendoTimePicker",
	        CLICK = "click" + ns,
	        DEFAULT = "k-state-default",
	        DISABLED = "disabled",
	        READONLY = "readonly",
	        LI = "li",
	        SPAN = "<span/>",
	        FOCUSED = "k-state-focused",
	        HOVER = "k-state-hover",
	        HOVEREVENTS = "mouseenter" + ns + " mouseleave" + ns,
	        MOUSEDOWN = "mousedown" + ns,
	        MS_PER_MINUTE = 60000,
	        MS_PER_DAY = 86400000,
	        SELECTED = "k-state-selected",
	        STATEDISABLED = "k-state-disabled",
	        ARIA_SELECTED = "aria-selected",
	        ARIA_EXPANDED = "aria-expanded",
	        ARIA_HIDDEN = "aria-hidden",
	        ARIA_DISABLED = "aria-disabled",
	        ARIA_ACTIVEDESCENDANT = "aria-activedescendant",
	        ID = "id",
	        isArray = $.isArray,
	        extend = $.extend,
	        proxy = $.proxy,
	        DATE = Date,
	        TODAY = new DATE();

	    TODAY = new DATE(TODAY.getFullYear(), TODAY.getMonth(), TODAY.getDate(), 0, 0, 0);

	    var TimeView = function(options) {
	        var that = this,
	            id = options.id;

	        that.options = options;
	        that._dates = [];

	        that.ul = $('<ul tabindex="-1" role="listbox" aria-hidden="true" unselectable="on" class="k-list k-reset"/>')
	                    .css({ overflow: support.kineticScrollNeeded ? "": "auto" })
	                    .on(CLICK, LI, proxy(that._click, that))
	                    .on("mouseenter" + ns, LI, function() { $(this).addClass(HOVER); })
	                    .on("mouseleave" + ns, LI, function() { $(this).removeClass(HOVER); });

	        that.list = $("<div class='k-list-container k-list-scroller' unselectable='on'/>")
	                    .append(that.ul)
	                    .on(MOUSEDOWN, preventDefault);

	        if (id) {
	            that._timeViewID = id + "_timeview";
	            that._optionID = id + "_option_selected";

	            that.ul.attr(ID, that._timeViewID);
	        }

	        that._popup();
	        that._heightHandler = proxy(that._height, that);

	        that.template = kendo.template('<li tabindex="-1" role="option" class="k-item" unselectable="on">#=data#</li>', { useWithBlock: false });
	    };

	    TimeView.prototype = {
	        current: function(candidate) {
	            var that = this,
	                active = that.options.active;

	            if (candidate !== undefined) {
	                if (that._current) {
	                    that._current
	                        .removeClass(SELECTED)
	                        .removeAttr(ARIA_SELECTED)
	                        .removeAttr(ID);
	                }

	                if (candidate) {
	                    candidate = $(candidate).addClass(SELECTED)
	                                            .attr(ID, that._optionID)
	                                            .attr(ARIA_SELECTED, true);

	                    that.scroll(candidate[0]);
	                }

	                that._current = candidate;

	                if (active) {
	                    active(candidate);
	                }
	            } else {
	                return that._current;
	            }
	        },

	        close: function() {
	            this.popup.close();
	        },

	        destroy: function() {
	            var that = this;

	            that.ul.off(ns);
	            that.list.off(ns);
	            that.popup.destroy();
	        },

	        open: function() {
	            var that = this;

	            if (!that.ul[0].firstChild) {
	                that.bind();
	            }

	            that.popup.open();
	            if (that._current) {
	                that.scroll(that._current[0]);
	            }
	        },

	        dataBind: function(dates) {
	            var that = this,
	                options = that.options,
	                format = options.format,
	                toString = kendo.toString,
	                template = that.template,
	                length = dates.length,
	                idx = 0,
	                date,
	                html = "";

	            for (; idx < length; idx++) {
	                date = dates[idx];

	                if (isInRange(date, options.min, options.max)) {
	                    html += template(toString(date, format, options.culture));
	                }
	            }

	            that._html(html);
	        },

	        refresh: function() {
	            var that = this,
	                options = that.options,
	                format = options.format,
	                offset = dst(),
	                ignoreDST = offset < 0,
	                min = options.min,
	                max = options.max,
	                msMin = getMilliseconds(min),
	                msMax = getMilliseconds(max),
	                msInterval = options.interval * MS_PER_MINUTE,
	                toString = kendo.toString,
	                template = that.template,
	                start = new DATE(+min),
	                startDay = start.getDate(),
	                msStart, lastIdx,
	                idx = 0, length,
	                html = "";

	            if (ignoreDST) {
	                length = (MS_PER_DAY + (offset * MS_PER_MINUTE)) / msInterval;
	            } else {
	                length = MS_PER_DAY / msInterval;
	            }


	            if (msMin != msMax) {
	                if (msMin > msMax) {
	                    msMax += MS_PER_DAY;
	                }

	                length = ((msMax - msMin) / msInterval) + 1;
	            }

	            lastIdx = parseInt(length, 10);

	            for (; idx < length; idx++) {
	                if (idx) {
	                    setTime(start, msInterval, ignoreDST);
	                }

	                if (msMax && lastIdx == idx) {
	                    msStart = getMilliseconds(start);
	                    if (startDay < start.getDate()) {
	                        msStart += MS_PER_DAY;
	                    }

	                    if (msStart > msMax) {
	                        start = new DATE(+max);
	                    }
	                }

	                that._dates.push(getMilliseconds(start));
	                html += template(toString(start, format, options.culture));
	            }

	            that._html(html);
	        },

	        bind: function() {
	            var that = this,
	                dates = that.options.dates;

	            if (dates && dates[0]) {
	                that.dataBind(dates);
	            } else {
	                that.refresh();
	            }
	        },

	        _html: function(html) {
	            var that = this;

	            that.ul[0].innerHTML = html;

	            that.popup.unbind(OPEN, that._heightHandler);
	            that.popup.one(OPEN, that._heightHandler);

	            that.current(null);
	            that.select(that._value);
	        },

	        scroll: function(item) {
	            if (!item) {
	                return;
	            }

	            var content = this.list[0],
	                itemOffsetTop = item.offsetTop,
	                itemOffsetHeight = item.offsetHeight,
	                contentScrollTop = content.scrollTop,
	                contentOffsetHeight = content.clientHeight,
	                bottomDistance = itemOffsetTop + itemOffsetHeight;

	                if (contentScrollTop > itemOffsetTop) {
	                    contentScrollTop = itemOffsetTop;
	                } else if (bottomDistance > (contentScrollTop + contentOffsetHeight)) {
	                    contentScrollTop = (bottomDistance - contentOffsetHeight);
	                }

	                content.scrollTop = contentScrollTop;
	        },

	        select: function(li) {
	            var that = this,
	                options = that.options,
	                current = that._current,
	                selection;

	            if (li instanceof Date) {
	                li = kendo.toString(li, options.format, options.culture);
	            }

	            if (typeof li === "string") {
	                if (!current || current.text() !== li) {
	                    li = $.grep(that.ul[0].childNodes, function(node) {
	                        return (node.textContent || node.innerText) == li;
	                    });

	                    li = li[0] ? li : null;
	                } else {
	                    li = current;
	                }
	            }
	            selection = that._distinctSelection(li);
	            that.current(selection);
	        },

	        _distinctSelection: function(selection) {
	            var that = this,
	                currentValue,
	                selectionIndex;

	            if (selection && selection.length > 1) {
	                currentValue = getMilliseconds(that._value);
	                selectionIndex = $.inArray(currentValue, that._dates);
	                selection = that.ul.children()[selectionIndex];
	            }

	            return selection;
	        },

	        setOptions: function(options) {
	            var old = this.options;

	            options.min = parse(options.min);
	            options.max = parse(options.max);

	            this.options = extend(old, options, {
	                active: old.active,
	                change: old.change,
	                close: old.close,
	                open: old.open
	            });

	            this.bind();
	        },

	        toggle: function() {
	            var that = this;

	            if (that.popup.visible()) {
	                that.close();
	            } else {
	                that.open();
	            }
	        },

	        value: function(value) {
	            var that = this;

	            that._value = value;
	            if (that.ul[0].firstChild) {
	                that.select(value);
	            }
	        },

	        _click: function(e) {
	            var that = this,
	                li = $(e.currentTarget),
	                date = li.text(),
	                dates = that.options.dates;

	            if (dates && dates.length > 0) {
	                date = dates[li.index()];
	            }

	            if (!e.isDefaultPrevented()) {
	                that.select(li);
	                that.options.change(date, true);
	                that.close();
	            }
	        },

	        _height: function() {
	            var that = this;
	            var list = that.list;
	            var parent = list.parent(".k-animation-container");
	            var height = that.options.height;

	            if (that.ul[0].children.length) {
	                list.add(parent)
	                    .show()
	                    .height(that.ul[0].scrollHeight > height ? height : "auto")
	                    .hide();
	            }
	        },

	        _parse: function(value) {
	            var that = this,
	                options = that.options,
	                current = that._value || TODAY;

	            if (value instanceof DATE) {
	                return value;
	            }

	            value = parse(value, options.parseFormats, options.culture);

	            if (value) {
	                value = new DATE(current.getFullYear(),
	                                 current.getMonth(),
	                                 current.getDate(),
	                                 value.getHours(),
	                                 value.getMinutes(),
	                                 value.getSeconds(),
	                                 value.getMilliseconds());
	            }

	            return value;
	        },

	        _adjustListWidth: function() {
	            var list = this.list,
	                width = list[0].style.width,
	                wrapper = this.options.anchor,
	                computedStyle, computedWidth,
	                outerWidth = kendo._outerWidth;

	            if (!list.data("width") && width) {
	                return;
	            }

	            computedStyle = window.getComputedStyle ? window.getComputedStyle(wrapper[0], null) : 0;
	            computedWidth = computedStyle ? parseFloat(computedStyle.width) : outerWidth(wrapper);

	            if (computedStyle && (browser.mozilla || browser.msie)) { // getComputedStyle returns different box in FF and IE.
	                computedWidth += parseFloat(computedStyle.paddingLeft) + parseFloat(computedStyle.paddingRight) + parseFloat(computedStyle.borderLeftWidth) + parseFloat(computedStyle.borderRightWidth);
	            }

	            width = computedWidth - (outerWidth(list) - list.width());

	            list.css({
	                fontFamily: wrapper.css("font-family"),
	                width: width
	            })
	            .data("width", width);
	        },

	        _popup: function() {
	            var that = this,
	                list = that.list,
	                options = that.options,
	                anchor = options.anchor;

	            that.popup = new ui.Popup(list, extend(options.popup, {
	                anchor: anchor,
	                open: options.open,
	                close: options.close,
	                animation: options.animation,
	                isRtl: support.isRtl(options.anchor)
	            }));
	        },

	        move: function(e) {
	            var that = this,
	                key = e.keyCode,
	                ul = that.ul[0],
	                current = that._current,
	                down = key === keys.DOWN;

	            if (key === keys.UP || down) {
	                if (e.altKey) {
	                    that.toggle(down);
	                    return;
	                } else if (down) {
	                    current = current ? current[0].nextSibling : ul.firstChild;
	                } else {
	                    current = current ? current[0].previousSibling : ul.lastChild;
	                }

	                if (current) {
	                    that.select(current);
	                }

	                that.options.change(that._current.text());
	                e.preventDefault();

	            } else if (key === keys.ENTER || key === keys.TAB || key === keys.ESC) {
	                e.preventDefault();
	                if (current) {
	                    that.options.change(current.text(), true);
	                }
	                that.close();
	            }
	        }
	    };

	    function setTime(date, time, ignoreDST) {
	        var offset = date.getTimezoneOffset(),
	            offsetDiff;

	        date.setTime(date.getTime() + time);

	        if (!ignoreDST) {
	            offsetDiff = date.getTimezoneOffset() - offset;
	            date.setTime(date.getTime() + offsetDiff * MS_PER_MINUTE);
	        }
	    }

	    function dst() {
	        var today = new DATE(),
	            midnight = new DATE(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0),
	            noon = new DATE(today.getFullYear(), today.getMonth(), today.getDate(), 12, 0, 0);

	        return -1 * (midnight.getTimezoneOffset() - noon.getTimezoneOffset());
	    }

	    function getMilliseconds(date) {
	        return date.getHours() * 60 * MS_PER_MINUTE + date.getMinutes() * MS_PER_MINUTE + date.getSeconds() * 1000 + date.getMilliseconds();
	    }

	    function isInRange(value, min, max) {
	        var msMin = getMilliseconds(min),
	            msMax = getMilliseconds(max),
	            msValue;

	        if (!value || msMin == msMax) {
	            return true;
	        }

	        msValue = getMilliseconds(value);

	        if (msMin > msValue) {
	            msValue += MS_PER_DAY;
	        }

	        if (msMax < msMin) {
	            msMax += MS_PER_DAY;
	        }

	        return msValue >= msMin && msValue <= msMax;
	    }

	    TimeView.getMilliseconds = getMilliseconds;

	    kendo.TimeView = TimeView;

	    var TimePicker = Widget.extend({
	        init: function(element, options) {
	            var that = this, ul, timeView, disabled;

	            Widget.fn.init.call(that, element, options);

	            element = that.element;
	            options = that.options;

	            options.min = parse(element.attr("min")) || parse(options.min);
	            options.max = parse(element.attr("max")) || parse(options.max);

	            normalize(options);

	            that._initialOptions = extend({}, options);

	            that._wrapper();

	            that.timeView = timeView = new TimeView(extend({}, options, {
	                id: element.attr(ID),
	                anchor: that.wrapper,
	                format: options.format,
	                change: function(value, trigger) {
	                    if (trigger) {
	                        that._change(value);
	                    } else {
	                        element.val(value);
	                    }
	                },
	                open: function(e) {
	                    that.timeView._adjustListWidth();

	                    if (that.trigger(OPEN)) {
	                        e.preventDefault();
	                    } else {
	                        element.attr(ARIA_EXPANDED, true);
	                        ul.attr(ARIA_HIDDEN, false);
	                    }
	                },
	                close: function(e) {
	                    if (that.trigger(CLOSE)) {
	                        e.preventDefault();
	                    } else {
	                        element.attr(ARIA_EXPANDED, false);
	                        ul.attr(ARIA_HIDDEN, true);
	                    }
	                },
	                active: function(current) {
	                    element.removeAttr(ARIA_ACTIVEDESCENDANT);
	                    if (current) {
	                        element.attr(ARIA_ACTIVEDESCENDANT, timeView._optionID);
	                    }
	                }
	            }));
	            ul = timeView.ul;

	            that._icon();
	            that._reset();

	            try {
	                element[0].setAttribute("type", "text");
	            } catch(e) {
	                element[0].type = "text";
	            }

	            element.addClass("k-input")
	                   .attr({
	                        "role": "combobox",
	                        "aria-expanded": false,
	                        "aria-owns": timeView._timeViewID
	                   });

	            disabled = element.is("[disabled]") || $(that.element).parents("fieldset").is(':disabled');
	            if (disabled) {
	                that.enable(false);
	            } else {
	                that.readonly(element.is("[readonly]"));
	            }
	            if (options.dateInput) {
	                var min = options.min;
	                var max = options.max;
	                var today = new DATE();
	                if (getMilliseconds(min) == getMilliseconds(max)) {
	                    min = new DATE(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0);
	                    max = new DATE(today.getFullYear(), today.getMonth(), today.getDate(), 24, 0, 0);
	                } else {
	                    min = new DATE(today.getFullYear(), today.getMonth(), today.getDate(),
	                        min.getHours(), min.getMinutes(), min.getSeconds(), min.getMilliseconds());
	                    max = new DATE(today.getFullYear(), today.getMonth(), today.getDate(),
	                        max.getHours(), max.getMinutes(), max.getSeconds(), max.getMilliseconds());
	                }
	                that._dateInput = new ui.DateInput(element, {
	                    culture: options.culture,
	                    format: options.format,
	                    min: min,
	                    max: max,
	                    value: options.value
	                });
	            }
	            that._old = that._update(options.value || that.element.val());
	            that._oldText = element.val();

	            kendo.notify(that);
	        },

	        options: {
	            name: "TimePicker",
	            min: TODAY,
	            max: TODAY,
	            format: "",
	            dates: [],
	            parseFormats: [],
	            value: null,
	            interval: 30,
	            height: 200,
	            animation: {}
	        },

	        events: [
	         OPEN,
	         CLOSE,
	         CHANGE
	        ],

	        setOptions: function(options) {
	            var that = this;
	            var value = that._value;

	            Widget.fn.setOptions.call(that, options);
	            options = that.options;

	            normalize(options);

	            that.timeView.setOptions(options);

	            if (value) {
	                that.element.val(kendo.toString(value, options.format, options.culture));
	            }
	        },

	        dataBind: function(dates) {
	            if (isArray(dates)) {
	                this.timeView.dataBind(dates);
	            }
	        },

	        _editable: function(options) {
	            var that = this,
	                disable = options.disable,
	                readonly = options.readonly,
	                arrow = that._arrow.off(ns),
	                element = that.element.off(ns),
	                wrapper = that._inputWrapper.off(ns);

	            if (!readonly && !disable) {
	                wrapper
	                    .addClass(DEFAULT)
	                    .removeClass(STATEDISABLED)
	                    .on(HOVEREVENTS, that._toggleHover);

	                element.removeAttr(DISABLED)
	                       .removeAttr(READONLY)
	                       .attr(ARIA_DISABLED, false)
	                       .on("keydown" + ns, proxy(that._keydown, that))
	                       .on("focusout" + ns, proxy(that._blur, that))
	                       .on("focus" + ns, function() {
	                           that._inputWrapper.addClass(FOCUSED);
	                       });

	               arrow.on(CLICK, proxy(that._click, that))
	                   .on(MOUSEDOWN, preventDefault);
	            } else {
	                wrapper
	                    .addClass(disable ? STATEDISABLED : DEFAULT)
	                    .removeClass(disable ? DEFAULT : STATEDISABLED);

	                element.attr(DISABLED, disable)
	                       .attr(READONLY, readonly)
	                       .attr(ARIA_DISABLED, disable);
	            }
	        },

	        readonly: function(readonly) {
	            this._editable({
	                readonly: readonly === undefined ? true : readonly,
	                disable: false
	            });
	        },

	        enable: function(enable) {
	            this._editable({
	                readonly: false,
	                disable: !(enable = enable === undefined ? true : enable)
	            });
	        },

	        destroy: function() {
	            var that = this;

	            Widget.fn.destroy.call(that);

	            that.timeView.destroy();

	            that.element.off(ns);
	            that._arrow.off(ns);
	            that._inputWrapper.off(ns);

	            if (that._form) {
	                that._form.off("reset", that._resetHandler);
	            }
	        },

	        close: function() {
	            this.timeView.close();
	        },

	        open: function() {
	            this.timeView.open();
	        },

	        min: function (value) {
	            return this._option("min", value);
	        },

	        max: function (value) {
	            return this._option("max", value);
	        },

	        value: function(value) {
	            var that = this;

	            if (value === undefined) {
	                return that._value;
	            }

	            that._old = that._update(value);

	            if (that._old === null) {
	                that.element.val("");
	            }

	            that._oldText = that.element.val();
	        },

	        _blur: function() {
	            var that = this,
	                value = that.element.val();

	            that.close();
	            if (value !== that._oldText) {
	                that._change(value);
	            }
	            that._inputWrapper.removeClass(FOCUSED);
	        },

	        _click: function() {
	            var that = this,
	                element = that.element;

	            that.timeView.toggle();

	            if (!support.touch && element[0] !== activeElement()) {
	                element.focus();
	            }
	        },

	        _change: function(value) {
	            var that = this;

	            value = that._update(value);

	            if (+that._old != +value) {
	                that._old = value;
	                that._oldText = that.element.val();

	                if (!that._typing) {
	                    // trigger the DOM change event so any subscriber gets notified
	                    that.element.trigger(CHANGE);
	                }

	                that.trigger(CHANGE);
	            }

	            that._typing = false;
	        },

	        _icon: function() {
	            var that = this,
	                element = that.element,
	                arrow;

	            arrow = element.next("span.k-select");

	            if (!arrow[0]) {
	                arrow = $('<span unselectable="on" class="k-select" aria-label="select"><span class="k-icon k-i-clock"></span></span>').insertAfter(element);
	            }

	            that._arrow = arrow.attr({
	                "role": "button",
	                "aria-controls": that.timeView._timeViewID
	            });
	        },

	        _keydown: function(e) {
	            var that = this,
	                key = e.keyCode,
	                timeView = that.timeView,
	                value = that.element.val();

	            if (timeView.popup.visible() || e.altKey) {
	                timeView.move(e);
	                if (that._dateInput && e.stopImmediatePropagation) {
	                    e.stopImmediatePropagation();
	                }
	            } else if (key === keys.ENTER && value !== that._oldText) {
	                that._change(value);
	            } else {
	                that._typing = true;
	            }
	        },

	        _option: function(option, value) {
	            var that = this,
	                options = that.options;

	            if (value === undefined) {
	                return options[option];
	            }

	            value = that.timeView._parse(value);

	            if (!value) {
	                return;
	            }

	            value = new DATE(+value);

	            options[option] = value;
	            that.timeView.options[option] = value;
	            that.timeView.bind();
	        },

	        _toggleHover: function(e) {
	            $(e.currentTarget).toggleClass(HOVER, e.type === "mouseenter");
	        },

	        _update: function(value) {
	            var that = this,
	                options = that.options,
	                timeView = that.timeView,
	                date = timeView._parse(value);

	            if (!isInRange(date, options.min, options.max)) {
	                date = null;
	            }

	            that._value = date;
	            if (that._dateInput) {
	                that._dateInput.value(date || value);
	            } else {
	                that.element.val(kendo.toString(date || value, options.format, options.culture));
	            }
	            timeView.value(date);

	            return date;
	        },

	        _wrapper: function() {
	            var that = this,
	                element = that.element,
	                wrapper;

	            wrapper = element.parents(".k-timepicker");

	            if (!wrapper[0]) {
	                wrapper = element.wrap(SPAN).parent().addClass("k-picker-wrap k-state-default");
	                wrapper = wrapper.wrap(SPAN).parent();
	            }

	            wrapper[0].style.cssText = element[0].style.cssText;
	            that.wrapper = wrapper.addClass("k-widget k-timepicker k-header")
	                                  .addClass(element[0].className);

	            element.css({
	                width: "100%",
	                height: element[0].style.height
	            });

	            that._inputWrapper = $(wrapper[0].firstChild);
	        },

	        _reset: function() {
	            var that = this,
	                element = that.element,
	                formId = element.attr("form"),
	                form = formId ? $("#" + formId) : element.closest("form");

	            if (form[0]) {
	                that._resetHandler = function() {
	                    that.value(element[0].defaultValue);
	                    that.max(that._initialOptions.max);
	                    that.min(that._initialOptions.min);
	                };

	                that._form = form.on("reset", that._resetHandler);
	            }
	        }
	    });

	    function normalize(options) {
	        var parseFormats = options.parseFormats;

	        options.format = extractFormat(options.format || kendo.getCulture(options.culture).calendars.standard.patterns.t);

	        parseFormats = isArray(parseFormats) ? parseFormats : [parseFormats];
	        parseFormats.splice(0, 0, options.format);
	        options.parseFormats = parseFormats;
	    }

	    function preventDefault(e) {
	        e.preventDefault();
	    }

	    ui.plugin(TimePicker);

	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(422));


/***/ })

/******/ });

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(556);


/***/ }),

/***/ 421:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(0);

/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 556:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(421) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "validator",
	    name: "Validator",
	    category: "web",
	    description: "The Validator offers an easy way to do a client-side form validation.",
	    depends: [ "core" ]
	};

	/* jshint eqnull: true */
	(function($, undefined) {
	    var kendo = window.kendo,
	        Widget = kendo.ui.Widget,
	        NS = ".kendoValidator",
	        INVALIDMSG = "k-invalid-msg",
	        invalidMsgRegExp = new RegExp(INVALIDMSG,'i'),
	        INVALIDINPUT = "k-invalid",
	        VALIDINPUT = "k-valid",
	        emailRegExp = /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/i,
	        urlRegExp = /^(https?|ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i,
	        INPUTSELECTOR = ":input:not(:button,[type=submit],[type=reset],[disabled],[readonly])",
	        CHECKBOXSELECTOR = ":checkbox:not([disabled],[readonly])",
	        NUMBERINPUTSELECTOR = "[type=number],[type=range]",
	        BLUR = "blur",
	        NAME = "name",
	        FORM = "form",
	        NOVALIDATE = "novalidate",
	        //events
	        VALIDATE = "validate",
	        CHANGE = "change",
	        VALIDATE_INPUT = "validateInput",
	        proxy = $.proxy,
	        patternMatcher = function(value, pattern) {
	            if (typeof pattern === "string") {
	                pattern = new RegExp('^(?:' + pattern + ')$');
	            }
	            return pattern.test(value);
	        },
	        matcher = function(input, selector, pattern) {
	            var value = input.val();

	            if (input.filter(selector).length && value !== "") {
	                return patternMatcher(value, pattern);
	            }
	            return true;
	        },
	        hasAttribute = function(input, name) {
	            if (input.length)  {
	                return input[0].attributes[name] != null;
	            }
	            return false;
	        };

	    if (!kendo.ui.validator) {
	        kendo.ui.validator = { rules: {}, messages: {} };
	    }

	    function resolveRules(element) {
	        var resolvers = kendo.ui.validator.ruleResolvers || {},
	            rules = {},
	            name;

	        for (name in resolvers) {
	            $.extend(true, rules, resolvers[name].resolve(element));
	        }
	        return rules;
	    }

	    function decode(value) {
	        return value.replace(/&amp/g, '&amp;')
	            .replace(/&quot;/g, '"')
	            .replace(/&#39;/g, "'")
	            .replace(/&lt;/g, '<')
	            .replace(/&gt;/g, '>');
	    }

	    function numberOfDecimalDigits(value) {
	        value = (value + "").split('.');
	        if (value.length > 1) {
	            return value[1].length;
	        }
	        return 0;
	    }

	    function parseHtml(text) {
	        if ($.parseHTML) {
	            return $($.parseHTML(text));
	        }
	        return $(text);
	    }

	    function searchForMessageContainer(elements, fieldName) {
	        var containers = $(),
	            element,
	            attr;

	        for (var idx = 0, length = elements.length; idx < length; idx++) {
	            element = elements[idx];
	            if (invalidMsgRegExp.test(element.className)) {
	                attr = element.getAttribute(kendo.attr("for"));
	                if (attr === fieldName) {
	                    containers = containers.add(element);
	                }
	            }
	        }
	        return containers;
	    }

	    var Validator = Widget.extend({
	        init: function(element, options) {
	            var that = this,
	                resolved = resolveRules(element),
	                validateAttributeSelector = "[" + kendo.attr("validate") + "!=false]";

	            options = options || {};

	            options.rules = $.extend({}, kendo.ui.validator.rules, resolved.rules, options.rules);
	            options.messages = $.extend({}, kendo.ui.validator.messages, resolved.messages, options.messages);

	            Widget.fn.init.call(that, element, options);

	            that._errorTemplate = kendo.template(that.options.errorTemplate);

	            if (that.element.is(FORM)) {
	                that.element.attr(NOVALIDATE, NOVALIDATE);
	            }

	            that._inputSelector = INPUTSELECTOR + validateAttributeSelector;
	            that._checkboxSelector = CHECKBOXSELECTOR + validateAttributeSelector;

	            that._errors = {};
	            that._attachEvents();
	            that._isValidated = false;
	        },

	        events: [ VALIDATE, CHANGE, VALIDATE_INPUT ],

	        options: {
	            name: "Validator",
	            errorTemplate: '<span class="k-widget k-tooltip k-tooltip-validation">' +
	                '<span class="k-icon k-i-warning"> </span> #=message#</span>',
	            messages: {
	                required: "{0} is required",
	                pattern: "{0} is not valid",
	                min: "{0} should be greater than or equal to {1}",
	                max: "{0} should be smaller than or equal to {1}",
	                step: "{0} is not valid",
	                email: "{0} is not valid email",
	                url: "{0} is not valid URL",
	                date: "{0} is not valid date",
	                dateCompare: "End date should be greater than or equal to the start date"
	            },
	            rules: {
	                required: function(input) {
	                    var checkbox = input.filter("[type=checkbox]").length && !input.is(":checked"),
	                        value = input.val();

	                    return !(hasAttribute(input, "required") && (!value || value === "" || value.length === 0 || checkbox));
	                },
	                pattern: function(input) {
	                    if (input.filter("[type=text],[type=email],[type=url],[type=tel],[type=search],[type=password]").filter("[pattern]").length && input.val() !== "") {
	                        return patternMatcher(input.val(), input.attr("pattern"));
	                    }
	                    return true;
	                },
	                min: function(input) {
	                    if (input.filter(NUMBERINPUTSELECTOR + ",[" + kendo.attr("type") + "=number]").filter("[min]").length && input.val() !== "") {
	                        var min = parseFloat(input.attr("min")) || 0,
	                            val = kendo.parseFloat(input.val());

	                        return min <= val;
	                    }
	                    return true;
	                },
	                max: function(input) {
	                    if (input.filter(NUMBERINPUTSELECTOR + ",[" + kendo.attr("type") + "=number]").filter("[max]").length && input.val() !== "") {
	                        var max = parseFloat(input.attr("max")) || 0,
	                            val = kendo.parseFloat(input.val());

	                        return max >= val;
	                    }
	                    return true;
	                },
	                step: function(input) {
	                    if (input.filter(NUMBERINPUTSELECTOR + ",[" + kendo.attr("type") + "=number]").filter("[step]").length && input.val() !== "") {
	                        var min = parseFloat(input.attr("min")) || 0,
	                            step = parseFloat(input.attr("step")) || 1,
	                            val = parseFloat(input.val()),
	                            decimals = numberOfDecimalDigits(step),
	                            raise;

	                        if (decimals) {
	                            raise = Math.pow(10, decimals);
	                            return ((Math.floor((val-min)*raise))%(step*raise)) / Math.pow(100, decimals) === 0;
	                        }
	                        return ((val-min)%step) === 0;
	                    }
	                    return true;
	                },
	                email: function(input) {
	                    return matcher(input, "[type=email],[" + kendo.attr("type") + "=email]", emailRegExp);
	                },
	                url: function(input) {
	                    return matcher(input, "[type=url],[" + kendo.attr("type") + "=url]", urlRegExp);
	                },
	                date: function(input) {
	                    if (input.filter("[type^=date],[" + kendo.attr("type") + "=date]").length && input.val() !== "") {
	                        return kendo.parseDate(input.val(), input.attr(kendo.attr("format"))) !== null;
	                    }
	                    return true;
	                }
	            },
	            validateOnBlur: true
	        },

	        destroy: function() {
	            Widget.fn.destroy.call(this);

	            this.element.off(NS);
	        },

	        value: function() {
	            if (!this._isValidated) {
	                return false;
	            }

	            return this.errors().length === 0;
	        },

	        _submit: function(e) {
	            if (!this.validate()) {
	                e.stopPropagation();
	                e.stopImmediatePropagation();
	                e.preventDefault();
	                return false;
	            }
	            return true;
	        },

	        _checkElement: function(element) {
	            var state = this.value();

	            this.validateInput(element);

	            if (this.value() !== state) {
	                this.trigger(CHANGE);
	            }
	        },

	        _attachEvents: function() {
	            var that = this;

	            if (that.element.is(FORM)) {
	                that.element.on("submit" + NS, proxy(that._submit, that));
	            }

	            if (that.options.validateOnBlur) {
	                if (!that.element.is(INPUTSELECTOR)) {
	                    that.element.on(BLUR + NS, that._inputSelector, function() {
	                        that._checkElement($(this));
	                    });

	                    that.element.on("click" + NS, that._checkboxSelector, function() {
	                        that._checkElement($(this));
	                    });
	                } else {
	                    that.element.on(BLUR + NS, function() {
	                        that._checkElement(that.element);
	                    });

	                    if (that.element.is(CHECKBOXSELECTOR)) {
	                        that.element.on("click" + NS, function() {
	                            that._checkElement(that.element);
	                        });
	                    }
	                }
	            }
	        },

	        validate: function() {
	            var inputs;
	            var idx;
	            var result = false;
	            var length;

	            var isValid = this.value();

	            this._errors = {};

	            if (!this.element.is(INPUTSELECTOR)) {
	                var invalid = false;

	                inputs = this.element.find(this._inputSelector);

	                for (idx = 0, length = inputs.length; idx < length; idx++) {
	                    if (!this.validateInput(inputs.eq(idx))) {
	                        invalid = true;
	                    }
	                }

	                result = !invalid;
	            } else {
	                result = this.validateInput(this.element);
	            }

	            this.trigger(VALIDATE, { valid: result });

	            if (isValid !== result) {
	                this.trigger(CHANGE);
	            }

	            return result;
	        },

	        validateInput: function(input) {
	            input = $(input);

	            this._isValidated = true;

	            var that = this,
	                template = that._errorTemplate,
	                result = that._checkValidity(input),
	                valid = result.valid,
	                className = "." + INVALIDMSG,
	                fieldName = (input.attr(NAME) || ""),
	                lbl = that._findMessageContainer(fieldName).add(input.next(className).filter(function() {
	                    var element = $(this);
	                    if (element.filter("[" + kendo.attr("for") + "]").length) {
	                        return element.attr(kendo.attr("for")) === fieldName;
	                    }

	                    return true;

	                })).hide(),
	                messageText,
	                wasValid = !input.attr("aria-invalid");
	            input.removeAttr("aria-invalid");

	            if (!valid) {
	                messageText = that._extractMessage(input, result.key);
	                that._errors[fieldName] = messageText;
	                var messageLabel = parseHtml(template({ message: decode(messageText) }));
	                var lblId = lbl.attr('id');

	                that._decorateMessageContainer(messageLabel, fieldName);

	                if (lblId) {
	                    messageLabel.attr('id', lblId);
	                }

	                if (!lbl.replaceWith(messageLabel).length) {
	                    messageLabel.insertAfter(input);
	                }
	                messageLabel.show();

	                input.attr("aria-invalid", true);
	            } else {
	                delete that._errors[fieldName];
	            }

	            if (wasValid !== valid) {
	                this.trigger(VALIDATE_INPUT, { valid: valid, input: input });
	            }

	            input.toggleClass(INVALIDINPUT, !valid);
	            input.toggleClass(VALIDINPUT, valid);

	            return valid;
	        },

	        hideMessages: function() {
	            var that = this,
	                className = "." + INVALIDMSG,
	                element = that.element;

	            if (!element.is(INPUTSELECTOR)) {
	                element.find(className).hide();
	            } else {
	                element.next(className).hide();
	            }
	        },

	        _findMessageContainer: function(fieldName) {
	            var locators = kendo.ui.validator.messageLocators,
	                name,
	                containers = $();

	            for (var idx = 0, length = this.element.length; idx < length; idx++) {
	                containers = containers.add(searchForMessageContainer(this.element[idx].getElementsByTagName("*"), fieldName));
	            }

	            for (name in locators) {
	                containers = containers.add(locators[name].locate(this.element, fieldName));
	            }

	            return containers;
	        },

	        _decorateMessageContainer: function(container, fieldName) {
	            var locators = kendo.ui.validator.messageLocators,
	                name;

	            container.addClass(INVALIDMSG)
	                .attr(kendo.attr("for"), fieldName || "");

	            for (name in locators) {
	                locators[name].decorate(container, fieldName);
	            }

	            container.attr("role", "alert");
	        },

	        _extractMessage: function(input, ruleKey) {
	            var that = this,
	                customMessage = that.options.messages[ruleKey],
	                fieldName = input.attr(NAME);

	            customMessage = kendo.isFunction(customMessage) ? customMessage(input) : customMessage;

	            return kendo.format(input.attr(kendo.attr(ruleKey + "-msg")) || input.attr("validationMessage") || input.attr("title") || customMessage || "",
	                fieldName,
	                input.attr(ruleKey) || input.attr(kendo.attr(ruleKey)));
	        },

	        _checkValidity: function(input) {
	            var rules = this.options.rules,
	                rule;

	            for (rule in rules) {
	                if (!rules[rule].call(this, input)) {
	                    return { valid: false, key: rule };
	                }
	            }

	            return { valid: true };
	        },

	        errors: function() {
	            var results = [],
	                errors = this._errors,
	                error;

	            for (error in errors) {
	                results.push(errors[error]);
	            }
	            return results;
	        }
	    });

	    kendo.ui.plugin(Validator);
	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(422));


/***/ })

/******/ });

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(557);


/***/ }),

/***/ 421:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(0);

/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 457:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(14);

/***/ }),

/***/ 487:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(7);

/***/ }),

/***/ 557:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(421), __webpack_require__(457), __webpack_require__(487) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "view",
	    name: "View",
	    category: "framework",
	    description: "The View class instantiates and handles the events of a certain screen from the application.",
	    depends: [ "core", "binder", "fx" ],
	    hidden: false
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        Observable = kendo.Observable,
	        SCRIPT = "SCRIPT",
	        INIT = "init",
	        SHOW = "show",
	        HIDE = "hide",
	        TRANSITION_START = "transitionStart",
	        TRANSITION_END = "transitionEnd",

	        ATTACH = "attach",
	        DETACH = "detach",
	        sizzleErrorRegExp = /unrecognized expression/;

	    var View = Observable.extend({
	        init: function(content, options) {
	            var that = this;
	            options = options || {};

	            Observable.fn.init.call(that);
	            that.content = content;
	            that.id = kendo.guid();
	            that.tagName = options.tagName || "div";
	            that.model = options.model;
	            that._wrap = options.wrap !== false;
	            this._evalTemplate = options.evalTemplate || false;
	            that._fragments = {};

	            that.bind([ INIT, SHOW, HIDE, TRANSITION_START, TRANSITION_END ], options);
	        },

	        render: function(container) {
	            var that = this,
	                notInitialized = !that.element;

	            // The order below matters - kendo.bind should happen when the element is in the DOM, and show should be triggered after init.

	            if (notInitialized) {
	                that.element = that._createElement();
	            }

	            if (container) {
	                $(container).append(that.element);
	            }

	            if (notInitialized) {
	                kendo.bind(that.element, that.model);
	                that.trigger(INIT);
	            }

	            if (container) {
	                that._eachFragment(ATTACH);
	                that.trigger(SHOW);
	            }

	            return that.element;
	        },

	        clone: function() {
	            return new ViewClone(this);
	        },

	        triggerBeforeShow: function() {
	            return true;
	        },

	        triggerBeforeHide: function() {
	            return true;
	        },

	        showStart: function() {
	            this.element.css("display", "");
	        },

	        showEnd: function() {
	        },

	        hideEnd: function() {
	            this.hide();
	        },

	        beforeTransition: function(type){
	            this.trigger(TRANSITION_START, { type: type });
	        },

	        afterTransition: function(type){
	            this.trigger(TRANSITION_END, { type: type });
	        },

	        hide: function() {
	            this._eachFragment(DETACH);
	            this.element.detach();
	            this.trigger(HIDE);
	        },

	        destroy: function() {
	            var element = this.element;

	            if (element) {
	                kendo.unbind(element);
	                kendo.destroy(element);
	                element.remove();
	            }
	        },

	        fragments: function(fragments) {
	            $.extend(this._fragments, fragments);
	        },

	        _eachFragment: function(methodName) {
	            for (var placeholder in this._fragments) {
	                this._fragments[placeholder][methodName](this, placeholder);
	            }
	        },

	        _createElement: function() {
	            var that = this,
	                wrapper = "<" + that.tagName + " />",
	                element,
	                content;

	            try {
	                content = $(document.getElementById(that.content) || that.content); // support passing id without #

	                if (content[0].tagName === SCRIPT) {
	                    content = content.html();
	                }
	            } catch(e) {
	                if (sizzleErrorRegExp.test(e.message)) {
	                    content = that.content;
	                }
	            }

	            if (typeof content === "string") {
	                content = content.replace(/^\s+|\s+$/g, '');
	                if (that._evalTemplate) {
	                    content = kendo.template(content)(that.model || {});
	                }

	                element = $(wrapper).append(content);
	                // drop the wrapper if asked - this seems like the easiest (although not very intuitive) way to avoid messing up templates with questionable content, like this one for instance:
	                // <script id="my-template">
	                // foo
	                // <span> Span </span>
	                // </script>
	                if (!that._wrap) {
	                   element = element.contents();
	                }
	            } else {
	                element = content;
	                if (that._evalTemplate) {
	                    var result = $(kendo.template($("<div />").append(element.clone(true)).html())(that.model || {}));

	                    // template uses DOM
	                    if ($.contains(document, element[0])) {
	                        element.replaceWith(result);
	                    }

	                    element = result;
	                }
	                if (that._wrap) {
	                    element = element.wrapAll(wrapper).parent();
	                }
	            }

	            return element;
	        }
	    });

	    var ViewClone = kendo.Class.extend({
	        init: function(view) {
	            $.extend(this, {
	                element: view.element.clone(true),
	                transition: view.transition,
	                id: view.id
	            });

	            view.element.parent().append(this.element);
	        },

	        hideEnd: function() {
	            this.element.remove();
	        },

	        beforeTransition: $.noop,
	        afterTransition: $.noop
	    });

	    var Layout = View.extend({
	        init: function(content, options) {
	            View.fn.init.call(this, content, options);
	            this.containers = {};
	        },

	        container: function(selector) {
	            var container = this.containers[selector];

	            if (!container) {
	                container = this._createContainer(selector);
	                this.containers[selector] = container;
	            }

	            return container;
	        },

	        showIn: function(selector, view, transition) {
	            this.container(selector).show(view, transition);
	        },

	        _createContainer: function(selector) {
	            var root = this.render(),
	                element = root.find(selector),
	                container;

	            if (!element.length && root.is(selector)) {
	                if (root.is(selector)) {
	                    element = root;
	                } else {

	                    throw new Error("can't find a container with the specified " + selector + " selector");
	                }
	            }

	            container = new ViewContainer(element);

	            container.bind("accepted", function(e) {
	                e.view.render(element);
	            });

	            return container;
	        }
	    });

	    var Fragment = View.extend({
	        attach: function(view, placeholder) {
	            view.element.find(placeholder).replaceWith(this.render());
	        },

	        detach: function() {
	        }
	    });

	    var transitionRegExp = /^(\w+)(:(\w+))?( (\w+))?$/;

	    function parseTransition(transition) {
	        if (!transition){
	            return {};
	        }

	        var matches = transition.match(transitionRegExp) || [];

	        return {
	            type: matches[1],
	            direction: matches[3],
	            reverse: matches[5] === "reverse"
	        };
	    }

	    var ViewContainer = Observable.extend({
	        init: function(container) {
	            Observable.fn.init.call(this);
	            this.container = container;
	            this.history = [];
	            this.view = null;
	            this.running = false;
	        },

	        after: function() {
	            this.running = false;
	            this.trigger("complete", {view: this.view});
	            this.trigger("after");
	        },

	        end: function() {
	            this.view.showEnd();
	            this.previous.hideEnd();
	            this.after();
	        },

	        show: function(view, transition, locationID) {
	            if (!view.triggerBeforeShow() || (this.view && !this.view.triggerBeforeHide())) {
	                this.trigger("after");
	                return false;
	            }

	            locationID = locationID || view.id;

	            var that = this,
	                current = (view === that.view) ? view.clone() : that.view,
	                history = that.history,
	                previousEntry = history[history.length - 2] || {},
	                back = previousEntry.id === locationID,
	                // If explicit transition is set, it will be with highest priority
	                // Next we will try using the history record transition or the view transition configuration
	                theTransition = transition || ( back ? history[history.length - 1].transition : view.transition ),
	                transitionData = parseTransition(theTransition);

	            if (that.running) {
	                that.effect.stop();
	            }

	            if (theTransition === "none") {
	                theTransition = null;
	            }

	            that.trigger("accepted", { view: view });
	            that.view = view;
	            that.previous = current;
	            that.running = true;

	            if (!back) {
	                history.push({ id: locationID, transition: theTransition });
	            } else {
	                history.pop();
	            }

	            if (!current) {
	                view.showStart();
	                view.showEnd();
	                that.after();
	                return true;
	            }

	            if (!theTransition || !kendo.effects.enabled) {
	                view.showStart();
	                that.end();
	            } else {
	                // hide the view element before init/show - prevents blinks on iPad
	                // the replace effect will remove this class
	                view.element.addClass("k-fx-hidden");
	                view.showStart();
	                // do not reverse the explicit transition
	                if (back && !transition) {
	                    transitionData.reverse = !transitionData.reverse;
	                }

	                that.effect = kendo.fx(view.element).replace(current.element, transitionData.type)
	                    .beforeTransition(function() {
	                        view.beforeTransition("show");
	                        current.beforeTransition("hide");
	                    })
	                    .afterTransition(function() {
	                        view.afterTransition("show");
	                        current.afterTransition("hide");
	                    })
	                    .direction(transitionData.direction)
	                    .setReverse(transitionData.reverse);

	                that.effect.run().then(function() { that.end(); });
	            }

	            return true;
	        }
	    });

	    kendo.ViewContainer = ViewContainer;
	    kendo.Fragment = Fragment;
	    kendo.Layout = Layout;
	    kendo.View = View;
	    kendo.ViewClone = ViewClone;

	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(422));


/***/ })

/******/ });

/***/ }),
/* 38 */
/***/ (function(module, exports) {

/* globals __VUE_SSR_CONTEXT__ */

// this module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle

module.exports = function normalizeComponent (
  rawScriptExports,
  compiledTemplate,
  injectStyles,
  scopeId,
  moduleIdentifier /* server only */
) {
  var esModule
  var scriptExports = rawScriptExports = rawScriptExports || {}

  // ES6 modules interop
  var type = typeof rawScriptExports.default
  if (type === 'object' || type === 'function') {
    esModule = rawScriptExports
    scriptExports = rawScriptExports.default
  }

  // Vue.extend constructor export interop
  var options = typeof scriptExports === 'function'
    ? scriptExports.options
    : scriptExports

  // render functions
  if (compiledTemplate) {
    options.render = compiledTemplate.render
    options.staticRenderFns = compiledTemplate.staticRenderFns
  }

  // scopedId
  if (scopeId) {
    options._scopeId = scopeId
  }

  var hook
  if (moduleIdentifier) { // server build
    hook = function (context) {
      // 2.3 injection
      context =
        context || // cached call
        (this.$vnode && this.$vnode.ssrContext) || // stateful
        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
      // 2.2 with runInNewContext: true
      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__
      }
      // inject component styles
      if (injectStyles) {
        injectStyles.call(this, context)
      }
      // register component module identifier for async chunk inferrence
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier)
      }
    }
    // used by ssr in case component is cached and beforeCreate
    // never gets called
    options._ssrRegister = hook
  } else if (injectStyles) {
    hook = injectStyles
  }

  if (hook) {
    var functional = options.functional
    var existing = functional
      ? options.render
      : options.beforeCreate
    if (!functional) {
      // inject component registration as beforeCreate hook
      options.beforeCreate = existing
        ? [].concat(existing, hook)
        : [hook]
    } else {
      // register for functioal component in vue file
      options.render = function renderWithStyleInjection (h, context) {
        hook.call(context)
        return existing(h, context)
      }
    }
  }

  return {
    esModule: esModule,
    exports: scriptExports,
    options: options
  }
}


/***/ }),
/* 39 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {


/**
 * First we will load all of this project's JavaScript dependencies which
 * includes Vue and other libraries. It is a great starting point when
 * building robust, powerful web applications using Vue and Laravel.
 */

__webpack_require__(61);

window.Vue = __webpack_require__(115);

/**
 * Next, we will create a fresh Vue application instance and attach it to
 * the page. Then, you may begin adding components to this application
 * or customize the JavaScript scaffolding to fit your unique needs.
 */

Vue.component('example', __webpack_require__(111));
Vue.component('grades', __webpack_require__(112));

var app = new Vue({
  el: '#app'
});

/***/ }),
/* 41 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
 * alertifyjs 1.10.0 http://alertifyjs.com
 * AlertifyJS is a javascript framework for developing pretty browser dialogs and notifications.
 * Copyright 2017 Mohammad Younes <Mohammad@alertifyjs.com> (http://alertifyjs.com) 
 * Licensed under GPL 3 <https://opensource.org/licenses/gpl-3.0>*/
( function ( window ) {
    'use strict';
    
    /**
     * Keys enum
     * @type {Object}
     */
    var keys = {
        ENTER: 13,
        ESC: 27,
        F1: 112,
        F12: 123,
        LEFT: 37,
        RIGHT: 39
    };
    /**
     * Default options 
     * @type {Object}
     */
    var defaults = {
        autoReset:true,
        basic:false,
        closable:true,
        closableByDimmer:true,
        frameless:false,
        maintainFocus:true, //global default not per instance, applies to all dialogs
        maximizable:true,
        modal:true,
        movable:true,
        moveBounded:false,
        overflow:true,
        padding: true,
        pinnable:true,
        pinned:true,
        preventBodyShift:false, //global default not per instance, applies to all dialogs
        resizable:true,
        startMaximized:false,
        transition:'pulse',
        notifier:{
            delay:5,
            position:'bottom-right',
            closeButton:false
        },
        glossary:{
            title:'AlertifyJS',
            ok: 'OK',
            cancel: 'Cancel',
            acccpt: 'Accept',
            deny: 'Deny',
            confirm: 'Confirm',
            decline: 'Decline',
            close: 'Close',
            maximize: 'Maximize',
            restore: 'Restore',
        },
        theme:{
            input:'ajs-input',
            ok:'ajs-ok',
            cancel:'ajs-cancel',
        }
    };
    
    //holds open dialogs instances
    var openDialogs = [];

    /**
     * [Helper]  Adds the specified class(es) to the element.
     *
     * @element {node}      The element
     * @className {string}  One or more space-separated classes to be added to the class attribute of the element.
     * 
     * @return {undefined}
     */
    function addClass(element,classNames){
        element.className += ' ' + classNames;
    }
    
    /**
     * [Helper]  Removes the specified class(es) from the element.
     *
     * @element {node}      The element
     * @className {string}  One or more space-separated classes to be removed from the class attribute of the element.
     * 
     * @return {undefined}
     */
    function removeClass(element, classNames) {
        var original = element.className.split(' ');
        var toBeRemoved = classNames.split(' ');
        for (var x = 0; x < toBeRemoved.length; x += 1) {
            var index = original.indexOf(toBeRemoved[x]);
            if (index > -1){
                original.splice(index,1);
            }
        }
        element.className = original.join(' ');
    }

    /**
     * [Helper]  Checks if the document is RTL
     *
     * @return {Boolean} True if the document is RTL, false otherwise.
     */
    function isRightToLeft(){
        return window.getComputedStyle(document.body).direction === 'rtl';
    }
    /**
     * [Helper]  Get the document current scrollTop
     *
     * @return {Number} current document scrollTop value
     */
    function getScrollTop(){
        return ((document.documentElement && document.documentElement.scrollTop) || document.body.scrollTop);
    }

    /**
     * [Helper]  Get the document current scrollLeft
     *
     * @return {Number} current document scrollLeft value
     */
    function getScrollLeft(){
        return ((document.documentElement && document.documentElement.scrollLeft) || document.body.scrollLeft);
    }

    /**
    * Helper: clear contents
    *
    */
    function clearContents(element){
        while (element.lastChild) {
            element.removeChild(element.lastChild);
        }
    }
    /**
     * Extends a given prototype by merging properties from base into sub.
     *
     * @sub {Object} sub The prototype being overwritten.
     * @base {Object} base The prototype being written.
     *
     * @return {Object} The extended prototype.
     */
    function copy(src) {
        if(null === src){
            return src;
        }
        var cpy;
        if(Array.isArray(src)){
            cpy = [];
            for(var x=0;x<src.length;x+=1){
                cpy.push(copy(src[x]));
            }
            return cpy;
        }
      
        if(src instanceof Date){
            return new Date(src.getTime());
        }
      
        if(src instanceof RegExp){
            cpy = new RegExp(src.source);
            cpy.global = src.global;
            cpy.ignoreCase = src.ignoreCase;
            cpy.multiline = src.multiline;
            cpy.lastIndex = src.lastIndex;
            return cpy;
        }
        
        if(typeof src === 'object'){
            cpy = {};
            // copy dialog pototype over definition.
            for (var prop in src) {
                if (src.hasOwnProperty(prop)) {
                    cpy[prop] = copy(src[prop]);
                }
            }
            return cpy;
        }
        return src;
    }
    /**
      * Helper: destruct the dialog
      *
      */
    function destruct(instance, initialize){
        //delete the dom and it's references.
        var root = instance.elements.root;
        root.parentNode.removeChild(root);
        delete instance.elements;
        //copy back initial settings.
        instance.settings = copy(instance.__settings);
        //re-reference init function.
        instance.__init = initialize;
        //delete __internal variable to allow re-initialization.
        delete instance.__internal;
    }

    /**
     * Use a closure to return proper event listener method. Try to use
     * `addEventListener` by default but fallback to `attachEvent` for
     * unsupported browser. The closure simply ensures that the test doesn't
     * happen every time the method is called.
     *
     * @param    {Node}     el    Node element
     * @param    {String}   event Event type
     * @param    {Function} fn    Callback of event
     * @return   {Function}
     */
    var on = (function () {
        if (document.addEventListener) {
            return function (el, event, fn, useCapture) {
                el.addEventListener(event, fn, useCapture === true);
            };
        } else if (document.attachEvent) {
            return function (el, event, fn) {
                el.attachEvent('on' + event, fn);
            };
        }
    }());

    /**
     * Use a closure to return proper event listener method. Try to use
     * `removeEventListener` by default but fallback to `detachEvent` for
     * unsupported browser. The closure simply ensures that the test doesn't
     * happen every time the method is called.
     *
     * @param    {Node}     el    Node element
     * @param    {String}   event Event type
     * @param    {Function} fn    Callback of event
     * @return   {Function}
     */
    var off = (function () {
        if (document.removeEventListener) {
            return function (el, event, fn, useCapture) {
                el.removeEventListener(event, fn, useCapture === true);
            };
        } else if (document.detachEvent) {
            return function (el, event, fn) {
                el.detachEvent('on' + event, fn);
            };
        }
    }());

    /**
     * Prevent default event from firing
     *
     * @param  {Event} event Event object
     * @return {undefined}

    function prevent ( event ) {
        if ( event ) {
            if ( event.preventDefault ) {
                event.preventDefault();
            } else {
                event.returnValue = false;
            }
        }
    }
    */
    var transition = (function () {
        var t, type;
        var supported = false;
        var transitions = {
            'animation'        : 'animationend',
            'OAnimation'       : 'oAnimationEnd oanimationend',
            'msAnimation'      : 'MSAnimationEnd',
            'MozAnimation'     : 'animationend',
            'WebkitAnimation'  : 'webkitAnimationEnd'
        };

        for (t in transitions) {
            if (document.documentElement.style[t] !== undefined) {
                type = transitions[t];
                supported = true;
                break;
            }
        }

        return {
            type: type,
            supported: supported
        };
    }());

    /**
    * Creates event handler delegate that sends the instance as last argument.
    * 
    * @return {Function}    a function wrapper which sends the instance as last argument.
    */
    function delegate(context, method) {
        return function () {
            if (arguments.length > 0) {
                var args = [];
                for (var x = 0; x < arguments.length; x += 1) {
                    args.push(arguments[x]);
                }
                args.push(context);
                return method.apply(context, args);
            }
            return method.apply(context, [null, context]);
        };
    }
    /**
    * Helper for creating a dialog close event.
    * 
    * @return {object}
    */
    function createCloseEvent(index, button) {
        return {
            index: index,
            button: button,
            cancel: false
        };
    }
    /**
    * Helper for dispatching events.
    *
    * @param  {string} evenType The type of the event to disptach.
    * @param  {object} instance The dialog instance disptaching the event.
    *
    * @return   {any}   The result of the invoked function.
    */
    function dispatchEvent(eventType, instance) {
        if ( typeof instance.get(eventType) === 'function' ) {
            return instance.get(eventType).call(instance);
        }
    }


    /**
     * Super class for all dialogs
     *
     * @return {Object}		base dialog prototype
     */
    var dialog = (function () {
        var //holds the list of used keys.
            usedKeys = [],
            //dummy variable, used to trigger dom reflow.
            reflow = null,
            //condition for detecting safari
            isSafari = window.navigator.userAgent.indexOf('Safari') > -1 && window.navigator.userAgent.indexOf('Chrome') < 0,
            //dialog building blocks
            templates = {
                dimmer:'<div class="ajs-dimmer"></div>',
                /*tab index required to fire click event before body focus*/
                modal: '<div class="ajs-modal" tabindex="0"></div>',
                dialog: '<div class="ajs-dialog" tabindex="0"></div>',
                reset: '<button class="ajs-reset"></button>',
                commands: '<div class="ajs-commands"><button class="ajs-pin"></button><button class="ajs-maximize"></button><button class="ajs-close"></button></div>',
                header: '<div class="ajs-header"></div>',
                body: '<div class="ajs-body"></div>',
                content: '<div class="ajs-content"></div>',
                footer: '<div class="ajs-footer"></div>',
                buttons: { primary: '<div class="ajs-primary ajs-buttons"></div>', auxiliary: '<div class="ajs-auxiliary ajs-buttons"></div>' },
                button: '<button class="ajs-button"></button>',
                resizeHandle: '<div class="ajs-handle"></div>',
            },
            //common class names
            classes = {
                animationIn: 'ajs-in',
                animationOut: 'ajs-out',
                base: 'alertify',
                basic:'ajs-basic',
                capture: 'ajs-capture',
                closable:'ajs-closable',
                fixed: 'ajs-fixed',
                frameless:'ajs-frameless',
                hidden: 'ajs-hidden',
                maximize: 'ajs-maximize',
                maximized: 'ajs-maximized',
                maximizable:'ajs-maximizable',
                modeless: 'ajs-modeless',
                movable: 'ajs-movable',
                noSelection: 'ajs-no-selection',
                noOverflow: 'ajs-no-overflow',
                noPadding:'ajs-no-padding',
                pin:'ajs-pin',
                pinnable:'ajs-pinnable',
                prefix: 'ajs-',
                resizable: 'ajs-resizable',
                restore: 'ajs-restore',
                shake:'ajs-shake',
                unpinned:'ajs-unpinned',
            };

        /**
         * Helper: initializes the dialog instance
         * 
         * @return	{Number}	The total count of currently open modals.
         */
        function initialize(instance){
            
            if(!instance.__internal){

                //no need to expose init after this.
                delete instance.__init;
              
                //keep a copy of initial dialog settings
                if(!instance.__settings){
                    instance.__settings = copy(instance.settings);
                }
                //in case the script was included before body.
                //after first dialog gets initialized, it won't be null anymore!
                if(null === reflow){
                    // set tabindex attribute on body element this allows script to give it
                    // focus after the dialog is closed
                    document.body.setAttribute( 'tabindex', '0' );
                }

                //get dialog buttons/focus setup
                var setup;
                if(typeof instance.setup === 'function'){
                    setup = instance.setup();
                    setup.options = setup.options  || {};
                    setup.focus = setup.focus  || {};
                }else{
                    setup = {
                        buttons:[],
                        focus:{
                            element:null,
                            select:false
                        },
                        options:{
                        }
                    };
                }
                
                //initialize hooks object.
                if(typeof instance.hooks !== 'object'){
                    instance.hooks = {};
                }

                //copy buttons defintion
                var buttonsDefinition = [];
                if(Array.isArray(setup.buttons)){
                    for(var b=0;b<setup.buttons.length;b+=1){
                        var ref  = setup.buttons[b],
                            cpy = {};
                        for (var i in ref) {
                            if (ref.hasOwnProperty(i)) {
                                cpy[i] = ref[i];
                            }
                        }
                        buttonsDefinition.push(cpy);
                    }
                }

                var internal = instance.__internal = {
                    /**
                     * Flag holding the open state of the dialog
                     * 
                     * @type {Boolean}
                     */
                    isOpen:false,
                    /**
                     * Active element is the element that will receive focus after
                     * closing the dialog. It defaults as the body tag, but gets updated
                     * to the last focused element before the dialog was opened.
                     *
                     * @type {Node}
                     */
                    activeElement:document.body,
                    timerIn:undefined,
                    timerOut:undefined,
                    buttons: buttonsDefinition,
                    focus: setup.focus,
                    options: {
                        title: undefined,
                        modal: undefined,
                        basic:undefined,
                        frameless:undefined,
                        pinned: undefined,
                        movable: undefined,
                        moveBounded:undefined,
                        resizable: undefined,
                        autoReset: undefined,
                        closable: undefined,
                        closableByDimmer: undefined,
                        maximizable: undefined,
                        startMaximized: undefined,
                        pinnable: undefined,
                        transition: undefined,
                        padding:undefined,
                        overflow:undefined,
                        onshow:undefined,
                        onclosing:undefined,
                        onclose:undefined,
                        onfocus:undefined,
                        onmove:undefined,
                        onmoved:undefined,
                        onresize:undefined,
                        onresized:undefined,
                        onmaximize:undefined,
                        onmaximized:undefined,
                        onrestore:undefined,
                        onrestored:undefined
                    },
                    resetHandler:undefined,
                    beginMoveHandler:undefined,
                    beginResizeHandler:undefined,
                    bringToFrontHandler:undefined,
                    modalClickHandler:undefined,
                    buttonsClickHandler:undefined,
                    commandsClickHandler:undefined,
                    transitionInHandler:undefined,
                    transitionOutHandler:undefined,
                    destroy:undefined
                };

                var elements = {};
                //root node
                elements.root = document.createElement('div');
                
                elements.root.className = classes.base + ' ' + classes.hidden + ' ';

                elements.root.innerHTML = templates.dimmer + templates.modal;
                
                //dimmer
                elements.dimmer = elements.root.firstChild;

                //dialog
                elements.modal = elements.root.lastChild;
                elements.modal.innerHTML = templates.dialog;
                elements.dialog = elements.modal.firstChild;
                elements.dialog.innerHTML = templates.reset + templates.commands + templates.header + templates.body + templates.footer + templates.resizeHandle + templates.reset;

                //reset links
                elements.reset = [];
                elements.reset.push(elements.dialog.firstChild);
                elements.reset.push(elements.dialog.lastChild);
                
                //commands
                elements.commands = {};
                elements.commands.container = elements.reset[0].nextSibling;
                elements.commands.pin = elements.commands.container.firstChild;
                elements.commands.maximize = elements.commands.pin.nextSibling;
                elements.commands.close = elements.commands.maximize.nextSibling;
                
                //header
                elements.header = elements.commands.container.nextSibling;

                //body
                elements.body = elements.header.nextSibling;
                elements.body.innerHTML = templates.content;
                elements.content = elements.body.firstChild;

                //footer
                elements.footer = elements.body.nextSibling;
                elements.footer.innerHTML = templates.buttons.auxiliary + templates.buttons.primary;
                
                //resize handle
                elements.resizeHandle = elements.footer.nextSibling;

                //buttons
                elements.buttons = {};
                elements.buttons.auxiliary = elements.footer.firstChild;
                elements.buttons.primary = elements.buttons.auxiliary.nextSibling;
                elements.buttons.primary.innerHTML = templates.button;
                elements.buttonTemplate = elements.buttons.primary.firstChild;
                //remove button template
                elements.buttons.primary.removeChild(elements.buttonTemplate);
                               
                for(var x=0; x < instance.__internal.buttons.length; x+=1) {
                    var button = instance.__internal.buttons[x];
                    
                    // add to the list of used keys.
                    if(usedKeys.indexOf(button.key) < 0){
                        usedKeys.push(button.key);
                    }

                    button.element = elements.buttonTemplate.cloneNode();
                    button.element.innerHTML = button.text;
                    if(typeof button.className === 'string' &&  button.className !== ''){
                        addClass(button.element, button.className);
                    }
                    for(var key in button.attrs){
                        if(key !== 'className' && button.attrs.hasOwnProperty(key)){
                            button.element.setAttribute(key, button.attrs[key]);
                        }
                    }
                    if(button.scope === 'auxiliary'){
                        elements.buttons.auxiliary.appendChild(button.element);
                    }else{
                        elements.buttons.primary.appendChild(button.element);
                    }
                }
                //make elements pubic
                instance.elements = elements;
                
                //save event handlers delegates
                internal.resetHandler = delegate(instance, onReset);
                internal.beginMoveHandler = delegate(instance, beginMove);
                internal.beginResizeHandler = delegate(instance, beginResize);
                internal.bringToFrontHandler = delegate(instance, bringToFront);
                internal.modalClickHandler = delegate(instance, modalClickHandler);
                internal.buttonsClickHandler = delegate(instance, buttonsClickHandler);
                internal.commandsClickHandler = delegate(instance, commandsClickHandler);
                internal.transitionInHandler = delegate(instance, handleTransitionInEvent);
                internal.transitionOutHandler = delegate(instance, handleTransitionOutEvent);

                //settings
                for(var opKey in internal.options){
                    if(setup.options[opKey] !== undefined){
                        // if found in user options
                        instance.set(opKey, setup.options[opKey]);
                    }else if(alertify.defaults.hasOwnProperty(opKey)) {
                        // else if found in defaults options
                        instance.set(opKey, alertify.defaults[opKey]);
                    }else if(opKey === 'title' ) {
                        // else if title key, use alertify.defaults.glossary
                        instance.set(opKey, alertify.defaults.glossary[opKey]);
                    }
                }

                // allow dom customization
                if(typeof instance.build === 'function'){
                    instance.build();
                }
            }
            
            //add to the end of the DOM tree.
            document.body.appendChild(instance.elements.root);
        }

        /**
         * Helper: maintains scroll position
         *
         */
        var scrollX, scrollY;
        function saveScrollPosition(){
            scrollX = getScrollLeft();
            scrollY = getScrollTop();
        }
        function restoreScrollPosition(){
            window.scrollTo(scrollX, scrollY);
        }

        /**
         * Helper: adds/removes no-overflow class from body
         *
         */
        function ensureNoOverflow(){
            var requiresNoOverflow = 0;
            for(var x=0;x<openDialogs.length;x+=1){
                var instance = openDialogs[x];
                if(instance.isModal() || instance.isMaximized()){
                    requiresNoOverflow+=1;
                }
            }
            if(requiresNoOverflow === 0 && document.body.className.indexOf(classes.noOverflow) >= 0){
                //last open modal or last maximized one
                removeClass(document.body, classes.noOverflow);
                preventBodyShift(false);
            }else if(requiresNoOverflow > 0 && document.body.className.indexOf(classes.noOverflow) < 0){
                //first open modal or first maximized one
                preventBodyShift(true);
                addClass(document.body, classes.noOverflow);
            }
        }
        var top = '', topScroll = 0;
        /**
         * Helper: prevents body shift.
         *
         */
        function preventBodyShift(add){
            if(alertify.defaults.preventBodyShift && document.documentElement.scrollHeight > document.documentElement.clientHeight){
                if(add ){//&& openDialogs[openDialogs.length-1].elements.dialog.clientHeight <= document.documentElement.clientHeight){
                    topScroll = scrollY;
                    top = window.getComputedStyle(document.body).top;
                    addClass(document.body, classes.fixed);
                    document.body.style.top = -scrollY + 'px';
                } else {
                    scrollY = topScroll;
                    document.body.style.top = top;
                    removeClass(document.body, classes.fixed);
                    restoreScrollPosition();
                }
            }
        }
		
        /**
         * Sets the name of the transition used to show/hide the dialog
         * 
         * @param {Object} instance The dilog instance.
         *
         */
        function updateTransition(instance, value, oldValue){
            if(typeof oldValue === 'string'){
                removeClass(instance.elements.root,classes.prefix +  oldValue);
            }
            addClass(instance.elements.root, classes.prefix + value);
            reflow = instance.elements.root.offsetWidth;
        }
		
        /**
         * Toggles the dialog display mode
         *
         * @param {Object} instance The dilog instance.
         *
         * @return {undefined}
         */
        function updateDisplayMode(instance){
            if(instance.get('modal')){

                //make modal
                removeClass(instance.elements.root, classes.modeless);

                //only if open
                if(instance.isOpen()){
                    unbindModelessEvents(instance);

                    //in case a pinned modless dialog was made modal while open.
                    updateAbsPositionFix(instance);

                    ensureNoOverflow();
                }
            }else{
                //make modelss
                addClass(instance.elements.root, classes.modeless);

                //only if open
                if(instance.isOpen()){
                    bindModelessEvents(instance);

                    //in case pin/unpin was called while a modal is open
                    updateAbsPositionFix(instance);

                    ensureNoOverflow();
                }
            }
        }

        /**
         * Toggles the dialog basic view mode 
         *
         * @param {Object} instance The dilog instance.
         *
         * @return {undefined}
         */
        function updateBasicMode(instance){
            if (instance.get('basic')) {
                // add class
                addClass(instance.elements.root, classes.basic);
            } else {
                // remove class
                removeClass(instance.elements.root, classes.basic);
            }
        }

        /**
         * Toggles the dialog frameless view mode 
         *
         * @param {Object} instance The dilog instance.
         *
         * @return {undefined}
         */
        function updateFramelessMode(instance){
            if (instance.get('frameless')) {
                // add class
                addClass(instance.elements.root, classes.frameless);
            } else {
                // remove class
                removeClass(instance.elements.root, classes.frameless);
            }
        }
		
        /**
         * Helper: Brings the modeless dialog to front, attached to modeless dialogs.
         *
         * @param {Event} event Focus event
         * @param {Object} instance The dilog instance.
         *
         * @return {undefined}
         */
        function bringToFront(event, instance){
            
            // Do not bring to front if preceeded by an open modal
            var index = openDialogs.indexOf(instance);
            for(var x=index+1;x<openDialogs.length;x+=1){
                if(openDialogs[x].isModal()){
                    return;
                }
            }
			
            // Bring to front by making it the last child.
            if(document.body.lastChild !== instance.elements.root){
                document.body.appendChild(instance.elements.root);
                //also make sure its at the end of the list
                openDialogs.splice(openDialogs.indexOf(instance),1);
                openDialogs.push(instance);
                setFocus(instance);
            }
			
            return false;
        }
		
        /**
         * Helper: reflects dialogs options updates
         *
         * @param {Object} instance The dilog instance.
         * @param {String} option The updated option name.
         *
         * @return	{undefined}	
         */
        function optionUpdated(instance, option, oldValue, newValue){
            switch(option){
            case 'title':
                instance.setHeader(newValue);
                break;
            case 'modal':
                updateDisplayMode(instance);
                break;
            case 'basic':
                updateBasicMode(instance);
                break;
            case 'frameless':
                updateFramelessMode(instance);
                break;
            case 'pinned':
                updatePinned(instance);
                break;
            case 'closable':
                updateClosable(instance);
                break;
            case 'maximizable':
                updateMaximizable(instance);
                break;
            case 'pinnable':
                updatePinnable(instance);
                break;
            case 'movable':
                updateMovable(instance);
                break;
            case 'resizable':
                updateResizable(instance);
                break;
            case 'transition':
                updateTransition(instance,newValue, oldValue);
                break;
            case 'padding':
                if(newValue){
                    removeClass(instance.elements.root, classes.noPadding);
                }else if(instance.elements.root.className.indexOf(classes.noPadding) < 0){
                    addClass(instance.elements.root, classes.noPadding);
                }
                break;
            case 'overflow':
                if(newValue){
                    removeClass(instance.elements.root, classes.noOverflow);
                }else if(instance.elements.root.className.indexOf(classes.noOverflow) < 0){
                    addClass(instance.elements.root, classes.noOverflow);
                }
                break;
            case 'transition':
                updateTransition(instance,newValue, oldValue);
                break;
            }

            // internal on option updated event
            if(typeof instance.hooks.onupdate === 'function'){
                instance.hooks.onupdate.call(instance, option, oldValue, newValue);
            }
        }
		
        /**
         * Helper: reflects dialogs options updates
         *
         * @param {Object} instance The dilog instance.
         * @param {Object} obj The object to set/get a value on/from.
         * @param {Function} callback The callback function to call if the key was found.
         * @param {String|Object} key A string specifying a propery name or a collection of key value pairs.
         * @param {Object} value Optional, the value associated with the key (in case it was a string).
         * @param {String} option The updated option name.
         *
         * @return	{Object} result object 
         *	The result objects has an 'op' property, indicating of this is a SET or GET operation.
         *		GET: 
         *		- found: a flag indicating if the key was found or not.
         *		- value: the property value.
         *		SET:
         *		- items: a list of key value pairs of the properties being set.
         *				each contains:
         *					- found: a flag indicating if the key was found or not.
         *					- key: the property key.
         *					- value: the property value.
         */
        function update(instance, obj, callback, key, value){
            var result = {op:undefined, items: [] };
            if(typeof value === 'undefined' && typeof key === 'string') {
                //get
                result.op = 'get';
                if(obj.hasOwnProperty(key)){
                    result.found = true;
                    result.value = obj[key];
                }else{
                    result.found = false;
                    result.value = undefined;
                }
            }
            else
            {
                var old;
                //set
                result.op = 'set';
                if(typeof key === 'object'){
                    //set multiple
                    var args = key;
                    for (var prop in args) {
                        if (obj.hasOwnProperty(prop)) {
                            if(obj[prop] !== args[prop]){
                                old = obj[prop];
                                obj[prop] = args[prop];
                                callback.call(instance,prop, old, args[prop]);
                            }
                            result.items.push({ 'key': prop, 'value': args[prop], 'found':true});
                        }else{
                            result.items.push({ 'key': prop, 'value': args[prop], 'found':false});
                        }
                    }
                } else if (typeof key === 'string'){
                    //set single
                    if (obj.hasOwnProperty(key)) {
                        if(obj[key] !== value){
                            old  = obj[key];
                            obj[key] = value;
                            callback.call(instance,key, old, value);
                        }
                        result.items.push({'key': key, 'value': value , 'found':true});

                    }else{
                        result.items.push({'key': key, 'value': value , 'found':false});
                    }
                } else {
                    //invalid params
                    throw new Error('args must be a string or object');
                }
            }
            return result;
        }


        /**
         * Triggers a close event.
         *
         * @param {Object} instance	The dilog instance.
         * 
         * @return {undefined}
         */
        function triggerClose(instance) {
            var found;
            triggerCallback(instance, function (button) {
                return found = (button.invokeOnClose === true);
            });
            //none of the buttons registered as onclose callback
            //close the dialog
            if (!found && instance.isOpen()) {
                instance.close();
            }
        }

        /**
         * Dialogs commands event handler, attached to the dialog commands element.
         *
         * @param {Event} event	DOM event object.
         * @param {Object} instance	The dilog instance.
         * 
         * @return {undefined}
         */
        function commandsClickHandler(event, instance) {
            var target = event.srcElement || event.target;
            switch (target) {
            case instance.elements.commands.pin:
                if (!instance.isPinned()) {
                    pin(instance);
                } else {
                    unpin(instance);
                }
                break;
            case instance.elements.commands.maximize:
                if (!instance.isMaximized()) {
                    maximize(instance);
                } else {
                    restore(instance);
                }
                break;
            case instance.elements.commands.close:
                triggerClose(instance);
                break;
            }
            return false;
        }

        /**
         * Helper: pins the modeless dialog.
         *
         * @param {Object} instance	The dialog instance.
         * 
         * @return {undefined}
         */
        function pin(instance) {
            //pin the dialog
            instance.set('pinned', true);
        }

        /**
         * Helper: unpins the modeless dialog.
         *
         * @param {Object} instance	The dilog instance.
         * 
         * @return {undefined}
         */
        function unpin(instance) {
            //unpin the dialog 
            instance.set('pinned', false);
        }


        /**
         * Helper: enlarges the dialog to fill the entire screen.
         *
         * @param {Object} instance	The dilog instance.
         * 
         * @return {undefined}
         */
        function maximize(instance) {
            // allow custom `onmaximize` method
            dispatchEvent('onmaximize', instance);
            //maximize the dialog 
            addClass(instance.elements.root, classes.maximized);
            if (instance.isOpen()) {
                ensureNoOverflow();
            }
            // allow custom `onmaximized` method
            dispatchEvent('onmaximized', instance);
        }

        /**
         * Helper: returns the dialog to its former size.
         *
         * @param {Object} instance	The dilog instance.
         * 
         * @return {undefined}
         */
        function restore(instance) {
            // allow custom `onrestore` method
            dispatchEvent('onrestore', instance);
            //maximize the dialog 
            removeClass(instance.elements.root, classes.maximized);
            if (instance.isOpen()) {
                ensureNoOverflow();
            }
            // allow custom `onrestored` method
            dispatchEvent('onrestored', instance);
        }

        /**
         * Show or hide the maximize box.
         *
         * @param {Object} instance The dilog instance.
         * @param {Boolean} on True to add the behavior, removes it otherwise.
         *
         * @return {undefined}
         */
        function updatePinnable(instance) {
            if (instance.get('pinnable')) {
                // add class
                addClass(instance.elements.root, classes.pinnable);
            } else {
                // remove class
                removeClass(instance.elements.root, classes.pinnable);
            }
        }

        /**
         * Helper: Fixes the absolutly positioned modal div position.
         *
         * @param {Object} instance The dialog instance.
         *
         * @return {undefined}
         */
        function addAbsPositionFix(instance) {
            var scrollLeft = getScrollLeft();
            instance.elements.modal.style.marginTop = getScrollTop() + 'px';
            instance.elements.modal.style.marginLeft = scrollLeft + 'px';
            instance.elements.modal.style.marginRight = (-scrollLeft) + 'px';
        }

        /**
         * Helper: Removes the absolutly positioned modal div position fix.
         *
         * @param {Object} instance The dialog instance.
         *
         * @return {undefined}
         */
        function removeAbsPositionFix(instance) {
            var marginTop = parseInt(instance.elements.modal.style.marginTop, 10);
            var marginLeft = parseInt(instance.elements.modal.style.marginLeft, 10);
            instance.elements.modal.style.marginTop = '';
            instance.elements.modal.style.marginLeft = '';
            instance.elements.modal.style.marginRight = '';

            if (instance.isOpen()) {
                var top = 0,
                    left = 0
                ;
                if (instance.elements.dialog.style.top !== '') {
                    top = parseInt(instance.elements.dialog.style.top, 10);
                }
                instance.elements.dialog.style.top = (top + (marginTop - getScrollTop())) + 'px';

                if (instance.elements.dialog.style.left !== '') {
                    left = parseInt(instance.elements.dialog.style.left, 10);
                }
                instance.elements.dialog.style.left = (left + (marginLeft - getScrollLeft())) + 'px';
            }
        }
        /**
         * Helper: Adds/Removes the absolutly positioned modal div position fix based on its pinned setting.
         *
         * @param {Object} instance The dialog instance.
         *
         * @return {undefined}
         */
        function updateAbsPositionFix(instance) {
            // if modeless and unpinned add fix
            if (!instance.get('modal') && !instance.get('pinned')) {
                addAbsPositionFix(instance);
            } else {
                removeAbsPositionFix(instance);
            }
        }
        /**
         * Toggles the dialog position lock | modeless only.
         *
         * @param {Object} instance The dilog instance.
         * @param {Boolean} on True to make it modal, false otherwise.
         *
         * @return {undefined}
         */
        function updatePinned(instance) {
            if (instance.get('pinned')) {
                removeClass(instance.elements.root, classes.unpinned);
                if (instance.isOpen()) {
                    removeAbsPositionFix(instance);
                }
            } else {
                addClass(instance.elements.root, classes.unpinned);
                if (instance.isOpen() && !instance.isModal()) {
                    addAbsPositionFix(instance);
                }
            }
        }

        /**
         * Show or hide the maximize box.
         *
         * @param {Object} instance The dilog instance.
         * @param {Boolean} on True to add the behavior, removes it otherwise.
         *
         * @return {undefined}
         */
        function updateMaximizable(instance) {
            if (instance.get('maximizable')) {
                // add class
                addClass(instance.elements.root, classes.maximizable);
            } else {
                // remove class
                removeClass(instance.elements.root, classes.maximizable);
            }
        }

        /**
         * Show or hide the close box.
         *
         * @param {Object} instance The dilog instance.
         * @param {Boolean} on True to add the behavior, removes it otherwise.
         *
         * @return {undefined}
         */
        function updateClosable(instance) {
            if (instance.get('closable')) {
                // add class
                addClass(instance.elements.root, classes.closable);
                bindClosableEvents(instance);
            } else {
                // remove class
                removeClass(instance.elements.root, classes.closable);
                unbindClosableEvents(instance);
            }
        }

        // flag to cancel click event if already handled by end resize event (the mousedown, mousemove, mouseup sequence fires a click event.).
        var cancelClick = false;

        /**
         * Helper: closes the modal dialog when clicking the modal
         *
         * @param {Event} event	DOM event object.
         * @param {Object} instance The dilog instance.
         *
         * @return {undefined}
         */
        function modalClickHandler(event, instance) {
            var target = event.srcElement || event.target;
            if (!cancelClick && target === instance.elements.modal && instance.get('closableByDimmer') === true) {
                triggerClose(instance);
            }
            cancelClick = false;
            return false;
        }

        // flag to cancel keyup event if already handled by click event (pressing Enter on a focusted button).
        var cancelKeyup = false;
        /** 
         * Helper: triggers a button callback
         *
         * @param {Object}		The dilog instance.
         * @param {Function}	Callback to check which button triggered the event.
         *
         * @return {undefined}
         */
        function triggerCallback(instance, check) {
            for (var idx = 0; idx < instance.__internal.buttons.length; idx += 1) {
                var button = instance.__internal.buttons[idx];
                if (!button.element.disabled && check(button)) {
                    var closeEvent = createCloseEvent(idx, button);
                    if (typeof instance.callback === 'function') {
                        instance.callback.apply(instance, [closeEvent]);
                    }
                    //close the dialog only if not canceled.
                    if (closeEvent.cancel === false) {
                        instance.close();
                    }
                    break;
                }
            }
        }

        /**
         * Clicks event handler, attached to the dialog footer.
         *
         * @param {Event}		DOM event object.
         * @param {Object}		The dilog instance.
         * 
         * @return {undefined}
         */
        function buttonsClickHandler(event, instance) {
            var target = event.srcElement || event.target;
            triggerCallback(instance, function (button) {
                // if this button caused the click, cancel keyup event
                return button.element === target && (cancelKeyup = true);
            });
        }

        /**
         * Keyup event handler, attached to the document.body
         *
         * @param {Event}		DOM event object.
         * @param {Object}		The dilog instance.
         * 
         * @return {undefined}
         */
        function keyupHandler(event) {
            //hitting enter while button has focus will trigger keyup too.
            //ignore if handled by clickHandler
            if (cancelKeyup) {
                cancelKeyup = false;
                return;
            }
            var instance = openDialogs[openDialogs.length - 1];
            var keyCode = event.keyCode;
            if (instance.__internal.buttons.length === 0 && keyCode === keys.ESC && instance.get('closable') === true) {
                triggerClose(instance);
                return false;
            }else if (usedKeys.indexOf(keyCode) > -1) {
                triggerCallback(instance, function (button) {
                    return button.key === keyCode;
                });
                return false;
            }
        }
        /**
        * Keydown event handler, attached to the document.body
        *
        * @param {Event}		DOM event object.
        * @param {Object}		The dilog instance.
        * 
        * @return {undefined}
        */
        function keydownHandler(event) {
            var instance = openDialogs[openDialogs.length - 1];
            var keyCode = event.keyCode;
            if (keyCode === keys.LEFT || keyCode === keys.RIGHT) {
                var buttons = instance.__internal.buttons;
                for (var x = 0; x < buttons.length; x += 1) {
                    if (document.activeElement === buttons[x].element) {
                        switch (keyCode) {
                        case keys.LEFT:
                            buttons[(x || buttons.length) - 1].element.focus();
                            return;
                        case keys.RIGHT:
                            buttons[(x + 1) % buttons.length].element.focus();
                            return;
                        }
                    }
                }
            }else if (keyCode < keys.F12 + 1 && keyCode > keys.F1 - 1 && usedKeys.indexOf(keyCode) > -1) {
                event.preventDefault();
                event.stopPropagation();
                triggerCallback(instance, function (button) {
                    return button.key === keyCode;
                });
                return false;
            }
        }


        /**
         * Sets focus to proper dialog element
         *
         * @param {Object} instance The dilog instance.
         * @param {Node} [resetTarget=undefined] DOM element to reset focus to.
         *
         * @return {undefined}
         */
        function setFocus(instance, resetTarget) {
            // reset target has already been determined.
            if (resetTarget) {
                resetTarget.focus();
            } else {
                // current instance focus settings
                var focus = instance.__internal.focus;
                // the focus element.
                var element = focus.element;

                switch (typeof focus.element) {
                // a number means a button index
                case 'number':
                    if (instance.__internal.buttons.length > focus.element) {
                        //in basic view, skip focusing the buttons.
                        if (instance.get('basic') === true) {
                            element = instance.elements.reset[0];
                        } else {
                            element = instance.__internal.buttons[focus.element].element;
                        }
                    }
                    break;
                // a string means querySelector to select from dialog body contents.
                case 'string':
                    element = instance.elements.body.querySelector(focus.element);
                    break;
                // a function should return the focus element.
                case 'function':
                    element = focus.element.call(instance);
                    break;
                }
                
                // if no focus element, default to first reset element.
                if ((typeof element === 'undefined' || element === null) && instance.__internal.buttons.length === 0) {
                    element = instance.elements.reset[0];
                }
                // focus
                if (element && element.focus) {
                    element.focus();
                    // if selectable
                    if (focus.select && element.select) {
                        element.select();
                    }
                }
            }
        }

        /**
         * Focus event handler, attached to document.body and dialogs own reset links.
         * handles the focus for modal dialogs only.
         *
         * @param {Event} event DOM focus event object.
         * @param {Object} instance The dilog instance.
         *
         * @return {undefined}
         */
        function onReset(event, instance) {

            // should work on last modal if triggered from document.body 
            if (!instance) {
                for (var x = openDialogs.length - 1; x > -1; x -= 1) {
                    if (openDialogs[x].isModal()) {
                        instance = openDialogs[x];
                        break;
                    }
                }
            }
            // if modal
            if (instance && instance.isModal()) {
                // determine reset target to enable forward/backward tab cycle.
                var resetTarget, target = event.srcElement || event.target;
                var lastResetElement = target === instance.elements.reset[1] || (instance.__internal.buttons.length === 0 && target === document.body);

                // if last reset link, then go to maximize or close
                if (lastResetElement) {
                    if (instance.get('maximizable')) {
                        resetTarget = instance.elements.commands.maximize;
                    } else if (instance.get('closable')) {
                        resetTarget = instance.elements.commands.close;
                    }
                }
                // if no reset target found, try finding the best button
                if (resetTarget === undefined) {
                    if (typeof instance.__internal.focus.element === 'number') {
                        // button focus element, go to first available button
                        if (target === instance.elements.reset[0]) {
                            resetTarget = instance.elements.buttons.auxiliary.firstChild || instance.elements.buttons.primary.firstChild;
                        } else if (lastResetElement) {
                            //restart the cycle by going to first reset link
                            resetTarget = instance.elements.reset[0];
                        }
                    } else {
                        // will reach here when tapping backwards, so go to last child
                        // The focus element SHOULD NOT be a button (logically!).
                        if (target === instance.elements.reset[0]) {
                            resetTarget = instance.elements.buttons.primary.lastChild || instance.elements.buttons.auxiliary.lastChild;
                        }
                    }
                }
                // focus
                setFocus(instance, resetTarget);
            }
        }
        /**
         * Transition in transitionend event handler. 
         *
         * @param {Event}		TransitionEnd event object.
         * @param {Object}		The dilog instance.
         *
         * @return {undefined}
         */
        function handleTransitionInEvent(event, instance) {
            // clear the timer
            clearTimeout(instance.__internal.timerIn);

            // once transition is complete, set focus
            setFocus(instance);

            //restore scroll to prevent document jump
            restoreScrollPosition();

            // allow handling key up after transition ended.
            cancelKeyup = false;

            // allow custom `onfocus` method
            dispatchEvent('onfocus', instance);

            // unbind the event
            off(instance.elements.dialog, transition.type, instance.__internal.transitionInHandler);

            removeClass(instance.elements.root, classes.animationIn);
        }

        /**
         * Transition out transitionend event handler. 
         *
         * @param {Event}		TransitionEnd event object.
         * @param {Object}		The dilog instance.
         *
         * @return {undefined}
         */
        function handleTransitionOutEvent(event, instance) {
            // clear the timer
            clearTimeout(instance.__internal.timerOut);
            // unbind the event
            off(instance.elements.dialog, transition.type, instance.__internal.transitionOutHandler);

            // reset move updates
            resetMove(instance);
            // reset resize updates
            resetResize(instance);

            // restore if maximized
            if (instance.isMaximized() && !instance.get('startMaximized')) {
                restore(instance);
            }

            // return focus to the last active element
            if (alertify.defaults.maintainFocus && instance.__internal.activeElement) {
                instance.__internal.activeElement.focus();
                instance.__internal.activeElement = null;
            }
            
            //destory the instance
            if (typeof instance.__internal.destroy === 'function') {
                instance.__internal.destroy.apply(instance);
            }
        }
        /* Controls moving a dialog around */
        //holde the current moving instance
        var movable = null,
            //holds the current X offset when move starts
            offsetX = 0,
            //holds the current Y offset when move starts
            offsetY = 0,
            xProp = 'pageX',
            yProp = 'pageY',
            bounds = null,
            refreshTop = false,
            moveDelegate = null
        ;

        /**
         * Helper: sets the element top/left coordinates
         *
         * @param {Event} event	DOM event object.
         * @param {Node} element The element being moved.
         * 
         * @return {undefined}
         */
        function moveElement(event, element) {
            var left = (event[xProp] - offsetX),
                top  = (event[yProp] - offsetY);

            if(refreshTop){
                top -= document.body.scrollTop;
            }
           
            element.style.left = left + 'px';
            element.style.top = top + 'px';
           
        }
        /**
         * Helper: sets the element top/left coordinates within screen bounds
         *
         * @param {Event} event	DOM event object.
         * @param {Node} element The element being moved.
         * 
         * @return {undefined}
         */
        function moveElementBounded(event, element) {
            var left = (event[xProp] - offsetX),
                top  = (event[yProp] - offsetY);

            if(refreshTop){
                top -= document.body.scrollTop;
            }
            
            element.style.left = Math.min(bounds.maxLeft, Math.max(bounds.minLeft, left)) + 'px';
            if(refreshTop){
                element.style.top = Math.min(bounds.maxTop, Math.max(bounds.minTop, top)) + 'px';
            }else{
                element.style.top = Math.max(bounds.minTop, top) + 'px';
            }
        }
            

        /**
         * Triggers the start of a move event, attached to the header element mouse down event.
         * Adds no-selection class to the body, disabling selection while moving.
         *
         * @param {Event} event	DOM event object.
         * @param {Object} instance The dilog instance.
         * 
         * @return {Boolean} false
         */
        function beginMove(event, instance) {
            if (resizable === null && !instance.isMaximized() && instance.get('movable')) {
                var eventSrc, left=0, top=0;
                if (event.type === 'touchstart') {
                    event.preventDefault();
                    eventSrc = event.targetTouches[0];
                    xProp = 'clientX';
                    yProp = 'clientY';
                } else if (event.button === 0) {
                    eventSrc = event;
                }

                if (eventSrc) {

                    var element = instance.elements.dialog;
                    addClass(element, classes.capture);

                    if (element.style.left) {
                        left = parseInt(element.style.left, 10);
                    }

                    if (element.style.top) {
                        top = parseInt(element.style.top, 10);
                    }
                    
                    offsetX = eventSrc[xProp] - left;
                    offsetY = eventSrc[yProp] - top;

                    if(instance.isModal()){
                        offsetY += instance.elements.modal.scrollTop;
                    }else if(instance.isPinned()){
                        offsetY -= document.body.scrollTop;
                    }
                    
                    if(instance.get('moveBounded')){
                        var current = element,
                            offsetLeft = -left,
                            offsetTop = -top;
                        
                        //calc offset
                        do {
                            offsetLeft += current.offsetLeft;
                            offsetTop += current.offsetTop;
                        } while (current = current.offsetParent);
                        
                        bounds = {
                            maxLeft : offsetLeft,
                            minLeft : -offsetLeft,
                            maxTop  : document.documentElement.clientHeight - element.clientHeight - offsetTop,
                            minTop  : -offsetTop
                        };
                        moveDelegate = moveElementBounded;
                    }else{
                        bounds = null;
                        moveDelegate = moveElement;
                    }
                    
                    // allow custom `onmove` method
                    dispatchEvent('onmove', instance);

                    refreshTop = !instance.isModal() && instance.isPinned();
                    movable = instance;
                    moveDelegate(eventSrc, element);
                    addClass(document.body, classes.noSelection);
                    return false;
                }
            }
        }

        /**
         * The actual move handler,  attached to document.body mousemove event.
         *
         * @param {Event} event	DOM event object.
         * 
         * @return {undefined}
         */
        function move(event) {
            if (movable) {
                var eventSrc;
                if (event.type === 'touchmove') {
                    event.preventDefault();
                    eventSrc = event.targetTouches[0];
                } else if (event.button === 0) {
                    eventSrc = event;
                }
                if (eventSrc) {
                    moveDelegate(eventSrc, movable.elements.dialog);
                }
            }
        }

        /**
         * Triggers the end of a move event,  attached to document.body mouseup event.
         * Removes no-selection class from document.body, allowing selection.
         *
         * @return {undefined}
         */
        function endMove() {
            if (movable) {
                var instance = movable;
                movable = bounds = null;
                removeClass(document.body, classes.noSelection);
                removeClass(instance.elements.dialog, classes.capture);
                // allow custom `onmoved` method
                dispatchEvent('onmoved', instance);
            }
        }

        /**
         * Resets any changes made by moving the element to its original state,
         *
         * @param {Object} instance The dilog instance.
         *
         * @return {undefined}
         */
        function resetMove(instance) {
            movable = null;
            var element = instance.elements.dialog;
            element.style.left = element.style.top = '';
        }

        /**
         * Updates the dialog move behavior.
         *
         * @param {Object} instance The dilog instance.
         * @param {Boolean} on True to add the behavior, removes it otherwise.
         *
         * @return {undefined}
         */
        function updateMovable(instance) {
            if (instance.get('movable')) {
                // add class
                addClass(instance.elements.root, classes.movable);
                if (instance.isOpen()) {
                    bindMovableEvents(instance);
                }
            } else {

                //reset
                resetMove(instance);
                // remove class
                removeClass(instance.elements.root, classes.movable);
                if (instance.isOpen()) {
                    unbindMovableEvents(instance);
                }
            }
        }

        /* Controls moving a dialog around */
        //holde the current instance being resized		
        var resizable = null,
            //holds the staring left offset when resize starts.
            startingLeft = Number.Nan,
            //holds the staring width when resize starts.
            startingWidth = 0,
            //holds the initial width when resized for the first time.
            minWidth = 0,
            //holds the offset of the resize handle.
            handleOffset = 0
        ;

        /**
         * Helper: sets the element width/height and updates left coordinate if neccessary.
         *
         * @param {Event} event	DOM mousemove event object.
         * @param {Node} element The element being moved.
         * @param {Boolean} pinned A flag indicating if the element being resized is pinned to the screen.
         * 
         * @return {undefined}
         */
        function resizeElement(event, element, pageRelative) {

            //calculate offsets from 0,0
            var current = element;
            var offsetLeft = 0;
            var offsetTop = 0;
            do {
                offsetLeft += current.offsetLeft;
                offsetTop += current.offsetTop;
            } while (current = current.offsetParent);

            // determine X,Y coordinates.
            var X, Y;
            if (pageRelative === true) {
                X = event.pageX;
                Y = event.pageY;
            } else {
                X = event.clientX;
                Y = event.clientY;
            }
            // rtl handling
            var isRTL = isRightToLeft();
            if (isRTL) {
                // reverse X 
                X = document.body.offsetWidth - X;
                // if has a starting left, calculate offsetRight
                if (!isNaN(startingLeft)) {
                    offsetLeft = document.body.offsetWidth - offsetLeft - element.offsetWidth;
                }
            }

            // set width/height
            element.style.height = (Y - offsetTop + handleOffset) + 'px';
            element.style.width = (X - offsetLeft + handleOffset) + 'px';

            // if the element being resized has a starting left, maintain it.
            // the dialog is centered, divide by half the offset to maintain the margins.
            if (!isNaN(startingLeft)) {
                var diff = Math.abs(element.offsetWidth - startingWidth) * 0.5;
                if (isRTL) {
                    //negate the diff, why?
                    //when growing it should decrease left
                    //when shrinking it should increase left
                    diff *= -1;
                }
                if (element.offsetWidth > startingWidth) {
                    //growing
                    element.style.left = (startingLeft + diff) + 'px';
                } else if (element.offsetWidth >= minWidth) {
                    //shrinking
                    element.style.left = (startingLeft - diff) + 'px';
                }
            }
        }

        /**
         * Triggers the start of a resize event, attached to the resize handle element mouse down event.
         * Adds no-selection class to the body, disabling selection while moving.
         *
         * @param {Event} event	DOM event object.
         * @param {Object} instance The dilog instance.
         * 
         * @return {Boolean} false
         */
        function beginResize(event, instance) {
            if (!instance.isMaximized()) {
                var eventSrc;
                if (event.type === 'touchstart') {
                    event.preventDefault();
                    eventSrc = event.targetTouches[0];
                } else if (event.button === 0) {
                    eventSrc = event;
                }
                if (eventSrc) {
                    // allow custom `onresize` method
                    dispatchEvent('onresize', instance);
                    
                    resizable = instance;
                    handleOffset = instance.elements.resizeHandle.offsetHeight / 2;
                    var element = instance.elements.dialog;
                    addClass(element, classes.capture);
                    startingLeft = parseInt(element.style.left, 10);
                    element.style.height = element.offsetHeight + 'px';
                    element.style.minHeight = instance.elements.header.offsetHeight + instance.elements.footer.offsetHeight + 'px';
                    element.style.width = (startingWidth = element.offsetWidth) + 'px';

                    if (element.style.maxWidth !== 'none') {
                        element.style.minWidth = (minWidth = element.offsetWidth) + 'px';
                    }
                    element.style.maxWidth = 'none';
                    addClass(document.body, classes.noSelection);
                    return false;
                }
            }
        }

        /**
         * The actual resize handler,  attached to document.body mousemove event.
         *
         * @param {Event} event	DOM event object.
         * 
         * @return {undefined}
         */
        function resize(event) {
            if (resizable) {
                var eventSrc;
                if (event.type === 'touchmove') {
                    event.preventDefault();
                    eventSrc = event.targetTouches[0];
                } else if (event.button === 0) {
                    eventSrc = event;
                }
                if (eventSrc) {
                    resizeElement(eventSrc, resizable.elements.dialog, !resizable.get('modal') && !resizable.get('pinned'));
                }
            }
        }

        /**
         * Triggers the end of a resize event,  attached to document.body mouseup event.
         * Removes no-selection class from document.body, allowing selection.
         *
         * @return {undefined}
         */
        function endResize() {
            if (resizable) {
                var instance = resizable;
                resizable = null;
                removeClass(document.body, classes.noSelection);
                removeClass(instance.elements.dialog, classes.capture);
                cancelClick = true;
                // allow custom `onresized` method
                dispatchEvent('onresized', instance);
            }
        }

        /**
         * Resets any changes made by resizing the element to its original state.
         *
         * @param {Object} instance The dilog instance.
         *
         * @return {undefined}
         */
        function resetResize(instance) {
            resizable = null;
            var element = instance.elements.dialog;
            if (element.style.maxWidth === 'none') {
                //clear inline styles.
                element.style.maxWidth = element.style.minWidth = element.style.width = element.style.height = element.style.minHeight = element.style.left = '';
                //reset variables.
                startingLeft = Number.Nan;
                startingWidth = minWidth = handleOffset = 0;
            }
        }


        /**
         * Updates the dialog move behavior.
         *
         * @param {Object} instance The dilog instance.
         * @param {Boolean} on True to add the behavior, removes it otherwise.
         *
         * @return {undefined}
         */
        function updateResizable(instance) {
            if (instance.get('resizable')) {
                // add class
                addClass(instance.elements.root, classes.resizable);
                if (instance.isOpen()) {
                    bindResizableEvents(instance);
                }
            } else {
                //reset
                resetResize(instance);
                // remove class
                removeClass(instance.elements.root, classes.resizable);
                if (instance.isOpen()) {
                    unbindResizableEvents(instance);
                }
            }
        }

        /**
         * Reset move/resize on window resize.
         *
         * @param {Event} event	window resize event object.
         *
         * @return {undefined}
         */
        function windowResize(/*event*/) {
            for (var x = 0; x < openDialogs.length; x += 1) {
                var instance = openDialogs[x];
                if (instance.get('autoReset')) {
                    resetMove(instance);
                    resetResize(instance);
                }
            }
        }
        /**
         * Bind dialogs events
         *
         * @param {Object} instance The dilog instance.
         *
         * @return {undefined}
         */
        function bindEvents(instance) {
            // if first dialog, hook global handlers
            if (openDialogs.length === 1) {
                //global
                on(window, 'resize', windowResize);
                on(document.body, 'keyup', keyupHandler);
                on(document.body, 'keydown', keydownHandler);
                on(document.body, 'focus', onReset);

                //move
                on(document.documentElement, 'mousemove', move);
                on(document.documentElement, 'touchmove', move);
                on(document.documentElement, 'mouseup', endMove);
                on(document.documentElement, 'touchend', endMove);
                //resize
                on(document.documentElement, 'mousemove', resize);
                on(document.documentElement, 'touchmove', resize);
                on(document.documentElement, 'mouseup', endResize);
                on(document.documentElement, 'touchend', endResize);
            }

            // common events
            on(instance.elements.commands.container, 'click', instance.__internal.commandsClickHandler);
            on(instance.elements.footer, 'click', instance.__internal.buttonsClickHandler);
            on(instance.elements.reset[0], 'focus', instance.__internal.resetHandler);
            on(instance.elements.reset[1], 'focus', instance.__internal.resetHandler);

            //prevent handling key up when dialog is being opened by a key stroke.
            cancelKeyup = true;
            // hook in transition handler
            on(instance.elements.dialog, transition.type, instance.__internal.transitionInHandler);

            // modelss only events
            if (!instance.get('modal')) {
                bindModelessEvents(instance);
            }

            // resizable
            if (instance.get('resizable')) {
                bindResizableEvents(instance);
            }

            // movable
            if (instance.get('movable')) {
                bindMovableEvents(instance);
            }
        }

        /**
         * Unbind dialogs events
         *
         * @param {Object} instance The dilog instance.
         *
         * @return {undefined}
         */
        function unbindEvents(instance) {
            // if last dialog, remove global handlers
            if (openDialogs.length === 1) {
                //global
                off(window, 'resize', windowResize);
                off(document.body, 'keyup', keyupHandler);
                off(document.body, 'keydown', keydownHandler);
                off(document.body, 'focus', onReset);
                //move
                off(document.documentElement, 'mousemove', move);
                off(document.documentElement, 'mouseup', endMove);
                //resize
                off(document.documentElement, 'mousemove', resize);
                off(document.documentElement, 'mouseup', endResize);
            }

            // common events
            off(instance.elements.commands.container, 'click', instance.__internal.commandsClickHandler);
            off(instance.elements.footer, 'click', instance.__internal.buttonsClickHandler);
            off(instance.elements.reset[0], 'focus', instance.__internal.resetHandler);
            off(instance.elements.reset[1], 'focus', instance.__internal.resetHandler);

            // hook out transition handler
            on(instance.elements.dialog, transition.type, instance.__internal.transitionOutHandler);

            // modelss only events
            if (!instance.get('modal')) {
                unbindModelessEvents(instance);
            }

            // movable
            if (instance.get('movable')) {
                unbindMovableEvents(instance);
            }

            // resizable
            if (instance.get('resizable')) {
                unbindResizableEvents(instance);
            }

        }

        /**
         * Bind modeless specific events
         *
         * @param {Object} instance The dilog instance.
         *
         * @return {undefined}
         */
        function bindModelessEvents(instance) {
            on(instance.elements.dialog, 'focus', instance.__internal.bringToFrontHandler, true);
        }

        /**
         * Unbind modeless specific events
         *
         * @param {Object} instance The dilog instance.
         *
         * @return {undefined}
         */
        function unbindModelessEvents(instance) {
            off(instance.elements.dialog, 'focus', instance.__internal.bringToFrontHandler, true);
        }



        /**
         * Bind movable specific events
         *
         * @param {Object} instance The dilog instance.
         *
         * @return {undefined}
         */
        function bindMovableEvents(instance) {
            on(instance.elements.header, 'mousedown', instance.__internal.beginMoveHandler);
            on(instance.elements.header, 'touchstart', instance.__internal.beginMoveHandler);
        }

        /**
         * Unbind movable specific events
         *
         * @param {Object} instance The dilog instance.
         *
         * @return {undefined}
         */
        function unbindMovableEvents(instance) {
            off(instance.elements.header, 'mousedown', instance.__internal.beginMoveHandler);
            off(instance.elements.header, 'touchstart', instance.__internal.beginMoveHandler);
        }



        /**
         * Bind resizable specific events
         *
         * @param {Object} instance The dilog instance.
         *
         * @return {undefined}
         */
        function bindResizableEvents(instance) {
            on(instance.elements.resizeHandle, 'mousedown', instance.__internal.beginResizeHandler);
            on(instance.elements.resizeHandle, 'touchstart', instance.__internal.beginResizeHandler);
        }

        /**
         * Unbind resizable specific events
         *
         * @param {Object} instance The dilog instance.
         *
         * @return {undefined}
         */
        function unbindResizableEvents(instance) {
            off(instance.elements.resizeHandle, 'mousedown', instance.__internal.beginResizeHandler);
            off(instance.elements.resizeHandle, 'touchstart', instance.__internal.beginResizeHandler);
        }

        /**
         * Bind closable events
         *
         * @param {Object} instance The dilog instance.
         *
         * @return {undefined}
         */
        function bindClosableEvents(instance) {
            on(instance.elements.modal, 'click', instance.__internal.modalClickHandler);
        }

        /**
         * Unbind closable specific events
         *
         * @param {Object} instance The dilog instance.
         *
         * @return {undefined}
         */
        function unbindClosableEvents(instance) {
            off(instance.elements.modal, 'click', instance.__internal.modalClickHandler);
        }
        // dialog API
        return {
            __init:initialize,
            /**
             * Check if dialog is currently open
             *
             * @return {Boolean}
             */
            isOpen: function () {
                return this.__internal.isOpen;
            },
            isModal: function (){
                return this.elements.root.className.indexOf(classes.modeless) < 0;
            },
            isMaximized:function(){
                return this.elements.root.className.indexOf(classes.maximized) > -1;
            },
            isPinned:function(){
                return this.elements.root.className.indexOf(classes.unpinned) < 0;
            },
            maximize:function(){
                if(!this.isMaximized()){
                    maximize(this);
                }
                return this;
            },
            restore:function(){
                if(this.isMaximized()){
                    restore(this);
                }
                return this;
            },
            pin:function(){
                if(!this.isPinned()){
                    pin(this);
                }
                return this;
            },
            unpin:function(){
                if(this.isPinned()){
                    unpin(this);
                }
                return this;
            },
            bringToFront:function(){
                bringToFront(null, this);
                return this;
            },
            /**
             * Move the dialog to a specific x/y coordinates
             *
             * @param {Number} x    The new dialog x coordinate in pixels.
             * @param {Number} y    The new dialog y coordinate in pixels.
             *
             * @return {Object} The dialog instance.
             */
            moveTo:function(x,y){
                if(!isNaN(x) && !isNaN(y)){
                    // allow custom `onmove` method
                    dispatchEvent('onmove', this);
                    
                    var element = this.elements.dialog,
                        current = element,
                        offsetLeft = 0,
                        offsetTop = 0;
                    
                    //subtract existing left,top
                    if (element.style.left) {
                        offsetLeft -= parseInt(element.style.left, 10);
                    }
                    if (element.style.top) {
                        offsetTop -= parseInt(element.style.top, 10);
                    }
                    //calc offset
                    do {
                        offsetLeft += current.offsetLeft;
                        offsetTop += current.offsetTop;
                    } while (current = current.offsetParent);

                    //calc left, top
                    var left = (x - offsetLeft);
                    var top  = (y - offsetTop);

                    //// rtl handling
                    if (isRightToLeft()) {
                        left *= -1;
                    }

                    element.style.left = left + 'px';
                    element.style.top = top + 'px';
                    
                    // allow custom `onmoved` method
                    dispatchEvent('onmoved', this);
                }
                return this;
            },
            /**
             * Resize the dialog to a specific width/height (the dialog must be 'resizable').
             * The dialog can be resized to:
             *  A minimum width equal to the initial display width
             *  A minimum height equal to the sum of header/footer heights.
             *
             *
             * @param {Number or String} width    The new dialog width in pixels or in percent.
             * @param {Number or String} height   The new dialog height in pixels or in percent.
             *
             * @return {Object} The dialog instance.
             */
            resizeTo:function(width,height){
                var w = parseFloat(width),
                    h = parseFloat(height),
                    regex = /(\d*\.\d+|\d+)%/
                ;

                if(!isNaN(w) && !isNaN(h) && this.get('resizable') === true){
                    
                    // allow custom `onresize` method
                    dispatchEvent('onresize', this);
                    
                    if(('' + width).match(regex)){
                        w = w / 100 * document.documentElement.clientWidth ;
                    }

                    if(('' + height).match(regex)){
                        h = h / 100 * document.documentElement.clientHeight;
                    }

                    var element = this.elements.dialog;
                    if (element.style.maxWidth !== 'none') {
                        element.style.minWidth = (minWidth = element.offsetWidth) + 'px';
                    }
                    element.style.maxWidth = 'none';
                    element.style.minHeight = this.elements.header.offsetHeight + this.elements.footer.offsetHeight + 'px';
                    element.style.width = w + 'px';
                    element.style.height = h + 'px';
                    
                    // allow custom `onresized` method
                    dispatchEvent('onresized', this);
                }
                return this;
            },
            /**
             * Gets or Sets dialog settings/options 
             *
             * @param {String|Object} key A string specifying a propery name or a collection of key/value pairs.
             * @param {Object} value Optional, the value associated with the key (in case it was a string).
             *
             * @return {undefined}
             */
            setting : function (key, value) {
                var self = this;
                var result = update(this, this.__internal.options, function(k,o,n){ optionUpdated(self,k,o,n); }, key, value);
                if(result.op === 'get'){
                    if(result.found){
                        return result.value;
                    }else if(typeof this.settings !== 'undefined'){
                        return update(this, this.settings, this.settingUpdated || function(){}, key, value).value;
                    }else{
                        return undefined;
                    }
                }else if(result.op === 'set'){
                    if(result.items.length > 0){
                        var callback = this.settingUpdated || function(){};
                        for(var x=0;x<result.items.length;x+=1){
                            var item = result.items[x];
                            if(!item.found && typeof this.settings !== 'undefined'){
                                update(this, this.settings, callback, item.key, item.value);
                            }
                        }
                    }
                    return this;
                }
            },
            /**
             * [Alias] Sets dialog settings/options 
             */
            set:function(key, value){
                this.setting(key,value);
                return this;
            },
            /**
             * [Alias] Gets dialog settings/options 
             */
            get:function(key){
                return this.setting(key);
            },
            /**
            * Sets dialog header
            * @content {string or element}
            *
            * @return {undefined}
            */
            setHeader:function(content){
                if(typeof content === 'string'){
                    clearContents(this.elements.header);
                    this.elements.header.innerHTML = content;
                }else if (content instanceof window.HTMLElement && this.elements.header.firstChild !== content){
                    clearContents(this.elements.header);
                    this.elements.header.appendChild(content);
                }
                return this;
            },
            /**
            * Sets dialog contents
            * @content {string or element}
            *
            * @return {undefined}
            */
            setContent:function(content){
                if(typeof content === 'string'){
                    clearContents(this.elements.content);
                    this.elements.content.innerHTML = content;
                }else if (content instanceof window.HTMLElement && this.elements.content.firstChild !== content){
                    clearContents(this.elements.content);
                    this.elements.content.appendChild(content);
                }
                return this;
            },
            /**
             * Show the dialog as modal
             *
             * @return {Object} the dialog instance.
             */
            showModal: function(className){
                return this.show(true, className);
            },
            /**
             * Show the dialog
             *
             * @return {Object} the dialog instance.
             */
            show: function (modal, className) {
                
                // ensure initialization
                initialize(this);

                if ( !this.__internal.isOpen ) {

                    // add to open dialogs
                    this.__internal.isOpen = true;
                    openDialogs.push(this);

                    // save last focused element
                    if(alertify.defaults.maintainFocus){
                        this.__internal.activeElement = document.activeElement;
                    }

                    //allow custom dom manipulation updates before showing the dialog.
                    if(typeof this.prepare === 'function'){
                        this.prepare();
                    }

                    bindEvents(this);

                    if(modal !== undefined){
                        this.set('modal', modal);
                    }

                    //save scroll to prevent document jump
                    saveScrollPosition();

                    ensureNoOverflow();

                    // allow custom dialog class on show
                    if(typeof className === 'string' && className !== ''){
                        this.__internal.className = className;
                        addClass(this.elements.root, className);
                    }

                    // maximize if start maximized
                    if ( this.get('startMaximized')) {
                        this.maximize();
                    }else if(this.isMaximized()){
                        restore(this);
                    }

                    updateAbsPositionFix(this);

                    removeClass(this.elements.root, classes.animationOut);
                    addClass(this.elements.root, classes.animationIn);

                    // set 1s fallback in case transition event doesn't fire
                    clearTimeout( this.__internal.timerIn);
                    this.__internal.timerIn = setTimeout( this.__internal.transitionInHandler, transition.supported ? 1000 : 100 );

                    if(isSafari){
                        // force desktop safari reflow
                        var root = this.elements.root;
                        root.style.display  = 'none';
                        setTimeout(function(){root.style.display  = 'block';}, 0);
                    }

                    //reflow
                    reflow = this.elements.root.offsetWidth;
                  
                    // show dialog
                    removeClass(this.elements.root, classes.hidden);

                    // internal on show event
                    if(typeof this.hooks.onshow === 'function'){
                        this.hooks.onshow.call(this);
                    }

                    // allow custom `onshow` method
                    dispatchEvent('onshow', this);

                }else{
                    // reset move updates
                    resetMove(this);
                    // reset resize updates
                    resetResize(this);
                    // shake the dialog to indicate its already open
                    addClass(this.elements.dialog, classes.shake);
                    var self = this;
                    setTimeout(function(){
                        removeClass(self.elements.dialog, classes.shake);
                    },200);
                }
                return this;
            },
            /**
             * Close the dialog
             *
             * @return {Object} The dialog instance
             */
            close: function () {
                if (this.__internal.isOpen ) {
                    // custom `onclosing` event
                    if(dispatchEvent('onclosing', this) !== false){

                        unbindEvents(this);

                        removeClass(this.elements.root, classes.animationIn);
                        addClass(this.elements.root, classes.animationOut);

                        // set 1s fallback in case transition event doesn't fire
                        clearTimeout( this.__internal.timerOut );
                        this.__internal.timerOut = setTimeout( this.__internal.transitionOutHandler, transition.supported ? 1000 : 100 );
                        // hide dialog
                        addClass(this.elements.root, classes.hidden);
                        //reflow
                        reflow = this.elements.modal.offsetWidth;

                        // remove custom dialog class on hide
                        if (typeof this.__internal.className !== 'undefined' && this.__internal.className !== '') {
                            removeClass(this.elements.root, this.__internal.className);
                        }

                        // internal on close event
                        if(typeof this.hooks.onclose === 'function'){
                            this.hooks.onclose.call(this);
                        }

                        // allow custom `onclose` method
                        dispatchEvent('onclose', this);

                        //remove from open dialogs
                        openDialogs.splice(openDialogs.indexOf(this),1);
                        this.__internal.isOpen = false;

                        ensureNoOverflow();
                    }

                }
                return this;
            },
            /**
             * Close all open dialogs except this.
             *
             * @return {undefined}
             */
            closeOthers:function(){
                alertify.closeAll(this);
                return this;
            },
            /**
             * Destroys this dialog instance
             *
             * @return {undefined}
             */
            destroy:function(){
                if (this.__internal.isOpen ) {
                    //mark dialog for destruction, this will be called on tranistionOut event.
                    this.__internal.destroy = function(){
                        destruct(this, initialize);
                    };
                    //close the dialog to unbind all events.
                    this.close();
                }else{
                    destruct(this, initialize);
                }
                return this;
            },
        };
	} () );
    var notifier = (function () {
        var reflow,
            element,
            openInstances = [],
            classes = {
                base: 'alertify-notifier',
                message: 'ajs-message',
                top: 'ajs-top',
                right: 'ajs-right',
                bottom: 'ajs-bottom',
                left: 'ajs-left',
                visible: 'ajs-visible',
                hidden: 'ajs-hidden',
                close: 'ajs-close'
            };
        /**
         * Helper: initializes the notifier instance
         * 
         */
        function initialize(instance) {

            if (!instance.__internal) {
                instance.__internal = {
                    position: alertify.defaults.notifier.position,
                    delay: alertify.defaults.notifier.delay,
                };

                element = document.createElement('DIV');

                updatePosition(instance);
            }

            //add to DOM tree.
            if (element.parentNode !== document.body) {
                document.body.appendChild(element);
            }
        }
        
        function pushInstance(instance) {
            instance.__internal.pushed = true;
            openInstances.push(instance);
        }
        function popInstance(instance) {
            openInstances.splice(openInstances.indexOf(instance), 1);
            instance.__internal.pushed = false;
        }
        /**
         * Helper: update the notifier instance position
         * 
         */
        function updatePosition(instance) {
            element.className = classes.base;
            switch (instance.__internal.position) {
            case 'top-right':
                addClass(element, classes.top + ' ' + classes.right);
                break;
            case 'top-left':
                addClass(element, classes.top + ' ' + classes.left);
                break;
            case 'bottom-left':
                addClass(element, classes.bottom + ' ' + classes.left);
                break;

            default:
            case 'bottom-right':
                addClass(element, classes.bottom + ' ' + classes.right);
                break;
            }
        }

        /**
        * creates a new notification message
        *
        * @param  {DOMElement} message	The notifier message element
        * @param  {Number} wait   Time (in ms) to wait before the message is dismissed, a value of 0 means keep open till clicked.
        * @param  {Function} callback A callback function to be invoked when the message is dismissed.
        *
        * @return {undefined}
        */
        function create(div, callback) {

            function clickDelegate(event, instance) {
                if(!instance.__internal.closeButton || event.target.getAttribute('data-close') === 'true'){
                    instance.dismiss(true);
                }
            }

            function transitionDone(event, instance) {
                // unbind event
                off(instance.element, transition.type, transitionDone);
                // remove the message
                element.removeChild(instance.element);
            }

            function initialize(instance) {
                if (!instance.__internal) {
                    instance.__internal = {
                        pushed: false,
                        delay : undefined,
                        timer: undefined,
                        clickHandler: undefined,
                        transitionEndHandler: undefined,
                        transitionTimeout: undefined
                    };
                    instance.__internal.clickHandler = delegate(instance, clickDelegate);
                    instance.__internal.transitionEndHandler = delegate(instance, transitionDone);
                }
                return instance;
            }
            function clearTimers(instance) {
                clearTimeout(instance.__internal.timer);
                clearTimeout(instance.__internal.transitionTimeout);
            }
            return initialize({
                /* notification DOM element*/
                element: div,
                /*
                 * Pushes a notification message 
                 * @param {string or DOMElement} content The notification message content
                 * @param {Number} wait The time (in seconds) to wait before the message is dismissed, a value of 0 means keep open till clicked.
                 * 
                 */
                push: function (_content, _wait) {
                    if (!this.__internal.pushed) {

                        pushInstance(this);
                        clearTimers(this);

                        var content, wait;
                        switch (arguments.length) {
                        case 0:
                            wait = this.__internal.delay;
                            break;
                        case 1:
                            if (typeof (_content) === 'number') {
                                wait = _content;
                            } else {
                                content = _content;
                                wait = this.__internal.delay;
                            }
                            break;
                        case 2:
                            content = _content;
                            wait = _wait;
                            break;
                        }
                        this.__internal.closeButton = alertify.defaults.notifier.closeButton;
                        // set contents
                        if (typeof content !== 'undefined') {
                            this.setContent(content);
                        }
                        // append or insert
                        if (notifier.__internal.position.indexOf('top') < 0) {
                            element.appendChild(this.element);
                        } else {
                            element.insertBefore(this.element, element.firstChild);
                        }
                        reflow = this.element.offsetWidth;
                        addClass(this.element, classes.visible);
                        // attach click event
                        on(this.element, 'click', this.__internal.clickHandler);
                        return this.delay(wait);
                    }
                    return this;
                },
                /*
                 * {Function} callback function to be invoked before dismissing the notification message.
                 * Remarks: A return value === 'false' will cancel the dismissal
                 * 
                 */
                ondismiss: function () { },
                /*
                 * {Function} callback function to be invoked when the message is dismissed.
                 * 
                 */
                callback: callback,
                /*
                 * Dismisses the notification message 
                 * @param {Boolean} clicked A flag indicating if the dismissal was caused by a click.
                 * 
                 */
                dismiss: function (clicked) {
                    if (this.__internal.pushed) {
                        clearTimers(this);
                        if (!(typeof this.ondismiss === 'function' && this.ondismiss.call(this) === false)) {
                            //detach click event
                            off(this.element, 'click', this.__internal.clickHandler);
                            // ensure element exists
                            if (typeof this.element !== 'undefined' && this.element.parentNode === element) {
                                //transition end or fallback
                                this.__internal.transitionTimeout = setTimeout(this.__internal.transitionEndHandler, transition.supported ? 1000 : 100);
                                removeClass(this.element, classes.visible);

                                // custom callback on dismiss
                                if (typeof this.callback === 'function') {
                                    this.callback.call(this, clicked);
                                }
                            }
                            popInstance(this);
                        }
                    }
                    return this;
                },
                /*
                 * Delays the notification message dismissal
                 * @param {Number} wait The time (in seconds) to wait before the message is dismissed, a value of 0 means keep open till clicked.
                 * 
                 */
                delay: function (wait) {
                    clearTimers(this);
                    this.__internal.delay = typeof wait !== 'undefined' && !isNaN(+wait) ? +wait : notifier.__internal.delay;
                    if (this.__internal.delay > 0) {
                        var  self = this;
                        this.__internal.timer = setTimeout(function () { self.dismiss(); }, this.__internal.delay * 1000);
                    }
                    return this;
                },
                /*
                 * Sets the notification message contents
                 * @param {string or DOMElement} content The notification message content
                 * 
                 */
                setContent: function (content) {
                    if (typeof content === 'string') {
                        clearContents(this.element);
                        this.element.innerHTML = content;
                    } else if (content instanceof window.HTMLElement && this.element.firstChild !== content) {
                        clearContents(this.element);
                        this.element.appendChild(content);
                    }
                    if(this.__internal.closeButton){
                        var close = document.createElement('span');
                        addClass(close, classes.close);
                        close.setAttribute('data-close', true);
                        this.element.appendChild(close);
                    }
                    return this;
                },
                /*
                 * Dismisses all open notifications except this.
                 * 
                 */
                dismissOthers: function () {
                    notifier.dismissAll(this);
                    return this;
                }
            });
        }

        //notifier api
        return {
            /**
             * Gets or Sets notifier settings. 
             *
             * @param {string} key The setting name
             * @param {Variant} value The setting value.
             *
             * @return {Object}	if the called as a setter, return the notifier instance.
             */
            setting: function (key, value) {
                //ensure init
                initialize(this);

                if (typeof value === 'undefined') {
                    //get
                    return this.__internal[key];
                } else {
                    //set
                    switch (key) {
                    case 'position':
                        this.__internal.position = value;
                        updatePosition(this);
                        break;
                    case 'delay':
                        this.__internal.delay = value;
                        break;
                    }
                }
                return this;
            },
            /**
             * [Alias] Sets dialog settings/options 
             */
            set:function(key,value){
                this.setting(key,value);
                return this;
            },
            /**
             * [Alias] Gets dialog settings/options 
             */
            get:function(key){
                return this.setting(key);
            },
            /**
             * Creates a new notification message
             *
             * @param {string} type The type of notification message (simply a CSS class name 'ajs-{type}' to be added).
             * @param {Function} callback  A callback function to be invoked when the message is dismissed.
             *
             * @return {undefined}
             */
            create: function (type, callback) {
                //ensure notifier init
                initialize(this);
                //create new notification message
                var div = document.createElement('div');
                div.className = classes.message + ((typeof type === 'string' && type !== '') ? ' ajs-' + type : '');
                return create(div, callback);
            },
            /**
             * Dismisses all open notifications.
             *
             * @param {Object} excpet [optional] The notification object to exclude from dismissal.
             *
             */
            dismissAll: function (except) {
                var clone = openInstances.slice(0);
                for (var x = 0; x < clone.length; x += 1) {
                    var  instance = clone[x];
                    if (except === undefined || except !== instance) {
                        instance.dismiss();
                    }
                }
            }
        };
    })();
    /**
     * Alertify public API
     * This contains everything that is exposed through the alertify object.
     *
     * @return {Object}
     */
    function Alertify() {

        // holds a references of created dialogs
        var dialogs = {};

        /**
         * Extends a given prototype by merging properties from base into sub.
         *
         * @sub {Object} sub The prototype being overwritten.
         * @base {Object} base The prototype being written.
         *
         * @return {Object} The extended prototype.
         */
        function extend(sub, base) {
            // copy dialog pototype over definition.
            for (var prop in base) {
                if (base.hasOwnProperty(prop)) {
                    sub[prop] = base[prop];
                }
            }
            return sub;
        }


        /**
        * Helper: returns a dialog instance from saved dialogs.
        * and initializes the dialog if its not already initialized.
        *
        * @name {String} name The dialog name.
        *
        * @return {Object} The dialog instance.
        */
        function get_dialog(name) {
            var dialog = dialogs[name].dialog;
            //initialize the dialog if its not already initialized.
            if (dialog && typeof dialog.__init === 'function') {
                dialog.__init(dialog);
            }
            return dialog;
        }

        /**
         * Helper:  registers a new dialog definition.
         *
         * @name {String} name The dialog name.
         * @Factory {Function} Factory a function resposible for creating dialog prototype.
         * @transient {Boolean} transient True to create a new dialog instance each time the dialog is invoked, false otherwise.
         * @base {String} base the name of another dialog to inherit from.
         *
         * @return {Object} The dialog definition.
         */
        function register(name, Factory, transient, base) {
            var definition = {
                dialog: null,
                factory: Factory
            };

            //if this is based on an existing dialog, create a new definition
            //by applying the new protoype over the existing one.
            if (base !== undefined) {
                definition.factory = function () {
                    return extend(new dialogs[base].factory(), new Factory());
                };
            }

            if (!transient) {
                //create a new definition based on dialog
                definition.dialog = extend(new definition.factory(), dialog);
            }
            return dialogs[name] = definition;
        }

        return {
            /**
             * Alertify defaults
             * 
             * @type {Object}
             */
            defaults: defaults,
            /**
             * Dialogs factory 
             *
             * @param {string}      Dialog name.
             * @param {Function}    A Dialog factory function.
             * @param {Boolean}     Indicates whether to create a singleton or transient dialog.
             * @param {String}      The name of the base type to inherit from.
             */
            dialog: function (name, Factory, transient, base) {

                // get request, create a new instance and return it.
                if (typeof Factory !== 'function') {
                    return get_dialog(name);
                }

                if (this.hasOwnProperty(name)) {
                    throw new Error('alertify.dialog: name already exists');
                }

                // register the dialog
                var definition = register(name, Factory, transient, base);

                if (transient) {

                    // make it public
                    this[name] = function () {
                        //if passed with no params, consider it a get request
                        if (arguments.length === 0) {
                            return definition.dialog;
                        } else {
                            var instance = extend(new definition.factory(), dialog);
                            //ensure init
                            if (instance && typeof instance.__init === 'function') {
                                instance.__init(instance);
                            }
                            instance['main'].apply(instance, arguments);
                            return instance['show'].apply(instance);
                        }
                    };
                } else {
                    // make it public
                    this[name] = function () {
                        //ensure init
                        if (definition.dialog && typeof definition.dialog.__init === 'function') {
                            definition.dialog.__init(definition.dialog);
                        }
                        //if passed with no params, consider it a get request
                        if (arguments.length === 0) {
                            return definition.dialog;
                        } else {
                            var dialog = definition.dialog;
                            dialog['main'].apply(definition.dialog, arguments);
                            return dialog['show'].apply(definition.dialog);
                        }
                    };
                }
            },
            /**
             * Close all open dialogs.
             *
             * @param {Object} excpet [optional] The dialog object to exclude from closing.
             *
             * @return {undefined}
             */
            closeAll: function (except) {
                var clone = openDialogs.slice(0);
                for (var x = 0; x < clone.length; x += 1) {
                    var instance = clone[x];
                    if (except === undefined || except !== instance) {
                        instance.close();
                    }
                }
            },
            /**
             * Gets or Sets dialog settings/options. if the dialog is transient, this call does nothing.
             *
             * @param {string} name The dialog name.
             * @param {String|Object} key A string specifying a propery name or a collection of key/value pairs.
             * @param {Variant} value Optional, the value associated with the key (in case it was a string).
             *
             * @return {undefined}
             */
            setting: function (name, key, value) {

                if (name === 'notifier') {
                    return notifier.setting(key, value);
                }

                var dialog = get_dialog(name);
                if (dialog) {
                    return dialog.setting(key, value);
                }
            },
            /**
             * [Alias] Sets dialog settings/options 
             */
            set: function(name,key,value){
                return this.setting(name, key,value);
            },
            /**
             * [Alias] Gets dialog settings/options 
             */
            get: function(name, key){
                return this.setting(name, key);
            },
            /**
             * Creates a new notification message.
             * If a type is passed, a class name "ajs-{type}" will be added.
             * This allows for custom look and feel for various types of notifications.
             *
             * @param  {String | DOMElement}    [message=undefined]		Message text
             * @param  {String}                 [type='']				Type of log message
             * @param  {String}                 [wait='']				Time (in seconds) to wait before auto-close
             * @param  {Function}               [callback=undefined]	A callback function to be invoked when the log is closed.
             *
             * @return {Object} Notification object.
             */
            notify: function (message, type, wait, callback) {
                return notifier.create(type, callback).push(message, wait);
            },
            /**
             * Creates a new notification message.
             *
             * @param  {String}		[message=undefined]		Message text
             * @param  {String}     [wait='']				Time (in seconds) to wait before auto-close
             * @param  {Function}	[callback=undefined]	A callback function to be invoked when the log is closed.
             *
             * @return {Object} Notification object.
             */
            message: function (message, wait, callback) {
                return notifier.create(null, callback).push(message, wait);
            },
            /**
             * Creates a new notification message of type 'success'.
             *
             * @param  {String}		[message=undefined]		Message text
             * @param  {String}     [wait='']				Time (in seconds) to wait before auto-close
             * @param  {Function}	[callback=undefined]	A callback function to be invoked when the log is closed.
             *
             * @return {Object} Notification object.
             */
            success: function (message, wait, callback) {
                return notifier.create('success', callback).push(message, wait);
            },
            /**
             * Creates a new notification message of type 'error'.
             *
             * @param  {String}		[message=undefined]		Message text
             * @param  {String}     [wait='']				Time (in seconds) to wait before auto-close
             * @param  {Function}	[callback=undefined]	A callback function to be invoked when the log is closed.
             *
             * @return {Object} Notification object.
             */
            error: function (message, wait, callback) {
                return notifier.create('error', callback).push(message, wait);
            },
            /**
             * Creates a new notification message of type 'warning'.
             *
             * @param  {String}		[message=undefined]		Message text
             * @param  {String}     [wait='']				Time (in seconds) to wait before auto-close
             * @param  {Function}	[callback=undefined]	A callback function to be invoked when the log is closed.
             *
             * @return {Object} Notification object.
             */
            warning: function (message, wait, callback) {
                return notifier.create('warning', callback).push(message, wait);
            },
            /**
             * Dismisses all open notifications
             *
             * @return {undefined}
             */
            dismissAll: function () {
                notifier.dismissAll();
            }
        };
    }
    var alertify = new Alertify();

    /**
    * Alert dialog definition
    *
    * invoked by:
    *	alertify.alert(message);
    *	alertify.alert(title, message);
    *	alertify.alert(message, onok);
    *	alertify.alert(title, message, onok);
     */
    alertify.dialog('alert', function () {
        return {
            main: function (_title, _message, _onok) {
                var title, message, onok;
                switch (arguments.length) {
                case 1:
                    message = _title;
                    break;
                case 2:
                    if (typeof _message === 'function') {
                        message = _title;
                        onok = _message;
                    } else {
                        title = _title;
                        message = _message;
                    }
                    break;
                case 3:
                    title = _title;
                    message = _message;
                    onok = _onok;
                    break;
                }
                this.set('title', title);
                this.set('message', message);
                this.set('onok', onok);
                return this;
            },
            setup: function () {
                return {
                    buttons: [
                        {
                            text: alertify.defaults.glossary.ok,
                            key: keys.ESC,
                            invokeOnClose: true,
                            className: alertify.defaults.theme.ok,
                        }
                    ],
                    focus: {
                        element: 0,
                        select: false
                    },
                    options: {
                        maximizable: false,
                        resizable: false
                    }
                };
            },
            build: function () {
                // nothing
            },
            prepare: function () {
                //nothing
            },
            setMessage: function (message) {
                this.setContent(message);
            },
            settings: {
                message: undefined,
                onok: undefined,
                label: undefined,
            },
            settingUpdated: function (key, oldValue, newValue) {
                switch (key) {
                case 'message':
                    this.setMessage(newValue);
                    break;
                case 'label':
                    if (this.__internal.buttons[0].element) {
                        this.__internal.buttons[0].element.innerHTML = newValue;
                    }
                    break;
                }
            },
            callback: function (closeEvent) {
                if (typeof this.get('onok') === 'function') {
                    var returnValue = this.get('onok').call(this, closeEvent);
                    if (typeof returnValue !== 'undefined') {
                        closeEvent.cancel = !returnValue;
                    }
                }
            }
        };
    });
    /**
     * Confirm dialog object
     *
     *	alertify.confirm(message);
     *	alertify.confirm(message, onok);
     *	alertify.confirm(message, onok, oncancel);
     *	alertify.confirm(title, message, onok, oncancel);
     */
    alertify.dialog('confirm', function () {

        var autoConfirm = {
            timer: null,
            index: null,
            text: null,
            duration: null,
            task: function (event, self) {
                if (self.isOpen()) {
                    self.__internal.buttons[autoConfirm.index].element.innerHTML = autoConfirm.text + ' (&#8207;' + autoConfirm.duration + '&#8207;) ';
                    autoConfirm.duration -= 1;
                    if (autoConfirm.duration === -1) {
                        clearAutoConfirm(self);
                        var button = self.__internal.buttons[autoConfirm.index];
                        var closeEvent = createCloseEvent(autoConfirm.index, button);

                        if (typeof self.callback === 'function') {
                            self.callback.apply(self, [closeEvent]);
                        }
                        //close the dialog.
                        if (closeEvent.close !== false) {
                            self.close();
                        }
                    }
                } else {
                    clearAutoConfirm(self);
                }
            }
        };

        function clearAutoConfirm(self) {
            if (autoConfirm.timer !== null) {
                clearInterval(autoConfirm.timer);
                autoConfirm.timer = null;
                self.__internal.buttons[autoConfirm.index].element.innerHTML = autoConfirm.text;
            }
        }

        function startAutoConfirm(self, index, duration) {
            clearAutoConfirm(self);
            autoConfirm.duration = duration;
            autoConfirm.index = index;
            autoConfirm.text = self.__internal.buttons[index].element.innerHTML;
            autoConfirm.timer = setInterval(delegate(self, autoConfirm.task), 1000);
            autoConfirm.task(null, self);
        }


        return {
            main: function (_title, _message, _onok, _oncancel) {
                var title, message, onok, oncancel;
                switch (arguments.length) {
                case 1:
                    message = _title;
                    break;
                case 2:
                    message = _title;
                    onok = _message;
                    break;
                case 3:
                    message = _title;
                    onok = _message;
                    oncancel = _onok;
                    break;
                case 4:
                    title = _title;
                    message = _message;
                    onok = _onok;
                    oncancel = _oncancel;
                    break;
                }
                this.set('title', title);
                this.set('message', message);
                this.set('onok', onok);
                this.set('oncancel', oncancel);
                return this;
            },
            setup: function () {
                return {
                    buttons: [
                        {
                            text: alertify.defaults.glossary.ok,
                            key: keys.ENTER,
                            className: alertify.defaults.theme.ok,
                        },
                        {
                            text: alertify.defaults.glossary.cancel,
                            key: keys.ESC,
                            invokeOnClose: true,
                            className: alertify.defaults.theme.cancel,
                        }
                    ],
                    focus: {
                        element: 0,
                        select: false
                    },
                    options: {
                        maximizable: false,
                        resizable: false
                    }
                };
            },
            build: function () {
                //nothing
            },
            prepare: function () {
                //nothing
            },
            setMessage: function (message) {
                this.setContent(message);
            },
            settings: {
                message: null,
                labels: null,
                onok: null,
                oncancel: null,
                defaultFocus: null,
                reverseButtons: null,
            },
            settingUpdated: function (key, oldValue, newValue) {
                switch (key) {
                case 'message':
                    this.setMessage(newValue);
                    break;
                case 'labels':
                    if ('ok' in newValue && this.__internal.buttons[0].element) {
                        this.__internal.buttons[0].text = newValue.ok;
                        this.__internal.buttons[0].element.innerHTML = newValue.ok;
                    }
                    if ('cancel' in newValue && this.__internal.buttons[1].element) {
                        this.__internal.buttons[1].text = newValue.cancel;
                        this.__internal.buttons[1].element.innerHTML = newValue.cancel;
                    }
                    break;
                case 'reverseButtons':
                    if (newValue === true) {
                        this.elements.buttons.primary.appendChild(this.__internal.buttons[0].element);
                    } else {
                        this.elements.buttons.primary.appendChild(this.__internal.buttons[1].element);
                    }
                    break;
                case 'defaultFocus':
                    this.__internal.focus.element = newValue === 'ok' ? 0 : 1;
                    break;
                }
            },
            callback: function (closeEvent) {
                clearAutoConfirm(this);
                var returnValue;
                switch (closeEvent.index) {
                case 0:
                    if (typeof this.get('onok') === 'function') {
                        returnValue = this.get('onok').call(this, closeEvent);
                        if (typeof returnValue !== 'undefined') {
                            closeEvent.cancel = !returnValue;
                        }
                    }
                    break;
                case 1:
                    if (typeof this.get('oncancel') === 'function') {
                        returnValue = this.get('oncancel').call(this, closeEvent);
                        if (typeof returnValue !== 'undefined') {
                            closeEvent.cancel = !returnValue;
                        }
                    }
                    break;
                }
            },
            autoOk: function (duration) {
                startAutoConfirm(this, 0, duration);
                return this;
            },
            autoCancel: function (duration) {
                startAutoConfirm(this, 1, duration);
                return this;
            }
        };
    });
    /**
     * Prompt dialog object
     *
     * invoked by:
     *	alertify.prompt(message);
     *	alertify.prompt(message, value);
     *	alertify.prompt(message, value, onok);
     *	alertify.prompt(message, value, onok, oncancel);
     *	alertify.prompt(title, message, value, onok, oncancel);
     */
    alertify.dialog('prompt', function () {
        var input = document.createElement('INPUT');
        var p = document.createElement('P');
        return {
            main: function (_title, _message, _value, _onok, _oncancel) {
                var title, message, value, onok, oncancel;
                switch (arguments.length) {
                case 1:
                    message = _title;
                    break;
                case 2:
                    message = _title;
                    value = _message;
                    break;
                case 3:
                    message = _title;
                    value = _message;
                    onok = _value;
                    break;
                case 4:
                    message = _title;
                    value = _message;
                    onok = _value;
                    oncancel = _onok;
                    break;
                case 5:
                    title = _title;
                    message = _message;
                    value = _value;
                    onok = _onok;
                    oncancel = _oncancel;
                    break;
                }
                this.set('title', title);
                this.set('message', message);
                this.set('value', value);
                this.set('onok', onok);
                this.set('oncancel', oncancel);
                return this;
            },
            setup: function () {
                return {
                    buttons: [
                        {
                            text: alertify.defaults.glossary.ok,
                            key: keys.ENTER,
                            className: alertify.defaults.theme.ok,
                        },
                        {
                            text: alertify.defaults.glossary.cancel,
                            key: keys.ESC,
                            invokeOnClose: true,
                            className: alertify.defaults.theme.cancel,
                        }
                    ],
                    focus: {
                        element: input,
                        select: true
                    },
                    options: {
                        maximizable: false,
                        resizable: false
                    }
                };
            },
            build: function () {
                input.className = alertify.defaults.theme.input;
                input.setAttribute('type', 'text');
                input.value = this.get('value');
                this.elements.content.appendChild(p);
                this.elements.content.appendChild(input);
            },
            prepare: function () {
                //nothing
            },
            setMessage: function (message) {
                if (typeof message === 'string') {
                    clearContents(p);
                    p.innerHTML = message;
                } else if (message instanceof window.HTMLElement && p.firstChild !== message) {
                    clearContents(p);
                    p.appendChild(message);
                }
            },
            settings: {
                message: undefined,
                labels: undefined,
                onok: undefined,
                oncancel: undefined,
                value: '',
                type:'text',
                reverseButtons: undefined,
            },
            settingUpdated: function (key, oldValue, newValue) {
                switch (key) {
                case 'message':
                    this.setMessage(newValue);
                    break;
                case 'value':
                    input.value = newValue;
                    break;
                case 'type':
                    switch (newValue) {
                    case 'text':
                    case 'color':
                    case 'date':
                    case 'datetime-local':
                    case 'email':
                    case 'month':
                    case 'number':
                    case 'password':
                    case 'search':
                    case 'tel':
                    case 'time':
                    case 'week':
                        input.type = newValue;
                        break;
                    default:
                        input.type = 'text';
                        break;
                    }
                    break;
                case 'labels':
                    if (newValue.ok && this.__internal.buttons[0].element) {
                        this.__internal.buttons[0].element.innerHTML = newValue.ok;
                    }
                    if (newValue.cancel && this.__internal.buttons[1].element) {
                        this.__internal.buttons[1].element.innerHTML = newValue.cancel;
                    }
                    break;
                case 'reverseButtons':
                    if (newValue === true) {
                        this.elements.buttons.primary.appendChild(this.__internal.buttons[0].element);
                    } else {
                        this.elements.buttons.primary.appendChild(this.__internal.buttons[1].element);
                    }
                    break;
                }
            },
            callback: function (closeEvent) {
                var returnValue;
                switch (closeEvent.index) {
                case 0:
                    this.settings.value = input.value;
                    if (typeof this.get('onok') === 'function') {
                        returnValue = this.get('onok').call(this, closeEvent, this.settings.value);
                        if (typeof returnValue !== 'undefined') {
                            closeEvent.cancel = !returnValue;
                        }
                    }
                    break;
                case 1:
                    if (typeof this.get('oncancel') === 'function') {
                        returnValue = this.get('oncancel').call(this, closeEvent);
                        if (typeof returnValue !== 'undefined') {
                            closeEvent.cancel = !returnValue;
                        }
                    }
                    if(!closeEvent.cancel){
                        input.value = this.settings.value;
                    }
                    break;
                }
            }
        };
    });

    // CommonJS
    if ( typeof module === 'object' && typeof module.exports === 'object' ) {
        module.exports = alertify;
    // AMD
    } else if ( true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
            return alertify;
        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    // window
    } else if ( !window.alertify ) {
        window.alertify = alertify;
    }

} ( typeof window !== 'undefined' ? window : this ) );


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(44);

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(2);
var bind = __webpack_require__(22);
var Axios = __webpack_require__(46);
var defaults = __webpack_require__(12);

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context);

  // Copy axios.prototype to instance
  utils.extend(instance, Axios.prototype, context);

  // Copy context to instance
  utils.extend(instance, context);

  return instance;
}

// Create the default instance to be exported
var axios = createInstance(defaults);

// Expose Axios class to allow class inheritance
axios.Axios = Axios;

// Factory for creating new instances
axios.create = function create(instanceConfig) {
  return createInstance(utils.merge(defaults, instanceConfig));
};

// Expose Cancel & CancelToken
axios.Cancel = __webpack_require__(19);
axios.CancelToken = __webpack_require__(45);
axios.isCancel = __webpack_require__(20);

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = __webpack_require__(60);

module.exports = axios;

// Allow use of default import syntax in TypeScript
module.exports.default = axios;


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var Cancel = __webpack_require__(19);

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */
function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;
  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });

  var token = this;
  executor(function cancel(message) {
    if (token.reason) {
      // Cancellation has already been requested
      return;
    }

    token.reason = new Cancel(message);
    resolvePromise(token.reason);
  });
}

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */
CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

module.exports = CancelToken;


/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var defaults = __webpack_require__(12);
var utils = __webpack_require__(2);
var InterceptorManager = __webpack_require__(47);
var dispatchRequest = __webpack_require__(48);
var isAbsoluteURL = __webpack_require__(56);
var combineURLs = __webpack_require__(54);

/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */
function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */
Axios.prototype.request = function request(config) {
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof config === 'string') {
    config = utils.merge({
      url: arguments[0]
    }, arguments[1]);
  }

  config = utils.merge(defaults, this.defaults, { method: 'get' }, config);
  config.method = config.method.toLowerCase();

  // Support baseURL config
  if (config.baseURL && !isAbsoluteURL(config.url)) {
    config.url = combineURLs(config.baseURL, config.url);
  }

  // Hook up interceptors middleware
  var chain = [dispatchRequest, undefined];
  var promise = Promise.resolve(config);

  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    chain.unshift(interceptor.fulfilled, interceptor.rejected);
  });

  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    chain.push(interceptor.fulfilled, interceptor.rejected);
  });

  while (chain.length) {
    promise = promise.then(chain.shift(), chain.shift());
  }

  return promise;
};

// Provide aliases for supported request methods
utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, config) {
    return this.request(utils.merge(config || {}, {
      method: method,
      url: url
    }));
  };
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, data, config) {
    return this.request(utils.merge(config || {}, {
      method: method,
      url: url,
      data: data
    }));
  };
});

module.exports = Axios;


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(2);

function InterceptorManager() {
  this.handlers = [];
}

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */
InterceptorManager.prototype.use = function use(fulfilled, rejected) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected
  });
  return this.handlers.length - 1;
};

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */
InterceptorManager.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */
InterceptorManager.prototype.forEach = function forEach(fn) {
  utils.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};

module.exports = InterceptorManager;


/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(2);
var transformData = __webpack_require__(51);
var isCancel = __webpack_require__(20);
var defaults = __webpack_require__(12);

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */
module.exports = function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  // Ensure headers exist
  config.headers = config.headers || {};

  // Transform request data
  config.data = transformData(
    config.data,
    config.headers,
    config.transformRequest
  );

  // Flatten headers
  config.headers = utils.merge(
    config.headers.common || {},
    config.headers[config.method] || {},
    config.headers || {}
  );

  utils.forEach(
    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
    function cleanHeaderConfig(method) {
      delete config.headers[method];
    }
  );

  var adapter = config.adapter || defaults.adapter;

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData(
      response.data,
      response.headers,
      config.transformResponse
    );

    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData(
          reason.response.data,
          reason.response.headers,
          config.transformResponse
        );
      }
    }

    return Promise.reject(reason);
  });
};


/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */
module.exports = function enhanceError(error, config, code, request, response) {
  error.config = config;
  if (code) {
    error.code = code;
  }
  error.request = request;
  error.response = response;
  return error;
};


/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var createError = __webpack_require__(21);

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */
module.exports = function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus;
  // Note: status is not exposed by XDomainRequest
  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(createError(
      'Request failed with status code ' + response.status,
      response.config,
      null,
      response.request,
      response
    ));
  }
};


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(2);

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */
module.exports = function transformData(data, headers, fns) {
  /*eslint no-param-reassign:0*/
  utils.forEach(fns, function transform(fn) {
    data = fn(data, headers);
  });

  return data;
};


/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// btoa polyfill for IE<10 courtesy https://github.com/davidchambers/Base64.js

var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

function E() {
  this.message = 'String contains an invalid character';
}
E.prototype = new Error;
E.prototype.code = 5;
E.prototype.name = 'InvalidCharacterError';

function btoa(input) {
  var str = String(input);
  var output = '';
  for (
    // initialize result and counter
    var block, charCode, idx = 0, map = chars;
    // if the next str index does not exist:
    //   change the mapping table to "="
    //   check if d has no fractional digits
    str.charAt(idx | 0) || (map = '=', idx % 1);
    // "8 - idx % 1 * 8" generates the sequence 2, 4, 6, 8
    output += map.charAt(63 & block >> 8 - idx % 1 * 8)
  ) {
    charCode = str.charCodeAt(idx += 3 / 4);
    if (charCode > 0xFF) {
      throw new E();
    }
    block = block << 8 | charCode;
  }
  return output;
}

module.exports = btoa;


/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(2);

function encode(val) {
  return encodeURIComponent(val).
    replace(/%40/gi, '@').
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */
module.exports = function buildURL(url, params, paramsSerializer) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }

  var serializedParams;
  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];

    utils.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils.isArray(val)) {
        key = key + '[]';
      }

      if (!utils.isArray(val)) {
        val = [val];
      }

      utils.forEach(val, function parseValue(v) {
        if (utils.isDate(v)) {
          v = v.toISOString();
        } else if (utils.isObject(v)) {
          v = JSON.stringify(v);
        }
        parts.push(encode(key) + '=' + encode(v));
      });
    });

    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};


/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */
module.exports = function combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
};


/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(2);

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs support document.cookie
  (function standardBrowserEnv() {
    return {
      write: function write(name, value, expires, path, domain, secure) {
        var cookie = [];
        cookie.push(name + '=' + encodeURIComponent(value));

        if (utils.isNumber(expires)) {
          cookie.push('expires=' + new Date(expires).toGMTString());
        }

        if (utils.isString(path)) {
          cookie.push('path=' + path);
        }

        if (utils.isString(domain)) {
          cookie.push('domain=' + domain);
        }

        if (secure === true) {
          cookie.push('secure');
        }

        document.cookie = cookie.join('; ');
      },

      read: function read(name) {
        var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
        return (match ? decodeURIComponent(match[3]) : null);
      },

      remove: function remove(name) {
        this.write(name, '', Date.now() - 86400000);
      }
    };
  })() :

  // Non standard browser env (web workers, react-native) lack needed support.
  (function nonStandardBrowserEnv() {
    return {
      write: function write() {},
      read: function read() { return null; },
      remove: function remove() {}
    };
  })()
);


/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
module.exports = function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
};


/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(2);

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
  (function standardBrowserEnv() {
    var msie = /(msie|trident)/i.test(navigator.userAgent);
    var urlParsingNode = document.createElement('a');
    var originURL;

    /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */
    function resolveURL(url) {
      var href = url;

      if (msie) {
        // IE needs attribute set twice to normalize properties
        urlParsingNode.setAttribute('href', href);
        href = urlParsingNode.href;
      }

      urlParsingNode.setAttribute('href', href);

      // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
      return {
        href: urlParsingNode.href,
        protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
        host: urlParsingNode.host,
        search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
        hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
        hostname: urlParsingNode.hostname,
        port: urlParsingNode.port,
        pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
                  urlParsingNode.pathname :
                  '/' + urlParsingNode.pathname
      };
    }

    originURL = resolveURL(window.location.href);

    /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */
    return function isURLSameOrigin(requestURL) {
      var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
      return (parsed.protocol === originURL.protocol &&
            parsed.host === originURL.host);
    };
  })() :

  // Non standard browser envs (web workers, react-native) lack needed support.
  (function nonStandardBrowserEnv() {
    return function isURLSameOrigin() {
      return true;
    };
  })()
);


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(2);

module.exports = function normalizeHeaderName(headers, normalizedName) {
  utils.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(2);

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */
module.exports = function parseHeaders(headers) {
  var parsed = {};
  var key;
  var val;
  var i;

  if (!headers) { return parsed; }

  utils.forEach(headers.split('\n'), function parser(line) {
    i = line.indexOf(':');
    key = utils.trim(line.substr(0, i)).toLowerCase();
    val = utils.trim(line.substr(i + 1));

    if (key) {
      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
    }
  });

  return parsed;
};


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */
module.exports = function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {


window._ = __webpack_require__(109);

/**
 * We'll load jQuery and the Bootstrap jQuery plugin which provides support
 * for JavaScript based Bootstrap features such as modals and tabs. This
 * code may be modified to fit the specific needs of your application.
 */

try {
  window.$ = window.jQuery = __webpack_require__(3);

  __webpack_require__(64);
} catch (e) {}

/*
*Well add datatables to the app
*/

window.dt = __webpack_require__(13);
window.bs = __webpack_require__(65);
window.responsive = __webpack_require__(66);

/*
* Add Alertifyjs librarary. Allows for beautiful alert messages
*
*/

window.alertifyjs = __webpack_require__(42);

/*
* Add Kendo-ui core
*/

window.kendo = __webpack_require__(106);

/**
 * We'll load the axios HTTP library which allows us to easily issue requests
 * to our Laravel back-end. This library automatically handles sending the
 * CSRF token as a header based on the value of the "XSRF" token cookie.
 */

window.axios = __webpack_require__(43);

window.axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';

/**
 * Next we will register the CSRF Token as a common header with Axios so that
 * all outgoing HTTP requests automatically have it attached. This is just
 * a simple convenience so we don't have to attach every token manually.
 */

var token = document.head.querySelector('meta[name="csrf-token"]');

if (token) {
  window.axios.defaults.headers.common['X-CSRF-TOKEN'] = token.content;
} else {
  console.error('CSRF token not found: https://laravel.com/docs/csrf#csrf-x-csrf-token');
}

/**
 * Echo exposes an expressive API for subscribing to channels and listening
 * for events that are broadcast by Laravel. Echo and event broadcasting
 * allows your team to easily build robust real-time web applications.
 */

// import Echo from 'laravel-echo'

// window.Pusher = require('pusher-js');

// window.Echo = new Echo({
//     broadcaster: 'pusher',
//     key: 'your-pusher-key'
// });

/***/ }),
/* 62 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ __webpack_exports__["default"] = ({
    mounted: function mounted() {
        console.log('Component mounted.');
    }
});

/***/ }),
/* 63 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//


/* harmony default export */ __webpack_exports__["default"] = ({

    data: function data() {
        return {
            grades: []
        };
    },
    created: function created() {
        var _this = this;

        axios.get('/grades').then(function (response) {
            _this.grades = response.data, console.log(response.data);
        });
    },
    updated: function updated() {
        $('#dataTables-example').DataTable({ responsive: true }), console.log('Component activated.');
    },

    methods: {
        disp: function disp(grade) {
            console.log(grade.classes);
        }
    }
});

/***/ }),
/* 64 */
/***/ (function(module, exports) {

/*!
 * Bootstrap v3.3.7 (http://getbootstrap.com)
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under the MIT license
 */

if (typeof jQuery === 'undefined') {
  throw new Error('Bootstrap\'s JavaScript requires jQuery')
}

+function ($) {
  'use strict';
  var version = $.fn.jquery.split(' ')[0].split('.')
  if ((version[0] < 2 && version[1] < 9) || (version[0] == 1 && version[1] == 9 && version[2] < 1) || (version[0] > 3)) {
    throw new Error('Bootstrap\'s JavaScript requires jQuery version 1.9.1 or higher, but lower than version 4')
  }
}(jQuery);

/* ========================================================================
 * Bootstrap: transition.js v3.3.7
 * http://getbootstrap.com/javascript/#transitions
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // CSS TRANSITION SUPPORT (Shoutout: http://www.modernizr.com/)
  // ============================================================

  function transitionEnd() {
    var el = document.createElement('bootstrap')

    var transEndEventNames = {
      WebkitTransition : 'webkitTransitionEnd',
      MozTransition    : 'transitionend',
      OTransition      : 'oTransitionEnd otransitionend',
      transition       : 'transitionend'
    }

    for (var name in transEndEventNames) {
      if (el.style[name] !== undefined) {
        return { end: transEndEventNames[name] }
      }
    }

    return false // explicit for ie8 (  ._.)
  }

  // http://blog.alexmaccaw.com/css-transitions
  $.fn.emulateTransitionEnd = function (duration) {
    var called = false
    var $el = this
    $(this).one('bsTransitionEnd', function () { called = true })
    var callback = function () { if (!called) $($el).trigger($.support.transition.end) }
    setTimeout(callback, duration)
    return this
  }

  $(function () {
    $.support.transition = transitionEnd()

    if (!$.support.transition) return

    $.event.special.bsTransitionEnd = {
      bindType: $.support.transition.end,
      delegateType: $.support.transition.end,
      handle: function (e) {
        if ($(e.target).is(this)) return e.handleObj.handler.apply(this, arguments)
      }
    }
  })

}(jQuery);

/* ========================================================================
 * Bootstrap: alert.js v3.3.7
 * http://getbootstrap.com/javascript/#alerts
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // ALERT CLASS DEFINITION
  // ======================

  var dismiss = '[data-dismiss="alert"]'
  var Alert   = function (el) {
    $(el).on('click', dismiss, this.close)
  }

  Alert.VERSION = '3.3.7'

  Alert.TRANSITION_DURATION = 150

  Alert.prototype.close = function (e) {
    var $this    = $(this)
    var selector = $this.attr('data-target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
    }

    var $parent = $(selector === '#' ? [] : selector)

    if (e) e.preventDefault()

    if (!$parent.length) {
      $parent = $this.closest('.alert')
    }

    $parent.trigger(e = $.Event('close.bs.alert'))

    if (e.isDefaultPrevented()) return

    $parent.removeClass('in')

    function removeElement() {
      // detach from parent, fire event then clean up data
      $parent.detach().trigger('closed.bs.alert').remove()
    }

    $.support.transition && $parent.hasClass('fade') ?
      $parent
        .one('bsTransitionEnd', removeElement)
        .emulateTransitionEnd(Alert.TRANSITION_DURATION) :
      removeElement()
  }


  // ALERT PLUGIN DEFINITION
  // =======================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.data('bs.alert')

      if (!data) $this.data('bs.alert', (data = new Alert(this)))
      if (typeof option == 'string') data[option].call($this)
    })
  }

  var old = $.fn.alert

  $.fn.alert             = Plugin
  $.fn.alert.Constructor = Alert


  // ALERT NO CONFLICT
  // =================

  $.fn.alert.noConflict = function () {
    $.fn.alert = old
    return this
  }


  // ALERT DATA-API
  // ==============

  $(document).on('click.bs.alert.data-api', dismiss, Alert.prototype.close)

}(jQuery);

/* ========================================================================
 * Bootstrap: button.js v3.3.7
 * http://getbootstrap.com/javascript/#buttons
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // BUTTON PUBLIC CLASS DEFINITION
  // ==============================

  var Button = function (element, options) {
    this.$element  = $(element)
    this.options   = $.extend({}, Button.DEFAULTS, options)
    this.isLoading = false
  }

  Button.VERSION  = '3.3.7'

  Button.DEFAULTS = {
    loadingText: 'loading...'
  }

  Button.prototype.setState = function (state) {
    var d    = 'disabled'
    var $el  = this.$element
    var val  = $el.is('input') ? 'val' : 'html'
    var data = $el.data()

    state += 'Text'

    if (data.resetText == null) $el.data('resetText', $el[val]())

    // push to event loop to allow forms to submit
    setTimeout($.proxy(function () {
      $el[val](data[state] == null ? this.options[state] : data[state])

      if (state == 'loadingText') {
        this.isLoading = true
        $el.addClass(d).attr(d, d).prop(d, true)
      } else if (this.isLoading) {
        this.isLoading = false
        $el.removeClass(d).removeAttr(d).prop(d, false)
      }
    }, this), 0)
  }

  Button.prototype.toggle = function () {
    var changed = true
    var $parent = this.$element.closest('[data-toggle="buttons"]')

    if ($parent.length) {
      var $input = this.$element.find('input')
      if ($input.prop('type') == 'radio') {
        if ($input.prop('checked')) changed = false
        $parent.find('.active').removeClass('active')
        this.$element.addClass('active')
      } else if ($input.prop('type') == 'checkbox') {
        if (($input.prop('checked')) !== this.$element.hasClass('active')) changed = false
        this.$element.toggleClass('active')
      }
      $input.prop('checked', this.$element.hasClass('active'))
      if (changed) $input.trigger('change')
    } else {
      this.$element.attr('aria-pressed', !this.$element.hasClass('active'))
      this.$element.toggleClass('active')
    }
  }


  // BUTTON PLUGIN DEFINITION
  // ========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.button')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.button', (data = new Button(this, options)))

      if (option == 'toggle') data.toggle()
      else if (option) data.setState(option)
    })
  }

  var old = $.fn.button

  $.fn.button             = Plugin
  $.fn.button.Constructor = Button


  // BUTTON NO CONFLICT
  // ==================

  $.fn.button.noConflict = function () {
    $.fn.button = old
    return this
  }


  // BUTTON DATA-API
  // ===============

  $(document)
    .on('click.bs.button.data-api', '[data-toggle^="button"]', function (e) {
      var $btn = $(e.target).closest('.btn')
      Plugin.call($btn, 'toggle')
      if (!($(e.target).is('input[type="radio"], input[type="checkbox"]'))) {
        // Prevent double click on radios, and the double selections (so cancellation) on checkboxes
        e.preventDefault()
        // The target component still receive the focus
        if ($btn.is('input,button')) $btn.trigger('focus')
        else $btn.find('input:visible,button:visible').first().trigger('focus')
      }
    })
    .on('focus.bs.button.data-api blur.bs.button.data-api', '[data-toggle^="button"]', function (e) {
      $(e.target).closest('.btn').toggleClass('focus', /^focus(in)?$/.test(e.type))
    })

}(jQuery);

/* ========================================================================
 * Bootstrap: carousel.js v3.3.7
 * http://getbootstrap.com/javascript/#carousel
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // CAROUSEL CLASS DEFINITION
  // =========================

  var Carousel = function (element, options) {
    this.$element    = $(element)
    this.$indicators = this.$element.find('.carousel-indicators')
    this.options     = options
    this.paused      = null
    this.sliding     = null
    this.interval    = null
    this.$active     = null
    this.$items      = null

    this.options.keyboard && this.$element.on('keydown.bs.carousel', $.proxy(this.keydown, this))

    this.options.pause == 'hover' && !('ontouchstart' in document.documentElement) && this.$element
      .on('mouseenter.bs.carousel', $.proxy(this.pause, this))
      .on('mouseleave.bs.carousel', $.proxy(this.cycle, this))
  }

  Carousel.VERSION  = '3.3.7'

  Carousel.TRANSITION_DURATION = 600

  Carousel.DEFAULTS = {
    interval: 5000,
    pause: 'hover',
    wrap: true,
    keyboard: true
  }

  Carousel.prototype.keydown = function (e) {
    if (/input|textarea/i.test(e.target.tagName)) return
    switch (e.which) {
      case 37: this.prev(); break
      case 39: this.next(); break
      default: return
    }

    e.preventDefault()
  }

  Carousel.prototype.cycle = function (e) {
    e || (this.paused = false)

    this.interval && clearInterval(this.interval)

    this.options.interval
      && !this.paused
      && (this.interval = setInterval($.proxy(this.next, this), this.options.interval))

    return this
  }

  Carousel.prototype.getItemIndex = function (item) {
    this.$items = item.parent().children('.item')
    return this.$items.index(item || this.$active)
  }

  Carousel.prototype.getItemForDirection = function (direction, active) {
    var activeIndex = this.getItemIndex(active)
    var willWrap = (direction == 'prev' && activeIndex === 0)
                || (direction == 'next' && activeIndex == (this.$items.length - 1))
    if (willWrap && !this.options.wrap) return active
    var delta = direction == 'prev' ? -1 : 1
    var itemIndex = (activeIndex + delta) % this.$items.length
    return this.$items.eq(itemIndex)
  }

  Carousel.prototype.to = function (pos) {
    var that        = this
    var activeIndex = this.getItemIndex(this.$active = this.$element.find('.item.active'))

    if (pos > (this.$items.length - 1) || pos < 0) return

    if (this.sliding)       return this.$element.one('slid.bs.carousel', function () { that.to(pos) }) // yes, "slid"
    if (activeIndex == pos) return this.pause().cycle()

    return this.slide(pos > activeIndex ? 'next' : 'prev', this.$items.eq(pos))
  }

  Carousel.prototype.pause = function (e) {
    e || (this.paused = true)

    if (this.$element.find('.next, .prev').length && $.support.transition) {
      this.$element.trigger($.support.transition.end)
      this.cycle(true)
    }

    this.interval = clearInterval(this.interval)

    return this
  }

  Carousel.prototype.next = function () {
    if (this.sliding) return
    return this.slide('next')
  }

  Carousel.prototype.prev = function () {
    if (this.sliding) return
    return this.slide('prev')
  }

  Carousel.prototype.slide = function (type, next) {
    var $active   = this.$element.find('.item.active')
    var $next     = next || this.getItemForDirection(type, $active)
    var isCycling = this.interval
    var direction = type == 'next' ? 'left' : 'right'
    var that      = this

    if ($next.hasClass('active')) return (this.sliding = false)

    var relatedTarget = $next[0]
    var slideEvent = $.Event('slide.bs.carousel', {
      relatedTarget: relatedTarget,
      direction: direction
    })
    this.$element.trigger(slideEvent)
    if (slideEvent.isDefaultPrevented()) return

    this.sliding = true

    isCycling && this.pause()

    if (this.$indicators.length) {
      this.$indicators.find('.active').removeClass('active')
      var $nextIndicator = $(this.$indicators.children()[this.getItemIndex($next)])
      $nextIndicator && $nextIndicator.addClass('active')
    }

    var slidEvent = $.Event('slid.bs.carousel', { relatedTarget: relatedTarget, direction: direction }) // yes, "slid"
    if ($.support.transition && this.$element.hasClass('slide')) {
      $next.addClass(type)
      $next[0].offsetWidth // force reflow
      $active.addClass(direction)
      $next.addClass(direction)
      $active
        .one('bsTransitionEnd', function () {
          $next.removeClass([type, direction].join(' ')).addClass('active')
          $active.removeClass(['active', direction].join(' '))
          that.sliding = false
          setTimeout(function () {
            that.$element.trigger(slidEvent)
          }, 0)
        })
        .emulateTransitionEnd(Carousel.TRANSITION_DURATION)
    } else {
      $active.removeClass('active')
      $next.addClass('active')
      this.sliding = false
      this.$element.trigger(slidEvent)
    }

    isCycling && this.cycle()

    return this
  }


  // CAROUSEL PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.carousel')
      var options = $.extend({}, Carousel.DEFAULTS, $this.data(), typeof option == 'object' && option)
      var action  = typeof option == 'string' ? option : options.slide

      if (!data) $this.data('bs.carousel', (data = new Carousel(this, options)))
      if (typeof option == 'number') data.to(option)
      else if (action) data[action]()
      else if (options.interval) data.pause().cycle()
    })
  }

  var old = $.fn.carousel

  $.fn.carousel             = Plugin
  $.fn.carousel.Constructor = Carousel


  // CAROUSEL NO CONFLICT
  // ====================

  $.fn.carousel.noConflict = function () {
    $.fn.carousel = old
    return this
  }


  // CAROUSEL DATA-API
  // =================

  var clickHandler = function (e) {
    var href
    var $this   = $(this)
    var $target = $($this.attr('data-target') || (href = $this.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '')) // strip for ie7
    if (!$target.hasClass('carousel')) return
    var options = $.extend({}, $target.data(), $this.data())
    var slideIndex = $this.attr('data-slide-to')
    if (slideIndex) options.interval = false

    Plugin.call($target, options)

    if (slideIndex) {
      $target.data('bs.carousel').to(slideIndex)
    }

    e.preventDefault()
  }

  $(document)
    .on('click.bs.carousel.data-api', '[data-slide]', clickHandler)
    .on('click.bs.carousel.data-api', '[data-slide-to]', clickHandler)

  $(window).on('load', function () {
    $('[data-ride="carousel"]').each(function () {
      var $carousel = $(this)
      Plugin.call($carousel, $carousel.data())
    })
  })

}(jQuery);

/* ========================================================================
 * Bootstrap: collapse.js v3.3.7
 * http://getbootstrap.com/javascript/#collapse
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */

/* jshint latedef: false */

+function ($) {
  'use strict';

  // COLLAPSE PUBLIC CLASS DEFINITION
  // ================================

  var Collapse = function (element, options) {
    this.$element      = $(element)
    this.options       = $.extend({}, Collapse.DEFAULTS, options)
    this.$trigger      = $('[data-toggle="collapse"][href="#' + element.id + '"],' +
                           '[data-toggle="collapse"][data-target="#' + element.id + '"]')
    this.transitioning = null

    if (this.options.parent) {
      this.$parent = this.getParent()
    } else {
      this.addAriaAndCollapsedClass(this.$element, this.$trigger)
    }

    if (this.options.toggle) this.toggle()
  }

  Collapse.VERSION  = '3.3.7'

  Collapse.TRANSITION_DURATION = 350

  Collapse.DEFAULTS = {
    toggle: true
  }

  Collapse.prototype.dimension = function () {
    var hasWidth = this.$element.hasClass('width')
    return hasWidth ? 'width' : 'height'
  }

  Collapse.prototype.show = function () {
    if (this.transitioning || this.$element.hasClass('in')) return

    var activesData
    var actives = this.$parent && this.$parent.children('.panel').children('.in, .collapsing')

    if (actives && actives.length) {
      activesData = actives.data('bs.collapse')
      if (activesData && activesData.transitioning) return
    }

    var startEvent = $.Event('show.bs.collapse')
    this.$element.trigger(startEvent)
    if (startEvent.isDefaultPrevented()) return

    if (actives && actives.length) {
      Plugin.call(actives, 'hide')
      activesData || actives.data('bs.collapse', null)
    }

    var dimension = this.dimension()

    this.$element
      .removeClass('collapse')
      .addClass('collapsing')[dimension](0)
      .attr('aria-expanded', true)

    this.$trigger
      .removeClass('collapsed')
      .attr('aria-expanded', true)

    this.transitioning = 1

    var complete = function () {
      this.$element
        .removeClass('collapsing')
        .addClass('collapse in')[dimension]('')
      this.transitioning = 0
      this.$element
        .trigger('shown.bs.collapse')
    }

    if (!$.support.transition) return complete.call(this)

    var scrollSize = $.camelCase(['scroll', dimension].join('-'))

    this.$element
      .one('bsTransitionEnd', $.proxy(complete, this))
      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)[dimension](this.$element[0][scrollSize])
  }

  Collapse.prototype.hide = function () {
    if (this.transitioning || !this.$element.hasClass('in')) return

    var startEvent = $.Event('hide.bs.collapse')
    this.$element.trigger(startEvent)
    if (startEvent.isDefaultPrevented()) return

    var dimension = this.dimension()

    this.$element[dimension](this.$element[dimension]())[0].offsetHeight

    this.$element
      .addClass('collapsing')
      .removeClass('collapse in')
      .attr('aria-expanded', false)

    this.$trigger
      .addClass('collapsed')
      .attr('aria-expanded', false)

    this.transitioning = 1

    var complete = function () {
      this.transitioning = 0
      this.$element
        .removeClass('collapsing')
        .addClass('collapse')
        .trigger('hidden.bs.collapse')
    }

    if (!$.support.transition) return complete.call(this)

    this.$element
      [dimension](0)
      .one('bsTransitionEnd', $.proxy(complete, this))
      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)
  }

  Collapse.prototype.toggle = function () {
    this[this.$element.hasClass('in') ? 'hide' : 'show']()
  }

  Collapse.prototype.getParent = function () {
    return $(this.options.parent)
      .find('[data-toggle="collapse"][data-parent="' + this.options.parent + '"]')
      .each($.proxy(function (i, element) {
        var $element = $(element)
        this.addAriaAndCollapsedClass(getTargetFromTrigger($element), $element)
      }, this))
      .end()
  }

  Collapse.prototype.addAriaAndCollapsedClass = function ($element, $trigger) {
    var isOpen = $element.hasClass('in')

    $element.attr('aria-expanded', isOpen)
    $trigger
      .toggleClass('collapsed', !isOpen)
      .attr('aria-expanded', isOpen)
  }

  function getTargetFromTrigger($trigger) {
    var href
    var target = $trigger.attr('data-target')
      || (href = $trigger.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '') // strip for ie7

    return $(target)
  }


  // COLLAPSE PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.collapse')
      var options = $.extend({}, Collapse.DEFAULTS, $this.data(), typeof option == 'object' && option)

      if (!data && options.toggle && /show|hide/.test(option)) options.toggle = false
      if (!data) $this.data('bs.collapse', (data = new Collapse(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.collapse

  $.fn.collapse             = Plugin
  $.fn.collapse.Constructor = Collapse


  // COLLAPSE NO CONFLICT
  // ====================

  $.fn.collapse.noConflict = function () {
    $.fn.collapse = old
    return this
  }


  // COLLAPSE DATA-API
  // =================

  $(document).on('click.bs.collapse.data-api', '[data-toggle="collapse"]', function (e) {
    var $this   = $(this)

    if (!$this.attr('data-target')) e.preventDefault()

    var $target = getTargetFromTrigger($this)
    var data    = $target.data('bs.collapse')
    var option  = data ? 'toggle' : $this.data()

    Plugin.call($target, option)
  })

}(jQuery);

/* ========================================================================
 * Bootstrap: dropdown.js v3.3.7
 * http://getbootstrap.com/javascript/#dropdowns
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // DROPDOWN CLASS DEFINITION
  // =========================

  var backdrop = '.dropdown-backdrop'
  var toggle   = '[data-toggle="dropdown"]'
  var Dropdown = function (element) {
    $(element).on('click.bs.dropdown', this.toggle)
  }

  Dropdown.VERSION = '3.3.7'

  function getParent($this) {
    var selector = $this.attr('data-target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && /#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
    }

    var $parent = selector && $(selector)

    return $parent && $parent.length ? $parent : $this.parent()
  }

  function clearMenus(e) {
    if (e && e.which === 3) return
    $(backdrop).remove()
    $(toggle).each(function () {
      var $this         = $(this)
      var $parent       = getParent($this)
      var relatedTarget = { relatedTarget: this }

      if (!$parent.hasClass('open')) return

      if (e && e.type == 'click' && /input|textarea/i.test(e.target.tagName) && $.contains($parent[0], e.target)) return

      $parent.trigger(e = $.Event('hide.bs.dropdown', relatedTarget))

      if (e.isDefaultPrevented()) return

      $this.attr('aria-expanded', 'false')
      $parent.removeClass('open').trigger($.Event('hidden.bs.dropdown', relatedTarget))
    })
  }

  Dropdown.prototype.toggle = function (e) {
    var $this = $(this)

    if ($this.is('.disabled, :disabled')) return

    var $parent  = getParent($this)
    var isActive = $parent.hasClass('open')

    clearMenus()

    if (!isActive) {
      if ('ontouchstart' in document.documentElement && !$parent.closest('.navbar-nav').length) {
        // if mobile we use a backdrop because click events don't delegate
        $(document.createElement('div'))
          .addClass('dropdown-backdrop')
          .insertAfter($(this))
          .on('click', clearMenus)
      }

      var relatedTarget = { relatedTarget: this }
      $parent.trigger(e = $.Event('show.bs.dropdown', relatedTarget))

      if (e.isDefaultPrevented()) return

      $this
        .trigger('focus')
        .attr('aria-expanded', 'true')

      $parent
        .toggleClass('open')
        .trigger($.Event('shown.bs.dropdown', relatedTarget))
    }

    return false
  }

  Dropdown.prototype.keydown = function (e) {
    if (!/(38|40|27|32)/.test(e.which) || /input|textarea/i.test(e.target.tagName)) return

    var $this = $(this)

    e.preventDefault()
    e.stopPropagation()

    if ($this.is('.disabled, :disabled')) return

    var $parent  = getParent($this)
    var isActive = $parent.hasClass('open')

    if (!isActive && e.which != 27 || isActive && e.which == 27) {
      if (e.which == 27) $parent.find(toggle).trigger('focus')
      return $this.trigger('click')
    }

    var desc = ' li:not(.disabled):visible a'
    var $items = $parent.find('.dropdown-menu' + desc)

    if (!$items.length) return

    var index = $items.index(e.target)

    if (e.which == 38 && index > 0)                 index--         // up
    if (e.which == 40 && index < $items.length - 1) index++         // down
    if (!~index)                                    index = 0

    $items.eq(index).trigger('focus')
  }


  // DROPDOWN PLUGIN DEFINITION
  // ==========================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.data('bs.dropdown')

      if (!data) $this.data('bs.dropdown', (data = new Dropdown(this)))
      if (typeof option == 'string') data[option].call($this)
    })
  }

  var old = $.fn.dropdown

  $.fn.dropdown             = Plugin
  $.fn.dropdown.Constructor = Dropdown


  // DROPDOWN NO CONFLICT
  // ====================

  $.fn.dropdown.noConflict = function () {
    $.fn.dropdown = old
    return this
  }


  // APPLY TO STANDARD DROPDOWN ELEMENTS
  // ===================================

  $(document)
    .on('click.bs.dropdown.data-api', clearMenus)
    .on('click.bs.dropdown.data-api', '.dropdown form', function (e) { e.stopPropagation() })
    .on('click.bs.dropdown.data-api', toggle, Dropdown.prototype.toggle)
    .on('keydown.bs.dropdown.data-api', toggle, Dropdown.prototype.keydown)
    .on('keydown.bs.dropdown.data-api', '.dropdown-menu', Dropdown.prototype.keydown)

}(jQuery);

/* ========================================================================
 * Bootstrap: modal.js v3.3.7
 * http://getbootstrap.com/javascript/#modals
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // MODAL CLASS DEFINITION
  // ======================

  var Modal = function (element, options) {
    this.options             = options
    this.$body               = $(document.body)
    this.$element            = $(element)
    this.$dialog             = this.$element.find('.modal-dialog')
    this.$backdrop           = null
    this.isShown             = null
    this.originalBodyPad     = null
    this.scrollbarWidth      = 0
    this.ignoreBackdropClick = false

    if (this.options.remote) {
      this.$element
        .find('.modal-content')
        .load(this.options.remote, $.proxy(function () {
          this.$element.trigger('loaded.bs.modal')
        }, this))
    }
  }

  Modal.VERSION  = '3.3.7'

  Modal.TRANSITION_DURATION = 300
  Modal.BACKDROP_TRANSITION_DURATION = 150

  Modal.DEFAULTS = {
    backdrop: true,
    keyboard: true,
    show: true
  }

  Modal.prototype.toggle = function (_relatedTarget) {
    return this.isShown ? this.hide() : this.show(_relatedTarget)
  }

  Modal.prototype.show = function (_relatedTarget) {
    var that = this
    var e    = $.Event('show.bs.modal', { relatedTarget: _relatedTarget })

    this.$element.trigger(e)

    if (this.isShown || e.isDefaultPrevented()) return

    this.isShown = true

    this.checkScrollbar()
    this.setScrollbar()
    this.$body.addClass('modal-open')

    this.escape()
    this.resize()

    this.$element.on('click.dismiss.bs.modal', '[data-dismiss="modal"]', $.proxy(this.hide, this))

    this.$dialog.on('mousedown.dismiss.bs.modal', function () {
      that.$element.one('mouseup.dismiss.bs.modal', function (e) {
        if ($(e.target).is(that.$element)) that.ignoreBackdropClick = true
      })
    })

    this.backdrop(function () {
      var transition = $.support.transition && that.$element.hasClass('fade')

      if (!that.$element.parent().length) {
        that.$element.appendTo(that.$body) // don't move modals dom position
      }

      that.$element
        .show()
        .scrollTop(0)

      that.adjustDialog()

      if (transition) {
        that.$element[0].offsetWidth // force reflow
      }

      that.$element.addClass('in')

      that.enforceFocus()

      var e = $.Event('shown.bs.modal', { relatedTarget: _relatedTarget })

      transition ?
        that.$dialog // wait for modal to slide in
          .one('bsTransitionEnd', function () {
            that.$element.trigger('focus').trigger(e)
          })
          .emulateTransitionEnd(Modal.TRANSITION_DURATION) :
        that.$element.trigger('focus').trigger(e)
    })
  }

  Modal.prototype.hide = function (e) {
    if (e) e.preventDefault()

    e = $.Event('hide.bs.modal')

    this.$element.trigger(e)

    if (!this.isShown || e.isDefaultPrevented()) return

    this.isShown = false

    this.escape()
    this.resize()

    $(document).off('focusin.bs.modal')

    this.$element
      .removeClass('in')
      .off('click.dismiss.bs.modal')
      .off('mouseup.dismiss.bs.modal')

    this.$dialog.off('mousedown.dismiss.bs.modal')

    $.support.transition && this.$element.hasClass('fade') ?
      this.$element
        .one('bsTransitionEnd', $.proxy(this.hideModal, this))
        .emulateTransitionEnd(Modal.TRANSITION_DURATION) :
      this.hideModal()
  }

  Modal.prototype.enforceFocus = function () {
    $(document)
      .off('focusin.bs.modal') // guard against infinite focus loop
      .on('focusin.bs.modal', $.proxy(function (e) {
        if (document !== e.target &&
            this.$element[0] !== e.target &&
            !this.$element.has(e.target).length) {
          this.$element.trigger('focus')
        }
      }, this))
  }

  Modal.prototype.escape = function () {
    if (this.isShown && this.options.keyboard) {
      this.$element.on('keydown.dismiss.bs.modal', $.proxy(function (e) {
        e.which == 27 && this.hide()
      }, this))
    } else if (!this.isShown) {
      this.$element.off('keydown.dismiss.bs.modal')
    }
  }

  Modal.prototype.resize = function () {
    if (this.isShown) {
      $(window).on('resize.bs.modal', $.proxy(this.handleUpdate, this))
    } else {
      $(window).off('resize.bs.modal')
    }
  }

  Modal.prototype.hideModal = function () {
    var that = this
    this.$element.hide()
    this.backdrop(function () {
      that.$body.removeClass('modal-open')
      that.resetAdjustments()
      that.resetScrollbar()
      that.$element.trigger('hidden.bs.modal')
    })
  }

  Modal.prototype.removeBackdrop = function () {
    this.$backdrop && this.$backdrop.remove()
    this.$backdrop = null
  }

  Modal.prototype.backdrop = function (callback) {
    var that = this
    var animate = this.$element.hasClass('fade') ? 'fade' : ''

    if (this.isShown && this.options.backdrop) {
      var doAnimate = $.support.transition && animate

      this.$backdrop = $(document.createElement('div'))
        .addClass('modal-backdrop ' + animate)
        .appendTo(this.$body)

      this.$element.on('click.dismiss.bs.modal', $.proxy(function (e) {
        if (this.ignoreBackdropClick) {
          this.ignoreBackdropClick = false
          return
        }
        if (e.target !== e.currentTarget) return
        this.options.backdrop == 'static'
          ? this.$element[0].focus()
          : this.hide()
      }, this))

      if (doAnimate) this.$backdrop[0].offsetWidth // force reflow

      this.$backdrop.addClass('in')

      if (!callback) return

      doAnimate ?
        this.$backdrop
          .one('bsTransitionEnd', callback)
          .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :
        callback()

    } else if (!this.isShown && this.$backdrop) {
      this.$backdrop.removeClass('in')

      var callbackRemove = function () {
        that.removeBackdrop()
        callback && callback()
      }
      $.support.transition && this.$element.hasClass('fade') ?
        this.$backdrop
          .one('bsTransitionEnd', callbackRemove)
          .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :
        callbackRemove()

    } else if (callback) {
      callback()
    }
  }

  // these following methods are used to handle overflowing modals

  Modal.prototype.handleUpdate = function () {
    this.adjustDialog()
  }

  Modal.prototype.adjustDialog = function () {
    var modalIsOverflowing = this.$element[0].scrollHeight > document.documentElement.clientHeight

    this.$element.css({
      paddingLeft:  !this.bodyIsOverflowing && modalIsOverflowing ? this.scrollbarWidth : '',
      paddingRight: this.bodyIsOverflowing && !modalIsOverflowing ? this.scrollbarWidth : ''
    })
  }

  Modal.prototype.resetAdjustments = function () {
    this.$element.css({
      paddingLeft: '',
      paddingRight: ''
    })
  }

  Modal.prototype.checkScrollbar = function () {
    var fullWindowWidth = window.innerWidth
    if (!fullWindowWidth) { // workaround for missing window.innerWidth in IE8
      var documentElementRect = document.documentElement.getBoundingClientRect()
      fullWindowWidth = documentElementRect.right - Math.abs(documentElementRect.left)
    }
    this.bodyIsOverflowing = document.body.clientWidth < fullWindowWidth
    this.scrollbarWidth = this.measureScrollbar()
  }

  Modal.prototype.setScrollbar = function () {
    var bodyPad = parseInt((this.$body.css('padding-right') || 0), 10)
    this.originalBodyPad = document.body.style.paddingRight || ''
    if (this.bodyIsOverflowing) this.$body.css('padding-right', bodyPad + this.scrollbarWidth)
  }

  Modal.prototype.resetScrollbar = function () {
    this.$body.css('padding-right', this.originalBodyPad)
  }

  Modal.prototype.measureScrollbar = function () { // thx walsh
    var scrollDiv = document.createElement('div')
    scrollDiv.className = 'modal-scrollbar-measure'
    this.$body.append(scrollDiv)
    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth
    this.$body[0].removeChild(scrollDiv)
    return scrollbarWidth
  }


  // MODAL PLUGIN DEFINITION
  // =======================

  function Plugin(option, _relatedTarget) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.modal')
      var options = $.extend({}, Modal.DEFAULTS, $this.data(), typeof option == 'object' && option)

      if (!data) $this.data('bs.modal', (data = new Modal(this, options)))
      if (typeof option == 'string') data[option](_relatedTarget)
      else if (options.show) data.show(_relatedTarget)
    })
  }

  var old = $.fn.modal

  $.fn.modal             = Plugin
  $.fn.modal.Constructor = Modal


  // MODAL NO CONFLICT
  // =================

  $.fn.modal.noConflict = function () {
    $.fn.modal = old
    return this
  }


  // MODAL DATA-API
  // ==============

  $(document).on('click.bs.modal.data-api', '[data-toggle="modal"]', function (e) {
    var $this   = $(this)
    var href    = $this.attr('href')
    var $target = $($this.attr('data-target') || (href && href.replace(/.*(?=#[^\s]+$)/, ''))) // strip for ie7
    var option  = $target.data('bs.modal') ? 'toggle' : $.extend({ remote: !/#/.test(href) && href }, $target.data(), $this.data())

    if ($this.is('a')) e.preventDefault()

    $target.one('show.bs.modal', function (showEvent) {
      if (showEvent.isDefaultPrevented()) return // only register focus restorer if modal will actually get shown
      $target.one('hidden.bs.modal', function () {
        $this.is(':visible') && $this.trigger('focus')
      })
    })
    Plugin.call($target, option, this)
  })

}(jQuery);

/* ========================================================================
 * Bootstrap: tooltip.js v3.3.7
 * http://getbootstrap.com/javascript/#tooltip
 * Inspired by the original jQuery.tipsy by Jason Frame
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // TOOLTIP PUBLIC CLASS DEFINITION
  // ===============================

  var Tooltip = function (element, options) {
    this.type       = null
    this.options    = null
    this.enabled    = null
    this.timeout    = null
    this.hoverState = null
    this.$element   = null
    this.inState    = null

    this.init('tooltip', element, options)
  }

  Tooltip.VERSION  = '3.3.7'

  Tooltip.TRANSITION_DURATION = 150

  Tooltip.DEFAULTS = {
    animation: true,
    placement: 'top',
    selector: false,
    template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
    trigger: 'hover focus',
    title: '',
    delay: 0,
    html: false,
    container: false,
    viewport: {
      selector: 'body',
      padding: 0
    }
  }

  Tooltip.prototype.init = function (type, element, options) {
    this.enabled   = true
    this.type      = type
    this.$element  = $(element)
    this.options   = this.getOptions(options)
    this.$viewport = this.options.viewport && $($.isFunction(this.options.viewport) ? this.options.viewport.call(this, this.$element) : (this.options.viewport.selector || this.options.viewport))
    this.inState   = { click: false, hover: false, focus: false }

    if (this.$element[0] instanceof document.constructor && !this.options.selector) {
      throw new Error('`selector` option must be specified when initializing ' + this.type + ' on the window.document object!')
    }

    var triggers = this.options.trigger.split(' ')

    for (var i = triggers.length; i--;) {
      var trigger = triggers[i]

      if (trigger == 'click') {
        this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this))
      } else if (trigger != 'manual') {
        var eventIn  = trigger == 'hover' ? 'mouseenter' : 'focusin'
        var eventOut = trigger == 'hover' ? 'mouseleave' : 'focusout'

        this.$element.on(eventIn  + '.' + this.type, this.options.selector, $.proxy(this.enter, this))
        this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this))
      }
    }

    this.options.selector ?
      (this._options = $.extend({}, this.options, { trigger: 'manual', selector: '' })) :
      this.fixTitle()
  }

  Tooltip.prototype.getDefaults = function () {
    return Tooltip.DEFAULTS
  }

  Tooltip.prototype.getOptions = function (options) {
    options = $.extend({}, this.getDefaults(), this.$element.data(), options)

    if (options.delay && typeof options.delay == 'number') {
      options.delay = {
        show: options.delay,
        hide: options.delay
      }
    }

    return options
  }

  Tooltip.prototype.getDelegateOptions = function () {
    var options  = {}
    var defaults = this.getDefaults()

    this._options && $.each(this._options, function (key, value) {
      if (defaults[key] != value) options[key] = value
    })

    return options
  }

  Tooltip.prototype.enter = function (obj) {
    var self = obj instanceof this.constructor ?
      obj : $(obj.currentTarget).data('bs.' + this.type)

    if (!self) {
      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())
      $(obj.currentTarget).data('bs.' + this.type, self)
    }

    if (obj instanceof $.Event) {
      self.inState[obj.type == 'focusin' ? 'focus' : 'hover'] = true
    }

    if (self.tip().hasClass('in') || self.hoverState == 'in') {
      self.hoverState = 'in'
      return
    }

    clearTimeout(self.timeout)

    self.hoverState = 'in'

    if (!self.options.delay || !self.options.delay.show) return self.show()

    self.timeout = setTimeout(function () {
      if (self.hoverState == 'in') self.show()
    }, self.options.delay.show)
  }

  Tooltip.prototype.isInStateTrue = function () {
    for (var key in this.inState) {
      if (this.inState[key]) return true
    }

    return false
  }

  Tooltip.prototype.leave = function (obj) {
    var self = obj instanceof this.constructor ?
      obj : $(obj.currentTarget).data('bs.' + this.type)

    if (!self) {
      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())
      $(obj.currentTarget).data('bs.' + this.type, self)
    }

    if (obj instanceof $.Event) {
      self.inState[obj.type == 'focusout' ? 'focus' : 'hover'] = false
    }

    if (self.isInStateTrue()) return

    clearTimeout(self.timeout)

    self.hoverState = 'out'

    if (!self.options.delay || !self.options.delay.hide) return self.hide()

    self.timeout = setTimeout(function () {
      if (self.hoverState == 'out') self.hide()
    }, self.options.delay.hide)
  }

  Tooltip.prototype.show = function () {
    var e = $.Event('show.bs.' + this.type)

    if (this.hasContent() && this.enabled) {
      this.$element.trigger(e)

      var inDom = $.contains(this.$element[0].ownerDocument.documentElement, this.$element[0])
      if (e.isDefaultPrevented() || !inDom) return
      var that = this

      var $tip = this.tip()

      var tipId = this.getUID(this.type)

      this.setContent()
      $tip.attr('id', tipId)
      this.$element.attr('aria-describedby', tipId)

      if (this.options.animation) $tip.addClass('fade')

      var placement = typeof this.options.placement == 'function' ?
        this.options.placement.call(this, $tip[0], this.$element[0]) :
        this.options.placement

      var autoToken = /\s?auto?\s?/i
      var autoPlace = autoToken.test(placement)
      if (autoPlace) placement = placement.replace(autoToken, '') || 'top'

      $tip
        .detach()
        .css({ top: 0, left: 0, display: 'block' })
        .addClass(placement)
        .data('bs.' + this.type, this)

      this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element)
      this.$element.trigger('inserted.bs.' + this.type)

      var pos          = this.getPosition()
      var actualWidth  = $tip[0].offsetWidth
      var actualHeight = $tip[0].offsetHeight

      if (autoPlace) {
        var orgPlacement = placement
        var viewportDim = this.getPosition(this.$viewport)

        placement = placement == 'bottom' && pos.bottom + actualHeight > viewportDim.bottom ? 'top'    :
                    placement == 'top'    && pos.top    - actualHeight < viewportDim.top    ? 'bottom' :
                    placement == 'right'  && pos.right  + actualWidth  > viewportDim.width  ? 'left'   :
                    placement == 'left'   && pos.left   - actualWidth  < viewportDim.left   ? 'right'  :
                    placement

        $tip
          .removeClass(orgPlacement)
          .addClass(placement)
      }

      var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight)

      this.applyPlacement(calculatedOffset, placement)

      var complete = function () {
        var prevHoverState = that.hoverState
        that.$element.trigger('shown.bs.' + that.type)
        that.hoverState = null

        if (prevHoverState == 'out') that.leave(that)
      }

      $.support.transition && this.$tip.hasClass('fade') ?
        $tip
          .one('bsTransitionEnd', complete)
          .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :
        complete()
    }
  }

  Tooltip.prototype.applyPlacement = function (offset, placement) {
    var $tip   = this.tip()
    var width  = $tip[0].offsetWidth
    var height = $tip[0].offsetHeight

    // manually read margins because getBoundingClientRect includes difference
    var marginTop = parseInt($tip.css('margin-top'), 10)
    var marginLeft = parseInt($tip.css('margin-left'), 10)

    // we must check for NaN for ie 8/9
    if (isNaN(marginTop))  marginTop  = 0
    if (isNaN(marginLeft)) marginLeft = 0

    offset.top  += marginTop
    offset.left += marginLeft

    // $.fn.offset doesn't round pixel values
    // so we use setOffset directly with our own function B-0
    $.offset.setOffset($tip[0], $.extend({
      using: function (props) {
        $tip.css({
          top: Math.round(props.top),
          left: Math.round(props.left)
        })
      }
    }, offset), 0)

    $tip.addClass('in')

    // check to see if placing tip in new offset caused the tip to resize itself
    var actualWidth  = $tip[0].offsetWidth
    var actualHeight = $tip[0].offsetHeight

    if (placement == 'top' && actualHeight != height) {
      offset.top = offset.top + height - actualHeight
    }

    var delta = this.getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight)

    if (delta.left) offset.left += delta.left
    else offset.top += delta.top

    var isVertical          = /top|bottom/.test(placement)
    var arrowDelta          = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight
    var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight'

    $tip.offset(offset)
    this.replaceArrow(arrowDelta, $tip[0][arrowOffsetPosition], isVertical)
  }

  Tooltip.prototype.replaceArrow = function (delta, dimension, isVertical) {
    this.arrow()
      .css(isVertical ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')
      .css(isVertical ? 'top' : 'left', '')
  }

  Tooltip.prototype.setContent = function () {
    var $tip  = this.tip()
    var title = this.getTitle()

    $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title)
    $tip.removeClass('fade in top bottom left right')
  }

  Tooltip.prototype.hide = function (callback) {
    var that = this
    var $tip = $(this.$tip)
    var e    = $.Event('hide.bs.' + this.type)

    function complete() {
      if (that.hoverState != 'in') $tip.detach()
      if (that.$element) { // TODO: Check whether guarding this code with this `if` is really necessary.
        that.$element
          .removeAttr('aria-describedby')
          .trigger('hidden.bs.' + that.type)
      }
      callback && callback()
    }

    this.$element.trigger(e)

    if (e.isDefaultPrevented()) return

    $tip.removeClass('in')

    $.support.transition && $tip.hasClass('fade') ?
      $tip
        .one('bsTransitionEnd', complete)
        .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :
      complete()

    this.hoverState = null

    return this
  }

  Tooltip.prototype.fixTitle = function () {
    var $e = this.$element
    if ($e.attr('title') || typeof $e.attr('data-original-title') != 'string') {
      $e.attr('data-original-title', $e.attr('title') || '').attr('title', '')
    }
  }

  Tooltip.prototype.hasContent = function () {
    return this.getTitle()
  }

  Tooltip.prototype.getPosition = function ($element) {
    $element   = $element || this.$element

    var el     = $element[0]
    var isBody = el.tagName == 'BODY'

    var elRect    = el.getBoundingClientRect()
    if (elRect.width == null) {
      // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093
      elRect = $.extend({}, elRect, { width: elRect.right - elRect.left, height: elRect.bottom - elRect.top })
    }
    var isSvg = window.SVGElement && el instanceof window.SVGElement
    // Avoid using $.offset() on SVGs since it gives incorrect results in jQuery 3.
    // See https://github.com/twbs/bootstrap/issues/20280
    var elOffset  = isBody ? { top: 0, left: 0 } : (isSvg ? null : $element.offset())
    var scroll    = { scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop() }
    var outerDims = isBody ? { width: $(window).width(), height: $(window).height() } : null

    return $.extend({}, elRect, scroll, outerDims, elOffset)
  }

  Tooltip.prototype.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {
    return placement == 'bottom' ? { top: pos.top + pos.height,   left: pos.left + pos.width / 2 - actualWidth / 2 } :
           placement == 'top'    ? { top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2 } :
           placement == 'left'   ? { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth } :
        /* placement == 'right' */ { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width }

  }

  Tooltip.prototype.getViewportAdjustedDelta = function (placement, pos, actualWidth, actualHeight) {
    var delta = { top: 0, left: 0 }
    if (!this.$viewport) return delta

    var viewportPadding = this.options.viewport && this.options.viewport.padding || 0
    var viewportDimensions = this.getPosition(this.$viewport)

    if (/right|left/.test(placement)) {
      var topEdgeOffset    = pos.top - viewportPadding - viewportDimensions.scroll
      var bottomEdgeOffset = pos.top + viewportPadding - viewportDimensions.scroll + actualHeight
      if (topEdgeOffset < viewportDimensions.top) { // top overflow
        delta.top = viewportDimensions.top - topEdgeOffset
      } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow
        delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset
      }
    } else {
      var leftEdgeOffset  = pos.left - viewportPadding
      var rightEdgeOffset = pos.left + viewportPadding + actualWidth
      if (leftEdgeOffset < viewportDimensions.left) { // left overflow
        delta.left = viewportDimensions.left - leftEdgeOffset
      } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow
        delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset
      }
    }

    return delta
  }

  Tooltip.prototype.getTitle = function () {
    var title
    var $e = this.$element
    var o  = this.options

    title = $e.attr('data-original-title')
      || (typeof o.title == 'function' ? o.title.call($e[0]) :  o.title)

    return title
  }

  Tooltip.prototype.getUID = function (prefix) {
    do prefix += ~~(Math.random() * 1000000)
    while (document.getElementById(prefix))
    return prefix
  }

  Tooltip.prototype.tip = function () {
    if (!this.$tip) {
      this.$tip = $(this.options.template)
      if (this.$tip.length != 1) {
        throw new Error(this.type + ' `template` option must consist of exactly 1 top-level element!')
      }
    }
    return this.$tip
  }

  Tooltip.prototype.arrow = function () {
    return (this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow'))
  }

  Tooltip.prototype.enable = function () {
    this.enabled = true
  }

  Tooltip.prototype.disable = function () {
    this.enabled = false
  }

  Tooltip.prototype.toggleEnabled = function () {
    this.enabled = !this.enabled
  }

  Tooltip.prototype.toggle = function (e) {
    var self = this
    if (e) {
      self = $(e.currentTarget).data('bs.' + this.type)
      if (!self) {
        self = new this.constructor(e.currentTarget, this.getDelegateOptions())
        $(e.currentTarget).data('bs.' + this.type, self)
      }
    }

    if (e) {
      self.inState.click = !self.inState.click
      if (self.isInStateTrue()) self.enter(self)
      else self.leave(self)
    } else {
      self.tip().hasClass('in') ? self.leave(self) : self.enter(self)
    }
  }

  Tooltip.prototype.destroy = function () {
    var that = this
    clearTimeout(this.timeout)
    this.hide(function () {
      that.$element.off('.' + that.type).removeData('bs.' + that.type)
      if (that.$tip) {
        that.$tip.detach()
      }
      that.$tip = null
      that.$arrow = null
      that.$viewport = null
      that.$element = null
    })
  }


  // TOOLTIP PLUGIN DEFINITION
  // =========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.tooltip')
      var options = typeof option == 'object' && option

      if (!data && /destroy|hide/.test(option)) return
      if (!data) $this.data('bs.tooltip', (data = new Tooltip(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.tooltip

  $.fn.tooltip             = Plugin
  $.fn.tooltip.Constructor = Tooltip


  // TOOLTIP NO CONFLICT
  // ===================

  $.fn.tooltip.noConflict = function () {
    $.fn.tooltip = old
    return this
  }

}(jQuery);

/* ========================================================================
 * Bootstrap: popover.js v3.3.7
 * http://getbootstrap.com/javascript/#popovers
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // POPOVER PUBLIC CLASS DEFINITION
  // ===============================

  var Popover = function (element, options) {
    this.init('popover', element, options)
  }

  if (!$.fn.tooltip) throw new Error('Popover requires tooltip.js')

  Popover.VERSION  = '3.3.7'

  Popover.DEFAULTS = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, {
    placement: 'right',
    trigger: 'click',
    content: '',
    template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
  })


  // NOTE: POPOVER EXTENDS tooltip.js
  // ================================

  Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype)

  Popover.prototype.constructor = Popover

  Popover.prototype.getDefaults = function () {
    return Popover.DEFAULTS
  }

  Popover.prototype.setContent = function () {
    var $tip    = this.tip()
    var title   = this.getTitle()
    var content = this.getContent()

    $tip.find('.popover-title')[this.options.html ? 'html' : 'text'](title)
    $tip.find('.popover-content').children().detach().end()[ // we use append for html objects to maintain js events
      this.options.html ? (typeof content == 'string' ? 'html' : 'append') : 'text'
    ](content)

    $tip.removeClass('fade top bottom left right in')

    // IE8 doesn't accept hiding via the `:empty` pseudo selector, we have to do
    // this manually by checking the contents.
    if (!$tip.find('.popover-title').html()) $tip.find('.popover-title').hide()
  }

  Popover.prototype.hasContent = function () {
    return this.getTitle() || this.getContent()
  }

  Popover.prototype.getContent = function () {
    var $e = this.$element
    var o  = this.options

    return $e.attr('data-content')
      || (typeof o.content == 'function' ?
            o.content.call($e[0]) :
            o.content)
  }

  Popover.prototype.arrow = function () {
    return (this.$arrow = this.$arrow || this.tip().find('.arrow'))
  }


  // POPOVER PLUGIN DEFINITION
  // =========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.popover')
      var options = typeof option == 'object' && option

      if (!data && /destroy|hide/.test(option)) return
      if (!data) $this.data('bs.popover', (data = new Popover(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.popover

  $.fn.popover             = Plugin
  $.fn.popover.Constructor = Popover


  // POPOVER NO CONFLICT
  // ===================

  $.fn.popover.noConflict = function () {
    $.fn.popover = old
    return this
  }

}(jQuery);

/* ========================================================================
 * Bootstrap: scrollspy.js v3.3.7
 * http://getbootstrap.com/javascript/#scrollspy
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // SCROLLSPY CLASS DEFINITION
  // ==========================

  function ScrollSpy(element, options) {
    this.$body          = $(document.body)
    this.$scrollElement = $(element).is(document.body) ? $(window) : $(element)
    this.options        = $.extend({}, ScrollSpy.DEFAULTS, options)
    this.selector       = (this.options.target || '') + ' .nav li > a'
    this.offsets        = []
    this.targets        = []
    this.activeTarget   = null
    this.scrollHeight   = 0

    this.$scrollElement.on('scroll.bs.scrollspy', $.proxy(this.process, this))
    this.refresh()
    this.process()
  }

  ScrollSpy.VERSION  = '3.3.7'

  ScrollSpy.DEFAULTS = {
    offset: 10
  }

  ScrollSpy.prototype.getScrollHeight = function () {
    return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight)
  }

  ScrollSpy.prototype.refresh = function () {
    var that          = this
    var offsetMethod  = 'offset'
    var offsetBase    = 0

    this.offsets      = []
    this.targets      = []
    this.scrollHeight = this.getScrollHeight()

    if (!$.isWindow(this.$scrollElement[0])) {
      offsetMethod = 'position'
      offsetBase   = this.$scrollElement.scrollTop()
    }

    this.$body
      .find(this.selector)
      .map(function () {
        var $el   = $(this)
        var href  = $el.data('target') || $el.attr('href')
        var $href = /^#./.test(href) && $(href)

        return ($href
          && $href.length
          && $href.is(':visible')
          && [[$href[offsetMethod]().top + offsetBase, href]]) || null
      })
      .sort(function (a, b) { return a[0] - b[0] })
      .each(function () {
        that.offsets.push(this[0])
        that.targets.push(this[1])
      })
  }

  ScrollSpy.prototype.process = function () {
    var scrollTop    = this.$scrollElement.scrollTop() + this.options.offset
    var scrollHeight = this.getScrollHeight()
    var maxScroll    = this.options.offset + scrollHeight - this.$scrollElement.height()
    var offsets      = this.offsets
    var targets      = this.targets
    var activeTarget = this.activeTarget
    var i

    if (this.scrollHeight != scrollHeight) {
      this.refresh()
    }

    if (scrollTop >= maxScroll) {
      return activeTarget != (i = targets[targets.length - 1]) && this.activate(i)
    }

    if (activeTarget && scrollTop < offsets[0]) {
      this.activeTarget = null
      return this.clear()
    }

    for (i = offsets.length; i--;) {
      activeTarget != targets[i]
        && scrollTop >= offsets[i]
        && (offsets[i + 1] === undefined || scrollTop < offsets[i + 1])
        && this.activate(targets[i])
    }
  }

  ScrollSpy.prototype.activate = function (target) {
    this.activeTarget = target

    this.clear()

    var selector = this.selector +
      '[data-target="' + target + '"],' +
      this.selector + '[href="' + target + '"]'

    var active = $(selector)
      .parents('li')
      .addClass('active')

    if (active.parent('.dropdown-menu').length) {
      active = active
        .closest('li.dropdown')
        .addClass('active')
    }

    active.trigger('activate.bs.scrollspy')
  }

  ScrollSpy.prototype.clear = function () {
    $(this.selector)
      .parentsUntil(this.options.target, '.active')
      .removeClass('active')
  }


  // SCROLLSPY PLUGIN DEFINITION
  // ===========================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.scrollspy')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.scrollspy', (data = new ScrollSpy(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.scrollspy

  $.fn.scrollspy             = Plugin
  $.fn.scrollspy.Constructor = ScrollSpy


  // SCROLLSPY NO CONFLICT
  // =====================

  $.fn.scrollspy.noConflict = function () {
    $.fn.scrollspy = old
    return this
  }


  // SCROLLSPY DATA-API
  // ==================

  $(window).on('load.bs.scrollspy.data-api', function () {
    $('[data-spy="scroll"]').each(function () {
      var $spy = $(this)
      Plugin.call($spy, $spy.data())
    })
  })

}(jQuery);

/* ========================================================================
 * Bootstrap: tab.js v3.3.7
 * http://getbootstrap.com/javascript/#tabs
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // TAB CLASS DEFINITION
  // ====================

  var Tab = function (element) {
    // jscs:disable requireDollarBeforejQueryAssignment
    this.element = $(element)
    // jscs:enable requireDollarBeforejQueryAssignment
  }

  Tab.VERSION = '3.3.7'

  Tab.TRANSITION_DURATION = 150

  Tab.prototype.show = function () {
    var $this    = this.element
    var $ul      = $this.closest('ul:not(.dropdown-menu)')
    var selector = $this.data('target')

    if (!selector) {
      selector = $this.attr('href')
      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
    }

    if ($this.parent('li').hasClass('active')) return

    var $previous = $ul.find('.active:last a')
    var hideEvent = $.Event('hide.bs.tab', {
      relatedTarget: $this[0]
    })
    var showEvent = $.Event('show.bs.tab', {
      relatedTarget: $previous[0]
    })

    $previous.trigger(hideEvent)
    $this.trigger(showEvent)

    if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) return

    var $target = $(selector)

    this.activate($this.closest('li'), $ul)
    this.activate($target, $target.parent(), function () {
      $previous.trigger({
        type: 'hidden.bs.tab',
        relatedTarget: $this[0]
      })
      $this.trigger({
        type: 'shown.bs.tab',
        relatedTarget: $previous[0]
      })
    })
  }

  Tab.prototype.activate = function (element, container, callback) {
    var $active    = container.find('> .active')
    var transition = callback
      && $.support.transition
      && ($active.length && $active.hasClass('fade') || !!container.find('> .fade').length)

    function next() {
      $active
        .removeClass('active')
        .find('> .dropdown-menu > .active')
          .removeClass('active')
        .end()
        .find('[data-toggle="tab"]')
          .attr('aria-expanded', false)

      element
        .addClass('active')
        .find('[data-toggle="tab"]')
          .attr('aria-expanded', true)

      if (transition) {
        element[0].offsetWidth // reflow for transition
        element.addClass('in')
      } else {
        element.removeClass('fade')
      }

      if (element.parent('.dropdown-menu').length) {
        element
          .closest('li.dropdown')
            .addClass('active')
          .end()
          .find('[data-toggle="tab"]')
            .attr('aria-expanded', true)
      }

      callback && callback()
    }

    $active.length && transition ?
      $active
        .one('bsTransitionEnd', next)
        .emulateTransitionEnd(Tab.TRANSITION_DURATION) :
      next()

    $active.removeClass('in')
  }


  // TAB PLUGIN DEFINITION
  // =====================

  function Plugin(option) {
    return this.each(function () {
      var $this = $(this)
      var data  = $this.data('bs.tab')

      if (!data) $this.data('bs.tab', (data = new Tab(this)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.tab

  $.fn.tab             = Plugin
  $.fn.tab.Constructor = Tab


  // TAB NO CONFLICT
  // ===============

  $.fn.tab.noConflict = function () {
    $.fn.tab = old
    return this
  }


  // TAB DATA-API
  // ============

  var clickHandler = function (e) {
    e.preventDefault()
    Plugin.call($(this), 'show')
  }

  $(document)
    .on('click.bs.tab.data-api', '[data-toggle="tab"]', clickHandler)
    .on('click.bs.tab.data-api', '[data-toggle="pill"]', clickHandler)

}(jQuery);

/* ========================================================================
 * Bootstrap: affix.js v3.3.7
 * http://getbootstrap.com/javascript/#affix
 * ========================================================================
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * ======================================================================== */


+function ($) {
  'use strict';

  // AFFIX CLASS DEFINITION
  // ======================

  var Affix = function (element, options) {
    this.options = $.extend({}, Affix.DEFAULTS, options)

    this.$target = $(this.options.target)
      .on('scroll.bs.affix.data-api', $.proxy(this.checkPosition, this))
      .on('click.bs.affix.data-api',  $.proxy(this.checkPositionWithEventLoop, this))

    this.$element     = $(element)
    this.affixed      = null
    this.unpin        = null
    this.pinnedOffset = null

    this.checkPosition()
  }

  Affix.VERSION  = '3.3.7'

  Affix.RESET    = 'affix affix-top affix-bottom'

  Affix.DEFAULTS = {
    offset: 0,
    target: window
  }

  Affix.prototype.getState = function (scrollHeight, height, offsetTop, offsetBottom) {
    var scrollTop    = this.$target.scrollTop()
    var position     = this.$element.offset()
    var targetHeight = this.$target.height()

    if (offsetTop != null && this.affixed == 'top') return scrollTop < offsetTop ? 'top' : false

    if (this.affixed == 'bottom') {
      if (offsetTop != null) return (scrollTop + this.unpin <= position.top) ? false : 'bottom'
      return (scrollTop + targetHeight <= scrollHeight - offsetBottom) ? false : 'bottom'
    }

    var initializing   = this.affixed == null
    var colliderTop    = initializing ? scrollTop : position.top
    var colliderHeight = initializing ? targetHeight : height

    if (offsetTop != null && scrollTop <= offsetTop) return 'top'
    if (offsetBottom != null && (colliderTop + colliderHeight >= scrollHeight - offsetBottom)) return 'bottom'

    return false
  }

  Affix.prototype.getPinnedOffset = function () {
    if (this.pinnedOffset) return this.pinnedOffset
    this.$element.removeClass(Affix.RESET).addClass('affix')
    var scrollTop = this.$target.scrollTop()
    var position  = this.$element.offset()
    return (this.pinnedOffset = position.top - scrollTop)
  }

  Affix.prototype.checkPositionWithEventLoop = function () {
    setTimeout($.proxy(this.checkPosition, this), 1)
  }

  Affix.prototype.checkPosition = function () {
    if (!this.$element.is(':visible')) return

    var height       = this.$element.height()
    var offset       = this.options.offset
    var offsetTop    = offset.top
    var offsetBottom = offset.bottom
    var scrollHeight = Math.max($(document).height(), $(document.body).height())

    if (typeof offset != 'object')         offsetBottom = offsetTop = offset
    if (typeof offsetTop == 'function')    offsetTop    = offset.top(this.$element)
    if (typeof offsetBottom == 'function') offsetBottom = offset.bottom(this.$element)

    var affix = this.getState(scrollHeight, height, offsetTop, offsetBottom)

    if (this.affixed != affix) {
      if (this.unpin != null) this.$element.css('top', '')

      var affixType = 'affix' + (affix ? '-' + affix : '')
      var e         = $.Event(affixType + '.bs.affix')

      this.$element.trigger(e)

      if (e.isDefaultPrevented()) return

      this.affixed = affix
      this.unpin = affix == 'bottom' ? this.getPinnedOffset() : null

      this.$element
        .removeClass(Affix.RESET)
        .addClass(affixType)
        .trigger(affixType.replace('affix', 'affixed') + '.bs.affix')
    }

    if (affix == 'bottom') {
      this.$element.offset({
        top: scrollHeight - height - offsetBottom
      })
    }
  }


  // AFFIX PLUGIN DEFINITION
  // =======================

  function Plugin(option) {
    return this.each(function () {
      var $this   = $(this)
      var data    = $this.data('bs.affix')
      var options = typeof option == 'object' && option

      if (!data) $this.data('bs.affix', (data = new Affix(this, options)))
      if (typeof option == 'string') data[option]()
    })
  }

  var old = $.fn.affix

  $.fn.affix             = Plugin
  $.fn.affix.Constructor = Affix


  // AFFIX NO CONFLICT
  // =================

  $.fn.affix.noConflict = function () {
    $.fn.affix = old
    return this
  }


  // AFFIX DATA-API
  // ==============

  $(window).on('load', function () {
    $('[data-spy="affix"]').each(function () {
      var $spy = $(this)
      var data = $spy.data()

      data.offset = data.offset || {}

      if (data.offsetBottom != null) data.offset.bottom = data.offsetBottom
      if (data.offsetTop    != null) data.offset.top    = data.offsetTop

      Plugin.call($spy, data)
    })
  })

}(jQuery);


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! DataTables Bootstrap 3 integration
 * ©2011-2015 SpryMedia Ltd - datatables.net/license
 */

/**
 * DataTables integration for Bootstrap 3. This requires Bootstrap 3 and
 * DataTables 1.10 or newer.
 *
 * This file sets the defaults and adds options to DataTables to style its
 * controls using Bootstrap. See http://datatables.net/manual/styling/bootstrap
 * for further information.
 */
(function( factory ){
	if ( true ) {
		// AMD
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(13)], __WEBPACK_AMD_DEFINE_RESULT__ = function ( $ ) {
			return factory( $, window, document );
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}
	else if ( typeof exports === 'object' ) {
		// CommonJS
		module.exports = function (root, $) {
			if ( ! root ) {
				root = window;
			}

			if ( ! $ || ! $.fn.dataTable ) {
				// Require DataTables, which attaches to jQuery, including
				// jQuery if needed and have a $ property so we can access the
				// jQuery object that is used
				$ = require('datatables.net')(root, $).$;
			}

			return factory( $, root, root.document );
		};
	}
	else {
		// Browser
		factory( jQuery, window, document );
	}
}(function( $, window, document, undefined ) {
'use strict';
var DataTable = $.fn.dataTable;


/* Set the defaults for DataTables initialisation */
$.extend( true, DataTable.defaults, {
	dom:
		"<'row'<'col-sm-6'l><'col-sm-6'f>>" +
		"<'row'<'col-sm-12'tr>>" +
		"<'row'<'col-sm-5'i><'col-sm-7'p>>",
	renderer: 'bootstrap'
} );


/* Default class modification */
$.extend( DataTable.ext.classes, {
	sWrapper:      "dataTables_wrapper form-inline dt-bootstrap",
	sFilterInput:  "form-control input-sm",
	sLengthSelect: "form-control input-sm",
	sProcessing:   "dataTables_processing panel panel-default"
} );


/* Bootstrap paging button renderer */
DataTable.ext.renderer.pageButton.bootstrap = function ( settings, host, idx, buttons, page, pages ) {
	var api     = new DataTable.Api( settings );
	var classes = settings.oClasses;
	var lang    = settings.oLanguage.oPaginate;
	var aria = settings.oLanguage.oAria.paginate || {};
	var btnDisplay, btnClass, counter=0;

	var attach = function( container, buttons ) {
		var i, ien, node, button;
		var clickHandler = function ( e ) {
			e.preventDefault();
			if ( !$(e.currentTarget).hasClass('disabled') && api.page() != e.data.action ) {
				api.page( e.data.action ).draw( 'page' );
			}
		};

		for ( i=0, ien=buttons.length ; i<ien ; i++ ) {
			button = buttons[i];

			if ( $.isArray( button ) ) {
				attach( container, button );
			}
			else {
				btnDisplay = '';
				btnClass = '';

				switch ( button ) {
					case 'ellipsis':
						btnDisplay = '&#x2026;';
						btnClass = 'disabled';
						break;

					case 'first':
						btnDisplay = lang.sFirst;
						btnClass = button + (page > 0 ?
							'' : ' disabled');
						break;

					case 'previous':
						btnDisplay = lang.sPrevious;
						btnClass = button + (page > 0 ?
							'' : ' disabled');
						break;

					case 'next':
						btnDisplay = lang.sNext;
						btnClass = button + (page < pages-1 ?
							'' : ' disabled');
						break;

					case 'last':
						btnDisplay = lang.sLast;
						btnClass = button + (page < pages-1 ?
							'' : ' disabled');
						break;

					default:
						btnDisplay = button + 1;
						btnClass = page === button ?
							'active' : '';
						break;
				}

				if ( btnDisplay ) {
					node = $('<li>', {
							'class': classes.sPageButton+' '+btnClass,
							'id': idx === 0 && typeof button === 'string' ?
								settings.sTableId +'_'+ button :
								null
						} )
						.append( $('<a>', {
								'href': '#',
								'aria-controls': settings.sTableId,
								'aria-label': aria[ button ],
								'data-dt-idx': counter,
								'tabindex': settings.iTabIndex
							} )
							.html( btnDisplay )
						)
						.appendTo( container );

					settings.oApi._fnBindAction(
						node, {action: button}, clickHandler
					);

					counter++;
				}
			}
		}
	};

	// IE9 throws an 'unknown error' if document.activeElement is used
	// inside an iframe or frame. 
	var activeEl;

	try {
		// Because this approach is destroying and recreating the paging
		// elements, focus is lost on the select button which is bad for
		// accessibility. So we want to restore focus once the draw has
		// completed
		activeEl = $(host).find(document.activeElement).data('dt-idx');
	}
	catch (e) {}

	attach(
		$(host).empty().html('<ul class="pagination"/>').children('ul'),
		buttons
	);

	if ( activeEl !== undefined ) {
		$(host).find( '[data-dt-idx='+activeEl+']' ).focus();
	}
};


return DataTable;
}));


/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! Responsive 2.1.1
 * 2014-2016 SpryMedia Ltd - datatables.net/license
 */

/**
 * @summary     Responsive
 * @description Responsive tables plug-in for DataTables
 * @version     2.1.1
 * @file        dataTables.responsive.js
 * @author      SpryMedia Ltd (www.sprymedia.co.uk)
 * @contact     www.sprymedia.co.uk/contact
 * @copyright   Copyright 2014-2016 SpryMedia Ltd.
 *
 * This source file is free software, available under the following license:
 *   MIT license - http://datatables.net/license/mit
 *
 * This source file is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.
 *
 * For details please refer to: http://www.datatables.net
 */
(function( factory ){
	if ( true ) {
		// AMD
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(13)], __WEBPACK_AMD_DEFINE_RESULT__ = function ( $ ) {
			return factory( $, window, document );
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}
	else if ( typeof exports === 'object' ) {
		// CommonJS
		module.exports = function (root, $) {
			if ( ! root ) {
				root = window;
			}

			if ( ! $ || ! $.fn.dataTable ) {
				$ = require('datatables.net')(root, $).$;
			}

			return factory( $, root, root.document );
		};
	}
	else {
		// Browser
		factory( jQuery, window, document );
	}
}(function( $, window, document, undefined ) {
'use strict';
var DataTable = $.fn.dataTable;


/**
 * Responsive is a plug-in for the DataTables library that makes use of
 * DataTables' ability to change the visibility of columns, changing the
 * visibility of columns so the displayed columns fit into the table container.
 * The end result is that complex tables will be dynamically adjusted to fit
 * into the viewport, be it on a desktop, tablet or mobile browser.
 *
 * Responsive for DataTables has two modes of operation, which can used
 * individually or combined:
 *
 * * Class name based control - columns assigned class names that match the
 *   breakpoint logic can be shown / hidden as required for each breakpoint.
 * * Automatic control - columns are automatically hidden when there is no
 *   room left to display them. Columns removed from the right.
 *
 * In additional to column visibility control, Responsive also has built into
 * options to use DataTables' child row display to show / hide the information
 * from the table that has been hidden. There are also two modes of operation
 * for this child row display:
 *
 * * Inline - when the control element that the user can use to show / hide
 *   child rows is displayed inside the first column of the table.
 * * Column - where a whole column is dedicated to be the show / hide control.
 *
 * Initialisation of Responsive is performed by:
 *
 * * Adding the class `responsive` or `dt-responsive` to the table. In this case
 *   Responsive will automatically be initialised with the default configuration
 *   options when the DataTable is created.
 * * Using the `responsive` option in the DataTables configuration options. This
 *   can also be used to specify the configuration options, or simply set to
 *   `true` to use the defaults.
 *
 *  @class
 *  @param {object} settings DataTables settings object for the host table
 *  @param {object} [opts] Configuration options
 *  @requires jQuery 1.7+
 *  @requires DataTables 1.10.3+
 *
 *  @example
 *      $('#example').DataTable( {
 *        responsive: true
 *      } );
 *    } );
 */
var Responsive = function ( settings, opts ) {
	// Sanity check that we are using DataTables 1.10 or newer
	if ( ! DataTable.versionCheck || ! DataTable.versionCheck( '1.10.3' ) ) {
		throw 'DataTables Responsive requires DataTables 1.10.3 or newer';
	}

	this.s = {
		dt: new DataTable.Api( settings ),
		columns: [],
		current: []
	};

	// Check if responsive has already been initialised on this table
	if ( this.s.dt.settings()[0].responsive ) {
		return;
	}

	// details is an object, but for simplicity the user can give it as a string
	// or a boolean
	if ( opts && typeof opts.details === 'string' ) {
		opts.details = { type: opts.details };
	}
	else if ( opts && opts.details === false ) {
		opts.details = { type: false };
	}
	else if ( opts && opts.details === true ) {
		opts.details = { type: 'inline' };
	}

	this.c = $.extend( true, {}, Responsive.defaults, DataTable.defaults.responsive, opts );
	settings.responsive = this;
	this._constructor();
};

$.extend( Responsive.prototype, {
	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * Constructor
	 */

	/**
	 * Initialise the Responsive instance
	 *
	 * @private
	 */
	_constructor: function ()
	{
		var that = this;
		var dt = this.s.dt;
		var dtPrivateSettings = dt.settings()[0];
		var oldWindowWidth = $(window).width();

		dt.settings()[0]._responsive = this;

		// Use DataTables' throttle function to avoid processor thrashing on
		// resize
		$(window).on( 'resize.dtr orientationchange.dtr', DataTable.util.throttle( function () {
			// iOS has a bug whereby resize can fire when only scrolling
			// See: http://stackoverflow.com/questions/8898412
			var width = $(window).width();

			if ( width !== oldWindowWidth ) {
				that._resize();
				oldWindowWidth = width;
			}
		} ) );

		// DataTables doesn't currently trigger an event when a row is added, so
		// we need to hook into its private API to enforce the hidden rows when
		// new data is added
		dtPrivateSettings.oApi._fnCallbackReg( dtPrivateSettings, 'aoRowCreatedCallback', function (tr, data, idx) {
			if ( $.inArray( false, that.s.current ) !== -1 ) {
				$('>td, >th', tr).each( function ( i ) {
					var idx = dt.column.index( 'toData', i );

					if ( that.s.current[idx] === false ) {
						$(this).css('display', 'none');
					}
				} );
			}
		} );

		// Destroy event handler
		dt.on( 'destroy.dtr', function () {
			dt.off( '.dtr' );
			$( dt.table().body() ).off( '.dtr' );
			$(window).off( 'resize.dtr orientationchange.dtr' );

			// Restore the columns that we've hidden
			$.each( that.s.current, function ( i, val ) {
				if ( val === false ) {
					that._setColumnVis( i, true );
				}
			} );
		} );

		// Reorder the breakpoints array here in case they have been added out
		// of order
		this.c.breakpoints.sort( function (a, b) {
			return a.width < b.width ? 1 :
				a.width > b.width ? -1 : 0;
		} );

		this._classLogic();
		this._resizeAuto();

		// Details handler
		var details = this.c.details;

		if ( details.type !== false ) {
			that._detailsInit();

			// DataTables will trigger this event on every column it shows and
			// hides individually
			dt.on( 'column-visibility.dtr', function (e, ctx, col, vis) {
				that._classLogic();
				that._resizeAuto();
				that._resize();
			} );

			// Redraw the details box on each draw which will happen if the data
			// has changed. This is used until DataTables implements a native
			// `updated` event for rows
			dt.on( 'draw.dtr', function () {
				that._redrawChildren();
			} );

			$(dt.table().node()).addClass( 'dtr-'+details.type );
		}

		dt.on( 'column-reorder.dtr', function (e, settings, details) {
			that._classLogic();
			that._resizeAuto();
			that._resize();
		} );

		// Change in column sizes means we need to calc
		dt.on( 'column-sizing.dtr', function () {
			that._resizeAuto();
			that._resize();
		});

		// On Ajax reload we want to reopen any child rows which are displayed
		// by responsive
		dt.on( 'preXhr.dtr', function () {
			var rowIds = [];
			dt.rows().every( function () {
				if ( this.child.isShown() ) {
					rowIds.push( this.id(true) );
				}
			} );

			dt.one( 'draw.dtr', function () {
				dt.rows( rowIds ).every( function () {
					that._detailsDisplay( this, false );
				} );
			} );
		});

		dt.on( 'init.dtr', function (e, settings, details) {
			that._resizeAuto();
			that._resize();

			// If columns were hidden, then DataTables needs to adjust the
			// column sizing
			if ( $.inArray( false, that.s.current ) ) {
				dt.columns.adjust();
			}
		} );

		// First pass - draw the table for the current viewport size
		this._resize();
	},


	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	 * Private methods
	 */

	/**
	 * Calculate the visibility for the columns in a table for a given
	 * breakpoint. The result is pre-determined based on the class logic if
	 * class names are used to control all columns, but the width of the table
	 * is also used if there are columns which are to be automatically shown
	 * and hidden.
	 *
	 * @param  {string} breakpoint Breakpoint name to use for the calculation
	 * @return {array} Array of boolean values initiating the visibility of each
	 *   column.
	 *  @private
	 */
	_columnsVisiblity: function ( breakpoint )
	{
		var dt = this.s.dt;
		var columns = this.s.columns;
		var i, ien;

		// Create an array that defines the column ordering based first on the
		// column's priority, and secondly the column index. This allows the
		// columns to be removed from the right if the priority matches
		var order = columns
			.map( function ( col, idx ) {
				return {
					columnIdx: idx,
					priority: col.priority
				};
			} )
			.sort( function ( a, b ) {
				if ( a.priority !== b.priority ) {
					return a.priority - b.priority;
				}
				return a.columnIdx - b.columnIdx;
			} );

		// Class logic - determine which columns are in this breakpoint based
		// on the classes. If no class control (i.e. `auto`) then `-` is used
		// to indicate this to the rest of the function
		var display = $.map( columns, function ( col ) {
			return col.auto && col.minWidth === null ?
				false :
				col.auto === true ?
					'-' :
					$.inArray( breakpoint, col.includeIn ) !== -1;
		} );

		// Auto column control - first pass: how much width is taken by the
		// ones that must be included from the non-auto columns
		var requiredWidth = 0;
		for ( i=0, ien=display.length ; i<ien ; i++ ) {
			if ( display[i] === true ) {
				requiredWidth += columns[i].minWidth;
			}
		}

		// Second pass, use up any remaining width for other columns. For
		// scrolling tables we need to subtract the width of the scrollbar. It
		// may not be requires which makes this sub-optimal, but it would
		// require another full redraw to make complete use of those extra few
		// pixels
		var scrolling = dt.settings()[0].oScroll;
		var bar = scrolling.sY || scrolling.sX ? scrolling.iBarWidth : 0;
		var widthAvailable = dt.table().container().offsetWidth - bar;
		var usedWidth = widthAvailable - requiredWidth;

		// Control column needs to always be included. This makes it sub-
		// optimal in terms of using the available with, but to stop layout
		// thrashing or overflow. Also we need to account for the control column
		// width first so we know how much width is available for the other
		// columns, since the control column might not be the first one shown
		for ( i=0, ien=display.length ; i<ien ; i++ ) {
			if ( columns[i].control ) {
				usedWidth -= columns[i].minWidth;
			}
		}

		// Allow columns to be shown (counting by priority and then right to
		// left) until we run out of room
		var empty = false;
		for ( i=0, ien=order.length ; i<ien ; i++ ) {
			var colIdx = order[i].columnIdx;

			if ( display[colIdx] === '-' && ! columns[colIdx].control && columns[colIdx].minWidth ) {
				// Once we've found a column that won't fit we don't let any
				// others display either, or columns might disappear in the
				// middle of the table
				if ( empty || usedWidth - columns[colIdx].minWidth < 0 ) {
					empty = true;
					display[colIdx] = false;
				}
				else {
					display[colIdx] = true;
				}

				usedWidth -= columns[colIdx].minWidth;
			}
		}

		// Determine if the 'control' column should be shown (if there is one).
		// This is the case when there is a hidden column (that is not the
		// control column). The two loops look inefficient here, but they are
		// trivial and will fly through. We need to know the outcome from the
		// first , before the action in the second can be taken
		var showControl = false;

		for ( i=0, ien=columns.length ; i<ien ; i++ ) {
			if ( ! columns[i].control && ! columns[i].never && ! display[i] ) {
				showControl = true;
				break;
			}
		}

		for ( i=0, ien=columns.length ; i<ien ; i++ ) {
			if ( columns[i].control ) {
				display[i] = showControl;
			}
		}

		// Finally we need to make sure that there is at least one column that
		// is visible
		if ( $.inArray( true, display ) === -1 ) {
			display[0] = true;
		}

		return display;
	},


	/**
	 * Create the internal `columns` array with information about the columns
	 * for the table. This includes determining which breakpoints the column
	 * will appear in, based upon class names in the column, which makes up the
	 * vast majority of this method.
	 *
	 * @private
	 */
	_classLogic: function ()
	{
		var that = this;
		var calc = {};
		var breakpoints = this.c.breakpoints;
		var dt = this.s.dt;
		var columns = dt.columns().eq(0).map( function (i) {
			var column = this.column(i);
			var className = column.header().className;
			var priority = dt.settings()[0].aoColumns[i].responsivePriority;

			if ( priority === undefined ) {
				var dataPriority = $(column.header()).data('priority');

				priority = dataPriority !== undefined ?
					dataPriority * 1 :
					10000;
			}

			return {
				className: className,
				includeIn: [],
				auto:      false,
				control:   false,
				never:     className.match(/\bnever\b/) ? true : false,
				priority:  priority
			};
		} );

		// Simply add a breakpoint to `includeIn` array, ensuring that there are
		// no duplicates
		var add = function ( colIdx, name ) {
			var includeIn = columns[ colIdx ].includeIn;

			if ( $.inArray( name, includeIn ) === -1 ) {
				includeIn.push( name );
			}
		};

		var column = function ( colIdx, name, operator, matched ) {
			var size, i, ien;

			if ( ! operator ) {
				columns[ colIdx ].includeIn.push( name );
			}
			else if ( operator === 'max-' ) {
				// Add this breakpoint and all smaller
				size = that._find( name ).width;

				for ( i=0, ien=breakpoints.length ; i<ien ; i++ ) {
					if ( breakpoints[i].width <= size ) {
						add( colIdx, breakpoints[i].name );
					}
				}
			}
			else if ( operator === 'min-' ) {
				// Add this breakpoint and all larger
				size = that._find( name ).width;

				for ( i=0, ien=breakpoints.length ; i<ien ; i++ ) {
					if ( breakpoints[i].width >= size ) {
						add( colIdx, breakpoints[i].name );
					}
				}
			}
			else if ( operator === 'not-' ) {
				// Add all but this breakpoint
				for ( i=0, ien=breakpoints.length ; i<ien ; i++ ) {
					if ( breakpoints[i].name.indexOf( matched ) === -1 ) {
						add( colIdx, breakpoints[i].name );
					}
				}
			}
		};

		// Loop over each column and determine if it has a responsive control
		// class
		columns.each( function ( col, i ) {
			var classNames = col.className.split(' ');
			var hasClass = false;

			// Split the class name up so multiple rules can be applied if needed
			for ( var k=0, ken=classNames.length ; k<ken ; k++ ) {
				var className = $.trim( classNames[k] );

				if ( className === 'all' ) {
					// Include in all
					hasClass = true;
					col.includeIn = $.map( breakpoints, function (a) {
						return a.name;
					} );
					return;
				}
				else if ( className === 'none' || col.never ) {
					// Include in none (default) and no auto
					hasClass = true;
					return;
				}
				else if ( className === 'control' ) {
					// Special column that is only visible, when one of the other
					// columns is hidden. This is used for the details control
					hasClass = true;
					col.control = true;
					return;
				}

				$.each( breakpoints, function ( j, breakpoint ) {
					// Does this column have a class that matches this breakpoint?
					var brokenPoint = breakpoint.name.split('-');
					var re = new RegExp( '(min\\-|max\\-|not\\-)?('+brokenPoint[0]+')(\\-[_a-zA-Z0-9])?' );
					var match = className.match( re );

					if ( match ) {
						hasClass = true;

						if ( match[2] === brokenPoint[0] && match[3] === '-'+brokenPoint[1] ) {
							// Class name matches breakpoint name fully
							column( i, breakpoint.name, match[1], match[2]+match[3] );
						}
						else if ( match[2] === brokenPoint[0] && ! match[3] ) {
							// Class name matched primary breakpoint name with no qualifier
							column( i, breakpoint.name, match[1], match[2] );
						}
					}
				} );
			}

			// If there was no control class, then automatic sizing is used
			if ( ! hasClass ) {
				col.auto = true;
			}
		} );

		this.s.columns = columns;
	},


	/**
	 * Show the details for the child row
	 *
	 * @param  {DataTables.Api} row    API instance for the row
	 * @param  {boolean}        update Update flag
	 * @private
	 */
	_detailsDisplay: function ( row, update )
	{
		var that = this;
		var dt = this.s.dt;
		var details = this.c.details;

		if ( details && details.type !== false ) {
			var res = details.display( row, update, function () {
				return details.renderer(
					dt, row[0], that._detailsObj(row[0])
				);
			} );

			if ( res === true || res === false ) {
				$(dt.table().node()).triggerHandler( 'responsive-display.dt', [dt, row, res, update] );
			}
		}
	},


	/**
	 * Initialisation for the details handler
	 *
	 * @private
	 */
	_detailsInit: function ()
	{
		var that    = this;
		var dt      = this.s.dt;
		var details = this.c.details;

		// The inline type always uses the first child as the target
		if ( details.type === 'inline' ) {
			details.target = 'td:first-child, th:first-child';
		}

		// Keyboard accessibility
		dt.on( 'draw.dtr', function () {
			that._tabIndexes();
		} );
		that._tabIndexes(); // Initial draw has already happened

		$( dt.table().body() ).on( 'keyup.dtr', 'td, th', function (e) {
			if ( e.keyCode === 13 && $(this).data('dtr-keyboard') ) {
				$(this).click();
			}
		} );

		// type.target can be a string jQuery selector or a column index
		var target   = details.target;
		var selector = typeof target === 'string' ? target : 'td, th';

		// Click handler to show / hide the details rows when they are available
		$( dt.table().body() )
			.on( 'click.dtr mousedown.dtr mouseup.dtr', selector, function (e) {
				// If the table is not collapsed (i.e. there is no hidden columns)
				// then take no action
				if ( ! $(dt.table().node()).hasClass('collapsed' ) ) {
					return;
				}

				// Check that the row is actually a DataTable's controlled node
				if ( $.inArray( $(this).closest('tr').get(0), dt.rows().nodes().toArray() ) === -1 ) {
					return;
				}

				// For column index, we determine if we should act or not in the
				// handler - otherwise it is already okay
				if ( typeof target === 'number' ) {
					var targetIdx = target < 0 ?
						dt.columns().eq(0).length + target :
						target;

					if ( dt.cell( this ).index().column !== targetIdx ) {
						return;
					}
				}

				// $().closest() includes itself in its check
				var row = dt.row( $(this).closest('tr') );

				// Check event type to do an action
				if ( e.type === 'click' ) {
					// The renderer is given as a function so the caller can execute it
					// only when they need (i.e. if hiding there is no point is running
					// the renderer)
					that._detailsDisplay( row, false );
				}
				else if ( e.type === 'mousedown' ) {
					// For mouse users, prevent the focus ring from showing
					$(this).css('outline', 'none');
				}
				else if ( e.type === 'mouseup' ) {
					// And then re-allow at the end of the click
					$(this).blur().css('outline', '');
				}
			} );
	},


	/**
	 * Get the details to pass to a renderer for a row
	 * @param  {int} rowIdx Row index
	 * @private
	 */
	_detailsObj: function ( rowIdx )
	{
		var that = this;
		var dt = this.s.dt;

		return $.map( this.s.columns, function( col, i ) {
			// Never and control columns should not be passed to the renderer
			if ( col.never || col.control ) {
				return;
			}

			return {
				title:       dt.settings()[0].aoColumns[ i ].sTitle,
				data:        dt.cell( rowIdx, i ).render( that.c.orthogonal ),
				hidden:      dt.column( i ).visible() && !that.s.current[ i ],
				columnIndex: i,
				rowIndex:    rowIdx
			};
		} );
	},


	/**
	 * Find a breakpoint object from a name
	 *
	 * @param  {string} name Breakpoint name to find
	 * @return {object}      Breakpoint description object
	 * @private
	 */
	_find: function ( name )
	{
		var breakpoints = this.c.breakpoints;

		for ( var i=0, ien=breakpoints.length ; i<ien ; i++ ) {
			if ( breakpoints[i].name === name ) {
				return breakpoints[i];
			}
		}
	},


	/**
	 * Re-create the contents of the child rows as the display has changed in
	 * some way.
	 *
	 * @private
	 */
	_redrawChildren: function ()
	{
		var that = this;
		var dt = this.s.dt;

		dt.rows( {page: 'current'} ).iterator( 'row', function ( settings, idx ) {
			var row = dt.row( idx );

			that._detailsDisplay( dt.row( idx ), true );
		} );
	},


	/**
	 * Alter the table display for a resized viewport. This involves first
	 * determining what breakpoint the window currently is in, getting the
	 * column visibilities to apply and then setting them.
	 *
	 * @private
	 */
	_resize: function ()
	{
		var that = this;
		var dt = this.s.dt;
		var width = $(window).width();
		var breakpoints = this.c.breakpoints;
		var breakpoint = breakpoints[0].name;
		var columns = this.s.columns;
		var i, ien;
		var oldVis = this.s.current.slice();

		// Determine what breakpoint we are currently at
		for ( i=breakpoints.length-1 ; i>=0 ; i-- ) {
			if ( width <= breakpoints[i].width ) {
				breakpoint = breakpoints[i].name;
				break;
			}
		}
		
		// Show the columns for that break point
		var columnsVis = this._columnsVisiblity( breakpoint );
		this.s.current = columnsVis;

		// Set the class before the column visibility is changed so event
		// listeners know what the state is. Need to determine if there are
		// any columns that are not visible but can be shown
		var collapsedClass = false;
		for ( i=0, ien=columns.length ; i<ien ; i++ ) {
			if ( columnsVis[i] === false && ! columns[i].never && ! columns[i].control ) {
				collapsedClass = true;
				break;
			}
		}

		$( dt.table().node() ).toggleClass( 'collapsed', collapsedClass );

		var changed = false;

		dt.columns().eq(0).each( function ( colIdx, i ) {
			if ( columnsVis[i] !== oldVis[i] ) {
				changed = true;
				that._setColumnVis( colIdx, columnsVis[i] );
			}
		} );

		if ( changed ) {
			this._redrawChildren();

			// Inform listeners of the change
			$(dt.table().node()).trigger( 'responsive-resize.dt', [dt, this.s.current] );
		}
	},


	/**
	 * Determine the width of each column in the table so the auto column hiding
	 * has that information to work with. This method is never going to be 100%
	 * perfect since column widths can change slightly per page, but without
	 * seriously compromising performance this is quite effective.
	 *
	 * @private
	 */
	_resizeAuto: function ()
	{
		var dt = this.s.dt;
		var columns = this.s.columns;

		// Are we allowed to do auto sizing?
		if ( ! this.c.auto ) {
			return;
		}

		// Are there any columns that actually need auto-sizing, or do they all
		// have classes defined
		if ( $.inArray( true, $.map( columns, function (c) { return c.auto; } ) ) === -1 ) {
			return;
		}

		// Clone the table with the current data in it
		var tableWidth   = dt.table().node().offsetWidth;
		var columnWidths = dt.columns;
		var clonedTable  = dt.table().node().cloneNode( false );
		var clonedHeader = $( dt.table().header().cloneNode( false ) ).appendTo( clonedTable );
		var clonedBody   = $( dt.table().body() ).clone( false, false ).empty().appendTo( clonedTable ); // use jQuery because of IE8

		// Header
		var headerCells = dt.columns()
			.header()
			.filter( function (idx) {
				return dt.column(idx).visible();
			} )
			.to$()
			.clone( false )
			.css( 'display', 'table-cell' );

		// Body rows - we don't need to take account of DataTables' column
		// visibility since we implement our own here (hence the `display` set)
		$(clonedBody)
			.append( $(dt.rows( { page: 'current' } ).nodes()).clone( false ) )
			.find( 'th, td' ).css( 'display', '' );

		// Footer
		var footer = dt.table().footer();
		if ( footer ) {
			var clonedFooter = $( footer.cloneNode( false ) ).appendTo( clonedTable );
			var footerCells = dt.columns()
				.footer()
				.filter( function (idx) {
					return dt.column(idx).visible();
				} )
				.to$()
				.clone( false )
				.css( 'display', 'table-cell' );

			$('<tr/>')
				.append( footerCells )
				.appendTo( clonedFooter );
		}

		$('<tr/>')
			.append( headerCells )
			.appendTo( clonedHeader );

		// In the inline case extra padding is applied to the first column to
		// give space for the show / hide icon. We need to use this in the
		// calculation
		if ( this.c.details.type === 'inline' ) {
			$(clonedTable).addClass( 'dtr-inline collapsed' );
		}
		
		// It is unsafe to insert elements with the same name into the DOM
		// multiple times. For example, cloning and inserting a checked radio
		// clears the chcecked state of the original radio.
		$( clonedTable ).find( '[name]' ).removeAttr( 'name' );
		
		var inserted = $('<div/>')
			.css( {
				width: 1,
				height: 1,
				overflow: 'hidden'
			} )
			.append( clonedTable );

		inserted.insertBefore( dt.table().node() );

		// The cloned header now contains the smallest that each column can be
		headerCells.each( function (i) {
			var idx = dt.column.index( 'fromVisible', i );
			columns[ idx ].minWidth =  this.offsetWidth || 0;
		} );

		inserted.remove();
	},

	/**
	 * Set a column's visibility.
	 *
	 * We don't use DataTables' column visibility controls in order to ensure
	 * that column visibility can Responsive can no-exist. Since only IE8+ is
	 * supported (and all evergreen browsers of course) the control of the
	 * display attribute works well.
	 *
	 * @param {integer} col      Column index
	 * @param {boolean} showHide Show or hide (true or false)
	 * @private
	 */
	_setColumnVis: function ( col, showHide )
	{
		var dt = this.s.dt;
		var display = showHide ? '' : 'none'; // empty string will remove the attr

		$( dt.column( col ).header() ).css( 'display', display );
		$( dt.column( col ).footer() ).css( 'display', display );
		dt.column( col ).nodes().to$().css( 'display', display );
	},


	/**
	 * Update the cell tab indexes for keyboard accessibility. This is called on
	 * every table draw - that is potentially inefficient, but also the least
	 * complex option given that column visibility can change on the fly. Its a
	 * shame user-focus was removed from CSS 3 UI, as it would have solved this
	 * issue with a single CSS statement.
	 *
	 * @private
	 */
	_tabIndexes: function ()
	{
		var dt = this.s.dt;
		var cells = dt.cells( { page: 'current' } ).nodes().to$();
		var ctx = dt.settings()[0];
		var target = this.c.details.target;

		cells.filter( '[data-dtr-keyboard]' ).removeData( '[data-dtr-keyboard]' );

		var selector = typeof target === 'number' ?
			':eq('+target+')' :
			target;

		// This is a bit of a hack - we need to limit the selected nodes to just
		// those of this table
		if ( selector === 'td:first-child, th:first-child' ) {
			selector = '>td:first-child, >th:first-child';
		}

		$( selector, dt.rows( { page: 'current' } ).nodes() )
			.attr( 'tabIndex', ctx.iTabIndex )
			.data( 'dtr-keyboard', 1 );
	}
} );


/**
 * List of default breakpoints. Each item in the array is an object with two
 * properties:
 *
 * * `name` - the breakpoint name.
 * * `width` - the breakpoint width
 *
 * @name Responsive.breakpoints
 * @static
 */
Responsive.breakpoints = [
	{ name: 'desktop',  width: Infinity },
	{ name: 'tablet-l', width: 1024 },
	{ name: 'tablet-p', width: 768 },
	{ name: 'mobile-l', width: 480 },
	{ name: 'mobile-p', width: 320 }
];


/**
 * Display methods - functions which define how the hidden data should be shown
 * in the table.
 *
 * @namespace
 * @name Responsive.defaults
 * @static
 */
Responsive.display = {
	childRow: function ( row, update, render ) {
		if ( update ) {
			if ( $(row.node()).hasClass('parent') ) {
				row.child( render(), 'child' ).show();

				return true;
			}
		}
		else {
			if ( ! row.child.isShown()  ) {
				row.child( render(), 'child' ).show();
				$( row.node() ).addClass( 'parent' );

				return true;
			}
			else {
				row.child( false );
				$( row.node() ).removeClass( 'parent' );

				return false;
			}
		}
	},

	childRowImmediate: function ( row, update, render ) {
		if ( (! update && row.child.isShown()) || ! row.responsive.hasHidden() ) {
			// User interaction and the row is show, or nothing to show
			row.child( false );
			$( row.node() ).removeClass( 'parent' );

			return false;
		}
		else {
			// Display
			row.child( render(), 'child' ).show();
			$( row.node() ).addClass( 'parent' );

			return true;
		}
	},

	// This is a wrapper so the modal options for Bootstrap and jQuery UI can
	// have options passed into them. This specific one doesn't need to be a
	// function but it is for consistency in the `modal` name
	modal: function ( options ) {
		return function ( row, update, render ) {
			if ( ! update ) {
				// Show a modal
				var close = function () {
					modal.remove(); // will tidy events for us
					$(document).off( 'keypress.dtr' );
				};

				var modal = $('<div class="dtr-modal"/>')
					.append( $('<div class="dtr-modal-display"/>')
						.append( $('<div class="dtr-modal-content"/>')
							.append( render() )
						)
						.append( $('<div class="dtr-modal-close">&times;</div>' )
							.click( function () {
								close();
							} )
						)
					)
					.append( $('<div class="dtr-modal-background"/>')
						.click( function () {
							close();
						} )
					)
					.appendTo( 'body' );

				$(document).on( 'keyup.dtr', function (e) {
					if ( e.keyCode === 27 ) {
						e.stopPropagation();

						close();
					}
				} );
			}
			else {
				$('div.dtr-modal-content')
					.empty()
					.append( render() );
			}

			if ( options && options.header ) {
				$('div.dtr-modal-content').prepend(
					'<h2>'+options.header( row )+'</h2>'
				);
			}
		};
	}
};


/**
 * Display methods - functions which define how the hidden data should be shown
 * in the table.
 *
 * @namespace
 * @name Responsive.defaults
 * @static
 */
Responsive.renderer = {
	listHidden: function () {
		return function ( api, rowIdx, columns ) {
			var data = $.map( columns, function ( col ) {
				return col.hidden ?
					'<li data-dtr-index="'+col.columnIndex+'" data-dt-row="'+col.rowIndex+'" data-dt-column="'+col.columnIndex+'">'+
						'<span class="dtr-title">'+
							col.title+
						'</span> '+
						'<span class="dtr-data">'+
							col.data+
						'</span>'+
					'</li>' :
					'';
			} ).join('');

			return data ?
				$('<ul data-dtr-index="'+rowIdx+'" class="dtr-details"/>').append( data ) :
				false;
		}
	},

	tableAll: function ( options ) {
		options = $.extend( {
			tableClass: ''
		}, options );

		return function ( api, rowIdx, columns ) {
			var data = $.map( columns, function ( col ) {
				return '<tr data-dt-row="'+col.rowIndex+'" data-dt-column="'+col.columnIndex+'">'+
						'<td>'+col.title+':'+'</td> '+
						'<td>'+col.data+'</td>'+
					'</tr>';
			} ).join('');

			return $('<table class="'+options.tableClass+' dtr-details" width="100%"/>').append( data );
		}
	}
};

/**
 * Responsive default settings for initialisation
 *
 * @namespace
 * @name Responsive.defaults
 * @static
 */
Responsive.defaults = {
	/**
	 * List of breakpoints for the instance. Note that this means that each
	 * instance can have its own breakpoints. Additionally, the breakpoints
	 * cannot be changed once an instance has been creased.
	 *
	 * @type {Array}
	 * @default Takes the value of `Responsive.breakpoints`
	 */
	breakpoints: Responsive.breakpoints,

	/**
	 * Enable / disable auto hiding calculations. It can help to increase
	 * performance slightly if you disable this option, but all columns would
	 * need to have breakpoint classes assigned to them
	 *
	 * @type {Boolean}
	 * @default  `true`
	 */
	auto: true,

	/**
	 * Details control. If given as a string value, the `type` property of the
	 * default object is set to that value, and the defaults used for the rest
	 * of the object - this is for ease of implementation.
	 *
	 * The object consists of the following properties:
	 *
	 * * `display` - A function that is used to show and hide the hidden details
	 * * `renderer` - function that is called for display of the child row data.
	 *   The default function will show the data from the hidden columns
	 * * `target` - Used as the selector for what objects to attach the child
	 *   open / close to
	 * * `type` - `false` to disable the details display, `inline` or `column`
	 *   for the two control types
	 *
	 * @type {Object|string}
	 */
	details: {
		display: Responsive.display.childRow,

		renderer: Responsive.renderer.listHidden(),

		target: 0,

		type: 'inline'
	},

	/**
	 * Orthogonal data request option. This is used to define the data type
	 * requested when Responsive gets the data to show in the child row.
	 *
	 * @type {String}
	 */
	orthogonal: 'display'
};


/*
 * API
 */
var Api = $.fn.dataTable.Api;

// Doesn't do anything - work around for a bug in DT... Not documented
Api.register( 'responsive()', function () {
	return this;
} );

Api.register( 'responsive.index()', function ( li ) {
	li = $(li);

	return {
		column: li.data('dtr-index'),
		row:    li.parent().data('dtr-index')
	};
} );

Api.register( 'responsive.rebuild()', function () {
	return this.iterator( 'table', function ( ctx ) {
		if ( ctx._responsive ) {
			ctx._responsive._classLogic();
		}
	} );
} );

Api.register( 'responsive.recalc()', function () {
	return this.iterator( 'table', function ( ctx ) {
		if ( ctx._responsive ) {
			ctx._responsive._resizeAuto();
			ctx._responsive._resize();
		}
	} );
} );

Api.register( 'responsive.hasHidden()', function () {
	var ctx = this.context[0];

	return ctx._responsive ?
		$.inArray( false, ctx._responsive.s.current ) !== -1 :
		false;
} );


/**
 * Version information
 *
 * @name Responsive.version
 * @static
 */
Responsive.version = '2.1.1';


$.fn.dataTable.Responsive = Responsive;
$.fn.DataTable.Responsive = Responsive;

// Attach a listener to the document which listens for DataTables initialisation
// events so we can automatically initialise
$(document).on( 'preInit.dt.dtr', function (e, settings, json) {
	if ( e.namespace !== 'dt' ) {
		return;
	}

	if ( $(settings.nTable).hasClass( 'responsive' ) ||
		 $(settings.nTable).hasClass( 'dt-responsive' ) ||
		 settings.oInit.responsive ||
		 DataTable.defaults.responsive
	) {
		var init = settings.oInit.responsive;

		if ( init !== false ) {
			new Responsive( settings, $.isPlainObject( init ) ? init : {}  );
		}
	}
} );


return Responsive;
}));


/***/ }),
/* 67 */
/***/ (function(module, exports) {

/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
}

function isBuffer (obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer (obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
}


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(419);


/***/ }),

/***/ 419:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(jQuery) {(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(421) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function() {

	var __meta__ = { // jshint ignore:line
	    id: "angular",
	    name: "AngularJS Directives",
	    category: "framework",
	    description: "Adds Kendo UI for AngularJS directives",
	    depends: [ "core" ],
	    defer: true
	};

	(function ($, angular, undefined) {
	    "use strict";

	    // Angular2 exposes a global angular object, but it does not have an injector...
	    if (!angular || !angular.injector) {
	        return;
	    }

	    /*jshint eqnull:true,loopfunc:true,-W052,-W028  */

	    var module = angular.module('kendo.directives', []),
	        $injector = angular.injector(['ng']),
	        $parse = $injector.get('$parse'),
	        $timeout = $injector.get('$timeout'),
	        $defaultCompile,
	        $log = $injector.get('$log');

	    function withoutTimeout(f) {
	        var save = $timeout;
	        try {
	            $timeout = function(f){ return f(); };
	            return f();
	        } finally {
	            $timeout = save;
	        }
	    }

	    var OPTIONS_NOW;

	    var createDataSource = (function() {
	        var types = {
	            TreeList    : 'TreeListDataSource',
	            TreeView    : 'HierarchicalDataSource',
	            Scheduler   : 'SchedulerDataSource',
	            PivotGrid   : 'PivotDataSource',
	            PivotConfigurator   : 'PivotDataSource',
	            PanelBar    : 'HierarchicalDataSource',
	            Menu        : "$PLAIN",
	            ContextMenu : "$PLAIN"
	        };
	        var toDataSource = function(dataSource, type) {
	            if (type == '$PLAIN') {
	                return dataSource;
	            }
	            return kendo.data[type].create(dataSource);
	        };
	        return function(scope, element, role, source) {
	            var type = types[role] || 'DataSource';
	            var current = scope.$eval(source);
	            var ds = toDataSource(current, type);

	            scope.$watch(source, function(mew) {
	                var widget = kendoWidgetInstance(element);

	                if (widget && typeof widget.setDataSource == "function") {
	                    if (mew !== current) {
	                        var ds = toDataSource(mew, type);
	                        widget.setDataSource(ds);
	                        current = mew;
	                    }
	                }
	            });
	            return ds;
	        };
	    }());

	    var ignoredAttributes = {
	        kDataSource : true,
	        kOptions    : true,
	        kRebind     : true,
	        kNgModel    : true,
	        kNgDelay    : true
	    };

	    var ignoredOwnProperties = {
	        // XXX: other names to ignore here?
	        name    : true,
	        title   : true,
	        style   : true
	    };

	    function createWidget(scope, element, attrs, widget, origAttr, controllers) {
	        /* jshint latedef: false */
	        if (!(element instanceof jQuery)) {
	            throw new Error("The Kendo UI directives require jQuery to be available before AngularJS. Please include jquery before angular in the document.");
	        }

	        var kNgDelay = attrs.kNgDelay,
	            delayValue = scope.$eval(kNgDelay);

	        controllers = controllers || [];

	        var ngModel = controllers[0],
	            ngForm = controllers[1];

	        var ctor = $(element)[widget];

	        if (!ctor) {
	            window.console.error("Could not find: " + widget);
	            return null;
	        }

	        var parsed = parseOptions(scope, element, attrs, widget, ctor);

	        var options = parsed.options;

	        if (parsed.unresolved.length) {
	            var promises = [];

	            for (var i = 0, len = parsed.unresolved.length; i < len; i++) {

	                var unresolved = parsed.unresolved[i];

	                var promise = $.Deferred(function(d) {
	                    var unwatch = scope.$watch(unresolved.path, function(newValue) {
	                        if (newValue !== undefined) {
	                            unwatch();
	                            d.resolve();
	                        }
	                    });
	                }).promise();

	                promises.push(promise);
	            }

	            $.when.apply(null, promises).then(createIt);

	            return;
	        }

	        if (kNgDelay && !delayValue) {
	            var root = scope.$root || scope;

	            var register = function() {
	                var unregister = scope.$watch(kNgDelay, function(newValue) {
	                        if (newValue !== undefined) {
	                        unregister();
	                        // remove subsequent delays, to make ng-rebind work
	                        element.removeAttr(attrs.$attr.kNgDelay);
	                        kNgDelay = null;
	                        $timeout(createIt); // XXX: won't work without `timeout` ;-\
	                    }
	                });
	            };

	            // WARNING: the watchers should be registered in the digest cycle.
	            // the fork here is for the timeout/non-timeout initiated widgets.
	            if (/^\$(digest|apply)$/.test(root.$$phase)) {
	                register();
	            } else {
	                scope.$apply(register);
	            }

	            return;
	        } else {
	            return createIt();
	        }

	        function createIt() {
	            var originalElement;

	            if (attrs.kRebind) {
	                originalElement = $($(element)[0].cloneNode(true));
	            }

	            // re-parse the options here.
	            options = parseOptions(scope, element, attrs, widget, ctor).options;

	            if (element.is("select")) {
	                (function(options){
	                    if (options.length > 0) {
	                        var first = $(options[0]);
	                        if (!/\S/.test(first.text()) && /^\?/.test(first.val())) {
	                            first.remove();
	                        }
	                    }
	                }(element[0].options));
	            }

	            var object = ctor.call(element, OPTIONS_NOW = options).data(widget);

	            exposeWidget(object, scope, attrs, widget, origAttr);

	            scope.$emit("kendoWidgetCreated", object);

	            var destroyRegister = destroyWidgetOnScopeDestroy(scope, object);

	            if (attrs.kRebind) {
	                setupRebind(object, scope, element, originalElement, attrs.kRebind, destroyRegister, attrs);
	            }

	            if (attrs.kNgDisabled) {
	                var kNgDisabled = attrs.kNgDisabled;
	                var isDisabled = scope.$eval(kNgDisabled);
	                if (isDisabled) {
	                    object.enable(!isDisabled);
	                }
	                bindToKNgDisabled(object, scope, element, kNgDisabled);
	            }

	            if (attrs.kNgReadonly) {
	                var kNgReadonly = attrs.kNgReadonly;
	                var isReadonly = scope.$eval(kNgReadonly);
	                if (isReadonly) {
	                    object.readonly(isReadonly);
	                }
	                bindToKNgReadonly(object, scope, element, kNgReadonly);
	            }

	            // kNgModel is used for the "logical" value
	            if (attrs.kNgModel) {
	                bindToKNgModel(object, scope, attrs.kNgModel);
	            }

	            // 2 way binding: ngModel <-> widget.value()
	            if (ngModel) {
	                bindToNgModel(object, scope, element, ngModel, ngForm);
	            }

	            if (object) {
	                propagateClassToWidgetWrapper(object, element);
	            }

	            return object;
	        }
	    }


	    function parseOptions(scope, element, attrs, widget, ctor) {
	        var role = widget.replace(/^kendo/, '');
	        var unresolved = [];
	        var optionsPath = attrs.kOptions || attrs.options;
	        var optionsValue = scope.$eval(optionsPath);

	        if (optionsPath && optionsValue === undefined) {
	            unresolved.push({ option: "options", path: optionsPath });
	        }

	        var options = angular.extend({}, attrs.defaultOptions, optionsValue);

	        function addOption(name, value) {
	            var scopeValue = angular.copy(scope.$eval(value));
	            if (scopeValue === undefined) {
	                unresolved.push({ option: name, path: value });
	            } else {
	                options[name] = scopeValue;
	            }
	        }


	        var widgetOptions = ctor.widget.prototype.options;
	        var widgetEvents = ctor.widget.prototype.events;


	        $.each(attrs, function(name, value) {
	            if (name === "source" || name === "kDataSource" || name === "kScopeField" || name === "scopeField") {
	                return;
	            }

	            var dataName = "data" + name.charAt(0).toUpperCase() + name.slice(1);

	            if (name.indexOf("on") === 0) { // let's search for such event.
	                var eventKey = name.replace(/^on./, function(prefix) {
	                    return prefix.charAt(2).toLowerCase();
	                });

	                if (widgetEvents.indexOf(eventKey) > -1) {
	                    options[eventKey] = value;
	                }
	            } // don't elsif here - there are on* options

	            if (widgetOptions.hasOwnProperty(dataName)) {
	                addOption(dataName, value);
	            } else if (widgetOptions.hasOwnProperty(name) && !ignoredOwnProperties[name]) {
	                addOption(name, value);
	            } else if (!ignoredAttributes[name]) {
	                var match = name.match(/^k(On)?([A-Z].*)/);
	                if (match) {
	                    var optionName = match[2].charAt(0).toLowerCase() + match[2].slice(1);
	                    if (match[1] && name != "kOnLabel" // XXX: k-on-label can be used on MobileSwitch :-\
	                    ) {
	                        options[optionName] = value;
	                    } else {
	                        if (name == "kOnLabel") {
	                            optionName = "onLabel"; // XXX: that's awful.
	                        }
	                        addOption(optionName, value);
	                    }
	                }
	            }
	        });

	        // parse the datasource attribute
	        var dataSource = attrs.kDataSource || attrs.source;

	        if (dataSource) {
	            options.dataSource = createDataSource(scope, element, role, dataSource);
	        }

	        // deepExtend in kendo.core (used in Editor) will fail with stack
	        // overflow if we don't put it in an array :-\
	        options.$angular = [ scope ];

	        return {
	            options: options,
	            unresolved: unresolved
	        };
	    }

	    function bindToKNgDisabled(widget, scope, element, kNgDisabled) {
	        if ((kendo.ui.PanelBar && widget instanceof kendo.ui.PanelBar) || (kendo.ui.Menu && widget instanceof kendo.ui.Menu)) {
	            $log.warn("k-ng-disabled specified on a widget that does not have the enable() method: " + (widget.options.name));
	            return;
	        }
	        scope.$watch(kNgDisabled, function(newValue, oldValue) {
	            if (newValue != oldValue) {
	                widget.enable(!newValue);
	            }
	        });
	    }

	    function bindToKNgReadonly(widget, scope, element, kNgReadonly) {
	        if (typeof widget.readonly != "function") {
	            $log.warn("k-ng-readonly specified on a widget that does not have the readonly() method: " + (widget.options.name));
	            return;
	        }
	        scope.$watch(kNgReadonly, function(newValue, oldValue) {
	            if (newValue != oldValue) {
	                widget.readonly(newValue);
	            }
	        });
	    }

	    function exposeWidget(widget, scope, attrs, kendoWidget, origAttr) {
	        if (attrs[origAttr]) {
	            var set = $parse(attrs[origAttr]).assign;
	            if (set) {
	                // set the value of the expression to the kendo widget object to expose its api
	                set(scope, widget);
	            } else {
	                throw new Error(origAttr + ' attribute used but expression in it is not assignable: ' + attrs[kendoWidget]);
	            }
	        }
	    }

	    function formValue(element) {
	        if (/checkbox|radio/i.test(element.attr("type"))) {
	            return element.prop("checked");
	        }
	        return element.val();
	    }

	    var formRegExp = /^(input|select|textarea)$/i;

	    function isForm(element) {
	        return formRegExp.test(element[0].tagName);
	    }

	    function bindToNgModel(widget, scope, element, ngModel, ngForm) {
	        if (!widget.value) {
	            return;
	        }

	        var value;
	        // Some widgets trigger "change" on the input field
	        // and this would result in two events sent (#135)
	        var haveChangeOnElement = false;

	        if (isForm(element)) {
	            value = function() {
	                return formValue(element);
	            };
	        } else {
	            value = function() {
	                return widget.value();
	            };
	        }

	        // Angular will invoke $render when the view needs to be updated with the view value.
	        var viewRender = function() {
	            // Update the widget with the view value.

	            // delaying with setTimout for cases where the datasource is set thereafter.
	            // https://github.com/kendo-labs/angular-kendo/issues/304
	            var val = ngModel.$viewValue;
	            if (val === undefined) {
	                val = ngModel.$modelValue;
	            }

	            if (val === undefined) {
	                val = null;
	            }

	            haveChangeOnElement = true;
	            setTimeout(function(){
	                haveChangeOnElement = false;
	                if (widget) { // might have been destroyed in between. :-(
	                    var kNgModel = scope[widget.element.attr("k-ng-model")];

	                    if (kNgModel) {
	                        val = kNgModel;
	                    }

	                    if (widget.options.autoBind === false && !widget.listView.bound()) {
	                        if (val) {
	                            widget.value(val);
	                        }
	                    } else {
	                        widget.value(val);
	                    }
	                }
	            }, 0);
	        };

	        ngModel.$render = viewRender;
	        setTimeout(function() {
	            if (ngModel.$render !== viewRender) {
	                ngModel.$render = viewRender;
	                ngModel.$render();
	            }
	        });

	        if (isForm(element)) {
	            element.on("change", function() {
	                haveChangeOnElement = true;
	            });
	        }

	        var onChange = function(pristine) {
	            return function() {
	                var formPristine;
	                if (haveChangeOnElement && !element.is("select")) {
	                    return;
	                }
	                if (pristine && ngForm) {
	                    formPristine = ngForm.$pristine;
	                }
	                ngModel.$setViewValue(value());
	                if (pristine) {
	                    ngModel.$setPristine();
	                    if (formPristine) {
	                        ngForm.$setPristine();
	                    }
	                }
	                digest(scope);
	            };
	        };

	        widget.first("change", onChange(false));
	        widget.first("spin", onChange(false));

	        if (!(kendo.ui.AutoComplete && widget instanceof kendo.ui.AutoComplete)) {
	            widget.first("dataBound", onChange(true));
	        }

	        var currentVal = value();

	        // if the model value is undefined, then we set the widget value to match ( == null/undefined )
	        // In telerik/kendo-ui-core#1027 we discovered that after the timeout the $viewValue arives as NaN in some weird, default form.
	        // Hence the check below.
	        if (!isNaN(ngModel.$viewValue) && currentVal != ngModel.$viewValue) {
	            if (!ngModel.$isEmpty(ngModel.$viewValue)) {
	                widget.value(ngModel.$viewValue);
	            } else if (currentVal != null && currentVal !== "" && currentVal != ngModel.$viewValue) {
	                ngModel.$setViewValue(currentVal);
	            }
	        }

	        ngModel.$setPristine();
	    }

	    function bindToKNgModel(widget, scope, kNgModel) {
	        if (typeof widget.value != "function") {
	            $log.warn("k-ng-model specified on a widget that does not have the value() method: " + (widget.options.name));
	            return;
	        }

	        var form  = $(widget.element).parents("form");
	        var ngForm = kendo.getter(form.attr("name"), true)(scope);
	        var getter = $parse(kNgModel);
	        var setter = getter.assign;
	        var updating = false;

	        var valueIsCollection = kendo.ui.MultiSelect && widget instanceof kendo.ui.MultiSelect;

	        var length = function(value) {
	            //length is irrelevant when value is not collection
	            return value && valueIsCollection ? value.length : 0;
	        };

	        var currentValueLength = length(getter(scope));

	        widget.$angular_setLogicValue(getter(scope));

	        // keep in sync
	        var watchHandler = function(newValue, oldValue) {
	            if (newValue === undefined) {
	                // because widget's value() method usually checks if the new value is undefined,
	                // in which case it returns the current value rather than clearing the field.
	                // https://github.com/telerik/kendo-ui-core/issues/299
	                newValue = null;
	            }

	            //compare values by reference if a collection
	            if (updating || (newValue == oldValue && length(newValue) == currentValueLength)) {
	                return;
	            }

	            currentValueLength = length(newValue);
	            widget.$angular_setLogicValue(newValue);
	        };

	        if (valueIsCollection) {
	            scope.$watchCollection(kNgModel, watchHandler);
	        } else {
	            scope.$watch(kNgModel, watchHandler);
	        }

	        var changeHandler = function() {
	            updating = true;

	            if (ngForm && ngForm.$pristine) {
	                ngForm.$setDirty();
	            }

	            digest(scope, function(){
	                setter(scope, widget.$angular_getLogicValue());
	                currentValueLength = length(getter(scope));
	            });

	            updating = false;
	        };

	        widget.first("change", changeHandler);
	        widget.first("spin", changeHandler);
	    }

	    function destroyWidgetOnScopeDestroy(scope, widget) {
	        var deregister = scope.$on("$destroy", function() {
	            deregister();
	            if (widget) {
	                kendo.destroy(widget.element);
	                widget = null;
	            }
	        });

	        return deregister;
	    }

	    // mutation observers - propagate the original
	    // element's class to the widget wrapper.
	    function propagateClassToWidgetWrapper(widget, element) {
	        if (!(window.MutationObserver && widget.wrapper)) {
	            return;
	        }

	        var prevClassList = [].slice.call($(element)[0].classList);

	        var mo = new MutationObserver(function(changes){
	            suspend();    // make sure we don't trigger a loop
	            if (!widget) {
	                return;
	            }

	            changes.forEach(function(chg){
	                var w = $(widget.wrapper)[0];
	                switch (chg.attributeName) {

	                    case "class":
	                        // sync classes to the wrapper element
	                        var currClassList = [].slice.call(chg.target.classList);
	                        currClassList.forEach(function(cls){
	                            if (prevClassList.indexOf(cls) < 0) {
	                                w.classList.add(cls);
	                                if (kendo.ui.ComboBox && widget instanceof kendo.ui.ComboBox) { // https://github.com/kendo-labs/angular-kendo/issues/356
	                                    widget.input[0].classList.add(cls);
	                                }
	                            }
	                        });
	                        prevClassList.forEach(function(cls){
	                            if (currClassList.indexOf(cls) < 0) {
	                                w.classList.remove(cls);
	                                if (kendo.ui.ComboBox && widget instanceof kendo.ui.ComboBox) { // https://github.com/kendo-labs/angular-kendo/issues/356
	                                    widget.input[0].classList.remove(cls);
	                                }
	                            }
	                        });
	                        prevClassList = currClassList;
	                        break;

	                    case "disabled":
	                        if (typeof widget.enable == "function" && !widget.element.attr("readonly")) {
	                            widget.enable(!$(chg.target).attr("disabled"));
	                        }
	                        break;

	                    case "readonly":
	                        if (typeof widget.readonly == "function" && !widget.element.attr("disabled")) {
	                            widget.readonly(!!$(chg.target).attr("readonly"));
	                        }
	                        break;
	                }
	            });

	            resume();
	        });

	        function suspend() {
	            mo.disconnect();
	        }

	        function resume() {
	            mo.observe($(element)[0], { attributes: true });
	        }

	        resume();
	        widget.first("destroy", suspend);
	    }

	    function setupRebind(widget, scope, element, originalElement, rebindAttr, destroyRegister, attrs) {
	        // watch for changes on the expression passed in the k-rebind attribute
	        var unregister = scope.$watch(rebindAttr, function(newValue, oldValue) {
	            if (!widget._muteRebind && newValue !== oldValue) {
	                unregister(); // this watcher will be re-added if we compile again!

	                if (attrs._cleanUp) {
	                    attrs._cleanUp();
	                }

	                var templateOptions = WIDGET_TEMPLATE_OPTIONS[widget.options.name];

	                if (templateOptions) {
	                    templateOptions.forEach(function(name) {
	                        var templateContents = scope.$eval(attrs["k" + name]);

	                        if (templateContents) {
	                            originalElement.append($(templateContents).attr(kendo.toHyphens("k" + name), ""));
	                        }
	                    });
	                }

	                var _wrapper = $(widget.wrapper)[0];
	                var _element = $(widget.element)[0];
	                var isUpload = widget.options.name === "Upload";

	                if (isUpload) {
	                    element = $(_element);
	                }

	                var compile = element.injector().get("$compile");
	                widget._destroy();

	                if (destroyRegister) {
	                    destroyRegister();
	                }

	                widget = null;

	                if (_element) {
	                    if (_wrapper) {
	                        _wrapper.parentNode.replaceChild(_element, _wrapper);
	                    }
	                    $(element).replaceWith(originalElement);
	                }

	                compile(originalElement)(scope);
	            }
	        }, true); // watch for object equality. Use native or simple values.
	        digest(scope);
	    }

	    function bind(f, obj) {
	        return function(a, b) {
	            return f.call(obj, a, b);
	        };
	    }

	    function setTemplate(key, value) {
	        this[key] = kendo.stringify(value); // jshint ignore:line
	    }

	    module.factory('directiveFactory', [ '$compile', function(compile) {
	        var kendoRenderedTimeout;
	        var RENDERED = false;

	        // caching $compile for the dirty hack upstairs. This is awful, but we happen to have elements outside of the bootstrapped root :(.
	        $defaultCompile = compile;

	        var create = function(role, origAttr) {
	            return {
	                // Parse the directive for attributes and classes
	                restrict: "AC",
	                require: [ "?ngModel", "^?form" ],
	                scope: false,

	                controller: [ '$scope', '$attrs', '$element', function($scope, $attrs) {
	                    this.template = bind(setTemplate, $attrs);
	                    $attrs._cleanUp = bind(function(){
	                        this.template = null;
	                        $attrs._cleanUp = null;
	                    }, this);
	                }],

	                link: function(scope, element, attrs, controllers) {
	                    var $element = $(element);

	                    // we must remove data-kendo-widget-name attribute because
	                    // it breaks kendo.widgetInstance; can generate all kinds
	                    // of funny issues like
	                    //
	                    //   https://github.com/kendo-labs/angular-kendo/issues/167
	                    //
	                    // but we still keep the attribute without the
	                    // `data-` prefix, so k-rebind would work.
	                    var roleattr = role.replace(/([A-Z])/g, "-$1");

	                    $element.attr(roleattr, $element.attr("data-" + roleattr));
	                    $element[0].removeAttribute("data-" + roleattr);

	                    var widget = createWidget(scope, element, attrs, role, origAttr, controllers);

	                    if (!widget) {
	                        return;
	                    }

	                    if (kendoRenderedTimeout) {
	                        clearTimeout(kendoRenderedTimeout);
	                    }

	                    kendoRenderedTimeout = setTimeout(function() {
	                        scope.$emit("kendoRendered");
	                        if (!RENDERED) {
	                            RENDERED = true;
	                            $("form").each(function(){
	                                var form = $(this).controller("form");
	                                if (form) {
	                                    form.$setPristine();
	                                }
	                            });
	                        }
	                    });
	                }
	            };
	        };

	        return {
	            create: create
	        };
	    }]);

	    var TAGNAMES = {
	        Editor         : "textarea",
	        NumericTextBox : "input",
	        DatePicker     : "input",
	        DateTimePicker : "input",
	        TimePicker     : "input",
	        AutoComplete   : "input",
	        ColorPicker    : "input",
	        MaskedTextBox  : "input",
	        MultiSelect    : "input",
	        Upload         : "input",
	        Validator      : "form",
	        Button         : "button",
	        MobileButton        : "a",
	        MobileBackButton    : "a",
	        MobileDetailButton  : "a",
	        ListView       : "ul",
	        MobileListView: "ul",
	        PanelBar       : "ul",
	        TreeView       : "ul",
	        Menu           : "ul",
	        ContextMenu    : "ul",
	        ActionSheet    : "ul"
	    };

	    var SKIP_SHORTCUTS = [
	        'MobileView',
	        'MobileDrawer',
	        'MobileLayout',
	        'MobileSplitView',
	        'MobilePane',
	        'MobileModalView'
	    ];

	    var MANUAL_DIRECTIVES = [
	        'MobileApplication',
	        'MobileView',
	        'MobileModalView',
	        'MobileLayout',
	        'MobileActionSheet',
	        'MobileDrawer',
	        'MobileSplitView',
	        'MobilePane',
	        'MobileScrollView',
	        'MobilePopOver'
	    ];

	    angular.forEach(['MobileNavBar', 'MobileButton', 'MobileBackButton', 'MobileDetailButton', 'MobileTabStrip', 'MobileScrollView', 'MobileScroller'], function(widget) {
	        MANUAL_DIRECTIVES.push(widget);
	        widget = "kendo" + widget;
	        module.directive(widget, function() {
	            return {
	                restrict: "A",
	                link: function(scope, element, attrs) {
	                    createWidget(scope, element, attrs, widget, widget);
	                }
	            };
	        });
	    });

	    function createDirectives(klass, isMobile) {
	        function make(directiveName, widgetName) {
	            module.directive(directiveName, [
	                "directiveFactory",
	                function(directiveFactory) {
	                    return directiveFactory.create(widgetName, directiveName);
	                }
	            ]);
	        }

	        var name = isMobile ? "Mobile" : "";
	        name += klass.fn.options.name;

	        var className = name;
	        var shortcut = "kendo" + name.charAt(0) + name.substr(1).toLowerCase();
	        name = "kendo" + name;

	        // <kendo-numerictextbox>-type directives
	        var dashed = name.replace(/([A-Z])/g, "-$1");

	        if (SKIP_SHORTCUTS.indexOf(name.replace("kendo", "")) == -1) {
	            var names = name === shortcut ? [ name ] : [ name, shortcut ];
	            angular.forEach(names, function(directiveName) {
	                module.directive(directiveName, function(){
	                    return {
	                        restrict : "E",
	                        replace  : true,
	                        template : function(element, attributes) {
	                            var tag = TAGNAMES[className] || "div";
	                            var scopeField = attributes.kScopeField || attributes.scopeField;

	                            return "<" + tag + " " + dashed + (scopeField ? ('="' + scopeField + '"') : "") + ">" + element.html() + "</" + tag + ">";
	                        }
	                    };
	                });
	            });
	        }

	        if (MANUAL_DIRECTIVES.indexOf(name.replace("kendo", "")) > -1) {
	            return;
	        }

	        // here name should be like kendoMobileListView so kendo-mobile-list-view works,
	        // and shortcut like kendoMobilelistview, for kendo-mobilelistview

	        make(name, name);
	        if (shortcut != name) {
	            make(shortcut, name);
	        }

	    }

	    /* -----[ utils ]----- */

	    function kendoWidgetInstance(el) {
	        el = $(el);
	        return kendo.widgetInstance(el, kendo.ui) ||
	            kendo.widgetInstance(el, kendo.mobile.ui) ||
	            kendo.widgetInstance(el, kendo.dataviz.ui);
	    }

	    function digest(scope, func) {
	        var root = scope.$root || scope;
	        var isDigesting = /^\$(digest|apply)$/.test(root.$$phase);
	        if (func) {
	            if (isDigesting) {
	                func();
	            } else {
	                root.$apply(func);
	            }
	        } else if (!isDigesting) {
	            root.$digest();
	        }
	    }

	    function destroyScope(scope, el) {
	        scope.$destroy();
	        if (el) {
	            // prevent leaks. https://github.com/kendo-labs/angular-kendo/issues/237
	            $(el)
	                .removeData("$scope")
	                .removeData("$$kendoScope")
	                .removeData("$isolateScope")
	                .removeData("$isolateScopeNoTemplate")
	                .removeClass("ng-scope");
	        }
	    }

	    var pendingPatches = [];

	    // defadvice will patch a class' method with another function.  That
	    // function will be called in a context containing `next` (to call
	    // the next method) and `object` (a reference to the original
	    // object).
	    function defadvice(klass, methodName, func) {
	        if ($.isArray(klass)) {
	            return angular.forEach(klass, function(klass){
	                defadvice(klass, methodName, func);
	            });
	        }
	        if (typeof klass == "string") {
	            var a = klass.split(".");
	            var x = kendo;
	            while (x && a.length > 0) {
	                x = x[a.shift()];
	            }
	            if (!x) {
	                pendingPatches.push([ klass, methodName, func ]);
	                return false;
	            }
	            klass = x.prototype;
	        }
	        var origMethod = klass[methodName];
	        klass[methodName] = function() {
	            var self = this, args = arguments;
	            return func.apply({
	                self: self,
	                next: function() {
	                    return origMethod.apply(self, arguments.length > 0 ? arguments : args);
	                }
	            }, args);
	        };
	        return true;
	    }

	    kendo.onWidgetRegistered(function(entry){
	        pendingPatches = $.grep(pendingPatches, function(args){
	            return !defadvice.apply(null, args);
	        });
	        createDirectives(entry.widget, entry.prefix == "Mobile");
	    });

	    /* -----[ Customize widgets for Angular ]----- */

	    defadvice([ "ui.Widget", "mobile.ui.Widget" ], "angular", function(cmd, arg){
	        var self = this.self;
	        if (cmd == "init") {
	            // `arg` here should be the widget options.
	            // the Chart doesn't send the options to Widget::init in constructor
	            // hence the OPTIONS_NOW hack (initialized in createWidget).
	            if (!arg && OPTIONS_NOW) {
	                arg = OPTIONS_NOW;
	            }
	            OPTIONS_NOW = null;
	            if (arg && arg.$angular) {
	                self.$angular_scope = arg.$angular[0];
	                self.$angular_init(self.element, arg);
	            }
	            return;
	        }

	        var scope = self.$angular_scope;

	        if (scope) {
	            withoutTimeout(function(){
	                var x = arg(), elements = x.elements, data = x.data;
	                if (elements.length > 0) {
	                    switch (cmd) {

	                      case "cleanup":
	                        angular.forEach(elements, function(el){
	                            var itemScope = $(el).data("$$kendoScope");

	                            if (itemScope && itemScope !== scope && itemScope.$$kendoScope) {
	                                destroyScope(itemScope, el);
	                            }
	                        });
	                        break;

	                      case "compile":
	                        var injector = self.element.injector();
	                        var compile = injector ? injector.get("$compile") : $defaultCompile;

	                        angular.forEach(elements, function(el, i){
	                            var itemScope;
	                            if (x.scopeFrom) {
	                                itemScope = x.scopeFrom;
	                            } else {
	                                var vars = data && data[i];
	                                if (vars !== undefined) {
	                                    itemScope = $.extend(scope.$new(), vars);
	                                    itemScope.$$kendoScope = true;
	                                } else {
	                                    itemScope = scope;
	                                }
	                            }

	                            $(el).data("$$kendoScope", itemScope);
	                            compile(el)(itemScope);
	                        });
	                        digest(scope);
	                        break;
	                    }
	                }
	            });
	        }
	    });

	    defadvice("ui.Widget", "$angular_getLogicValue", function(){
	        return this.self.value();
	    });

	    defadvice("ui.Widget", "$angular_setLogicValue", function(val){
	        this.self.value(val);
	    });

	    defadvice("ui.Select", "$angular_getLogicValue", function(){
	        var item = this.self.dataItem(),
	            valueField = this.self.options.dataValueField;

	        if (item) {
	            if (this.self.options.valuePrimitive) {
	                if (!!valueField) {
	                    return item[valueField];
	                } else {
	                    return item;
	                }
	            } else {
	                return item.toJSON();
	            }
	        } else {
	            return null;
	        }
	    });

	    defadvice("ui.Select", "$angular_setLogicValue", function(val){
	        var self = this.self;
	        var options = self.options;
	        var valueField = options.dataValueField;
	        var text = options.text || "";

	        if (val === undefined) {
	            val = "";
	        }

	        if (valueField && !options.valuePrimitive && val) {
	            text = val[options.dataTextField] || "";
	            val = val[valueField || options.dataTextField];
	        }

	        if (self.options.autoBind === false && !self.listView.bound()) {
	            if (!text && val && options.valuePrimitive) {
	                self.value(val);
	            } else {
	                self._preselect(val, text);
	            }
	        } else {
	            self.value(val);
	        }
	    });

	    defadvice("ui.MultiSelect", "$angular_getLogicValue", function() {
	        var value = this.self.dataItems().slice(0);
	        var valueField = this.self.options.dataValueField;

	        if (valueField && this.self.options.valuePrimitive) {
	            value = $.map(value, function(item) {
	                return item[valueField];
	            });
	        }

	        return value;
	    });

	    defadvice("ui.MultiSelect", "$angular_setLogicValue", function(val){
	        if (val == null) {
	            val = [];
	        }

	        var self = this.self;
	        var options = self.options;
	        var valueField = options.dataValueField;
	        var data = val;

	        if (valueField && !options.valuePrimitive) {
	            val = $.map(val, function(item) {
	                return item[valueField];
	            });
	        }

	        if (options.autoBind === false && !options.valuePrimitive && !self.listView.bound()) {
	            self._preselect(data, val);
	        } else {
	            self.value(val);
	        }
	    });

	    /* AutoComplete's getter and setter are removed!
	       By design, AutoComplete should be bound only to primitive string
	       value and data items are bound only to serve the list of suggestions.

	       Binding multiple data items is supported by the MultiSelect widget.
	    */

	    // All event handlers that are strings are compiled the Angular way.
	    defadvice("ui.Widget", "$angular_init", function(element, options) {
	        var self = this.self;
	        if (options && !$.isArray(options)) {
	            var scope = self.$angular_scope;
	            for (var i = self.events.length; --i >= 0;) {
	                var event = self.events[i];
	                var handler = options[event];
	                if (handler && typeof handler == "string") {
	                    options[event] = self.$angular_makeEventHandler(event, scope, handler);
	                }
	            }
	        }
	    });

	    // most handers will only contain a kendoEvent in the scope.
	    defadvice("ui.Widget", "$angular_makeEventHandler", function(event, scope, handler){
	        handler = $parse(handler);
	        return function(e) {
	            digest(scope, function() {
	                handler(scope, { kendoEvent: e });
	            });
	        };
	    });

	    // for the Grid and ListView we add `data` and `selected` too.
	    defadvice([ "ui.Grid", "ui.ListView", "ui.TreeView", "ui.PanelBar" ], "$angular_makeEventHandler", function(event, scope, handler){
	        if (event != "change") {
	            return this.next();
	        }
	        handler = $parse(handler);
	        return function(ev) {
	            var widget = ev.sender;
	            var options = widget.options;
	            var cell, multiple, locals = { kendoEvent: ev }, elems, items, columns, colIdx;

	            if (angular.isString(options.selectable)) {
	                cell = options.selectable.indexOf('cell') !== -1;
	                multiple = options.selectable.indexOf('multiple') !== -1;
	            }

	            elems = locals.selected = this.select();
	            items = locals.data = [];
	            columns = locals.columns = [];
	            for (var i = 0; i < elems.length; i++) {
	                var item = cell ? elems[i].parentNode : elems[i];
	                var dataItem = widget.dataItem(item);
	                if (cell) {
	                    if (angular.element.inArray(dataItem, items) < 0) {
	                        items.push(dataItem);
	                    }
	                    colIdx = angular.element(elems[i]).index();
	                    if (angular.element.inArray(colIdx, columns) < 0 ) {
	                        columns.push(colIdx);
	                    }
	                } else {
	                    items.push(dataItem);
	                }
	            }

	            if (!multiple) {
	                locals.dataItem = locals.data = items[0];
	                locals.angularDataItem = kendo.proxyModelSetters(locals.dataItem);
	                locals.selected = elems[0];
	            }

	            digest(scope, function() {
	                handler(scope, locals);
	            });
	        };
	    });

	    // If no `template` is supplied for Grid columns, provide an Angular
	    // template.  The reason is that in this way AngularJS will take
	    // care to update the view as the data in scope changes.
	    defadvice("ui.Grid", "$angular_init", function(element, options){
	        this.next();
	        if (options.columns) {
	            var settings = $.extend({}, kendo.Template, options.templateSettings);
	            angular.forEach(options.columns, function(col){
	                if (col.field && !col.template && !col.format && !col.values && (col.encoded === undefined || col.encoded)) {
	                    col.template = "<span ng-bind='" +
	                        kendo.expr(col.field, "dataItem") + "'>#: " +
	                        kendo.expr(col.field, settings.paramName) + "#</span>";
	                }
	            });
	        }
	    });

	    {
	        // mobile/ButtonGroup does not have a "value" method, but looks
	        // like it would be useful.  We provide it here.

	        defadvice("mobile.ui.ButtonGroup", "value", function(mew){
	            var self = this.self;
	            if (mew != null) {
	                self.select(self.element.children("li.km-button").eq(mew));
	                self.trigger("change");
	                self.trigger("select", { index: self.selectedIndex });
	            }
	            return self.selectedIndex;
	        });

	        defadvice("mobile.ui.ButtonGroup", "_select", function(){
	            this.next();
	            this.self.trigger("change");
	        });
	    }

	    // mobile directives
	    module
	    .directive('kendoMobileApplication', function() {
	        return {
	            terminal: true,
	            link: function(scope, element, attrs) {
	                createWidget(scope, element, attrs, 'kendoMobileApplication', 'kendoMobileApplication');
	            }
	        };
	    }).directive('kendoMobileView', function() {
	        return {
	            scope: true,
	            link: {
	                pre: function(scope, element, attrs) {
	                    attrs.defaultOptions = scope.viewOptions;
	                    attrs._instance = createWidget(scope, element, attrs, 'kendoMobileView', 'kendoMobileView');
	                },

	                post: function(scope, element, attrs) {
	                    attrs._instance._layout();
	                    attrs._instance._scroller();
	                }
	            }
	        };
	    }).directive('kendoMobileDrawer', function() {
	        return {
	            scope: true,
	            link: {
	                pre: function(scope, element, attrs) {
	                    attrs.defaultOptions = scope.viewOptions;
	                    attrs._instance = createWidget(scope, element, attrs, 'kendoMobileDrawer', 'kendoMobileDrawer');
	                },

	                post: function(scope, element, attrs) {
	                    attrs._instance._layout();
	                    attrs._instance._scroller();
	                }
	            }
	        };
	    }).directive('kendoMobileModalView', function() {
	        return {
	            scope: true,
	            link: {
	                pre: function(scope, element, attrs) {
	                    attrs.defaultOptions = scope.viewOptions;
	                    attrs._instance = createWidget(scope, element, attrs, 'kendoMobileModalView', 'kendoMobileModalView');
	                },

	                post: function(scope, element, attrs) {
	                    attrs._instance._layout();
	                    attrs._instance._scroller();
	                }
	            }
	        };
	    }).directive('kendoMobileSplitView', function() {
	        return {
	            terminal: true,
	            link: {
	                pre: function(scope, element, attrs) {
	                    attrs.defaultOptions = scope.viewOptions;
	                    attrs._instance = createWidget(scope, element, attrs, 'kendoMobileSplitView', 'kendoMobileSplitView');
	                },

	                post: function(scope, element, attrs) {
	                    attrs._instance._layout();
	                }
	            }
	        };
	    }).directive('kendoMobilePane', function() {
	        return {
	            terminal: true,
	            link: {
	                pre: function(scope, element, attrs) {
	                    attrs.defaultOptions = scope.viewOptions;
	                    createWidget(scope, element, attrs, 'kendoMobilePane', 'kendoMobilePane');
	                }
	            }
	        };
	    }).directive('kendoMobileLayout', function() {
	        return {
	            link: {
	                pre: function (scope, element, attrs) {
	                    createWidget(scope, element, attrs, 'kendoMobileLayout', 'kendoMobileLayout');
	                }
	            }
	        };
	    }).directive('kendoMobileActionSheet', function() {
	        return {
	            restrict: "A",
	            link: function(scope, element, attrs) {
	                element.find("a[k-action]").each(function() {
	                    $(this).attr("data-" + kendo.ns + "action", $(this).attr("k-action"));
	                });

	                createWidget(scope, element, attrs, 'kendoMobileActionSheet', 'kendoMobileActionSheet');
	            }
	        };
	    }).directive('kendoMobilePopOver', function() {
	        return {
	            terminal: true,
	            link: {
	                pre: function(scope, element, attrs) {
	                    attrs.defaultOptions = scope.viewOptions;
	                    createWidget(scope, element, attrs, 'kendoMobilePopOver', 'kendoMobilePopOver');
	                }
	            }
	        };
	    }).directive('kendoViewTitle', function(){
	        return {
	            restrict : "E",
	            replace  : true,
	            template : function(element) {
	                return "<span data-" + kendo.ns + "role='view-title'>" + element.html() + "</span>";
	            }
	        };
	    }).directive('kendoMobileHeader', function() {
	            return {
	                restrict: "E",
	                link: function(scope, element) {
	                    element.addClass("km-header").attr("data-role", "header");
	                }
	            };
	    }).directive('kendoMobileFooter', function() {
	            return {
	                restrict: 'E',
	                link: function(scope, element) {
	                    element.addClass("km-footer").attr("data-role", "footer");
	                }
	            };
	    }).directive('kendoMobileScrollViewPage', function(){
	        return {
	            restrict : "E",
	            replace  : true,
	            template : function(element) {
	                return "<div data-" + kendo.ns + "role='page'>" + element.html() + "</div>";
	            }
	        };
	    });

	    angular.forEach(['align', 'icon', 'rel', 'transition', 'actionsheetContext'], function(attr) {
	          var kAttr = "k" + attr.slice(0, 1).toUpperCase() + attr.slice(1);

	          module.directive(kAttr, function() {
	              return {
	                  restrict: 'A',
	                  priority: 2,
	                  link: function(scope, element, attrs) {
	                      element.attr(kendo.attr(kendo.toHyphens(attr)), scope.$eval(attrs[kAttr]));
	                  }
	              };
	          });
	    });

	    var WIDGET_TEMPLATE_OPTIONS = {
	        "TreeMap": [ "Template" ],
	        "MobileListView": [ "HeaderTemplate", "Template" ],
	        "MobileScrollView": [ "EmptyTemplate", "Template" ],
	        "Grid": [ "AltRowTemplate", "DetailTemplate", "RowTemplate" ],
	        "ListView": [ "EditTemplate", "Template", "AltTemplate" ],
	        "Pager": [ "SelectTemplate", "LinkTemplate" ],
	        "PivotGrid": [ "ColumnHeaderTemplate", "DataCellTemplate", "RowHeaderTemplate" ],
	        "Scheduler": ["AllDayEventTemplate", "DateHeaderTemplate", "EventTemplate", "MajorTimeHeaderTemplate", "MinorTimeHeaderTemplate"],
	        "PanelBar": [ "Template" ],
	        "TreeView": [ "Template" ],
	        "Validator": [ "ErrorTemplate" ]
	    };

	    (function() {
	        var templateDirectives = {};
	        angular.forEach(WIDGET_TEMPLATE_OPTIONS, function(templates, widget) {
	            angular.forEach(templates, function(template) {
	                if (!templateDirectives[template]) {
	                    templateDirectives[template] = [ ];
	                }
	                templateDirectives[template].push("?^^kendo" + widget);
	            });
	        });

	        angular.forEach(templateDirectives, function(parents, directive) {
	            var templateName = "k" + directive;
	            var attrName = kendo.toHyphens(templateName);

	            module.directive(templateName, function() {
	                return {
	                    restrict: "A",
	                    require: parents,
	                    terminal: true,
	                    compile: function($element, $attrs) {
	                        if ($attrs[templateName] !== "") {
	                            return;
	                        }

	                        $element.removeAttr(attrName);
	                        var template = $element[0].outerHTML;

	                        return function(scope, element, attrs, controllers) {
	                            var controller;

	                            while(!controller && controllers.length) {
	                                controller = controllers.shift();
	                            }

	                            if (!controller) {
	                                $log.warn(attrName + " without a matching parent widget found. It can be one of the following: " + parents.join(", "));
	                            } else {
	                                controller.template(templateName, template);
	                                element.remove();
	                            }
	                        };
	                    }
	                };
	            });
	        });

	    })();


	})(window.kendo.jQuery, window.angular);

	return window.kendo;

	}, __webpack_require__(422));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(420)))

/***/ }),

/***/ 420:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(3);

/***/ }),

/***/ 421:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(0);

/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ })

/******/ });

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(423);


/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 423:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(424), __webpack_require__(425) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "autocomplete",
	    name: "AutoComplete",
	    category: "web",
	    description: "The AutoComplete widget provides suggestions depending on the typed text.It also allows multiple value entries.",
	    depends: [ "list" ],
	    features: [ {
	        id: "mobile-scroller",
	        name: "Mobile scroller",
	        description: "Support for kinetic scrolling in mobile device",
	        depends: [ "mobile.scroller" ]
	    }, {
	        id: "virtualization",
	        name: "VirtualList",
	        description: "Support for virtualization",
	        depends: [ "virtuallist" ]
	    } ]
	};

	(function ($, undefined) {
	    var kendo = window.kendo,
	        support = kendo.support,
	        caret = kendo.caret,
	        activeElement = kendo._activeElement,
	        placeholderSupported = support.placeholder,
	        ui = kendo.ui,
	        List = ui.List,
	        keys = kendo.keys,
	        DataSource = kendo.data.DataSource,
	        ARIA_DISABLED = "aria-disabled",
	        ARIA_READONLY = "aria-readonly",
	        CHANGE = "change",
	        DEFAULT = "k-state-default",
	        DISABLED = "disabled",
	        READONLY = "readonly",
	        FOCUSED = "k-state-focused",
	        SELECTED = "k-state-selected",
	        STATEDISABLED = "k-state-disabled",
	        HOVER = "k-state-hover",
	        ns = ".kendoAutoComplete",
	        HOVEREVENTS = "mouseenter" + ns + " mouseleave" + ns,
	        proxy = $.proxy;

	    function indexOfWordAtCaret(caretIdx, text, separator) {
	        return separator ? text.substring(0, caretIdx).split(separator).length - 1 : 0;
	    }

	    function wordAtCaret(caretIdx, text, separator) {
	        return text.split(separator)[indexOfWordAtCaret(caretIdx, text, separator)];
	    }

	    function replaceWordAtCaret(caretIdx, text, word, separator, defaultSeparator) {
	        var words = text.split(separator);

	        words.splice(indexOfWordAtCaret(caretIdx, text, separator), 1, word);

	        if (separator && words[words.length - 1] !== "") {
	            words.push("");
	        }

	        return words.join(defaultSeparator);
	    }

	    var AutoComplete = List.extend({
	        init: function (element, options) {
	            var that = this, wrapper, disabled;

	            that.ns = ns;
	            options = $.isArray(options) ? { dataSource: options} : options;

	            List.fn.init.call(that, element, options);

	            element = that.element;
	            options = that.options;

	            options.placeholder = options.placeholder || element.attr("placeholder");
	            if (placeholderSupported) {
	                element.attr("placeholder", options.placeholder);
	            }

	            that._wrapper();
	            that._loader();
	            that._clearButton();

	            that._dataSource();
	            that._ignoreCase();

	            element[0].type = "text";
	            wrapper = that.wrapper;

	            that._popup();

	            element
	                .addClass("k-input")
	                .on("keydown" + ns, proxy(that._keydown, that))
	                .on("keypress" + ns, proxy(that._keypress, that))
	                .on("paste" + ns, proxy(that._search, that))
	                .on("focus" + ns, function () {
	                    that._prev = that._accessor();
	                    that._oldText = that._prev;
	                    that._placeholder(false);
	                    wrapper.addClass(FOCUSED);
	                })
	                .on("focusout" + ns, function () {
	                    that._change();
	                    that._placeholder();
	                    wrapper.removeClass(FOCUSED);
	                })
	                .attr({
	                    autocomplete: "off",
	                    role: "textbox",
	                    "aria-haspopup": true
	                });

	            that._clear.on("click" + ns, proxy(that._clearValue, that));
	            that._enable();

	            that._old = that._accessor();

	            if (element[0].id) {
	                element.attr("aria-owns", that.ul[0].id);
	            }

	            that._aria();

	            that._placeholder();

	            that._initList();

	            disabled = $(that.element).parents("fieldset").is(':disabled');

	            if (disabled) {
	                that.enable(false);
	            }

	            that.listView.bind("click", function(e) { e.preventDefault(); });

	            that._resetFocusItemHandler = $.proxy(that._resetFocusItem, that);

	            kendo.notify(that);
	            that._toggleCloseVisibility();
	        },

	        options: {
	            name: "AutoComplete",
	            enabled: true,
	            suggest: false,
	            template: "",
	            groupTemplate: "#:data#",
	            fixedGroupTemplate: "#:data#",
	            dataTextField: "",
	            minLength: 1,
	            enforceMinLength: false,
	            delay: 200,
	            height: 200,
	            filter: "startswith",
	            ignoreCase: true,
	            highlightFirst: false,
	            separator: null,
	            placeholder: "",
	            animation: {},
	            virtual: false,
	            value: null,
	            clearButton: true
	        },

	        _dataSource: function() {
	            var that = this;

	            if (that.dataSource && that._refreshHandler) {
	                that._unbindDataSource();
	            } else {
	                that._progressHandler = proxy(that._showBusy, that);
	                that._errorHandler = proxy(that._hideBusy, that);
	            }

	            that.dataSource = DataSource.create(that.options.dataSource)
	                .bind("progress", that._progressHandler)
	                .bind("error", that._errorHandler);
	        },

	        setDataSource: function(dataSource) {
	            this.options.dataSource = dataSource;
	            this._dataSource();

	            this.listView.setDataSource(this.dataSource);
	        },

	        events: [
	            "open",
	            "close",
	            CHANGE,
	            "select",
	            "filtering",
	            "dataBinding",
	            "dataBound"
	        ],

	        setOptions: function(options) {
	            var listOptions = this._listOptions(options);

	            List.fn.setOptions.call(this, options);

	            this.listView.setOptions(listOptions);
	            this._accessors();
	            this._aria();
	        },

	        _listOptions: function(options) {
	            var listOptions = List.fn._listOptions.call(this, $.extend(options, {
	                skipUpdateOnBind: true
	            }));

	            listOptions.dataValueField = listOptions.dataTextField;
	            listOptions.selectedItemChange = null;

	            return listOptions;
	        },

	        _editable: function(options) {
	            var that = this,
	                element = that.element,
	                wrapper = that.wrapper.off(ns),
	                readonly = options.readonly,
	                disable = options.disable;

	            if (!readonly && !disable) {
	                wrapper
	                    .addClass(DEFAULT)
	                    .removeClass(STATEDISABLED)
	                    .on(HOVEREVENTS, that._toggleHover);

	                element.removeAttr(DISABLED)
	                       .removeAttr(READONLY)
	                       .attr(ARIA_DISABLED, false)
	                       .attr(ARIA_READONLY, false);
	            } else {
	                wrapper
	                    .addClass(disable ? STATEDISABLED : DEFAULT)
	                    .removeClass(disable ? DEFAULT : STATEDISABLED);

	                element.attr(DISABLED, disable)
	                       .attr(READONLY, readonly)
	                       .attr(ARIA_DISABLED, disable)
	                       .attr(ARIA_READONLY, readonly);
	            }
	        },

	        close: function () {
	            var that = this;
	            var current = that.listView.focus();

	            if (current) {
	                current.removeClass(SELECTED);
	            }

	            that.popup.close();
	        },

	        destroy: function() {
	            var that = this;

	            that.element.off(ns);
	            that._clear.off(ns);
	            that.wrapper.off(ns);

	            List.fn.destroy.call(that);
	        },

	        refresh: function() {
	            this.listView.refresh();
	        },

	        select: function (li) {
	            this._select(li);
	        },

	        search: function (word) {
	            var that = this,
	            options = that.options,
	            ignoreCase = options.ignoreCase,
	            separator = that._separator(),
	            length;

	            word = word || that._accessor();

	            clearTimeout(that._typingTimeout);

	            if (separator) {
	                word = wordAtCaret(caret(that.element)[0], word, separator);
	            }

	            length = word.length;

	            if ((!options.enforceMinLength && !length) || length >= options.minLength) {
	                that._open = true;

	                that._mute(function() {
	                    this.listView.value([]);
	                });

	                that._filterSource({
	                    value: ignoreCase ? word.toLowerCase() : word,
	                    operator: options.filter,
	                    field: options.dataTextField,
	                    ignoreCase: ignoreCase
	                });

	                that.one("close", $.proxy(that._unifySeparators, that));
	            }
	            that._toggleCloseVisibility();
	        },

	        suggest: function (word) {
	            var that = this,
	                key = that._last,
	                value = that._accessor(),
	                element = that.element[0],
	                caretIdx = caret(element)[0],
	                separator = that._separator(),
	                words = value.split(separator),
	                wordIndex = indexOfWordAtCaret(caretIdx, value, separator),
	                selectionEnd = caretIdx,
	                idx;

	            if (key == keys.BACKSPACE || key == keys.DELETE) {
	                that._last = undefined;
	                return;
	            }

	            word = word || "";

	            if (typeof word !== "string") {
	                if (word[0]) {
	                    word = that.dataSource.view()[List.inArray(word[0], that.ul[0])];
	                }

	                word = word ? that._text(word) : "";
	            }

	            if (caretIdx <= 0) {
	                caretIdx = value.toLowerCase().indexOf(word.toLowerCase()) + 1;
	            }

	            idx = value.substring(0, caretIdx).lastIndexOf(separator);
	            idx = idx > -1 ? caretIdx - (idx + separator.length) : caretIdx;
	            value = words[wordIndex].substring(0, idx);

	            if (word) {
	                word = word.toString();
	                idx = word.toLowerCase().indexOf(value.toLowerCase());
	                if (idx > -1) {
	                    word = word.substring(idx + value.length);

	                    selectionEnd = caretIdx + word.length;

	                    value += word;
	                }

	                if (separator && words[words.length - 1] !== "") {
	                    words.push("");
	                }

	            }

	            words[wordIndex] = value;

	            that._accessor(words.join(separator || ""));

	            if (element === activeElement()) {
	                caret(element, caretIdx, selectionEnd);
	            }
	        },

	        value: function (value) {
	            if (value !== undefined) {
	                this.listView.value(value);

	                this._accessor(value);
	                this._old = this._accessor();
	                this._oldText = this._accessor();
	            } else {
	                return this._accessor();
	            }
	        },

	        _click: function(e) {
	            var item = e.item;
	            var that = this;
	            var element = that.element;
	            var dataItem = that.listView.dataItemByIndex(that.listView.getElementIndex(item));

	            e.preventDefault();

	            that._active = true;

	            if (that.trigger("select", { dataItem: dataItem, item: item })) {
	                that.close();
	                return;
	            }
	            that._oldText = element.val();
	            that._select(item).done(function() {
	                that._blur();

	                caret(element, element.val().length);
	            });
	        },

	        _clearText: $.noop,

	        _resetFocusItem: function() {
	            var index = this.options.highlightFirst ? 0 : -1;

	            if (this.options.virtual) {
	                this.listView.scrollTo(0);
	            }

	            this.listView.focus(index);
	        },

	        _listBound: function() {
	            var that = this;
	            var popup = that.popup;
	            var options = that.options;
	            var data = that.dataSource.flatView();
	            var length = data.length;
	            var groupsLength = that.dataSource._group.length;
	            var isActive = that.element[0] === activeElement();
	            var action;

	            that._renderFooter();
	            that._renderNoData();
	            that._toggleNoData(!length);
	            that._toggleHeader(!!groupsLength && !!length);

	            that._resizePopup();

	            popup.position();

	            if (length) {
	                if (options.suggest && isActive) {
	                    that.suggest(data[0]);
	                }
	            }

	            if (that._open) {
	                that._open = false;
	                action = that._allowOpening() ? "open" : "close";

	                if (that._typingTimeout && !isActive) {
	                    action = "close";
	                }

	                if (length) {
	                    that._resetFocusItem();

	                    if (options.virtual) {
	                        that.popup
	                            .unbind("activate", that._resetFocusItemHandler)
	                            .one("activate", that._resetFocusItemHandler);
	                    }
	                }

	                popup[action]();
	                that._typingTimeout = undefined;
	            }

	            if (that._touchScroller) {
	                that._touchScroller.reset();
	            }

	            that._hideBusy();
	            that._makeUnselectable();

	            that.trigger("dataBound");
	        },

	        _mute: function(callback) {
	            this._muted = true;
	            callback.call(this);
	            this._muted = false;
	        },

	        _listChange: function() {
	            var isActive = this._active || this.element[0] === activeElement();

	            if (isActive && !this._muted) {
	                this._selectValue(this.listView.selectedDataItems()[0]);
	            }
	        },

	        _selectValue: function(dataItem) {
	            var separator = this._separator();
	            var text = "";

	            if (dataItem) {
	                text = this._text(dataItem);
	            }

	            if (text === null) {
	                text = "";
	            }

	            if (separator) {
	                text = replaceWordAtCaret(caret(this.element)[0], this._accessor(), text, separator, this._defaultSeparator());
	            }

	            this._prev = text;
	            this._accessor(text);
	            this._placeholder();
	        },

	        _unifySeparators: function() {
	            this._accessor(this.value().split(this._separator()).join(this._defaultSeparator()));
	            return this;
	        },

	        _change: function() {
	            var that = this;
	            var value = that._unifySeparators().value();
	            var trigger = value !== List.unifyType(that._old, typeof value);

	            var valueUpdated = trigger && !that._typing;
	            var itemSelected = that._oldText !== value;

	            that._old = value;
	            that._oldText = value;

	            if (valueUpdated || itemSelected) {
	                // trigger the DOM change event so any subscriber gets notified
	                that.element.trigger(CHANGE);
	            }

	            if (trigger) {
	                that.trigger(CHANGE);
	            }

	            that.typing = false;
	            that._toggleCloseVisibility();
	        },

	        _accessor: function (value) {
	            var that = this,
	                element = that.element[0];

	            if (value !== undefined) {
	                element.value = value === null ? "" : value;
	                that._placeholder();
	            } else {
	                value = element.value;

	                if (element.className.indexOf("k-readonly") > -1) {
	                    if (value === that.options.placeholder) {
	                        return "";
	                    } else {
	                        return value;
	                    }
	                }

	                return value;
	            }
	        },

	        _keydown: function (e) {
	            var that = this;
	            var key = e.keyCode;
	            var listView = that.listView;
	            var visible = that.popup.visible();
	            var current = listView.focus();

	            that._last = key;

	            if (key === keys.DOWN) {
	                if (visible) {
	                    this._move(current ? "focusNext" : "focusFirst");
	                }
	                e.preventDefault();
	            } else if (key === keys.UP) {
	                if (visible) {
	                    this._move(current ? "focusPrev" : "focusLast");
	                }
	                e.preventDefault();
	            } else if (key === keys.ENTER || key === keys.TAB) {

	                if (key === keys.ENTER && visible) {
	                    e.preventDefault();
	                }

	                if (visible && current) {
	                    var dataItem = listView.dataItemByIndex(listView.getElementIndex(current));
	                    if (that.trigger("select", { dataItem: dataItem, item: current })) {
	                        return;
	                    }

	                    this._select(current);
	                }

	                this._blur();
	            } else if (key === keys.ESC) {
	                if (visible) {
	                    e.preventDefault();
	                }
	                that.close();
	            } else if (that.popup.visible() && (key === keys.PAGEDOWN || key === keys.PAGEUP)) {
	                e.preventDefault();

	                var direction = key === keys.PAGEDOWN ? 1 : -1;
	                listView.scrollWith(direction * listView.screenHeight());
	            } else {
	                that._search();
	            }
	        },

	        _keypress: function() {
	            this._oldText = this.element.val();
	            this._typing = true;
	        },

	        _move: function (action) {
	            this.listView[action]();

	            if (this.options.suggest) {
	                this.suggest(this.listView.focus());
	            }
	        },

	        _hideBusy: function () {
	            var that = this;
	            clearTimeout(that._busy);
	            that._loading.hide();
	            that.element.attr("aria-busy", false);
	            that._busy = null;
	            that._showClear();
	        },

	        _showBusy: function () {
	            var that = this;

	            if (that._busy) {
	                return;
	            }

	            that._busy = setTimeout(function () {
	                that.element.attr("aria-busy", true);
	                that._loading.show();
	                that._hideClear();
	            }, 100);
	        },

	        _placeholder: function(show) {
	            if (placeholderSupported) {
	                return;
	            }

	            var that = this,
	                element = that.element,
	                placeholder = that.options.placeholder,
	                value;

	            if (placeholder) {
	                value = element.val();

	                if (show === undefined) {
	                    show = !value;
	                }

	                if (!show) {
	                    if (value !== placeholder) {
	                        placeholder = value;
	                    } else {
	                        placeholder = "";
	                    }
	                }

	                if (value === that._old && !show) {
	                    return;
	                }

	                element.toggleClass("k-readonly", show)
	                       .val(placeholder);

	                if (!placeholder && element[0] === document.activeElement) {
	                    caret(element[0], 0, 0);
	                }
	            }
	        },

	        _separator: function() {
	            var separator = this.options.separator;
	            if (separator instanceof Array) {
	               return new RegExp(separator.join("|"), 'gi');
	            }
	            return separator;
	        },

	        _defaultSeparator: function() {
	            var separator = this.options.separator;
	            if (separator instanceof Array) {
	                return separator[0];
	            }
	            return separator;
	        },

	        _inputValue: function() {
	            return this.element.val();
	        },

	        _search: function () {
	            var that = this;
	            clearTimeout(that._typingTimeout);

	            that._typingTimeout = setTimeout(function () {
	                if (that._prev !== that._accessor()) {
	                    that._prev = that._accessor();
	                    that.search();
	                }
	            }, that.options.delay);
	        },

	        _select: function(candidate) {
	            var that = this;
	            that._active = true;
	            return that.listView.select(candidate).done(function() {
	                that._active = false;
	            });
	        },

	        _loader: function() {
	            this._loading = $('<span class="k-icon k-i-loading" style="display:none"></span>').insertAfter(this.element);
	        },

	        _clearButton: function() {
	            this._clear = $('<span unselectable="on" class="k-icon k-clear-value k-i-close" title="clear"></span>').attr({
	                "role": "button",
	                "tabIndex": -1
	            });
	            if (this.options.clearButton) {
	                this._clear.insertAfter(this.element);
	            }
	        },

	        _toggleHover: function(e) {
	            $(e.currentTarget).toggleClass(HOVER, e.type === "mouseenter");
	        },

	        _toggleCloseVisibility: function() {
	            if (this.value()) {
	                this._showClear();
	            } else {
	                this._hideClear();
	            }
	        },

	        _wrapper: function () {
	            var that = this,
	                element = that.element,
	                DOMelement = element[0],
	                wrapper;

	            wrapper = element.parent();

	            if (!wrapper.is("span.k-widget")) {
	                wrapper = element.wrap("<span />").parent();
	            }

	            wrapper.attr("tabindex", -1);
	            wrapper.attr("role", "presentation");

	            wrapper[0].style.cssText = DOMelement.style.cssText;
	            element.css({
	                width: "100%",
	                height: DOMelement.style.height
	            });

	            that._focused = that.element;
	            that.wrapper = wrapper
	                              .addClass("k-widget k-autocomplete k-header")
	                              .addClass(DOMelement.className);
	        }
	    });

	    ui.plugin(AutoComplete);
	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(422));


/***/ }),

/***/ 424:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(9);

/***/ }),

/***/ 425:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(8);

/***/ })

/******/ });

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(430);


/***/ }),

/***/ 421:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(0);

/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 430:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(421) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	    var __meta__ = { // jshint ignore:line
	        id: "color",
	        name: "Color utils",
	        category: "framework",
	        advanced: true,
	        description: "Color utilities used across components",
	        depends: [ "core" ]
	    };

	/*jshint eqnull:true  */

	window.kendo = window.kendo || {};

	var Class = kendo.Class;
	var support = kendo.support;

	var namedColors = {
	    aliceblue: "f0f8ff", antiquewhite: "faebd7", aqua: "00ffff",
	    aquamarine: "7fffd4", azure: "f0ffff", beige: "f5f5dc",
	    bisque: "ffe4c4", black: "000000", blanchedalmond: "ffebcd",
	    blue: "0000ff", blueviolet: "8a2be2", brown: "a52a2a",
	    burlywood: "deb887", cadetblue: "5f9ea0", chartreuse: "7fff00",
	    chocolate: "d2691e", coral: "ff7f50", cornflowerblue: "6495ed",
	    cornsilk: "fff8dc", crimson: "dc143c", cyan: "00ffff",
	    darkblue: "00008b", darkcyan: "008b8b", darkgoldenrod: "b8860b",
	    darkgray: "a9a9a9", darkgrey: "a9a9a9", darkgreen: "006400",
	    darkkhaki: "bdb76b", darkmagenta: "8b008b", darkolivegreen: "556b2f",
	    darkorange: "ff8c00", darkorchid: "9932cc", darkred: "8b0000",
	    darksalmon: "e9967a", darkseagreen: "8fbc8f", darkslateblue: "483d8b",
	    darkslategray: "2f4f4f", darkslategrey: "2f4f4f", darkturquoise: "00ced1",
	    darkviolet: "9400d3", deeppink: "ff1493", deepskyblue: "00bfff",
	    dimgray: "696969", dimgrey: "696969", dodgerblue: "1e90ff",
	    firebrick: "b22222", floralwhite: "fffaf0", forestgreen: "228b22",
	    fuchsia: "ff00ff", gainsboro: "dcdcdc", ghostwhite: "f8f8ff",
	    gold: "ffd700", goldenrod: "daa520", gray: "808080",
	    grey: "808080", green: "008000", greenyellow: "adff2f",
	    honeydew: "f0fff0", hotpink: "ff69b4", indianred: "cd5c5c",
	    indigo: "4b0082", ivory: "fffff0", khaki: "f0e68c",
	    lavender: "e6e6fa", lavenderblush: "fff0f5", lawngreen: "7cfc00",
	    lemonchiffon: "fffacd", lightblue: "add8e6", lightcoral: "f08080",
	    lightcyan: "e0ffff", lightgoldenrodyellow: "fafad2", lightgray: "d3d3d3",
	    lightgrey: "d3d3d3", lightgreen: "90ee90", lightpink: "ffb6c1",
	    lightsalmon: "ffa07a", lightseagreen: "20b2aa", lightskyblue: "87cefa",
	    lightslategray: "778899", lightslategrey: "778899", lightsteelblue: "b0c4de",
	    lightyellow: "ffffe0", lime: "00ff00", limegreen: "32cd32",
	    linen: "faf0e6", magenta: "ff00ff", maroon: "800000",
	    mediumaquamarine: "66cdaa", mediumblue: "0000cd", mediumorchid: "ba55d3",
	    mediumpurple: "9370d8", mediumseagreen: "3cb371", mediumslateblue: "7b68ee",
	    mediumspringgreen: "00fa9a", mediumturquoise: "48d1cc", mediumvioletred: "c71585",
	    midnightblue: "191970", mintcream: "f5fffa", mistyrose: "ffe4e1",
	    moccasin: "ffe4b5", navajowhite: "ffdead", navy: "000080",
	    oldlace: "fdf5e6", olive: "808000", olivedrab: "6b8e23",
	    orange: "ffa500", orangered: "ff4500", orchid: "da70d6",
	    palegoldenrod: "eee8aa", palegreen: "98fb98", paleturquoise: "afeeee",
	    palevioletred: "d87093", papayawhip: "ffefd5", peachpuff: "ffdab9",
	    peru: "cd853f", pink: "ffc0cb", plum: "dda0dd",
	    powderblue: "b0e0e6", purple: "800080", red: "ff0000",
	    rosybrown: "bc8f8f", royalblue: "4169e1", saddlebrown: "8b4513",
	    salmon: "fa8072", sandybrown: "f4a460", seagreen: "2e8b57",
	    seashell: "fff5ee", sienna: "a0522d", silver: "c0c0c0",
	    skyblue: "87ceeb", slateblue: "6a5acd", slategray: "708090",
	    slategrey: "708090", snow: "fffafa", springgreen: "00ff7f",
	    steelblue: "4682b4", tan: "d2b48c", teal: "008080",
	    thistle: "d8bfd8", tomato: "ff6347", turquoise: "40e0d0",
	    violet: "ee82ee", wheat: "f5deb3", white: "ffffff",
	    whitesmoke: "f5f5f5", yellow: "ffff00", yellowgreen: "9acd32"
	};

	var browser = support.browser;
	var namedColorRegexp = [ "transparent" ];

	for (var i in namedColors) {
	    if (namedColors.hasOwnProperty(i)) {
	        namedColorRegexp.push(i);
	    }
	}

	namedColorRegexp = new RegExp("^(" + namedColorRegexp.join("|") + ")(\\W|$)", "i");

	var BaseColor = Class.extend({
	    init: function() {  },

	    toHSV: function() { return this; },

	    toRGB: function() { return this; },

	    toHex: function() { return this.toBytes().toHex(); },

	    toBytes: function() { return this; },

	    toCss: function() { return "#" + this.toHex(); },

	    toCssRgba: function() {
	        var rgb = this.toBytes();
	        return ("rgba(" + (rgb.r) + ", " + (rgb.g) + ", " + (rgb.b) + ", " + (parseFloat((Number(this.a)).toFixed(3))) + ")");
	    },

	    toDisplay: function() {
	        if (browser.msie && browser.version < 9) {
	            return this.toCss(); // no RGBA support; does it support any opacity in colors?
	        }
	        return this.toCssRgba();
	    },

	    equals: function(c) {
	        return c === this || c !== null && this.toCssRgba() === parseColor(c).toCssRgba();
	    },

	    diff: function(other) {
	        if (other === null) {
	            return NaN;
	        }

	        var c1 = this.toBytes();
	        var c2 = other.toBytes();

	        return Math.sqrt(Math.pow((c1.r - c2.r) * 0.30, 2) +
	                         Math.pow((c1.g - c2.g) * 0.59, 2) +
	                         Math.pow((c1.b - c2.b) * 0.11, 2));
	    },

	    clone: function() {
	        var c = this.toBytes();
	        if (c === this) {
	            c = new Bytes(c.r, c.g, c.b, c.a);
	        }

	        return c;
	    }
	});

	var RGB = BaseColor.extend({
	    init: function(r, g, b, a) {
	        BaseColor.fn.init.call(this);

	        this.r = r;
	        this.g = g;
	        this.b = b;
	        this.a = a;
	    },

	    toHSV: function() {
	        var ref = this;
	        var r = ref.r;
	        var g = ref.g;
	        var b = ref.b;
	        var min = Math.min(r, g, b);
	        var max = Math.max(r, g, b);
	        var delta = max - min;
	        var v = max;
	        var h, s;

	        if (delta === 0) {
	            return new HSV(0, 0, v, this.a);
	        }

	        if (max !== 0) {
	            s = delta / max;
	            if (r === max) {
	                h = (g - b) / delta;
	            } else if (g === max) {
	                h = 2 + (b - r) / delta;
	            } else {
	                h = 4 + (r - g) / delta;
	            }

	            h *= 60;
	            if (h < 0) {
	                h += 360;
	            }
	        } else {
	            s = 0;
	            h = -1;
	        }

	        return new HSV(h, s, v, this.a);
	    },

	    toHSL: function() {
	        var ref = this;
	        var r = ref.r;
	        var g = ref.g;
	        var b = ref.b;
	        var max = Math.max(r, g, b);
	        var min = Math.min(r, g, b);
	        var h, s, l = (max + min) / 2;

	        if (max === min) {
	            h = s = 0;
	        } else {
	            var d = max - min;
	            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
	            switch (max) {
	                case r: h = (g - b) / d + (g < b ? 6 : 0); break;
	                case g: h = (b - r) / d + 2; break;
	                case b: h = (r - g) / d + 4; break;
	                default: break;
	            }

	            h *= 60;
	            s *= 100;
	            l *= 100;
	        }

	        return new HSL(h, s, l, this.a);
	    },

	    toBytes: function() {
	        return new Bytes(this.r * 255, this.g * 255, this.b * 255, this.a);
	    }
	});

	var Bytes = RGB.extend({
	    init: function(r, g, b, a) {
	        RGB.fn.init.call(this, Math.round(r), Math.round(g), Math.round(b), a);
	    },

	    toRGB: function() {
	        return new RGB(this.r / 255, this.g / 255, this.b / 255, this.a);
	    },

	    toHSV: function() {
	        return this.toRGB().toHSV();
	    },

	    toHSL: function() {
	        return this.toRGB().toHSL();
	    },

	    toHex: function() {
	        return hex(this.r, 2) + hex(this.g, 2) + hex(this.b, 2);
	    },

	    toBytes: function() {
	        return this;
	    }
	});

	function hex(n, width, pad) {
	    if (pad === void 0) { pad = "0"; }

	    var result = n.toString(16);
	    while (width > result.length) {
	        result = pad + result;
	    }

	    return result;
	}

	var HSV = BaseColor.extend({
	    init: function(h, s, v, a) {
	        BaseColor.fn.init.call(this);

	        this.h = h;
	        this.s = s;
	        this.v = v;
	        this.a = a;
	    },

	    toRGB: function() {
	        var ref = this;
	        var h = ref.h;
	        var s = ref.s;
	        var v = ref.v;
	        var r, g, b;

	        if (s === 0) {
	            r = g = b = v;
	        } else {
	            h /= 60;

	            var i = Math.floor(h);
	            var f = h - i;
	            var p = v * (1 - s);
	            var q = v * (1 - s * f);
	            var t = v * (1 - s * (1 - f));

	            switch (i) {
	                case 0: r = v; g = t; b = p; break;
	                case 1: r = q; g = v; b = p; break;
	                case 2: r = p; g = v; b = t; break;
	                case 3: r = p; g = q; b = v; break;
	                case 4: r = t; g = p; b = v; break;
	                default: r = v; g = p; b = q; break;
	            }
	        }

	        return new RGB(r, g, b, this.a);
	    },

	    toHSL: function() {
	        return this.toRGB().toHSL();
	    },

	    toBytes: function() {
	        return this.toRGB().toBytes();
	    }
	});

	var HSL = BaseColor.extend({
	    init: function(h, s, l, a) {
	        BaseColor.fn.init.call(this);

	        this.h = h;
	        this.s = s;
	        this.l = l;
	        this.a = a;
	    },

	    toRGB: function() {
	        var ref = this;
	        var h = ref.h;
	        var s = ref.s;
	        var l = ref.l;
	        var r, g, b;

	        if (s === 0) {
	            r = g = b = l; // achromatic
	        } else {
	            h /= 360;
	            s /= 100;
	            l /= 100;

	            var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
	            var p = 2 * l - q;
	            r = hue2rgb(p, q, h + 1 / 3);
	            g = hue2rgb(p, q, h);
	            b = hue2rgb(p, q, h - 1 / 3);
	        }

	        return new RGB(r, g, b, this.a);
	    },

	    toHSV: function() {
	        return this.toRGB().toHSV();
	    },

	    toBytes: function() {
	        return this.toRGB().toBytes();
	    }
	});

	function hue2rgb(p, q, s) {
	    var t = s;

	    if (t < 0) {
	        t += 1;
	    }

	    if (t > 1) {
	        t -= 1;
	    }

	    if (t < 1 / 6) {
	        return p + (q - p) * 6 * t;
	    }

	    if (t < 1 / 2) {
	        return q;
	    }

	    if (t < 2 / 3) {
	        return p + (q - p) * (2 / 3 - t) * 6;
	    }

	    return p;
	}

	function parseColor(value, safe) {
	    var m, ret;

	    if (value == null || value === "none") {
	        return null;
	    }

	    if (value instanceof BaseColor) {
	        return value;
	    }

	    var color = value.toLowerCase();
	    if ((m = namedColorRegexp.exec(color))) {
	        if (m[1] === "transparent") {
	            color = new RGB(1, 1, 1, 0);
	        } else {
	            color = parseColor(namedColors[m[1]], safe);
	        }
	        color.match = [ m[1] ];
	        return color;
	    }
	    if ((m = /^#?([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})\b/i.exec(color))) {
	        ret = new Bytes(parseInt(m[1], 16),
	                        parseInt(m[2], 16),
	                        parseInt(m[3], 16), 1);
	    } else if ((m = /^#?([0-9a-f])([0-9a-f])([0-9a-f])\b/i.exec(color))) {
	        ret = new Bytes(parseInt(m[1] + m[1], 16),
	                        parseInt(m[2] + m[2], 16),
	                        parseInt(m[3] + m[3], 16), 1);
	    } else if ((m = /^rgb\(\s*([0-9]+)\s*,\s*([0-9]+)\s*,\s*([0-9]+)\s*\)/.exec(color))) {
	        ret = new Bytes(parseInt(m[1], 10),
	                        parseInt(m[2], 10),
	                        parseInt(m[3], 10), 1);
	    } else if ((m = /^rgba\(\s*([0-9]+)\s*,\s*([0-9]+)\s*,\s*([0-9]+)\s*,\s*([0-9.]+)\s*\)/.exec(color))) {
	        ret = new Bytes(parseInt(m[1], 10),
	                        parseInt(m[2], 10),
	                        parseInt(m[3], 10), parseFloat(m[4]));
	    } else if ((m = /^rgb\(\s*([0-9]*\.?[0-9]+)%\s*,\s*([0-9]*\.?[0-9]+)%\s*,\s*([0-9]*\.?[0-9]+)%\s*\)/.exec(color))) {
	        ret = new RGB(parseFloat(m[1]) / 100,
	                      parseFloat(m[2]) / 100,
	                      parseFloat(m[3]) / 100, 1);
	    } else if ((m = /^rgba\(\s*([0-9]*\.?[0-9]+)%\s*,\s*([0-9]*\.?[0-9]+)%\s*,\s*([0-9]*\.?[0-9]+)%\s*,\s*([0-9.]+)\s*\)/.exec(color))) {
	        ret = new RGB(parseFloat(m[1]) / 100,
	                      parseFloat(m[2]) / 100,
	                      parseFloat(m[3]) / 100, parseFloat(m[4]));
	    }

	    if (ret) {
	        ret.match = m;
	    } else if (!safe) {
	        throw new Error("Cannot parse color: " + color);
	    }

	    return ret;
	}

	var Color = Class.extend({
	    init: function(value) {
	        var this$1 = this;

	        if (arguments.length === 1) {
	            var formats = Color.formats;
	            var resolvedColor = this.resolveColor(value);

	            for (var idx = 0; idx < formats.length; idx++) {
	                var formatRegex = formats[idx].re;
	                var processor = formats[idx].process;
	                var parts = formatRegex.exec(resolvedColor);

	                if (parts) {
	                    var channels = processor(parts);
	                    this$1.r = channels[0];
	                    this$1.g = channels[1];
	                    this$1.b = channels[2];
	                }
	            }
	        } else {
	            this.r = arguments[0];
	            this.g = arguments[1];
	            this.b = arguments[2];
	        }

	        this.r = this.normalizeByte(this.r);
	        this.g = this.normalizeByte(this.g);
	        this.b = this.normalizeByte(this.b);
	    },

	    toHex: function() {
	        var pad = this.padDigit;
	        var r = this.r.toString(16);
	        var g = this.g.toString(16);
	        var b = this.b.toString(16);

	        return "#" + pad(r) + pad(g) + pad(b);
	    },

	    resolveColor: function(value) {
	        var color = value || "black";

	        if (color.charAt(0) === "#") {
	            color = color.substr(1, 6);
	        }

	        color = color.replace(/ /g, "");
	        color = color.toLowerCase();
	        color = Color.namedColors[color] || color;

	        return color;
	    },

	    normalizeByte: function(value) {
	        if (value < 0 || isNaN(value)) {
	            return 0;
	        }

	        return value > 255 ? 255 : value;
	    },

	    padDigit: function(value) {
	        return (value.length === 1) ? "0" + value : value;
	    },

	    brightness: function(value) {
	        var round = Math.round;

	        this.r = round(this.normalizeByte(this.r * value));
	        this.g = round(this.normalizeByte(this.g * value));
	        this.b = round(this.normalizeByte(this.b * value));

	        return this;
	    },

	    percBrightness: function() {
	        return Math.sqrt(0.241 * this.r * this.r + 0.691 * this.g * this.g + 0.068 * this.b * this.b);
	    }
	});

	Color.fromBytes = function(r, g, b, a) {
	    return new Bytes(r, g, b, a != null ? a : 1);
	};

	Color.fromRGB = function(r, g, b, a) {
	    return new RGB(r, g, b, a != null ? a : 1);
	};

	Color.fromHSV = function(h, s, v, a) {
	    return new HSV(h, s, v, a != null ? a : 1);
	};

	Color.fromHSL = function(h, s, l, a) {
	    return new HSL(h, s, l, a != null ? a : 1);
	};

	Color.formats = [ {
	    re: /^rgb\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)$/,
	    process: function(parts) {
	        return [
	            parseInt(parts[1], 10), parseInt(parts[2], 10), parseInt(parts[3], 10)
	        ];
	    }
	}, {
	    re: /^(\w{2})(\w{2})(\w{2})$/,
	    process: function(parts) {
	        return [
	            parseInt(parts[1], 16), parseInt(parts[2], 16), parseInt(parts[3], 16)
	        ];
	    }
	}, {
	    re: /^(\w{1})(\w{1})(\w{1})$/,
	    process: function(parts) {
	        return [
	            parseInt(parts[1] + parts[1], 16),
	            parseInt(parts[2] + parts[2], 16),
	            parseInt(parts[3] + parts[3], 16)
	        ];
	    }
	} ];

	Color.namedColors = namedColors;

	kendo.deepExtend(kendo, {
	    parseColor: parseColor,
	    Color: Color
	});

	}, __webpack_require__(422));

/***/ })

/******/ });

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(431);


/***/ }),

/***/ 420:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(3);

/***/ }),

/***/ 421:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(0);

/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 431:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(jQuery) {(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(421), __webpack_require__(432), __webpack_require__(433), __webpack_require__(434), __webpack_require__(435), __webpack_require__(436) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "colorpicker",
	    name: "Color tools",
	    category: "web",
	    description: "Color selection widgets",
	    depends: [ "core", "color", "popup", "slider", "userevents", "button" ]
	};

	(function($, parseInt, undefined){
	    // WARNING: removing the following jshint declaration and turning
	    // == into === to make JSHint happy will break functionality.
	    /*jshint eqnull:true  */
	    var kendo = window.kendo,
	        ui = kendo.ui,
	        Widget = ui.Widget,
	        parseColor = kendo.parseColor,
	        Color = kendo.Color,
	        KEYS = kendo.keys,
	        BACKGROUNDCOLOR = "background-color",
	        ITEMSELECTEDCLASS = "k-state-selected",
	        SIMPLEPALETTE = "000000,7f7f7f,880015,ed1c24,ff7f27,fff200,22b14c,00a2e8,3f48cc,a349a4,ffffff,c3c3c3,b97a57,ffaec9,ffc90e,efe4b0,b5e61d,99d9ea,7092be,c8bfe7",
	        WEBPALETTE = "FFFFFF,FFCCFF,FF99FF,FF66FF,FF33FF,FF00FF,CCFFFF,CCCCFF,CC99FF,CC66FF,CC33FF,CC00FF,99FFFF,99CCFF,9999FF,9966FF,9933FF,9900FF,FFFFCC,FFCCCC,FF99CC,FF66CC,FF33CC,FF00CC,CCFFCC,CCCCCC,CC99CC,CC66CC,CC33CC,CC00CC,99FFCC,99CCCC,9999CC,9966CC,9933CC,9900CC,FFFF99,FFCC99,FF9999,FF6699,FF3399,FF0099,CCFF99,CCCC99,CC9999,CC6699,CC3399,CC0099,99FF99,99CC99,999999,996699,993399,990099,FFFF66,FFCC66,FF9966,FF6666,FF3366,FF0066,CCFF66,CCCC66,CC9966,CC6666,CC3366,CC0066,99FF66,99CC66,999966,996666,993366,990066,FFFF33,FFCC33,FF9933,FF6633,FF3333,FF0033,CCFF33,CCCC33,CC9933,CC6633,CC3333,CC0033,99FF33,99CC33,999933,996633,993333,990033,FFFF00,FFCC00,FF9900,FF6600,FF3300,FF0000,CCFF00,CCCC00,CC9900,CC6600,CC3300,CC0000,99FF00,99CC00,999900,996600,993300,990000,66FFFF,66CCFF,6699FF,6666FF,6633FF,6600FF,33FFFF,33CCFF,3399FF,3366FF,3333FF,3300FF,00FFFF,00CCFF,0099FF,0066FF,0033FF,0000FF,66FFCC,66CCCC,6699CC,6666CC,6633CC,6600CC,33FFCC,33CCCC,3399CC,3366CC,3333CC,3300CC,00FFCC,00CCCC,0099CC,0066CC,0033CC,0000CC,66FF99,66CC99,669999,666699,663399,660099,33FF99,33CC99,339999,336699,333399,330099,00FF99,00CC99,009999,006699,003399,000099,66FF66,66CC66,669966,666666,663366,660066,33FF66,33CC66,339966,336666,333366,330066,00FF66,00CC66,009966,006666,003366,000066,66FF33,66CC33,669933,666633,663333,660033,33FF33,33CC33,339933,336633,333333,330033,00FF33,00CC33,009933,006633,003333,000033,66FF00,66CC00,669900,666600,663300,660000,33FF00,33CC00,339900,336600,333300,330000,00FF00,00CC00,009900,006600,003300,000000",
	        WHITE = "#ffffff",
	        MESSAGES = {
	            apply  : "Apply",
	            cancel : "Cancel",
	            noColor: "no color",
	            clearColor: "Clear color",
	            previewInput: "Color Hexadecimal Code"
	        },
	        NS = ".kendoColorTools",
	        CLICK_NS = "click" + NS,
	        KEYDOWN_NS = "keydown" + NS,

	        browser = kendo.support.browser,
	        isIE8 = browser.msie && browser.version < 9;

	    var ColorSelector = Widget.extend({
	        init: function(element, options) {
	            var that = this, ariaId;

	            Widget.fn.init.call(that, element, options);
	            element = that.element;
	            options = that.options;
	            that._value = options.value = parseColor(options.value);
	            that._tabIndex = element.attr("tabIndex") || 0;

	            ariaId = that._ariaId = options.ariaId;
	            if (ariaId) {
	                element.attr("aria-labelledby", ariaId);
	            }

	            if (options._standalone) {
	                that._triggerSelect = that._triggerChange;
	            }
	        },
	        options: {
	            name: "ColorSelector",
	            value: null,
	            _standalone: true
	        },
	        events: [
	            "change",
	            "select",
	            "cancel"
	        ],
	        color: function(value) {
	            if (value !== undefined) {
	                this._value = parseColor(value);
	                this._updateUI(this._value);
	            }

	            return this._value;
	        },
	        value: function(color) {
	            color = this.color(color);

	            if (color) {
	                if (this.options.opacity) {
	                    color = color.toCssRgba();
	                } else {
	                    color = color.toCss();
	                }
	            }

	            return color || null;
	        },
	        enable: function(enable) {
	            if (arguments.length === 0) {
	                enable = true;
	            }
	            $(".k-disabled-overlay", this.wrapper).remove();
	            if (!enable) {
	                this.wrapper.append("<div class='k-disabled-overlay'></div>");
	            }
	            this._onEnable(enable);
	        },
	        _select: function(color, nohooks) {
	            var prev = this._value;
	            color = this.color(color);
	            if (!nohooks) {
	                this.element.trigger("change");
	                if (!color.equals(prev)) {
	                    this.trigger("change", { value: this.value() });
	                } else if (!this._standalone) {
	                    this.trigger("cancel");
	                }
	            }
	        },
	        _triggerSelect: function(color) {
	            triggerEvent(this, "select", color);
	        },
	        _triggerChange: function(color) {
	            triggerEvent(this, "change", color);
	        },
	        destroy: function() {
	            if (this.element) {
	                this.element.off(NS);
	            }
	            if (this.wrapper) {
	                this.wrapper.off(NS).find("*").off(NS);
	            }
	            this.wrapper = null;
	            Widget.fn.destroy.call(this);
	        },
	        _updateUI: $.noop,
	        _selectOnHide: function() {
	            return null;
	        },
	        _cancel: function() {
	            this.trigger("cancel");
	        }
	    });

	    function triggerEvent(self, type, color) {
	        color = parseColor(color);
	        if (color && !color.equals(self.color())) {
	            if (type == "change") {
	                // UI is already updated.  setting _value directly
	                // rather than calling self.color(color) to avoid an
	                // endless loop.
	                self._value = color;
	            }
	            if (color.a != 1) {
	                color = color.toCssRgba();
	            } else {
	                color = color.toCss();
	            }
	            self.trigger(type, { value: color });
	        }
	    }

	    var ColorPalette = ColorSelector.extend({
	        init: function(element, options) {
	            var that = this;
	            ColorSelector.fn.init.call(that, element, options);
	            element = that.wrapper = that.element;
	            options = that.options;
	            var colors = options.palette;

	            if (colors == "websafe") {
	                colors = WEBPALETTE;
	                options.columns = 18;
	            } else if (colors == "basic") {
	                colors = SIMPLEPALETTE;
	            }

	            if (typeof colors == "string") {
	                colors = colors.split(",");
	            }

	            if ($.isArray(colors)) {
	                colors = $.map(colors, function(x) { return parseColor(x); });
	            }

	            that._selectedID = (options.ariaId || kendo.guid()) + "_selected";

	            element.addClass("k-widget k-colorpalette")
	                .attr("role", "grid")
	                .attr("aria-readonly", "true")
	                .append($(that._template({
	                    colors   : colors,
	                    columns  : options.columns,
	                    tileSize : options.tileSize,
	                    value    : that._value,
	                    id       : options.ariaId
	                })))
	                .on(CLICK_NS, ".k-item", function(ev){
	                    that._select($(ev.currentTarget).css(BACKGROUNDCOLOR));
	                })
	                .attr("tabIndex", that._tabIndex)
	                .on(KEYDOWN_NS, bind(that._keydown, that));

	            var tileSize = options.tileSize, width, height;
	            if (tileSize) {
	                if (/number|string/.test(typeof tileSize)) {
	                    width = height = parseFloat(tileSize);
	                } else if (typeof tileSize == "object") {
	                    width = parseFloat(tileSize.width);
	                    height = parseFloat(tileSize.height);
	                } else {
	                    throw new Error("Unsupported value for the 'tileSize' argument");
	                }
	                element.find(".k-item").css({ width: width, height: height });
	            }
	        },
	        focus: function(){
	            this.wrapper.focus();
	        },
	        options: {
	            name: "ColorPalette",
	            columns: 10,
	            tileSize: null,
	            palette: "basic"
	        },
	        _onEnable: function(enable) {
	            if (enable) {
	                this.wrapper.attr("tabIndex", this._tabIndex);
	            } else {
	                this.wrapper.removeAttr("tabIndex");
	            }
	        },
	        _keydown: function(e) {
	            var selected,
	                wrapper = this.wrapper,
	                items = wrapper.find(".k-item"),
	                current = items.filter("." + ITEMSELECTEDCLASS).get(0),
	                keyCode = e.keyCode;

	            if (keyCode == KEYS.LEFT) {
	                selected = relative(items, current, -1);
	            } else if (keyCode == KEYS.RIGHT) {
	                selected = relative(items, current, 1);
	            } else if (keyCode == KEYS.DOWN) {
	                selected = relative(items, current, this.options.columns);
	            } else if (keyCode == KEYS.UP) {
	                selected = relative(items, current, -this.options.columns);
	            } else if (keyCode == KEYS.ENTER) {
	                preventDefault(e);
	                if (current) {
	                    this._select($(current).css(BACKGROUNDCOLOR));
	                }
	            } else if (keyCode == KEYS.ESC) {
	                this._cancel();
	            }

	            if (selected) {
	                preventDefault(e);

	                this._current(selected);

	                try {
	                    var color = parseColor(selected.css(BACKGROUNDCOLOR));
	                    this._triggerSelect(color);
	                } catch(ex) {}
	            }
	        },
	        _current: function(item) {
	            this.wrapper.find("." + ITEMSELECTEDCLASS)
	                .removeClass(ITEMSELECTEDCLASS)
	                .attr("aria-selected", false)
	                .removeAttr("id");

	            $(item)
	                .addClass(ITEMSELECTEDCLASS)
	                .attr("aria-selected", true)
	                .attr("id", this._selectedID);

	            this.element
	                .removeAttr("aria-activedescendant")
	                .attr("aria-activedescendant", this._selectedID);
	        },
	        _updateUI: function(color) {
	            var item = null;

	            this.wrapper.find(".k-item").each(function(){
	                var c = parseColor($(this).css(BACKGROUNDCOLOR));

	                if (c && c.equals(color)) {
	                    item = this;

	                    return false;
	                }
	            });

	            this._current(item);
	        },
	        _template: kendo.template(
	            '<table class="k-palette k-reset" role="presentation"><tr role="row">' +
	              '# for (var i = 0; i < colors.length; ++i) { #' +
	                '# var selected = colors[i].equals(value); #' +
	                '# if (i && i % columns == 0) { # </tr><tr role="row"> # } #' +
	                '<td role="gridcell" unselectable="on" style="background-color:#= colors[i].toCss() #"' +
	                    '#= selected ? " aria-selected=true" : "" # ' +
	                    '#=(id && i === 0) ? "id=\\""+id+"\\" " : "" # ' +
	                    'class="k-item#= selected ? " ' + ITEMSELECTEDCLASS + '" : "" #" ' +
	                    'aria-label="#= colors[i].toCss() #"></td>' +
	              '# } #' +
	            '</tr></table>'
	        )
	    });

	    var FlatColorPicker = ColorSelector.extend({
	        init: function(element, options) {
	            var that = this;
	            ColorSelector.fn.init.call(that, element, options);

	            options = that.options;
	            options.messages = options.options ? $.extend(that.options.messages, options.options.messages) : that.options.messages;
	            element = that.element;

	            that.wrapper = element.addClass("k-widget k-flatcolorpicker")
	                .append(that._template(options));

	            that._hueElements = $(".k-hsv-rectangle, .k-transparency-slider .k-slider-track", element);

	            that._selectedColor = $(".k-selected-color-display", element);

	            that._colorAsText = $("input.k-color-value", element);

	            that._sliders();

	            that._hsvArea();

	            that._updateUI(that._value || parseColor("#f00"));

	            element
	                .find("input.k-color-value").on(KEYDOWN_NS, function(ev){
	                    var input = this;
	                    if (ev.keyCode == KEYS.ENTER) {
	                        try {
	                            var color = parseColor(input.value);
	                            var val = that.color();
	                            that._select(color, color.equals(val));
	                        } catch(ex) {
	                            $(input).addClass("k-state-error");
	                        }
	                    } else if (that.options.autoupdate) {
	                        setTimeout(function(){
	                            var color = parseColor(input.value, true);
	                            if (color) {
	                                that._updateUI(color, true);
	                            }
	                        }, 10);
	                    }
	                }).end()

	                .on(CLICK_NS, ".k-controls button.apply", function(){
	                    // calling select for the currently displayed
	                    // color will trigger the "change" event.
	                    if (that.options._clearedColor) {
	                        that.trigger("change");
	                    } else {
	                        that._select(that._getHSV());
	                    }
	                })
	                .on(CLICK_NS, ".k-controls button.cancel", function(){
	                    // but on cancel, we simply select the previous
	                    // value (again, triggers "change" event).
	                    that._updateUI(that.color());
	                    that._cancel();
	                });

	            if (isIE8) {
	                // IE filters require absolute URLs
	                that._applyIEFilter();
	            }
	        },
	        destroy: function() {
	            this._hueSlider.destroy();
	            if (this._opacitySlider) {
	                this._opacitySlider.destroy();
	            }
	            this._hueSlider = this._opacitySlider = this._hsvRect = this._hsvHandle =
	                this._hueElements = this._selectedColor = this._colorAsText = null;
	            ColorSelector.fn.destroy.call(this);
	        },
	        options: {
	            name       : "FlatColorPicker",
	            opacity    : false,
	            buttons    : false,
	            input      : true,
	            preview    : true,
	            clearButton: false,
	            autoupdate : true,
	            messages   : MESSAGES
	        },
	        _applyIEFilter: function() {
	            var track = this.element.find(".k-hue-slider .k-slider-track")[0],
	                url = track.currentStyle.backgroundImage;

	            url = url.replace(/^url\([\'\"]?|[\'\"]?\)$/g, "");
	            track.style.filter = "progid:DXImageTransform.Microsoft.AlphaImageLoader(src='" + url + "', sizingMethod='scale')";
	        },
	        _sliders: function() {
	            var that = this,
	                element = that.element,
	                hueSlider = element.find(".k-hue-slider"),
	                opacitySlider = element.find(".k-transparency-slider");

	            function hueChange(e) {
	                that._updateUI(that._getHSV(e.value, null, null, null));
	            }

	            hueSlider.attr("aria-label", "hue saturation");
	            that._hueSlider = hueSlider.kendoSlider({
	                min: 0,
	                max: 360,
	                tickPlacement: "none",
	                showButtons: false,
	                slide: hueChange,
	                change: hueChange
	            }).data("kendoSlider");

	            function opacityChange(e) {
	                that._updateUI(that._getHSV(null, null, null, e.value / 100));
	            }

	            opacitySlider.attr("aria-label", "opacity");
	            that._opacitySlider = opacitySlider.kendoSlider({
	                min: 0,
	                max: 100,
	                tickPlacement: "none",
	                showButtons: false,
	                slide: opacityChange,
	                change: opacityChange
	            }).data("kendoSlider");
	        },
	        _hsvArea: function() {
	            var that = this,
	                element = that.element,
	                hsvRect = element.find(".k-hsv-rectangle"),
	                hsvHandle = hsvRect.find(".k-draghandle").attr("tabIndex", 0).on(KEYDOWN_NS, bind(that._keydown, that));

	            function update(x, y) {
	                var offset = this.offset,
	                    dx = x - offset.left, dy = y - offset.top,
	                    rw = this.width, rh = this.height;

	                dx = dx < 0 ? 0 : dx > rw ? rw : dx;
	                dy = dy < 0 ? 0 : dy > rh ? rh : dy;
	                that._svChange(dx / rw, 1 - dy / rh);
	            }

	            that._hsvEvents = new kendo.UserEvents(hsvRect, {
	                global: true,
	                press: function(e) {
	                    this.offset = kendo.getOffset(hsvRect);
	                    this.width = hsvRect.width();
	                    this.height = hsvRect.height();
	                    hsvHandle.focus();
	                    update.call(this, e.x.location, e.y.location);
	                },
	                start: function() {
	                    hsvRect.addClass("k-dragging");
	                    hsvHandle.focus();
	                },
	                move: function(e) {
	                    e.preventDefault();
	                    update.call(this, e.x.location, e.y.location);
	                },
	                end: function() {
	                    hsvRect.removeClass("k-dragging");
	                }
	            });

	            that._hsvRect = hsvRect;
	            that._hsvHandle = hsvHandle;
	        },
	        _onEnable: function(enable) {
	            this._hueSlider.enable(enable);

	            if (this._opacitySlider) {
	                this._opacitySlider.enable(enable);
	            }

	            this.wrapper.find("input").attr("disabled", !enable);

	            var handle = this._hsvRect.find(".k-draghandle");

	            if (enable) {
	                handle.attr("tabIndex", this._tabIndex);
	            } else {
	                handle.removeAttr("tabIndex");
	            }
	        },
	        _keydown: function(ev) {
	            var that = this;
	            function move(prop, d) {
	                var c = that._getHSV();
	                c[prop] += d * (ev.shiftKey ? 0.01 : 0.05);
	                if (c[prop] < 0) { c[prop] = 0; }
	                if (c[prop] > 1) { c[prop] = 1; }
	                that._updateUI(c);
	                preventDefault(ev);
	            }
	            function hue(d) {
	                var c = that._getHSV();
	                c.h += d * (ev.shiftKey ? 1 : 5);
	                if (c.h < 0) { c.h = 0; }
	                if (c.h > 359) { c.h = 359; }
	                that._updateUI(c);
	                preventDefault(ev);
	            }
	            switch (ev.keyCode) {
	              case KEYS.LEFT:
	                if (ev.ctrlKey) {
	                    hue(-1);
	                } else {
	                    move("s", -1);
	                }
	                break;
	              case KEYS.RIGHT:
	                if (ev.ctrlKey) {
	                    hue(1);
	                } else {
	                    move("s", 1);
	                }
	                break;
	              case KEYS.UP:
	                move(ev.ctrlKey && that._opacitySlider ? "a" : "v", 1);
	                break;
	              case KEYS.DOWN:
	                move(ev.ctrlKey && that._opacitySlider ? "a" : "v", -1);
	                break;
	              case KEYS.ENTER:
	                that._select(that._getHSV());
	                break;
	              case KEYS.F2:
	                that.wrapper.find("input.k-color-value").focus().select();
	                break;
	              case KEYS.ESC:
	                that._cancel();
	                break;
	            }
	        },
	        focus: function() {
	            this._hsvHandle.focus();
	        },
	        _getHSV: function(h, s, v, a) {
	            var rect = this._hsvRect,
	                width = rect.width(),
	                height = rect.height(),
	                handlePosition = this._hsvHandle.position();

	            if (h == null) {
	                h = this._hueSlider.value();
	            }
	            if (s == null) {
	                s = handlePosition.left / width;
	            }
	            if (v == null) {
	                v = 1 - handlePosition.top / height;
	            }
	            if (a == null) {
	                a = this._opacitySlider ? this._opacitySlider.value() / 100 : 1;
	            }
	            return Color.fromHSV(h, s, v, a);
	        },
	        _svChange: function(s, v) {
	            var color = this._getHSV(null, s, v, null);
	            this._updateUI(color);
	        },
	        _updateUI: function(color, dontChangeInput) {
	            var that = this,
	                rect = that._hsvRect;

	            if (!color) {
	                return;
	            }

	            this._colorAsText.attr("title", that.options.messages.previewInput);
	            this._colorAsText.removeClass("k-state-error");

	            that._selectedColor.css(BACKGROUNDCOLOR, color.toDisplay());
	            if (!dontChangeInput) {
	                that._colorAsText.val(that._opacitySlider ? color.toCssRgba() : color.toCss());
	            }
	            that._triggerSelect(color);

	            color = color.toHSV();
	            that._hsvHandle.css({
	                // saturation is 0 on the left side, full (1) on the right
	                left: color.s * rect.width() + "px",
	                // value is 0 on the bottom, full on the top.
	                top: (1 - color.v) * rect.height() + "px"
	            });

	            that._hueElements.css(BACKGROUNDCOLOR, Color.fromHSV(color.h, 1, 1, 1).toCss());
	            that._hueSlider.value(color.h);

	            if (that._opacitySlider) {
	                that._opacitySlider.value(100 * color.a);
	            }
	        },
	        _selectOnHide: function() {
	            return this.options.buttons ? null : this._getHSV();
	        },
	        _template: kendo.template(
	            '# if (preview) { #' +
	                '<div class="k-selected-color"><div class="k-selected-color-display"><div class="k-color-input"><input class="k-color-value" ' +
	                    '# if (clearButton && !_standalone) { #' +
	                        'placeholder="#: messages.noColor #" ' +
	                    '# } #' +
	                    '#= !data.input ? \'style=\"visibility: hidden;\"\' : \"\" #>' +
	                '# if (clearButton && !_standalone) { #' +
	                    '<span class="k-clear-color k-button k-bare" title="#: messages.clearColor #"></span>' +
	                '# } #' +
	                '</div></div></div>' +
	            '# } #' +
	             '# if (clearButton && !_standalone && !preview) { #' +
	                    '<div class="k-clear-color-container"><span class="k-clear-color k-button k-bare">#: messages.clearColor #</span></div>' +
	             '# } #' +
	            '<div class="k-hsv-rectangle"><div class="k-hsv-gradient"></div><div class="k-draghandle"></div></div>' +
	            '<input class="k-hue-slider" />' +
	            '# if (opacity) { #' +
	                '<input class="k-transparency-slider" />' +
	            '# } #' +
	            '# if (buttons) { #' +
	                '<div unselectable="on" class="k-controls"><button class="k-button k-primary apply">#: messages.apply #</button> <button class="k-button cancel">#: messages.cancel #</button></div>' +
	            '# } #'
	        )
	    });

	    function relative(array, element, delta) {
	        array = Array.prototype.slice.call(array);
	        var n = array.length;
	        var pos = array.indexOf(element);
	        if (pos < 0) {
	            return delta < 0 ? array[n - 1] : array[0];
	        }
	        pos += delta;
	        if (pos < 0) {
	            pos += n;
	        } else {
	            pos %= n;
	        }
	        return array[pos];
	    }

	    /* -----[ The ColorPicker widget ]----- */

	    var ColorPicker = Widget.extend({
	        init: function(element, options) {
	            var that = this;
	            Widget.fn.init.call(that, element, options);
	            options = that.options;
	            element = that.element;

	            var value = element.attr("value") || element.val();
	            if (value) {
	                value = parseColor(value, true);
	            } else {
	                value = parseColor(options.value, true);
	            }
	            that._value = options.value = value;

	            var content = that.wrapper = $(that._template(options));
	            element.hide().after(content);

	            if (element.is("input")) {
	                element.appendTo(content);

	                // if there exists a <label> associated with this
	                // input field, we must catch clicks on it to prevent
	                // the built-in color picker from showing up.
	                // https://github.com/telerik/kendo-ui-core/issues/292

	                var label = element.closest("label");
	                var id = element.attr("id");
	                if (id) {
	                    label = label.add('label[for="' + id + '"]');
	                }
	                label.click(function(ev){
	                    that.open();
	                    ev.preventDefault();
	                });
	            }

	            that._tabIndex = element.attr("tabIndex") || 0;

	            that.enable(!element.attr("disabled"));

	            var accesskey = element.attr("accesskey");
	            if (accesskey) {
	                element.attr("accesskey", null);
	                content.attr("accesskey", accesskey);
	            }

	            that.bind("activate", function(ev){
	                if (!ev.isDefaultPrevented()) {
	                    that.toggle();
	                }
	            });

	            that._updateUI(value);
	        },
	        destroy: function() {
	            this.wrapper.off(NS).find("*").off(NS);
	            if (this._popup) {
	                this._selector.destroy();
	                this._popup.destroy();
	            }
	            this._selector = this._popup = this.wrapper = null;
	            Widget.fn.destroy.call(this);
	        },
	        enable: function(enable) {
	            var that = this,
	                wrapper = that.wrapper,
	                innerWrapper = wrapper.children(".k-picker-wrap"),
	                arrow = innerWrapper.find(".k-select");

	            if (arguments.length === 0) {
	                enable = true;
	            }

	            that.element.attr("disabled", !enable);
	            wrapper.attr("aria-disabled", !enable);

	            arrow.off(NS).on("mousedown" + NS, preventDefault);

	            wrapper.addClass("k-state-disabled")
	                .removeAttr("tabIndex")
	                .add("*", wrapper).off(NS);

	            if (enable) {
	                wrapper.removeClass("k-state-disabled")
	                    .attr("tabIndex", that._tabIndex)
	                    .on("mouseenter" + NS, function () { innerWrapper.addClass("k-state-hover"); })
	                    .on("mouseleave" + NS, function () { innerWrapper.removeClass("k-state-hover"); })
	                    .on("focus" + NS, function () { innerWrapper.addClass("k-state-focused"); })
	                    .on("blur" + NS, function () { innerWrapper.removeClass("k-state-focused"); })
	                    .on(KEYDOWN_NS, bind(that._keydown, that))
	                    .on(CLICK_NS, ".k-select", bind(that.toggle, that))
	                    .on(CLICK_NS, that.options.toolIcon ? ".k-tool-icon" : ".k-selected-color", function () {
	                        that.trigger("activate");
	                    });
	            } else {
	                that.close();
	            }
	        },

	        _template: kendo.template(
	            '<span role="textbox" aria-haspopup="true" class="k-widget k-colorpicker k-header">' +
	                '<span class="k-picker-wrap k-state-default">' +
	                    '# if (toolIcon) { #' +
	                        '<span class="k-icon k-tool-icon #= toolIcon #">' +
	                            '<span class="k-selected-color"></span>' +
	                        '</span>' +
	                    '# } else { #' +
	                        '<span class="k-selected-color"><span class="k-icon k-i-line" style="display: none;"></span></span>' +
	                    '# } #' +
	                    '<span class="k-select" unselectable="on" aria-label="select">' +
	                        '<span class="k-icon k-i-arrow-60-down"></span>' +
	                    '</span>' +
	                '</span>' +
	            '</span>'
	        ),

	        options: {
	            name: "ColorPicker",
	            palette: null,
	            columns: 10,
	            toolIcon: null,
	            value: null,
	            messages: MESSAGES,
	            opacity: false,
	            buttons: true,
	            preview: true,
	            clearButton: false,
	            ARIATemplate: 'Current selected color is #=data || ""#'
	        },

	        events: [ "activate", "change", "select", "open", "close" ],

	        open: function () {
	            if (!this.element.prop("disabled")) {
	                this._getPopup().open();
	            }
	        },
	        close: function () {
	            var selOptions = (this._selector && this._selector.options) || {};
	            selOptions._closing = true;

	            this._getPopup().close();

	            delete selOptions._closing;
	        },
	        toggle: function () {
	            if (!this.element.prop("disabled")) {
	                this._getPopup().toggle();
	            }
	        },
	        _noColorIcon: function(){
	            return this.wrapper.find(".k-picker-wrap > .k-selected-color > .k-icon.k-i-line");
	        },
	        color: ColorSelector.fn.color,
	        value: ColorSelector.fn.value,
	        _select: ColorSelector.fn._select,
	        _triggerSelect: ColorSelector.fn._triggerSelect,
	        _isInputTypeColor: function() {
	            var el = this.element[0];
	            return (/^input$/i).test(el.tagName) && (/^color$/i).test(el.type);
	        },

	        _updateUI: function(value) {
	            var formattedValue = "";

	            if (value) {
	                if (this._isInputTypeColor() || value.a == 1) {
	                    // seems that input type="color" doesn't support opacity
	                    // in colors; the only accepted format is hex #RRGGBB
	                    formattedValue = value.toCss();
	                } else {
	                    formattedValue = value.toCssRgba();
	                }

	                this.element.val(formattedValue);
	            }

	            if (!this._ariaTemplate) {
	                this._ariaTemplate = kendo.template(this.options.ARIATemplate);
	            }

	            this.wrapper.attr("aria-label", this._ariaTemplate(formattedValue));

	            this._triggerSelect(value);
	            this.wrapper.find(".k-selected-color").css(
	                BACKGROUNDCOLOR,
	                value ? value.toDisplay() : WHITE
	            );

	            this._noColorIcon()[formattedValue ? "hide": "show"]();
	        },
	        _keydown: function(ev) {
	            var key = ev.keyCode;
	            if (this._getPopup().visible()) {
	                if (key == KEYS.ESC) {
	                    this._selector._cancel();
	                } else {
	                    this._selector._keydown(ev);
	                }
	                preventDefault(ev);
	            }
	            else if (key == KEYS.ENTER || key == KEYS.DOWN) {
	                this.open();
	                preventDefault(ev);
	            }
	        },
	        _getPopup: function() {
	            var that = this, popup = that._popup;

	            if (!popup) {
	                var options = that.options;
	                var selectorType;

	                if (options.palette) {
	                    selectorType = ColorPalette;
	                } else {
	                    selectorType = FlatColorPicker;
	                }

	                options._standalone = false;
	                delete options.select;
	                delete options.change;
	                delete options.cancel;

	                var id = kendo.guid();
	                var selector = that._selector = new selectorType($('<div id="' + id +'"/>').appendTo(document.body), options);

	                that.wrapper.attr("aria-owns", id);

	                that._popup = popup = selector.wrapper.kendoPopup({
	                    anchor: that.wrapper,
	                    adjustSize: { width: 5, height: 0 }
	                }).data("kendoPopup");

	                selector.element.find(".k-clear-color").kendoButton({
	                    icon: "reset-color",
	                    click: function(e) {
	                        selector.options._clearedColor = true;
	                        that.value(null);
	                        that.element.val(null);
	                        that._updateUI(null);
	                        selector._colorAsText.val("");
	                        selector._hsvHandle.css({
	                            top: "0px",
	                            left: "0px"
	                        });
	                        selector._selectedColor.css(BACKGROUNDCOLOR, WHITE);

	                        that.trigger("change", { value: that.value() });
	                        e.preventDefault();
	                    }
	                });

	                selector.bind({
	                    select: function(ev){
	                        that._updateUI(parseColor(ev.value));
	                        delete selector.options._clearedColor;
	                    },
	                    change: function(){
	                        if (!selector.options._clearedColor) {
	                            that._select(selector.color());
	                        }
	                        that.close();
	                    },
	                    cancel: function() {
	                        if (selector.options._clearedColor && !that.value() && selector.value()) {
	                            that._select(selector.color(), true);
	                        }
	                        that.close();
	                    }
	                });
	                popup.bind({
	                    close: function(ev){
	                        if (that.trigger("close")) {
	                            ev.preventDefault();
	                            return;
	                        }
	                        that.wrapper.children(".k-picker-wrap").removeClass("k-state-focused");
	                        var color = selector._selectOnHide();
	                        var selectorColor = selector.value();
	                        var value = that.value();
	                        var options = selector.options;
	                        if (!color) {
	                            setTimeout(function(){
	                                if (that.wrapper) {
	                                    that.wrapper.focus();
	                                }
	                            });

	                            if (!options._closing && options._clearedColor && !value && selectorColor) {
	                                that._select(selectorColor, true);
	                            } else {
	                                that._updateUI(that.color());
	                            }
	                        } else if (!(options._clearedColor && !value)) {
	                            that._select(color);
	                        }
	                    },
	                    open: function(ev) {
	                        if (that.trigger("open")) {
	                            ev.preventDefault();
	                        } else {
	                            that.wrapper.children(".k-picker-wrap").addClass("k-state-focused");
	                        }
	                    },
	                    activate: function(){
	                        selector._select(that.color(), true);
	                        selector.focus();
	                        that.wrapper.children(".k-picker-wrap").addClass("k-state-focused");
	                    }
	                });
	            }
	            return popup;
	        }
	    });

	    function preventDefault(ev) { ev.preventDefault(); }

	    function bind(callback, obj) {
	        return function() {
	            return callback.apply(obj, arguments);
	        };
	    }

	    ui.plugin(ColorPalette);
	    ui.plugin(FlatColorPicker);
	    ui.plugin(ColorPicker);

	})(jQuery, parseInt);

	return window.kendo;

	}, __webpack_require__(422));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(420)))

/***/ }),

/***/ 432:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(70);

/***/ }),

/***/ 433:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(1);

/***/ }),

/***/ 434:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(34);

/***/ }),

/***/ 435:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(5);

/***/ }),

/***/ 436:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(23);

/***/ })

/******/ });

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(437);


/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 424:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(9);

/***/ }),

/***/ 425:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(8);

/***/ }),

/***/ 437:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(424), __webpack_require__(425) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "combobox",
	    name: "ComboBox",
	    category: "web",
	    description: "The ComboBox widget allows the selection from pre-defined values or entering a new value.",
	    depends: [ "list" ],
	    features: [ {
	        id: "mobile-scroller",
	        name: "Mobile scroller",
	        description: "Support for kinetic scrolling in mobile device",
	        depends: [ "mobile.scroller" ]
	    }, {
	        id: "virtualization",
	        name: "VirtualList",
	        description: "Support for virtualization",
	        depends: [ "virtuallist" ]
	    } ]
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        ui = kendo.ui,
	        List = ui.List,
	        Select = ui.Select,
	        caret = kendo.caret,
	        support = kendo.support,
	        placeholderSupported = support.placeholder,
	        activeElement = kendo._activeElement,
	        keys = kendo.keys,
	        ns = ".kendoComboBox",
	        CLICK = "click" + ns,
	        MOUSEDOWN = "mousedown" + ns,
	        DISABLED = "disabled",
	        READONLY = "readonly",
	        CHANGE = "change",
	        DEFAULT = "k-state-default",
	        FOCUSED = "k-state-focused",
	        STATEDISABLED = "k-state-disabled",
	        ARIA_DISABLED = "aria-disabled",
	        STATE_FILTER = "filter",
	        STATE_ACCEPT = "accept",
	        STATE_REBIND = "rebind",
	        HOVEREVENTS = "mouseenter" + ns + " mouseleave" + ns,
	        proxy = $.proxy;

	    var ComboBox = Select.extend({
	        init: function(element, options) {
	            var that = this, text, disabled;

	            that.ns = ns;

	            options = $.isArray(options) ? { dataSource: options } : options;

	            Select.fn.init.call(that, element, options);

	            options = that.options;
	            element = that.element.on("focus" + ns, proxy(that._focusHandler, that));

	            options.placeholder = options.placeholder || element.attr("placeholder");

	            that._reset();

	            that._wrapper();

	            that._input();

	            that._clearButton();

	            that._tabindex(that.input);

	            that._popup();

	            that._dataSource();
	            that._ignoreCase();

	            that._enable();

	            that._oldIndex = that.selectedIndex = -1;

	            that._aria();

	            that._initialIndex = options.index;

	            that.requireValueMapper(that.options);
	            that._initList();

	            that._cascade();

	            if (options.autoBind) {
	                that._filterSource();
	            } else {
	                text = options.text;

	                if (!text && that._isSelect) {
	                    text = element.children(":selected").text();
	                }

	                if (text) {
	                    that._setText(text);
	                }
	            }

	            if (!text) {
	                that._placeholder();
	            }

	            disabled = $(that.element).parents("fieldset").is(':disabled');

	            if (disabled) {
	                that.enable(false);
	            }

	            kendo.notify(that);
	            that._toggleCloseVisibility();
	        },

	        options: {
	            name: "ComboBox",
	            enabled: true,
	            index: -1,
	            text: null,
	            value: null,
	            autoBind: true,
	            delay: 200,
	            dataTextField: "",
	            dataValueField: "",
	            minLength: 1,
	            enforceMinLength: false,
	            height: 200,
	            highlightFirst: true,
	            filter: "none",
	            placeholder: "",
	            suggest: false,
	            cascadeFrom: "",
	            cascadeFromField: "",
	            ignoreCase: true,
	            animation: {},
	            virtual: false,
	            template: null,
	            groupTemplate: "#:data#",
	            fixedGroupTemplate: "#:data#",
	            clearButton: true,
	            syncValueAndText: true
	        },

	        events:[
	            "open",
	            "close",
	            CHANGE,
	            "select",
	            "filtering",
	            "dataBinding",
	            "dataBound",
	            "cascade",
	            "set"
	        ],

	        setOptions: function(options) {
	            Select.fn.setOptions.call(this, options);

	            this.listView.setOptions(options);

	            this._accessors();
	            this._aria();
	        },

	        destroy: function() {
	            var that = this;

	            that.input.off(ns);
	            that.element.off(ns);
	            that._inputWrapper.off(ns);
	            clearTimeout(that._pasteTimeout);

	            that._arrow.off(CLICK + " " + MOUSEDOWN);
	            that._clear.off(CLICK + " " + MOUSEDOWN);

	            Select.fn.destroy.call(that);
	        },

	        _change: function() {
	            var that = this;
	            var text = that.text();
	            var hasText = text && text !== that._oldText && text !== that.options.placeholder;
	            var index = that.selectedIndex;
	            var isCustom = index === -1;

	            if (!that.options.syncValueAndText && !that.value() && isCustom && hasText) {
	                that._old = "";
	                that._oldIndex = index;
	                that._oldText = text;

	                if (!that._typing) {
	                    // trigger the DOM change event so any subscriber gets notified
	                    that.element.trigger(CHANGE);
	                }

	                that.trigger(CHANGE);
	                that._typing = false;
	                return;
	            }

	            Select.fn._change.call(that);
	            that._toggleCloseVisibility();
	        },

	        _focusHandler: function() {
	            this.input.focus();
	        },

	        _arrowClick: function() {
	            this._toggle();
	        },

	        _inputFocus: function() {
	            this._inputWrapper.addClass(FOCUSED);
	            this._placeholder(false);
	        },

	        _inputFocusout: function() {
	            var that = this;
	            var value = that.value();

	            that._inputWrapper.removeClass(FOCUSED);
	            clearTimeout(that._typingTimeout);
	            that._typingTimeout = null;

	            that.text(that.text());

	            var item = that._focus();
	            var dataItem = this.listView.dataItemByIndex(this.listView.getElementIndex(item));

	            if (value !== that.value() && that.trigger("select", { dataItem: dataItem, item: item })) {
	                that.value(value);
	                return;
	            }

	            that._placeholder();
	            that._blur();

	            that.element.blur();
	        },

	        _inputPaste: function() {
	            var that = this;
	            clearTimeout(that._pasteTimeout);
	            that._pasteTimeout = null;

	            that._pasteTimeout = setTimeout(function() {
	                that.search();
	            });
	        },

	        _editable: function(options) {
	            var that = this,
	                disable = options.disable,
	                readonly = options.readonly,
	                wrapper = that._inputWrapper.off(ns),
	                input = that.element.add(that.input.off(ns)),
	                arrow = that._arrow.off(CLICK + " " + MOUSEDOWN),
	                clear = that._clear;

	            if (!readonly && !disable) {
	                wrapper
	                    .addClass(DEFAULT)
	                    .removeClass(STATEDISABLED)
	                    .on(HOVEREVENTS, that._toggleHover);

	                input.removeAttr(DISABLED)
	                     .removeAttr(READONLY)
	                     .attr(ARIA_DISABLED, false);

	                arrow.on(CLICK, proxy(that._arrowClick, that))
	                     .on(MOUSEDOWN, function(e) { e.preventDefault(); });

	                clear.on(CLICK, proxy(that._clearValue, that))
	                    .on(MOUSEDOWN, function(e) { e.preventDefault(); });

	                that.input
	                    .on("keydown" + ns, proxy(that._keydown, that))
	                    .on("focus" + ns, proxy(that._inputFocus, that))
	                    .on("focusout" + ns, proxy(that._inputFocusout, that))
	                    .on("paste" + ns, proxy(that._inputPaste, that));

	            } else {
	                wrapper
	                    .addClass(disable ? STATEDISABLED : DEFAULT)
	                    .removeClass(disable ? DEFAULT : STATEDISABLED);

	                input.attr(DISABLED, disable)
	                     .attr(READONLY, readonly)
	                     .attr(ARIA_DISABLED, disable);
	            }
	        },

	        open: function() {
	            var that = this;
	            var state = that._state;

	            if (that.popup.visible()) {
	                return;
	            }

	            if ((!that.listView.bound() && state !== STATE_FILTER) || state === STATE_ACCEPT) {
	                that._open = true;
	                that._state = STATE_REBIND;
	                if (that.options.minLength !== 1) {
	                    that.refresh();
	                    that._openPopup();
	                } else {
	                    that._filterSource();
	                }
	            } else if (that._allowOpening()) {
	                that._openPopup();
	                that._focusItem();
	            }
	        },

	        _scrollToFocusedItem: function() {
	            var listView = this.listView;

	            listView.scrollToIndex(listView.getElementIndex(listView.focus()));
	        },

	        _openPopup: function() {
	            this.popup.one("activate", proxy(this._scrollToFocusedItem, this));
	            this.popup.open();
	        },

	        _updateSelectionState: function() {
	            var that = this;
	            var text = that.options.text;
	            var value = that.options.value;

	            if (that.listView.isFiltered()) {
	                return;
	            }

	            if (that.selectedIndex === -1) {
	                if (text === undefined || text === null) {
	                    text = value;
	                }

	                that._accessor(value);
	                that.input.val(text || that.input.val());
	                that._placeholder();
	            } else if (that._oldIndex === -1) {
	                that._oldIndex = that.selectedIndex;
	            }
	        },

	        _buildOptions: function(data) {
	            var that = this;
	            if (!that._isSelect) {
	                return;
	            }

	            var custom = that._customOption;

	            if (that._state === STATE_REBIND) {
	                that._state = "";
	            }

	            that._customOption = undefined;
	            that._options(data, "", that.value());

	            if (custom && custom[0].selected) {
	                that._custom(custom.val());
	            }
	        },

	        _updateSelection: function() {
	            var that = this;
	            var listView = that.listView;
	            var initialIndex = that._initialIndex;
	            var hasInitialIndex = initialIndex !== null && initialIndex > -1;
	            var filtered = that._state === STATE_FILTER;

	            if (filtered) {
	                $(listView.focus()).removeClass("k-state-selected");
	                return;
	            }

	            if (that._fetch) {
	                return;
	            }

	            if (!listView.value().length) {
	                if (hasInitialIndex) {
	                    that.select(initialIndex);
	                } else if (that._accessor()) {
	                    listView.value(that._accessor());
	                }
	            }

	            that._initialIndex = null;

	            var dataItem = listView.selectedDataItems()[0];

	            if (!dataItem) {
	                return;
	            }

	            if (that._value(dataItem) !== that.value()) {
	                that._custom(that._value(dataItem));
	            }

	            if (that.text() && that.text() !== that._text(dataItem)) {
	                that._selectValue(dataItem);
	            }
	        },

	        _updateItemFocus: function() {
	            var listView = this.listView;

	            if (!this.options.highlightFirst) {
	                listView.focus(-1);
	            } else if (!listView.focus() && !listView.focusIndex()) {
	                listView.focus(0);
	            }
	        },

	        _listBound: function() {
	            var that = this;
	            var isActive = that.input[0] === activeElement();

	            var data = that.dataSource.flatView();
	            var skip = that.listView.skip();
	            var length = data.length;
	            var groupsLength = that.dataSource._group.length;
	            var isFirstPage = skip === undefined || skip === 0;

	            that._presetValue = false;

	            that._renderFooter();
	            that._renderNoData();
	            that._toggleNoData(!length);
	            that._toggleHeader(!!groupsLength && !!length);

	            that._resizePopup();

	            that.popup.position();

	            that._buildOptions(data);

	            that._makeUnselectable();

	            that._updateSelection();

	            if (data.length && isFirstPage) {
	                that._updateItemFocus();

	                if (that.options.suggest && isActive && that.input.val()) {
	                    that.suggest(data[0]);
	                }
	            }

	            if (that._open) {
	                that._open = false;

	                if (that._typingTimeout && !isActive) {
	                    that.popup.close();
	                } else {
	                    that.toggle(that._allowOpening());
	                }

	                that._typingTimeout = null;
	            }

	            that._hideBusy();
	            that.trigger("dataBound");
	        },

	        _listChange: function() {
	            this._selectValue(this.listView.selectedDataItems()[0]);

	            if (this._presetValue) {
	                this._oldIndex = this.selectedIndex;
	            }
	        },

	        _get: function(candidate) {
	            var data, found, idx;

	            if (typeof candidate === "function") {
	                data = this.dataSource.flatView();

	                for (idx = 0; idx < data.length; idx++) {
	                    if (candidate(data[idx])) {
	                        candidate = idx;
	                        found = true;
	                        break;
	                    }
	                }

	                if (!found) {
	                    candidate = -1;
	                }
	            }

	            return candidate;
	        },

	        _select: function(candidate, keepState) {
	            var that = this;
	            candidate = that._get(candidate);

	            if (candidate === -1) {
	                that.input[0].value = "";
	                that._accessor("");
	            }

	            return that.listView.select(candidate).done(function() {
	                if (!keepState && that._state === STATE_FILTER) {
	                    that._state = STATE_ACCEPT;
	                }
	            });
	        },

	        _selectValue: function(dataItem) {
	            var idx = this.listView.select();
	            var value = "";
	            var text = "";

	            idx = idx[idx.length - 1];
	            if (idx === undefined) {
	                idx = -1;
	            }

	            this.selectedIndex = idx;

	            if (idx === -1 && !dataItem) {
	                text = this.input[0].value;
	                if (this.options.syncValueAndText) {
	                    value = text;
	                }

	                this.listView.focus(-1);
	            } else {
	                if (dataItem || dataItem === 0) {
	                    value = this._dataValue(dataItem);
	                    text = this._text(dataItem);
	                }

	                if (value === null) {
	                    value = "";
	                }
	            }

	            this._setDomInputValue(text);
	            this._accessor(value !== undefined ? value : text, idx);

	            this._placeholder();
	            this._triggerCascade();
	        },

	        _setDomInputValue: function(text){
	            var that = this;
	            var currentCaret = caret(this.input);
	            var caretStart;

	            if(currentCaret && currentCaret.length){
	                caretStart = currentCaret[0];
	            }

	            this._prev = this.input[0].value = text;

	            if(caretStart && this.selectedIndex === -1){
	                var mobile = support.mobileOS;
	                if(mobile.wp || mobile.android) {// without the timeout the caret is at the end of the input
	                    setTimeout(function() { that.input[0].setSelectionRange(caretStart, caretStart); }, 0);
	                }
	                else {
	                    this.input[0].setSelectionRange(caretStart, caretStart);
	                }
	            }
	        },

	        refresh: function() {
	            this.listView.refresh();
	        },

	        _toggleCloseVisibility: function() {
	            if (this.text()) {
	                this._showClear();
	            } else {
	                this._hideClear();
	            }
	        },

	        suggest: function(word) {
	            var that = this;
	            var element = that.input[0];
	            var value = that.text();
	            var caretIdx = caret(element)[0];
	            var key = that._last;
	            var idx;

	            if (key == keys.BACKSPACE || key == keys.DELETE) {
	                that._last = undefined;
	                return;
	            }

	            word = word || "";

	            if (typeof word !== "string") {
	                if (word[0]) {
	                    word = that.dataSource.view()[List.inArray(word[0], that.ul[0])];
	                }

	                word = word ? that._text(word) : "";
	            }

	            if (caretIdx <= 0) {
	                caretIdx = value.toLowerCase().indexOf(word.toLowerCase()) + 1;
	            }

	            if (word) {
	                word = word.toString();
	                idx = word.toLowerCase().indexOf(value.toLowerCase());
	                if (idx > -1) {
	                    value += word.substring(idx + value.length);
	                }
	            } else {
	                value = value.substring(0, caretIdx);
	            }

	            if (value.length !== caretIdx || !word) {
	                element.value = value;
	                if (element === activeElement()) {
	                    caret(element, caretIdx, value.length);
	                }
	            }
	        },

	        text: function (text) {
	            text = text === null ? "" : text;

	            var that = this;
	            var input = that.input[0];
	            var ignoreCase = that.options.ignoreCase;
	            var loweredText = text;
	            var dataItem;
	            var value;

	            if (text === undefined) {
	                return input.value;
	            }

	            if (that.options.autoBind === false && !that.listView.bound()) {
	                that._setText(text);
	                return;
	            }

	            dataItem = that.dataItem();

	            if (dataItem && that._text(dataItem) === text) {
	                value = that._value(dataItem);

	                if (value === List.unifyType(that._old, typeof value)) {
	                    that._triggerCascade();
	                    return;
	                }
	            }

	            if (ignoreCase && !that.listView.value().length) {
	                loweredText = loweredText.toLowerCase();
	            }

	            that._select(function(data) {
	                data = that._text(data);
	                if (ignoreCase && !that.listView.value().length) {
	                    data = (data + "").toLowerCase();
	                }

	                return data === loweredText;
	            }).done(function() {
	                if (that.selectedIndex < 0) {
	                    input.value = text;

	                    if (that.options.syncValueAndText) {
	                        that._accessor(text);
	                    }

	                    that._triggerCascade();
	                }

	                that._prev = input.value;
	            });
	        },

	        toggle: function(toggle) {
	            this._toggle(toggle, true);
	        },

	        value: function(value) {
	            var that = this;
	            var options = that.options;
	            var listView = that.listView;

	            if (value === undefined) {
	                value = that._accessor() || that.listView.value()[0];
	                return value === undefined || value === null ? "" : value;
	            }

	            that.requireValueMapper(that.options, value);

	            that.trigger("set", { value: value });

	            if (value === options.value && that.input.val() === options.text) {
	                return;
	            }

	            that._accessor(value);

	            if (that._isFilterEnabled() && listView.bound() && listView.isFiltered()) {
	                that._clearFilter();
	            } else {
	                that._fetchData();
	            }

	            listView
	                .value(value)
	                .done(function() {
	                    if (that.selectedIndex === -1) {
	                        that._accessor(value);
	                        that.input.val(value);
	                        that._placeholder(true);
	                    }

	                    that._old = that._accessor();
	                    that._oldIndex = that.selectedIndex;

	                    that._prev = that.input.val();

	                    if (that._state === STATE_FILTER) {
	                        that._state = STATE_ACCEPT;
	                    }
	                });
	        },

	        _click: function(e) {
	            var that = this;
	            var item = e.item;
	            var dataItem = that.listView.dataItemByIndex(that.listView.getElementIndex(item));

	            e.preventDefault();

	            if (that.trigger("select", { dataItem: dataItem, item: item })) {
	                that.close();
	                return;
	            }

	            that._userTriggered = true;

	            that._select(item).done(function() {
	                that._blur();
	            });
	        },

	        _inputValue: function() {
	            return this.text();
	        },

	        _searchByWord: function(word) {
	            var that = this;
	            var options = that.options;
	            var dataSource = that.dataSource;
	            var ignoreCase = options.ignoreCase;
	            var predicate = function (dataItem) {
	                var text = that._text(dataItem);
	                if (text !== undefined) {
	                    text = text + "";
	                    if (text !== "" && word === "") {
	                        return false;
	                    }

	                    if (ignoreCase) {
	                        text = text.toLowerCase();
	                    }

	                    return text.indexOf(word) === 0;
	                }
	            };

	            if (ignoreCase) {
	                word = word.toLowerCase();
	            }

	            if (!that.ul[0].firstChild) {
	                dataSource.one(CHANGE, function () {
	                    if (dataSource.view()[0]) {
	                        that.search(word);
	                    }
	                }).fetch();
	                return;
	            }

	            this.listView.focus(this._get(predicate));

	            var current = this.listView.focus();

	            if (current) {
	                if (options.suggest) {
	                    that.suggest(current);
	                }

	                this.open();
	            }

	            if (this.options.highlightFirst && !word) {
	                this.listView.focusFirst();
	            }
	        },

	        _input: function() {
	            var that = this,
	                element = that.element.removeClass("k-input")[0],
	                accessKey = element.accessKey,
	                wrapper = that.wrapper,
	                SELECTOR = "input.k-input",
	                name = element.name || "",
	                input,
	                maxLength;

	            if (name) {
	                name = 'name="' + name + '_input" ';
	            }

	            input = wrapper.find(SELECTOR);

	            if (!input[0]) {
	                wrapper.append('<span tabindex="-1" unselectable="on" class="k-dropdown-wrap k-state-default"><input ' + name + 'class="k-input" type="text" autocomplete="off"/><span unselectable="on" class="k-select" aria-label="select"><span class="k-icon k-i-arrow-60-down"></span></span></span>')
	                    .append(that.element);

	                input = wrapper.find(SELECTOR);
	            }

	            input[0].style.cssText = element.style.cssText;
	            input[0].title = element.title;

	            maxLength = parseInt(this.element.prop("maxlength") || this.element.attr("maxlength"), 10);
	            if (maxLength > -1) {
	                input[0].maxLength = maxLength;
	            }

	            input.addClass(element.className)
	                 .css({
	                    width: "100%",
	                    height: element.style.height
	                 })
	                 .attr({
	                     "role": "combobox",
	                     "aria-expanded": false
	                 })
	                 .show();

	            if (placeholderSupported) {
	                input.attr("placeholder", that.options.placeholder);
	            }

	            if (accessKey) {
	                element.accessKey = "";
	                input[0].accessKey = accessKey;
	            }

	            that._focused = that.input = input;
	            that._inputWrapper = $(wrapper[0].firstChild);
	            that._arrow = wrapper.find(".k-select")
	                .attr({
	                    "role": "button",
	                    "tabIndex": -1
	                });
	            that._arrowIcon = that._arrow.find(".k-icon");

	            if (element.id) {
	                that._arrow.attr("aria-controls", that.ul[0].id);
	            }
	        },

	        _clearButton: function() {
	            this._clear = $('<span unselectable="on" class="k-icon k-clear-value k-i-close" title="clear"></span>').attr({
	                "role": "button",
	                "tabIndex": -1
	            });
	            if (this.options.clearButton) {
	                this._clear.insertAfter(this.input);
	                this.wrapper.addClass("k-combobox-clearable");
	            }
	        },

	        _keydown: function(e) {
	            var that = this,
	                key = e.keyCode;

	            that._last = key;

	            clearTimeout(that._typingTimeout);
	            that._typingTimeout = null;

	            if (key != keys.TAB && !that._move(e)) {
	               that._search();
	            }
	        },

	        _placeholder: function(show) {
	            if (placeholderSupported) {
	                return;
	            }

	            var that = this,
	                input = that.input,
	                placeholder = that.options.placeholder,
	                value;

	            if (placeholder) {
	                value = that.value();

	                if (show === undefined) {
	                    show = !value;
	                }

	                input.toggleClass("k-readonly", show);

	                if (!show) {
	                    if (!value) {
	                        placeholder = "";
	                    } else {
	                        return;
	                    }
	                }

	                input.val(placeholder);

	                if (!placeholder && input[0] === activeElement()) {
	                    caret(input[0], 0, 0);
	                }
	            }
	        },

	        _search: function() {
	            var that = this;

	            that._typingTimeout = setTimeout(function() {
	                var value = that.text();

	                if (that._prev !== value) {
	                    that._prev = value;

	                    if (that.options.filter === "none") {
	                        that.listView.select(-1);
	                    }

	                    that.search(value);
	                    that._toggleCloseVisibility();
	                }

	                that._typingTimeout = null;
	            }, that.options.delay);
	        },

	        _setText: function(text) {
	            this.input.val(text);
	            this._prev = text;
	        },

	        _wrapper: function() {
	            var that = this,
	                element = that.element,
	                wrapper = element.parent();

	            if (!wrapper.is("span.k-widget")) {
	                wrapper = element.hide().wrap("<span />").parent();
	                wrapper[0].style.cssText = element[0].style.cssText;
	            }

	            that.wrapper = wrapper.addClass("k-widget k-combobox k-header")
	                                  .addClass(element[0].className)
	                                  .css("display", "");
	        },

	        _clearSelection: function(parent, isFiltered) {
	            var that = this;
	            var hasValue = parent.value();
	            var custom = hasValue && parent.selectedIndex === -1;

	            if (this.selectedIndex == -1 && this.value()) {
	                return;
	            }

	            if (isFiltered || !hasValue || custom) {
	                that.options.value = "";
	                that.value("");
	            }
	        },

	        _preselect: function(value, text) {
	            this.input.val(text);
	            this._accessor(value);

	            this._old = this._accessor();
	            this._oldIndex = this.selectedIndex;

	            this.listView.setValue(value);
	            this._placeholder();

	            this._initialIndex = null;
	            this._presetValue = true;
	        }
	    });

	    ui.plugin(ComboBox);
	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(422));


/***/ })

/******/ });

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(443);


/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 427:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(4);

/***/ }),

/***/ 443:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(427) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "data.signalr",
	    name: "SignalR",
	    category: "framework",
	    depends: [ "data" ],
	    hidden: true
	};

	(function($) {
	    var transport = kendo.data.RemoteTransport.extend({
	        init: function (options) {
	            var signalr = options && options.signalr ? options.signalr : {};

	            var promise = signalr.promise;

	            if (!promise) {
	                throw new Error('The "promise" option must be set.');
	            }

	            if (typeof promise.done != "function" || typeof promise.fail != "function") {
	                throw new Error('The "promise" option must be a Promise.');
	            }

	            this.promise = promise;

	            var hub = signalr.hub;

	            if (!hub) {
	                throw new Error('The "hub" option must be set.');
	            }

	            if (typeof hub.on != "function" || typeof hub.invoke != "function") {
	                throw new Error('The "hub" option is not a valid SignalR hub proxy.');
	            }

	            this.hub = hub;

	            kendo.data.RemoteTransport.fn.init.call(this, options);
	        },

	        push: function(callbacks) {
	            var client = this.options.signalr.client || {};

	            if (client.create) {
	                this.hub.on(client.create, callbacks.pushCreate);
	            }

	            if (client.update) {
	                this.hub.on(client.update, callbacks.pushUpdate);
	            }

	            if (client.destroy) {
	                this.hub.on(client.destroy, callbacks.pushDestroy);
	            }
	        },

	        _crud: function(options, type) {
	            var hub = this.hub;

	            var server = this.options.signalr.server;

	            if (!server || !server[type]) {
	                throw new Error(kendo.format('The "server.{0}" option must be set.', type));
	            }

	            var args = [server[type]];

	            var data = this.parameterMap(options.data, type);

	            if (!$.isEmptyObject(data)) {
	                args.push(data);
	            }

	            this.promise.done(function() {
	                hub.invoke.apply(hub, args)
	                          .done(options.success)
	                          .fail(options.error);
	            });
	        },

	        read: function(options) {
	            this._crud(options, "read");
	        },

	        create: function(options) {
	            this._crud(options, "create");
	        },

	        update: function(options) {
	            this._crud(options, "update");
	        },

	        destroy: function(options) {
	            this._crud(options, "destroy");
	        }
	    });

	    $.extend(true, kendo.data, {
	        transports: {
	            signalr: transport
	        }
	    });

	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(422));


/***/ })

/******/ });

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(445);


/***/ }),

/***/ 421:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(0);

/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 445:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(421) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "dateinput",
	    name: "DateInput",
	    category: "web",
	    description: "The DateInput widget allows to edit date by typing.",
	    depends: [ "core" ]
	};

	(function ($, undefined) {
	    var global = window;
	    var kendo = global.kendo;
	    var caret = kendo.caret;
	    var ui = kendo.ui;
	    var Widget = ui.Widget;
	    var keys = kendo.keys;
	    var ns = ".kendoDateInput";
	    var proxy = $.proxy;
	    var objectToString = {}.toString;

	    var INPUT_EVENT_NAME = (kendo.support.propertyChangeEvent ? "propertychange.kendoDateInput input" : "input") + ns;

	    var STATEDISABLED = "k-state-disabled";
	    var STATEDEFAULT = "k-state-default";
	    // var STATEFOCUSED = "k-state-focused";
	    // var STATEHOVER = "k-state-hover";
	    var STATEINVALID = "k-state-invalid";

	    var DISABLED = "disabled";
	    var READONLY = "readonly";
	    var CHANGE = "change";

	    var knownSymbols = "dMyHhmftsz";

	    var DateInput = Widget.extend({
	        init: function (element, options) {
	            var that = this;

	            Widget.fn.init.call(that, element, options);
	            element = that.element;

	            options = that.options;
	            options.format = kendo._extractFormat(options.format || kendo.getCulture(options.culture).calendars.standard.patterns.d);
	            options.min = kendo.parseDate(element.attr("min")) || kendo.parseDate(options.min);
	            options.max = kendo.parseDate(element.attr("max")) || kendo.parseDate(options.max);
	            
	            var insidePicker = ((element.parent().attr("class") || "").indexOf("k-picker-wrap") >= 0);
	            if (insidePicker) {
	                that.wrapper = element.parent();
	            } else {
	                that.wrapper = element.wrap("<span class='k-widget k-dateinput'></span>").parent();
	                that.wrapper.addClass(element[0].className);
	                that.wrapper[0].style.cssText = element[0].style.cssText;
	                element.css({
	                    width: "100%",
	                    height: element[0].style.height
	                });
	            }
	            $("<span class='k-icon k-i-warning'></span>").insertAfter(element);

	            that._form();

	            that.element
	                .addClass(insidePicker ? " " : "k-textbox")
	                .attr("autocomplete", "off")
	                .on("focusout" + ns, function () {
	                    that._change();
	                });

	            try {
	                element[0].setAttribute("type", "text");
	            } catch (e) {
	                element[0].type = "text";
	            }

	            var disabled = element.is("[disabled]") || $(that.element).parents("fieldset").is(':disabled');

	            if (disabled) {
	                that.enable(false);
	            } else {
	                that.readonly(element.is("[readonly]"));
	            }

	            that.value(that.options.value || element.val());

	            kendo.notify(that);
	        },

	        options: {
	            name: "DateInput",
	            culture: "",
	            value: "",
	            format: "",
	            min: new Date(1900, 0, 1),
	            max: new Date(2099, 11, 31),
	            messages: {
	                "year": "year",
	                "month": "month",
	                "day": "day",
	                "weekday": "day of the week",
	                "hour": "hours",
	                "minute": "minutes",
	                "second": "seconds",
	                "dayperiod": "AM/PM"
	            }
	        },

	        events: [
	            CHANGE
	        ],

	        min: function (value) {
	            if (value !== undefined) {
	                this.options.min = value;
	            } else {
	                return this.options.min;
	            }
	        },

	        max: function (value) {
	            if (value !== undefined) {
	                this.options.max = value;
	            } else {
	                return this.options.max;
	            }
	        },

	        setOptions: function (options) {
	            var that = this;
	            Widget.fn.setOptions.call(that, options);
	            this._unbindInput();
	            this._bindInput();
	            this._updateElementValue();
	        },

	        destroy: function () {
	            var that = this;
	            that.element.off(ns);

	            if (that._formElement) {
	                that._formElement.off("reset", that._resetHandler);
	            }

	            Widget.fn.destroy.call(that);
	        },

	        value: function (value) {
	            if (value === undefined) {
	                return this._dateTime.getDateObject();
	            }

	            if (value === null) {
	                value = "";
	            }

	            if (objectToString.call(value) !== "[object Date]") {
	                value = kendo.parseDate(value, this.options.format, this.options.culture);
	            }

	            if (value && !value.getTime()) {
	                value = null;
	            }

	            this._dateTime = new customDateTime(value, this.options.format, this.options.culture, this.options.messages);

	            this._updateElementValue();
	            this._oldValue = value;
	        },

	        _updateElementValue: function () {
	            var stringAndFromat = this._dateTime.toPair(this.options.format, this.options.culture, this.options.messages);
	            this.element.val(stringAndFromat[0]);
	            this._oldText = stringAndFromat[0];
	            this._format = stringAndFromat[1];
	        },

	        readonly: function (readonly) {
	            this._editable({
	                readonly: readonly === undefined ? true : readonly,
	                disable: false
	            });
	        },

	        enable: function (enable) {
	            this._editable({
	                readonly: false,
	                disable: !(enable = enable === undefined ? true : enable)
	            });
	        },

	        _bindInput: function () {
	            var that = this;
	            that.element
	                .on("paste" + ns, proxy(that._paste, that))
	                .on("keydown" + ns, proxy(that._keydown, that))
	                .on(INPUT_EVENT_NAME, proxy(that._input, that))
	                .on("mouseup" + ns, proxy(that._mouseUp, that))
	                .on("DOMMouseScroll" + ns + " mousewheel" + ns, proxy(that._scroll, that));
	        },

	        _unbindInput: function () {
	            this.element
	                .off("keydown" + ns)
	                .off("paste" + ns)
	                .off(INPUT_EVENT_NAME)
	                .off("mouseup" + ns)
	                .off("DOMMouseScroll" + ns + " mousewheel" + ns);
	        },

	        _editable: function (options) {
	            var that = this;
	            var element = that.element;
	            var disable = options.disable;
	            var readonly = options.readonly;
	            var wrapper = that.wrapper;

	            that._unbindInput();

	            if (!readonly && !disable) {
	                wrapper.addClass(STATEDEFAULT)
	                    .removeClass(STATEDISABLED);

	                element.removeAttr(DISABLED)
	                    .removeAttr(READONLY);

	                that._bindInput();
	            } else {
	                wrapper.addClass(STATEDISABLED)
	                    .removeClass(STATEDEFAULT);
	                element.attr(DISABLED, disable)
	                    .attr(READONLY, readonly);
	            }
	        },

	        _change: function () {
	            var that = this;
	            var oldValue = that._oldValue;
	            var value = that.value();

	            if (value && that.min() && value < that.min()) {
	                that.value(that.min());
	                value = that.value();
	            }
	            if (value && that.max() && value > that.max()) {
	                that.value(that.max());
	                value = that.value();
	            }

	            if (oldValue && value && value.getTime() !== oldValue.getTime() ||
	                oldValue && !value ||
	                !oldValue && value
	            ) {
	                that._oldValue = value;
	                that.trigger(CHANGE);
	                that.element.trigger(CHANGE);
	            }
	        },

	        _input: function () {
	            var that = this;
	            var element = that.element[0];
	            var blinkInvalid = false;

	            if (kendo._activeElement() !== element) {
	                return;
	            }

	            var diff = approximateStringMatching(
	                this._oldText,
	                this._format,
	                this.element[0].value,
	                caret(this.element[0])[0]);

	            var navigationOnly = (diff.length === 1 && diff[0][1] === " ");
	            if (!navigationOnly) {
	                for (var i = 0; i < diff.length; i++) {
	                    var valid = this._dateTime.parsePart(diff[i][0], diff[i][1]);
	                    blinkInvalid = blinkInvalid || !valid;
	                }
	            }
	            this._updateElementValue();

	            if (diff.length && diff[0][0] !== " ") {
	                this._selectSegment(diff[0][0]);

	                //android fix
	                if (!navigationOnly) {
	                    var difSym = diff[0][0];
	                    setTimeout(function () { that._selectSegment(difSym); });
	                }
	            }
	            if (navigationOnly) {
	                var newEvent = { keyCode: 39, preventDefault: function () { } };
	                this._keydown(newEvent);
	            }
	            if (blinkInvalid) {
	                clearTimeout(that._blinkInvalidTimeout);
	                var stateInvalid = STATEINVALID;
	                that.wrapper.addClass(STATEINVALID);
	                that._blinkInvalidTimeout = setTimeout(function () { that.wrapper.removeClass(stateInvalid); }, 100);
	            }
	        },

	        _mouseUp: function () {
	            var selection = caret(this.element[0]);
	            if (selection[0] === selection[1]) {
	                this._selectNearestSegment();
	            }
	        },

	        _scroll: function (e) {
	            if (kendo._activeElement() !== this.element[0] || this.element.is("[readonly]")) {
	                return;
	            }
	            e = window.event || e;

	            var newEvent = { keyCode: 37, preventDefault: function () { } };

	            if (e.shiftKey) {
	                newEvent.keyCode = (e.wheelDelta || -e.detail) > 0 ? 37 : 39;
	            } else {
	                newEvent.keyCode = (e.wheelDelta || -e.detail) > 0 ? 38 : 40;
	            }
	            this._keydown(newEvent);
	            e.returnValue = false;
	            if (e.preventDefault) {
	                e.preventDefault();
	            }
	            if (e.stopPropagation) {
	                e.stopPropagation();
	            }
	        },

	        _form: function () {
	            var that = this;
	            var element = that.element;
	            var formId = element.attr("form");
	            var form = formId ? $("#" + formId) : element.closest("form");

	            if (form[0]) {
	                that._resetHandler = function () {
	                    setTimeout(function () {
	                        that.value(element[0].value);
	                    });
	                };

	                that._formElement = form.on("reset", that._resetHandler);
	            }
	        },

	        _paste: function (e) {
	            e.preventDefault();
	        },

	        _keydown: function (e) {
	            var key = e.keyCode;
	            var selection;
	            if (key == 37 || key == 39) { //left/right
	                e.preventDefault();
	                selection = caret(this.element[0]);
	                if (selection[0] != selection[1]) {
	                    this._selectNearestSegment();
	                }
	                var dir = (key == 37) ? -1 : 1;
	                var index = (dir == -1) ? caret(this.element[0])[0] - 1 : caret(this.element[0])[1] + 1;
	                while (index >= 0 && index < this._format.length) {
	                    if (knownSymbols.indexOf(this._format[index]) >= 0) {
	                        this._selectSegment(this._format[index]);
	                        break;
	                    }
	                    index += dir;
	                }
	            }
	            if (key == 38 || key == 40) { //up/down
	                e.preventDefault();
	                selection = caret(this.element[0]);
	                var symbol = this._format[selection[0]];
	                if (knownSymbols.indexOf(symbol) >= 0) {
	                    this._dateTime.modifyPart(symbol, key == 38 ? 1 : -1);
	                    this._updateElementValue();
	                    this._selectSegment(symbol);
	                }
	            }
	            if (kendo.support.browser.msie && kendo.support.browser.version < 10) {
	                var keycode = e.keyCode ? e.keyCode : e.which;
	                if (keycode === 8 || keycode === 46) {
	                    var that = this;
	                    setTimeout(function () {
	                        that._input();
	                    }, 0);
	                }
	            }
	            if (key === keys.ENTER){
	                this._change();
	            }
	        },

	        _selectNearestSegment: function () {
	            var selection = caret(this.element[0]);
	            var start = selection[0];
	            for (var i = start, j = start - 1; i < this._format.length || j >= 0; i++ , j--) {
	                if (i < this._format.length && knownSymbols.indexOf(this._format[i]) !== -1) {
	                    this._selectSegment(this._format[i]);
	                    return;
	                }
	                if (j >= 0 && knownSymbols.indexOf(this._format[j]) !== -1) {
	                    this._selectSegment(this._format[j]);
	                    return;
	                }
	            }
	        },

	        _selectSegment: function (symbol) {
	            var begin = -1, end = 0;
	            for (var i = 0; i < this._format.length; i++) {
	                if (this._format[i] === symbol) {
	                    end = i + 1;
	                    if (begin === -1) {
	                        begin = i;
	                    }
	                }
	            }
	            if (begin < 0) {
	                begin = 0;
	            }
	            caret(this.element, begin, end);
	        }

	    });

	    ui.plugin(DateInput);

	    var customDateTime = function (initDate, initFormat, initCulture, initMessages) {

	        var value = null;
	        var year = true, month = true, date = true, hours = true, minutes = true, seconds = true, milliseconds = true;
	        var typedMonthPart = "";
	        var typedDayPeriodPart = "";
	        var placeholders = {};

	        //TODO: rewrite pad method
	        var zeros = ["", "0", "00", "000", "0000"];
	        function pad(number, digits, end) {
	            number = number + "";
	            digits = digits || 2;
	            end = digits - number.length;

	            if (end) {
	                return zeros[digits].substring(0, end) + number;
	            }

	            return number;
	        }
	        var dateFormatRegExp = /dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|HH|H|hh|h|mm|m|fff|ff|f|tt|ss|s|zzz|zz|z|"[^"]*"|'[^']*'/g;
	        var months = null, calendar = null, days = null, returnsFormat = false;
	        var matcher = function (match) {
	            var mins, sign;
	            var result;

	            switch (match) {
	                case ("d"): result = date ? value.getDate() : placeholders.day; break;
	                case ("dd"): result = date ? pad(value.getDate()) : placeholders.day; break;
	                case ("ddd"): result = date && month && year ? days.namesAbbr[value.getDay()] : placeholders.weekday; break;
	                case ("dddd"): result = date && month && year ? days.names[value.getDay()] : placeholders.weekday; break;

	                case ("M"): result = month ? value.getMonth() + 1 : placeholders.month; break;
	                case ("MM"): result = month ? pad(value.getMonth() + 1) : placeholders.month; break;
	                case ("MMM"): result = month ? months.namesAbbr[value.getMonth()] : placeholders.month; break;
	                case ("MMMM"): result = month ? months.names[value.getMonth()] : placeholders.month; break;

	                case ("yy"): result = year ? pad(value.getFullYear() % 100) : placeholders.year; break;
	                case ("yyyy"): result = year ? pad(value.getFullYear(), 4) : placeholders.year; break;

	                case ("h"): result = hours ? value.getHours() % 12 || 12 : placeholders.hour; break;
	                case ("hh"): result = hours ? pad(value.getHours() % 12 || 12) : placeholders.hour; break;
	                case ("H"): result = hours ? value.getHours() : placeholders.hour; break;
	                case ("HH"): result = hours ? pad(value.getHours()) : placeholders.hour; break;

	                case ("m"): result = minutes ? value.getMinutes() : placeholders.minute; break;
	                case ("mm"): result = minutes ? pad(value.getMinutes()) : placeholders.minute; break;
	                case ("s"): result = seconds ? value.getSeconds() : placeholders.second; break;
	                case ("ss"): result = seconds ? pad(value.getSeconds()) : placeholders.second; break;
	                case ("f"): result = milliseconds ? Math.floor(value.getMilliseconds() / 100) : milliseconds; break;
	                case ("ff"):
	                    result = value.getMilliseconds();
	                    if (result > 99) {
	                        result = Math.floor(result / 10);
	                    }
	                    result = milliseconds ? pad(result) : match;
	                    break;
	                case ("fff"): result = milliseconds ? pad(value.getMilliseconds(), 3) : match; break;
	                case ("tt"): result = hours ? (value.getHours() < 12 ? calendar.AM[0] : calendar.PM[0]) : placeholders.dayperiod; break;
	                case ("zzz"):
	                    mins = value.getTimezoneOffset();
	                    sign = mins < 0;
	                    result = Math.abs(mins / 60).toString().split(".")[0];
	                    mins = Math.abs(mins) - (result * 60);
	                    result = (sign ? "+" : "-") + pad(result);
	                    result += ":" + pad(mins);
	                    break;
	                case ("z"):
	                case ("zz"):
	                    result = value.getTimezoneOffset() / 60;
	                    sign = result < 0;
	                    result = Math.abs(result).toString().split(".")[0];
	                    result = (sign ? "+" : "-") + (match === "zz" ? pad(result) : result);
	                    break;
	            }
	            result = (result !== undefined ? result : match.slice(1, match.length - 1));

	            if (returnsFormat) {
	                result = "" + result;
	                var formatResult = "";
	                if (match == "ddd") { match = "EEE"; }
	                if (match == "dddd") { match = "EEEE"; }
	                for (var i = 0; i < result.length; i++) {
	                    formatResult += match[0];
	                }
	                return formatResult;
	            } else {
	                return result;
	            }
	        };

	        function generateMatcher(retFormat) {
	            returnsFormat = retFormat;
	            return matcher;
	        }

	        function setExisting(symbol, val) {
	            switch (symbol) {
	                case "y": year = val; break;
	                case "M": month = val;
	                    if (!val) {
	                        value.setMonth(0);
	                        typedMonthPart = "";
	                    }
	                    break;
	                case "d": date = val; break;
	                case "H":
	                case "h": hours = val;
	                    if (!val) {
	                        typedDayPeriodPart = "";
	                    }
	                    break;
	                case "m": minutes = val; break;
	                case "s": seconds = val; break;
	                default: return;
	            }
	        }

	        this.setValue = function (val) {
	            date = val;
	        };

	        this.getValue = function () {
	            return date;
	        };

	        this.modifyPart = function (symbol, offset) {
	            var newValue = new Date((value && value.getTime) ? value.getTime() : value);
	            switch (symbol) {
	                case "y": newValue.setFullYear(newValue.getFullYear() + offset); break;
	                case "M":
	                    var newMonth = newValue.getMonth() + offset;
	                    newValue.setMonth(newMonth);
	                    if (newValue.getMonth() % 12 !== (newMonth + 12) % 12) {
	                        //handle case when new month does not have such date
	                        newValue.setDate(1);
	                        newValue.setMonth(newMonth);
	                    }
	                    break;
	                case "d":
	                case "E": newValue.setDate(newValue.getDate() + offset); break;
	                case "H":
	                case "h": newValue.setHours(newValue.getHours() + offset); break;
	                case "m": newValue.setMinutes(newValue.getMinutes() + offset); break;
	                case "s": newValue.setSeconds(newValue.getSeconds() + offset); break;
	                case "t": newValue.setHours((newValue.getHours() + 12) % 24); break;
	                default: break;
	            }
	            if (newValue.getFullYear() > 0) {
	                setExisting(symbol, true);
	                value = newValue;
	            }
	        };

	        this.parsePart = function (symbol, currentChar) {
	            if (!currentChar) {
	                setExisting(symbol, false);
	                return true;
	            }
	            var newValue = new Date((value && value.getTime) ? value.getTime() : value);
	            var newHours;
	            switch (symbol) {
	                case "d":
	                    var newDate = (date ? newValue.getDate() * 10 : 0) + parseInt(currentChar, 10);
	                    if (isNaN(newDate)) { return; }
	                    while (newDate > 31) {
	                        newDate = parseInt(newDate.toString().slice(1), 10);
	                    }
	                    if (newDate < 1) {
	                        date = false;
	                    } else {
	                        newValue.setDate(newDate);
	                        if (newValue.getMonth() !== value.getMonth()) {
	                            return;
	                        }
	                        date = true;
	                    }
	                    break;
	                case "M":
	                    var newMonth = (month ? (newValue.getMonth() + 1) * 10 : 0) + parseInt(currentChar, 10);
	                    if (!isNaN(newMonth)) {
	                        while (newMonth > 12) {
	                            newMonth = parseInt(newMonth.toString().slice(1), 10);
	                        }
	                        if (newMonth < 1) {
	                            month = false;
	                        } else {
	                            newValue.setMonth(newMonth - 1);
	                            if (newValue.getMonth() !== newMonth - 1) {
	                                newValue.setDate(1);
	                                newValue.setMonth(newMonth - 1);
	                            }
	                            month = true;
	                        }
	                    }
	                    else {
	                        var monthNames = calendar.months.names;
	                        typedMonthPart += currentChar.toLowerCase();

	                        while (typedMonthPart.length > 0) {
	                            for (var i = 0; i < monthNames.length; i++) {
	                                if (monthNames[i].toLowerCase().indexOf(typedMonthPart) === 0) {
	                                    newValue.setMonth(i);
	                                    month = true;
	                                    value = newValue;
	                                    return true;
	                                }
	                            }
	                            typedMonthPart = typedMonthPart.substring(1, typedMonthPart.length);
	                        }
	                        return false;
	                    }
	                    break;
	                case "y":
	                    var newYear = (year ? (newValue.getFullYear()) * 10 : 0) + parseInt(currentChar, 10);
	                    if (isNaN(newYear)) {return;}
	                    while (newYear > 9999) {
	                        newYear = parseInt(newYear.toString().slice(1), 10);
	                    }
	                    if (newYear < 1) {
	                        year = false;
	                    } else {
	                        newValue.setFullYear(newYear);
	                        year = true;
	                    }
	                    break;
	                case "h":
	                    newHours = (hours ? (newValue.getHours() % 12 || 12) * 10 : 0) + parseInt(currentChar, 10);
	                    if (isNaN(newHours)) { return; }
	                    while (newHours > 12) {
	                        newHours = parseInt(newHours.toString().slice(1), 10);
	                    }
	                    newValue.setHours(Math.floor(newValue.getHours() / 12) * 12 + newHours % 12);
	                    hours = true;
	                    break;
	                case "H":
	                    newHours = (hours ? (newValue.getHours()) * 10 : 0) + parseInt(currentChar, 10);
	                    if (isNaN(newHours)) { return; }
	                    while (newHours > 23) {
	                        newHours = parseInt(newHours.toString().slice(1), 10);
	                    }
	                    newValue.setHours(newHours);
	                    hours = true;
	                    break;
	                case "m":
	                    var newMinutes = (minutes ? (newValue.getMinutes()) * 10 : 0) + parseInt(currentChar, 10);
	                    if (isNaN(newMinutes)) { return; }
	                    while (newMinutes > 59) {
	                        newMinutes = parseInt(newMinutes.toString().slice(1), 10);
	                    }
	                    newValue.setMinutes(newMinutes);
	                    minutes = true;
	                    break;
	                case "s":
	                    var newSeconds = (seconds ? (newValue.getSeconds()) * 10 : 0) + parseInt(currentChar, 10);
	                    if (isNaN(newSeconds)) { return; }
	                    while (newSeconds > 59) {
	                        newSeconds = parseInt(newSeconds.toString().slice(1), 10);
	                    }
	                    newValue.setSeconds(newSeconds);
	                    seconds = true;
	                    break;
	                case "t":
	                    if (hours) {
	                        typedDayPeriodPart += currentChar.toLowerCase();
	                        while (typedDayPeriodPart.length > 0) {
	                            if (calendar.AM[0].toLowerCase().indexOf(typedDayPeriodPart) === 0 && newValue.getHours() >= 12 ||
	                                calendar.PM[0].toLowerCase().indexOf(typedDayPeriodPart) === 0 && newValue.getHours() < 12) {
	                                newValue.setHours((newValue.getHours() + 12) % 24);
	                                value = newValue;
	                                return true;
	                            }
	                            typedDayPeriodPart = typedDayPeriodPart.substring(1, typedDayPeriodPart.length);
	                        }
	                        return false;
	                    }
	                    break;
	                default: break;
	            }
	            value = newValue;
	            return true;
	        };

	        this.toPair = function (format, culture , messages) {
	            if (!format) {
	                return ["", ""];
	            }
	            culture = kendo.getCulture(culture);
	            calendar = culture.calendars.standard;
	            format = calendar.patterns[format] || format;
	            days = calendar.days;
	            months = calendar.months;
	            placeholders = messages;
	            return [
	                format.replace(dateFormatRegExp, generateMatcher(false)),
	                format.replace(dateFormatRegExp, generateMatcher(true))
	            ];
	        };

	        this.getDateObject = function () {
	            return (year && month && date && hours && minutes && seconds && milliseconds) ?
	                new Date(value.getTime()) : null;
	        };

	        if (!initDate) {
	            value = new Date();
	            var sampleFormat = this.toPair(initFormat, initCulture, initMessages)[1];
	            for (var i = 0; i < sampleFormat.length; i++) {
	                setExisting(sampleFormat[i], false);
	            }
	        } else {
	            value = new Date(initDate.getTime());
	        }
	    };

	    function approximateStringMatching(oldText, oldFormat, newText, caret){
	        var oldTextSeparator = oldText[caret + oldText.length - newText.length];
	        oldText = oldText.substring(0, caret + oldText.length - newText.length);
	        newText = newText.substring(0, caret);
	        var diff = [];
	        var i;
	        //handle typing single character over the same selection
	        if (oldText === newText && caret > 0) {
	            diff.push([oldFormat[caret - 1], newText[caret - 1]]);
	            return diff;
	        }
	        if (oldText.indexOf(newText) === 0 && (newText.length === 0 || oldFormat[newText.length - 1] !== oldFormat[newText.length])) {
	            //handle delete/backspace
	            var deletedSymbol = "";
	            for (i = newText.length; i < oldText.length; i++) {
	                if (oldFormat[i] !== deletedSymbol && knownSymbols.indexOf(oldFormat[i]) >= 0) {
	                    deletedSymbol = oldFormat[i];
	                    diff.push([deletedSymbol, ""]);
	                }
	            }
	            return diff;
	        }

	        //handle entering space or separator, for nagivation to next item
	        if (newText[newText.length - 1] === " " || newText[newText.length - 1] === oldTextSeparator) {
	            return [[oldFormat[caret - 1], " "]];
	        }

	        //handle inserting text (new text is longer than previous)
	        //handle typing over literal as well
	        if (newText.indexOf(oldText) === 0 || knownSymbols.indexOf(oldFormat[caret - 1]) === -1) {
	            var symbol = oldFormat[0];
	            for (i = Math.max(0, oldText.length - 1); i < oldFormat.length; i++) {
	                if (knownSymbols.indexOf(oldFormat[i]) >= 0) {
	                    symbol = oldFormat[i];
	                    break;
	                }
	            }
	            return [[symbol, newText[caret - 1]]];
	        }
	        //handle typing over correctly selected part
	        return [[oldFormat[caret - 1], newText[caret - 1]]];
	}

	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(422));


/***/ })

/******/ });

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(448);


/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 448:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(449), __webpack_require__(450) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "datetimepicker",
	    name: "DateTimePicker",
	    category: "web",
	    description: "The DateTimePicker allows the end user to select a value from a calendar or a time drop-down list.",
	    depends: [ "datepicker", "timepicker" ]
	};

	(function($, undefined) {

	    var kendo = window.kendo,
	        TimeView = kendo.TimeView,
	        parse = kendo.parseDate,
	        activeElement = kendo._activeElement,
	        extractFormat = kendo._extractFormat,
	        calendar = kendo.calendar,
	        isInRange = calendar.isInRange,
	        restrictValue = calendar.restrictValue,
	        isEqualDatePart = calendar.isEqualDatePart,
	        getMilliseconds = TimeView.getMilliseconds,
	        ui = kendo.ui,
	        Widget = ui.Widget,
	        OPEN = "open",
	        CLOSE = "close",
	        CHANGE = "change",
	        ns = ".kendoDateTimePicker",
	        CLICK = "click" + ns,
	        DISABLED = "disabled",
	        READONLY = "readonly",
	        DEFAULT = "k-state-default",
	        FOCUSED = "k-state-focused",
	        HOVER = "k-state-hover",
	        STATEDISABLED = "k-state-disabled",
	        HOVEREVENTS = "mouseenter" + ns + " mouseleave" + ns,
	        MOUSEDOWN = "mousedown" + ns,
	        MONTH = "month",
	        SPAN = "<span/>",
	        ARIA_ACTIVEDESCENDANT = "aria-activedescendant",
	        ARIA_EXPANDED = "aria-expanded",
	        ARIA_HIDDEN = "aria-hidden",
	        ARIA_OWNS = "aria-owns",
	        ARIA_DISABLED = "aria-disabled",
	        DATE = Date,
	        MIN = new DATE(1800, 0, 1),
	        MAX = new DATE(2099, 11, 31),
	        dateViewParams = { view: "date" },
	        timeViewParams = { view: "time" },
	        extend = $.extend;

	    var DateTimePicker = Widget.extend({
	        init: function(element, options) {
	            var that = this, disabled;

	            Widget.fn.init.call(that, element, options);

	            element = that.element;
	            options = that.options;

	            options.disableDates = kendo.calendar.disabled(options.disableDates);
	            options.min = parse(element.attr("min")) || parse(options.min);
	            options.max = parse(element.attr("max")) || parse(options.max);

	            normalize(options);

	            that._initialOptions = extend({}, options);

	            that._wrapper();

	            that._views();

	            that._icons();

	            that._reset();
	            that._template();

	            try {
	                element[0].setAttribute("type", "text");
	            } catch(e) {
	                element[0].type = "text";
	            }

	            element.addClass("k-input")
	                   .attr({
	                       "role": "combobox",
	                       "aria-expanded": false
	                   });


	            that._midnight = that._calculateMidnight(options.min, options.max);

	            disabled = element.is("[disabled]") || $(that.element).parents("fieldset").is(':disabled');
	            if (disabled) {
	                that.enable(false);
	            } else {
	                that.readonly(element.is("[readonly]"));
	            }

	            if (options.dateInput) {
	                that._dateInput = new ui.DateInput(element, {
	                    culture: options.culture,
	                    format: options.format,
	                    min: options.min,
	                    max: options.max,
	                    value: options.value
	                });
	            }

	            that._old = that._update(options.value || that.element.val());
	            that._oldText = element.val();

	            kendo.notify(that);
	        },

	        options: {
	            name: "DateTimePicker",
	            value: null,
	            format: "",
	            timeFormat: "",
	            culture: "",
	            parseFormats: [],
	            dates: [],
	            min: new DATE(MIN),
	            max: new DATE(MAX),
	            interval: 30,
	            height: 200,
	            footer: "",
	            start: MONTH,
	            depth: MONTH,
	            animation: {},
	            month : {},
	            ARIATemplate: 'Current focused date is #=kendo.toString(data.current, "d")#',
	            dateButtonText: "Open the date view",
	            timeButtonText: "Open the time view"
	    },

	    events: [
	        OPEN,
	        CLOSE,
	        CHANGE
	    ],

	        setOptions: function(options) {
	            var that = this,
	                value = that._value,
	                min, max, currentValue;

	            Widget.fn.setOptions.call(that, options);

	            options = that.options;

	            options.min = min = parse(options.min);
	            options.max = max = parse(options.max);

	            normalize(options);

	            that._midnight = that._calculateMidnight(options.min, options.max);

	            currentValue = options.value || that._value || that.dateView._current;

	            if (min && !isEqualDatePart(min, currentValue)) {
	                min = new DATE(MIN);
	            }

	            if (max && !isEqualDatePart(max, currentValue)) {
	                max = new DATE(MAX);
	            }

	            that.dateView.setOptions(options);

	            that.timeView.setOptions(extend({}, options, {
	                format: options.timeFormat,
	                min: min,
	                max: max
	            }));

	            if (value) {
	                that.element.val(kendo.toString(value, options.format, options.culture));
	                that._updateARIA(value);
	            }
	        },

	        _editable: function(options) {
	            var that = this,
	                element = that.element.off(ns),
	                dateIcon = that._dateIcon.off(ns),
	                timeIcon = that._timeIcon.off(ns),
	                wrapper = that._inputWrapper.off(ns),
	                readonly = options.readonly,
	                disable = options.disable;

	            if (!readonly && !disable) {
	                wrapper
	                    .addClass(DEFAULT)
	                    .removeClass(STATEDISABLED)
	                    .on(HOVEREVENTS, that._toggleHover);

	                element.removeAttr(DISABLED)
	                       .removeAttr(READONLY)
	                       .attr(ARIA_DISABLED, false)
	                       .on("keydown" + ns, $.proxy(that._keydown, that))
	                       .on("focus" + ns, function() {
	                           that._inputWrapper.addClass(FOCUSED);
	                       })
	                       .on("focusout" + ns, function() {
	                           that._inputWrapper.removeClass(FOCUSED);
	                           if (element.val() !== that._oldText) {
	                               that._change(element.val());
	                           }
	                           that.close("date");
	                           that.close("time");
	                       });

	               dateIcon.on(MOUSEDOWN, preventDefault)
	                        .on(CLICK, function() {
	                            that.toggle("date");

	                            if (!kendo.support.touch && element[0] !== activeElement()) {
	                                element.focus();
	                            }
	                        });


	               timeIcon.on(MOUSEDOWN, preventDefault)
	                        .on(CLICK, function() {
	                            that.toggle("time");

	                            if (!kendo.support.touch && element[0] !== activeElement()) {
	                                element.focus();
	                            }
	                        });

	            } else {
	                wrapper
	                    .addClass(disable ? STATEDISABLED : DEFAULT)
	                    .removeClass(disable ? DEFAULT : STATEDISABLED);

	                element.attr(DISABLED, disable)
	                       .attr(READONLY, readonly)
	                       .attr(ARIA_DISABLED, disable);
	            }
	        },

	        readonly: function(readonly) {
	            this._editable({
	                readonly: readonly === undefined ? true : readonly,
	                disable: false
	            });
	        },

	        enable: function(enable) {
	            this._editable({
	                readonly: false,
	                disable: !(enable = enable === undefined ? true : enable)
	            });
	        },

	        destroy: function() {
	            var that = this;

	            Widget.fn.destroy.call(that);
	            that.dateView.destroy();
	            that.timeView.destroy();

	            that.element.off(ns);
	            that._dateIcon.off(ns);
	            that._timeIcon.off(ns);
	            that._inputWrapper.off(ns);

	            if (that._form) {
	                that._form.off("reset", that._resetHandler);
	            }
	        },

	        close: function(view) {
	            if (view !== "time") {
	                view = "date";
	            }

	            this[view + "View"].close();
	        },

	        open: function(view) {
	            if (view !== "time") {
	                view = "date";
	            }

	            this[view + "View"].open();
	        },

	        min: function(value) {
	            return this._option("min", value);
	        },

	        max: function(value) {
	            return this._option("max", value);
	        },

	        toggle: function(view) {
	            var secondView = "timeView";

	            if (view !== "time") {
	                view = "date";
	            } else {
	                secondView = "dateView";
	            }

	            this[view + "View"].toggle();
	            this[secondView].close();
	        },

	        value: function(value) {
	            var that = this;

	            if (value === undefined) {
	                return that._value;
	            }

	            that._old = that._update(value);
	            if (that._old === null) {
	                that.element.val("");
	            }

	            that._oldText = that.element.val();
	        },

	        _change: function(value) {
	            var that = this,
	            oldValue = that.element.val(),
	            dateChanged;

	            value = that._update(value);
	            dateChanged = +that._old != +value;

	            var valueUpdated = dateChanged && !that._typing;
	            var textFormatted = oldValue !== that.element.val();

	            if (valueUpdated || textFormatted) {
	                that.element.trigger(CHANGE);
	            }

	            if (dateChanged) {
	                that._old = value;
	                that._oldText = that.element.val();

	                that.trigger(CHANGE);
	            }

	            that._typing = false;
	        },

	        _option: function(option, value) {
	            var that = this;
	            var options = that.options;
	            var timeView = that.timeView;
	            var timeViewOptions = timeView.options;
	            var current = that._value || that._old;
	            var minDateEqual;
	            var maxDateEqual;

	            if (value === undefined) {
	                return options[option];
	            }

	            value = parse(value, options.parseFormats, options.culture);

	            if (!value) {
	                return;
	            }

	            if (options.min.getTime() === options.max.getTime()) {
	                timeViewOptions.dates = [];
	            }

	            options[option] = new DATE(value.getTime());
	            that.dateView[option](value);

	            that._midnight = that._calculateMidnight(options.min, options.max);

	            if (current) {
	                minDateEqual = isEqualDatePart(options.min, current);
	                maxDateEqual = isEqualDatePart(options.max, current);
	            }

	            if (minDateEqual || maxDateEqual) {
	                timeViewOptions[option] = value;

	                if (minDateEqual && !maxDateEqual) {
	                    timeViewOptions.max = lastTimeOption(options.interval);
	                }

	                if (maxDateEqual) {
	                    if (that._midnight) {
	                        timeView.dataBind([MAX]);
	                        return;
	                    } else if (!minDateEqual) {
	                        timeViewOptions.min = MIN;
	                    }
	                }
	            } else {
	                timeViewOptions.max = MAX;
	                timeViewOptions.min = MIN;
	            }

	            timeView.bind();
	        },

	        _toggleHover: function(e) {
	            $(e.currentTarget).toggleClass(HOVER, e.type === "mouseenter");
	        },

	        _update: function(value) {
	            var that = this,
	                options = that.options,
	                min = options.min,
	                max = options.max,
	                dates = options.dates,
	                timeView = that.timeView,
	                current = that._value,
	                date = parse(value, options.parseFormats, options.culture),
	                isSameType = (date === null && current === null) || (date instanceof Date && current instanceof Date),
	                rebind, timeViewOptions, old, skip, formattedValue;

	            if (options.disableDates && options.disableDates(date)) {
	                date = null;
	                if (!that._old && !that.element.val()) {
	                    value = null;
	                }
	            }

	            if (+date === +current && isSameType) {
	                formattedValue = kendo.toString(date, options.format, options.culture);

	                if (formattedValue !== value ) {
	                    that.element.val(date === null ? value : formattedValue);
	                    if (value instanceof String) {
	                        that.element.trigger(CHANGE);
	                    }
	                }

	                return date;
	            }

	            if (date !== null && isEqualDatePart(date, min)) {
	                date = restrictValue(date, min, max);
	            } else if (!isInRange(date, min, max)) {
	                date = null;
	            }

	            that._value = date;
	            timeView.value(date);
	            that.dateView.value(date);

	            if (date) {
	                old = that._old;
	                timeViewOptions = timeView.options;

	                if (dates[0]) {
	                    dates = $.grep(dates, function(d) { return isEqualDatePart(date, d); });

	                    if (dates[0]) {
	                        timeView.dataBind(dates);
	                        skip = true;
	                    }
	                }

	                if (!skip) {
	                    if (isEqualDatePart(date, min)) {
	                        timeViewOptions.min = min;
	                        timeViewOptions.max = lastTimeOption(options.interval);
	                        rebind = true;
	                    }

	                    if (isEqualDatePart(date, max)) {
	                        if (that._midnight) {
	                            timeView.dataBind([MAX]);
	                            skip = true;
	                        } else {
	                            timeViewOptions.max = max;
	                            if (!rebind) {
	                                timeViewOptions.min = MIN;
	                            }
	                            rebind = true;
	                        }
	                    }
	                }

	                if (!skip && ((!old && rebind) || (old && !isEqualDatePart(old, date)))) {
	                    if (!rebind) {
	                        timeViewOptions.max = MAX;
	                        timeViewOptions.min = MIN;
	                    }

	                    timeView.bind();
	                }
	            }
	            if (that._dateInput) {
	                that._dateInput.value(date || value);
	            } else {
	                that.element.val(kendo.toString(date || value, options.format, options.culture));
	            }
	            that._updateARIA(date);

	            return date;
	        },

	        _keydown: function(e) {
	            var that = this,
	                dateView = that.dateView,
	                timeView = that.timeView,
	                value = that.element.val(),
	                isDateViewVisible = dateView.popup.visible();
	            var stopPropagation = that._dateInput && e.stopImmediatePropagation;
	            if (e.altKey && e.keyCode === kendo.keys.DOWN) {
	                that.toggle(isDateViewVisible ? "time" : "date");
	            } else if (isDateViewVisible) {
	                dateView.move(e);
	                that._updateARIA(dateView._current);
	            } else if (timeView.popup.visible()) {
	                timeView.move(e);
	            } else if (e.keyCode === kendo.keys.ENTER && value !== that._oldText) {
	                that._change(value);
	            } else {
	                that._typing = true;
	                stopPropagation = false;
	            }
	            if (stopPropagation) {
	                e.stopImmediatePropagation();
	            }
	        },

	        _views: function() {
	            var that = this,
	                element = that.element,
	                options = that.options,
	                id = element.attr("id"),
	                dateView, timeView,
	                div, ul, msMin,
	                date;

	            that.dateView = dateView = new kendo.DateView(extend({}, options, {
	                id: id,
	                anchor: that.wrapper,
	                change: function() {
	                    var value = dateView.calendar.value(),
	                        msValue = +value,
	                        msMin = +options.min,
	                        msMax = +options.max,
	                        current, adjustedDate;

	                    if (msValue === msMin || msValue === msMax) {
	                        current = msValue === msMin ? msMin : msMax;
	                        current = new DATE(that._value || current);
	                        current.setFullYear(value.getFullYear(), value.getMonth(), value.getDate());

	                        if (isInRange(current, msMin, msMax)) {
	                            value = current;
	                        }
	                    }

	                    if (that._value) {

	                       adjustedDate = kendo.date.setHours(new Date(value), that._value);

	                       if (isInRange(adjustedDate, msMin, msMax)) {
	                           value = adjustedDate;
	                       }
	                    }

	                    that._change(value);
	                    that.close("date");
	                },
	                close: function(e) {
	                    if (that.trigger(CLOSE, dateViewParams)) {
	                        e.preventDefault();
	                    } else {
	                        element.attr(ARIA_EXPANDED, false);
	                        div.attr(ARIA_HIDDEN, true);

	                        if (!timeView.popup.visible()) {
	                            element.removeAttr(ARIA_OWNS);
	                        }
	                    }
	                },
	                open:  function(e) {
	                    if (that.trigger(OPEN, dateViewParams)) {
	                        e.preventDefault();
	                    } else {

	                        if (element.val() !== that._oldText) {
	                            date = parse(element.val(), options.parseFormats, options.culture);

	                            that.dateView[date ? "current" : "value"](date);
	                        }

	                        div.attr(ARIA_HIDDEN, false);
	                        element.attr(ARIA_EXPANDED, true)
	                               .attr(ARIA_OWNS, dateView._dateViewID);

	                        that._updateARIA(date);
	                    }
	                }
	            }));
	            div = dateView.div;

	            msMin = options.min.getTime();
	            that.timeView = timeView = new TimeView({
	                id: id,
	                value: options.value,
	                anchor: that.wrapper,
	                animation: options.animation,
	                format: options.timeFormat,
	                culture: options.culture,
	                height: options.height,
	                interval: options.interval,
	                min: new DATE(MIN),
	                max: new DATE(MAX),
	                dates: msMin === options.max.getTime() ? [new Date(msMin)] : [],
	                parseFormats: options.parseFormats,
	                change: function(value, trigger) {
	                    value = timeView._parse(value);

	                    if (value < options.min) {
	                        value = new DATE(+options.min);
	                        timeView.options.min = value;
	                    } else if (value > options.max) {
	                        value = new DATE(+options.max);
	                        timeView.options.max = value;
	                    }

	                    if (trigger) {
	                        that._timeSelected = true;
	                        that._change(value);
	                    } else {
	                        element.val(kendo.toString(value, options.format, options.culture));
	                        dateView.value(value);
	                        that._updateARIA(value);
	                    }
	                },
	                close: function(e) {
	                    if (that.trigger(CLOSE, timeViewParams)) {
	                        e.preventDefault();
	                    } else {
	                        ul.attr(ARIA_HIDDEN, true);
	                        element.attr(ARIA_EXPANDED, false);

	                        if (!dateView.popup.visible()) {
	                            element.removeAttr(ARIA_OWNS);
	                        }
	                    }
	                },
	                open:  function(e) {
	                    timeView._adjustListWidth();
	                    if (that.trigger(OPEN, timeViewParams)) {
	                        e.preventDefault();
	                    } else {
	                        if (element.val() !== that._oldText) {
	                            date = parse(element.val(), options.parseFormats, options.culture);

	                            that.timeView.value(date);
	                        }

	                        ul.attr(ARIA_HIDDEN, false);
	                        element.attr(ARIA_EXPANDED, true)
	                               .attr(ARIA_OWNS, timeView._timeViewID);

	                        timeView.options.active(timeView.current());
	                    }
	                },
	                active: function(current) {
	                    element.removeAttr(ARIA_ACTIVEDESCENDANT);
	                    if (current) {
	                        element.attr(ARIA_ACTIVEDESCENDANT, timeView._optionID);
	                    }
	                }
	            });
	            ul = timeView.ul;
	        },

	        _icons: function() {
	            var that = this;
	            var element = that.element;
	            var options = that.options;
	            var icons;

	            icons = element.next("span.k-select");

	            if (!icons[0]) {
	                icons = $('<span unselectable="on" class="k-select">' +
	                            '<span class="k-link k-link-date" aria-label="' + options.dateButtonText + '"><span unselectable="on" class="k-icon k-i-calendar"></span></span>' +
	                            '<span class="k-link k-link-time" aria-label="' + options.timeButtonText + '"><span unselectable="on" class="k-icon k-i-clock"></span></span>' +
	                          '</span>'
	                         ).insertAfter(element);
	            }

	            icons = icons.children();

	            icons = icons.children();
	            that._dateIcon = icons.eq(0).attr("aria-controls", that.dateView._dateViewID);
	            that._timeIcon = icons.eq(1).attr("aria-controls", that.timeView._timeViewID);
	        },

	        _wrapper: function() {
	            var that = this,
	            element = that.element,
	            wrapper;

	            wrapper = element.parents(".k-datetimepicker");

	            if (!wrapper[0]) {
	                wrapper = element.wrap(SPAN).parent().addClass("k-picker-wrap k-state-default");
	                wrapper = wrapper.wrap(SPAN).parent();
	            }

	            wrapper[0].style.cssText = element[0].style.cssText;
	            element.css({
	                width: "100%",
	                height: element[0].style.height
	            });

	            that.wrapper = wrapper.addClass("k-widget k-datetimepicker k-header")
	                                  .addClass(element[0].className);

	            that._inputWrapper = $(wrapper[0].firstChild);
	        },

	        _reset: function() {
	            var that = this,
	                element = that.element,
	                formId = element.attr("form"),
	                form = formId ? $("#" + formId) : element.closest("form");

	            if (form[0]) {
	                that._resetHandler = function() {
	                    that.value(element[0].defaultValue);
	                    that.max(that._initialOptions.max);
	                    that.min(that._initialOptions.min);
	                };

	                that._form = form.on("reset", that._resetHandler);
	            }
	        },

	        _template: function() {
	            this._ariaTemplate = kendo.template(this.options.ARIATemplate);
	        },

	        _calculateMidnight: function(min, max) {
	            return getMilliseconds(min) + getMilliseconds(max) === 0;
	        },

	        _updateARIA: function(date) {
	            var cell;
	            var that = this;
	            var calendar = that.dateView.calendar;

	            that.element.removeAttr(ARIA_ACTIVEDESCENDANT);

	            if (calendar) {
	                cell = calendar._cell;
	                cell.attr("aria-label", that._ariaTemplate({ current: date || calendar.current() }));

	                that.element.attr(ARIA_ACTIVEDESCENDANT, cell.attr("id"));
	            }
	        }
	    });

	    function lastTimeOption(interval) {
	        var date = new Date(2100, 0, 1);
	        date.setMinutes(-interval);
	        return date;
	    }

	    function preventDefault(e) {
	        e.preventDefault();
	    }

	    function normalize(options) {
	        var patterns = kendo.getCulture(options.culture).calendars.standard.patterns,
	            parseFormats = !options.parseFormats.length,
	            timeFormat;

	        options.format = extractFormat(options.format || patterns.g);
	        options.timeFormat = timeFormat = extractFormat(options.timeFormat || patterns.t);
	        kendo.DateView.normalize(options);

	        if (parseFormats) {
	           options.parseFormats.unshift("yyyy-MM-ddTHH:mm:ss");
	        }

	        if ($.inArray(timeFormat, options.parseFormats) === -1) {
	            options.parseFormats.push(timeFormat);
	        }
	    }

	    ui.plugin(DateTimePicker);

	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(422));


/***/ }),

/***/ 449:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(15);

/***/ }),

/***/ 450:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(35);

/***/ })

/******/ });

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(451);


/***/ }),

/***/ 421:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(0);

/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 433:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(1);

/***/ }),

/***/ 451:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(421), __webpack_require__(433)], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function() {

	    var __meta__ = { // jshint ignore:line
	        id: "dialog",
	        name: "Dialog",
	        category: "web", // suite
	        description: "The dialog widget is a modal popup that brings information to the user.",
	        depends: ["core", "popup"] // dependencies
	    };

	    (function($, undefined) {
	        var kendo = window.kendo,
	            Widget = kendo.ui.Widget,
	            TabKeyTrap = kendo.ui.Popup.TabKeyTrap,
	            proxy = $.proxy,
	            template = kendo.template,
	            keys = kendo.keys,
	            isFunction = $.isFunction,
	            NS = "kendoWindow",
	            KDIALOG = ".k-dialog",
	            KWINDOW = ".k-window",
	            KICONCLOSE = ".k-dialog-close",
	            KCONTENTCLASS = "k-content k-window-content k-dialog-content",
	            KCONTENT = ".k-content",
	            KTITLELESS = "k-dialog-titleless",
	            KDIALOGTITLE = ".k-dialog-title",
	            KDIALOGTITLEBAR = KDIALOGTITLE + "bar",
	            KBUTTONGROUP = ".k-dialog-buttongroup",
	            KBUTTON = ".k-button",
	            KALERT = "k-alert",
	            KCONFIRM = "k-confirm",
	            KPROMPT = "k-prompt",
	            KTEXTBOX = ".k-textbox",
	            KOVERLAY = ".k-overlay",
	            VISIBLE = ":visible",
	            ZINDEX = "zIndex",
	            BODY = "body",
	            INITOPEN = "initOpen",
	            OPEN = "open",
	            CLOSE = "close",
	            SHOW = "show",
	            HIDE = "hide",
	            WIDTH = "width",
	            HUNDREDPERCENT = 100,
	            messages = {
	                okText  : "OK",
	                cancel : "Cancel",
	                promptInput: "Input"
	            },
	            ceil = Math.ceil,
	            templates,
	            overlaySelector = ":not(link,meta,script,style)";

	        function defined(x) {
	            return (typeof x != "undefined");
	        }

	        function constrain(value, low, high) {
	            return Math.max(Math.min(parseInt(value, 10), high === Infinity ? high : parseInt(high, 10)), parseInt(low, 10));
	        }

	        function buttonKeyTrigger(e) {
	            return e.keyCode == keys.ENTER || e.keyCode == keys.SPACEBAR;
	        }

	        var DialogBase = Widget.extend({
	            init: function(element, options) {
	                var that = this;
	                Widget.fn.init.call(that, element, options);
	                that._init(that.element, that.options);
	                kendo.notify(that);
	            },

	            _init: function(element, options) {
	                var that = this,
	                    wrapper;

	                that._centerCallback = proxy(that._center, that);

	                that.appendTo = $(BODY);
	                if (!defined(options.visible) || options.visible === null) {
	                    options.visible = element.is(VISIBLE);
	                }

	                if (that.wrapperTemplate === undefined) {
	                    that.wrapperTemplate = templates.wrapper;
	                }

	                that._createDialog();
	                wrapper = that.wrapper = element.closest(KDIALOG);

	                if (options._defaultFocus === undefined) {
	                    that._defaultFocus = element[0];
	                }

	                that._tabindex(element);
	                that._dimensions();

	                this._tabKeyTrap = new TabKeyTrap(wrapper);

	                if (!that.options.visible) {
	                    that.wrapper.hide();
	                } else {
	                    that.toFront();
	                    that._triggerInitOpen();
	                    that.trigger(OPEN);
	                    if (options.modal) {
	                        that._overlay(wrapper.is(VISIBLE)).css({ opacity: 0.5 });
	                        that._focusDialog();
	                    }
	                }

	                if (options.closable) {
	                    wrapper.autoApplyNS(NS);
	                    element.autoApplyNS(NS);

	                    wrapper.find(KICONCLOSE)
	                        .on("click", proxy(that._closeClick, that))
	                        .on("keydown", proxy(that._closeKeyHandler, that));

	                    element.on("keydown", proxy(that._keydown, that));
	                }
	            },

	            _dimensions: function() {
	                var that = this,
	                    wrapper = that.wrapper,
	                    options = that.options,
	                    width = options.width,
	                    height = options.height,
	                    dimensions = ["minWidth", "minHeight", "maxWidth", "maxHeight"];

	                for (var i = 0; i < dimensions.length; i++) {
	                    var value = options[dimensions[i]];
	                    if (value && value != Infinity) {
	                        wrapper.css(dimensions[i], value);
	                    }
	                }

	                this._setElementMaxHeight();

	                if (width) {
	                    if (width.toString().indexOf("%") > 0) {
	                        wrapper.width(width);
	                    } else {
	                        wrapper.width(constrain(width, options.minWidth, options.maxWidth));
	                    }
	                }

	                if (height) {
	                    if (height.toString().indexOf("%") > 0) {
	                        wrapper.height(height);
	                    } else {
	                        wrapper.height(constrain(height, options.minHeight, options.maxHeight));
	                    }

	                    this._setElementHeight();
	                }
	            },

	            _setElementMaxHeight: function() {
	                var that = this,
	                    element = that.element,
	                    maxHeight = that.options.maxHeight,
	                    paddingBox,
	                    elementMaxHeight;

	                if (maxHeight != Infinity) {
	                    paddingBox = that._paddingBox(element);
	                    elementMaxHeight = parseFloat(maxHeight, 10) - that._uiHeight() - paddingBox.vertical;
	                    if (elementMaxHeight > 0) {
	                        element.css({
	                            maxHeight: ceil(elementMaxHeight) + "px",
	                            overflow: "hidden"
	                        });
	                    }
	                }

	            },

	            _paddingBox: function(element) {
	                var paddingTop = parseFloat(element.css("padding-top"), 10),
	                    paddingLeft = parseFloat(element.css("padding-left"), 10),
	                    paddingBottom = parseFloat(element.css("padding-bottom"), 10),
	                    paddingRight = parseFloat(element.css("padding-right"), 10);

	                return {
	                    vertical: paddingTop + paddingBottom,
	                    horizontal: paddingLeft + paddingRight
	                };
	            },

	            _setElementHeight: function() {
	                var that = this,
	                    element = that.element,
	                    height = that.options.height,
	                    paddingBox = that._paddingBox(element),
	                    elementHeight = parseFloat(height, 10) - that._uiHeight() - paddingBox.vertical;

	                if (elementHeight > 0) {
	                    that.element.css({
	                        height: ceil(elementHeight) + "px",
	                        overflow: "hidden"
	                    });
	                }
	            },

	            _uiHeight: function() {
	                var that = this,
	                    wrapper = that.wrapper,
	                    actionbar = wrapper.children(KBUTTONGROUP),
	                    actionbarHeight = actionbar[0] && actionbar[0].offsetHeight || 0,
	                    titlebar = wrapper.children(KDIALOGTITLEBAR),
	                    titlebarHeight = titlebar[0] && titlebar[0].offsetHeight || 0;

	                return actionbarHeight + titlebarHeight;
	            },

	            _overlay: function(visible) {
	                var overlay = this.appendTo.children(KOVERLAY),
	                    wrapper = this.wrapper;


	                if (!overlay.length) {
	                    overlay = $(templates.overlay);
	                }

	                overlay
	                    .insertBefore(wrapper[0])
	                    .toggle(visible)
	                    .css(ZINDEX, parseInt(wrapper.css(ZINDEX), 10) - 1);

	                if (visible) {
	                    this._waiAriaOverlay();
	                }
	                else {
	                    this._removeWaiAriaOverlay();
	                }

	                return overlay;
	            },

	            _waiAriaOverlay: function() {
	                var node = this.wrapper;

	                this._overlayedNodes = node.prevAll(overlaySelector).add(node.nextAll(overlaySelector))
	                    .each(function() {
	                        var jthis = $(this);
	                        jthis.data("ariaHidden", jthis.attr("aria-hidden"));
	                        jthis.attr("aria-hidden", "true");
	                    });
	            },

	            _removeWaiAriaOverlay: function() {
	                return this._overlayedNodes && this._overlayedNodes.each(function() {
	                    var node = $(this);
	                    var hiddenValue = node.data("ariaHidden");
	                    if (hiddenValue) {
	                        node.attr("aria-hidden", hiddenValue);
	                    }
	                    else {
	                        node.removeAttr("aria-hidden");
	                    }
	                });
	            },

	            _closeClick: function(e) {
	                e.preventDefault();
	                this.close();
	            },

	            _closeKeyHandler: function(e) {
	                if (buttonKeyTrigger(e) || e.keyCode == keys.ESC) {
	                    this.close();
	                }
	            },

	            _keydown: function(e) {
	                var that = this,
	                    options = that.options,
	                    keyCode = e.keyCode;

	                if (keyCode == keys.ESC && !that._closing && options.closable) {
	                    that.close();
	                }
	            },

	            _createDialog: function() {
	                var that = this,
	                    content = that.element,
	                    options = that.options,
	                    isRtl = kendo.support.isRtl(content),
	                    titlebar = $(templates.titlebar(options)),
	                    titlebarActions = titlebar.find(".k-window-actions"),
	                    titleId = (content.id || kendo.guid()) + "_title",
	                    wrapper = $(that.wrapperTemplate(options));

	                wrapper.toggleClass("k-rtl", isRtl);

	                content.addClass(KCONTENTCLASS);
	                that.appendTo.append(wrapper);

	                if (options.closable !== false) {
	                    if (options.title !== false) {
	                        titlebarActions.append(templates.close(options));
	                    }
	                    else {
	                        wrapper.append(templates.close(options));
	                    }
	                }

	                if (options.title !== false) {
	                    wrapper.append(titlebar);
	                    titlebar.attr("id", titleId);
	                    wrapper.attr("aria-labelledby", titleId);
	                } else {
	                    wrapper.addClass(KTITLELESS);
	                }

	                wrapper.append(content);

	                if (options.content) {
	                    kendo.destroy(content.children());
	                    content.html(options.content);
	                }

	                if (options.actions.length) {
	                    that._createActionbar(wrapper);
	                }
	            },

	            _createActionbar: function(wrapper) {
	                var isStretchedLayout = (this.options.buttonLayout === "stretched");
	                var buttonLayout = isStretchedLayout ? "stretched" : "normal";
	                var actionbar = $(templates.actionbar({ buttonLayout: buttonLayout }));
	                this._addButtons(actionbar);
	                if(isStretchedLayout) {
	                    this._normalizeButtonSize(actionbar);
	                }
	                wrapper.append(actionbar);
	            },

	            _addButtons: function(actionbar) {
	                var that = this,
	                    o = that.options,
	                    actionClick = proxy(that._actionClick, that),
	                    actionKeyHandler = proxy(that._actionKeyHandler, that),
	                    actions = that.options.actions,
	                    length = actions.length,
	                    buttonSize = HUNDREDPERCENT / length,
	                    action,
	                    text;

	                for (var i = 0; i < length; i++) {
	                    action = actions[i];
	                    text = that._mergeTextWithOptions(action);
	                    var btn = $(templates.action(action))
	                        .autoApplyNS(NS)
	                        .html(text)
	                        .appendTo(actionbar)
	                        .data("action", action.action)
	                        .on("click", actionClick)
	                        .on("keydown", actionKeyHandler);
	                    if(o.buttonLayout === "stretched") {
	                        btn.css(WIDTH, buttonSize + "%");
	                    }
	                }
	            },

	            _mergeTextWithOptions : function(action) {
	                var text = action.text;
	                return text ? template(text)(this.options) : "";
	            },

	            _normalizeButtonSize: function(actionbar) {
	                var that = this,
	                    options = that.options,
	                    lastButton = actionbar.children(KBUTTON + ":last"),
	                    currentSize = parseFloat(lastButton[0].style[WIDTH]),
	                    difference = HUNDREDPERCENT - (options.actions.length * currentSize);

	                if (difference > 0) {
	                    lastButton.css(WIDTH, (currentSize + difference) + "%");
	                }
	            },

	            _tabindex: function(target) {
	                var that = this;
	                var wrapper = that.wrapper;
	                var closeBtn = wrapper.find(KICONCLOSE);
	                var actionButtons = wrapper.find(KBUTTONGROUP + " " + KBUTTON);

	                Widget.fn._tabindex.call(this, target);

	                var tabIndex = target.attr("tabindex");

	                closeBtn.attr("tabIndex", tabIndex);
	                actionButtons.attr("tabIndex", tabIndex);
	            },

	            _actionClick: function(e) {
	                this._runActionBtn(e.currentTarget);
	            },

	            _actionKeyHandler: function(e) {
	                if (buttonKeyTrigger(e)) {
	                    this._runActionBtn(e.currentTarget);
	                } else if (e.keyCode == keys.ESC) {
	                    this.close();
	                }
	            },

	            _runActionBtn: function(target) {
	                var that = this;
	                if (that._closing) {
	                    return;
	                }

	                var action = $(target).data("action"),
	                    preventClose = (isFunction(action) && action({ sender: that }) === false);

	                if (!preventClose) {
	                    that.close();
	                }
	            },

	            open: function() {
	                var that = this,
	                    wrapper = that.wrapper,
	                    showOptions = this._animationOptions(OPEN),
	                    options = that.options,
	                    overlay, otherModalsVisible;

	                this._triggerInitOpen();

	                if (!that.trigger(OPEN)) {
	                    if (that._closing) {
	                        wrapper.kendoStop(true, true);
	                    }

	                    that._closing = false;

	                    that.toFront();
	                    options.visible = true;
	                    if (options.modal) {
	                        otherModalsVisible = !!that._modals().length;
	                        overlay = that._overlay(otherModalsVisible);

	                        overlay.kendoStop(true, true);

	                        if (showOptions.duration && kendo.effects.Fade && !otherModalsVisible) {
	                            var overlayFx = kendo.fx(overlay).fadeIn();
	                            overlayFx.duration(showOptions.duration || 0);
	                            overlayFx.endValue(0.5);
	                            overlayFx.play();
	                        } else {
	                            overlay.css("opacity", 0.5);
	                        }

	                        overlay.show();
	                    }

	                    wrapper.show().kendoStop().kendoAnimate({
	                        effects: showOptions.effects,
	                        duration: showOptions.duration,
	                        complete: proxy(that._openAnimationEnd, that)
	                    });
	                    wrapper.show();

	                }

	                return that;
	            },

	            _animationOptions: function(id) {
	                var animation = this.options.animation;
	                var basicAnimation = {
	                    open: { effects: {} },
	                    close: { hide: true, effects: {} }
	                };

	                return animation && animation[id] || basicAnimation[id];
	            },

	            _openAnimationEnd: function() {
	                if (this.options.modal) {
	                    this._focusDialog();
	                }
	                this.trigger(SHOW);
	            },

	            _triggerInitOpen: function() {
	                if (!defined(this._initOpenTriggered)) {
	                    this._initOpenTriggered = true;
	                    this.trigger(INITOPEN);
	                }
	            },

	            toFront: function() {
	                var that = this,
	                    wrapper = that.wrapper,
	                    zIndex = +wrapper.css(ZINDEX),
	                    originalZIndex = zIndex;

	                that.center();

	                $(KWINDOW).each(function(i, element) {
	                    var windowObject = $(element),
	                        zIndexNew = windowObject.css(ZINDEX);

	                    if (!isNaN(zIndexNew)) {
	                        zIndex = Math.max(+zIndexNew, zIndex);
	                    }
	                });

	                if (!wrapper[0].style.zIndex || originalZIndex < zIndex) {
	                    wrapper.css(ZINDEX, zIndex + 2);
	                }

	                that.element.find("> .k-overlay").remove();
	                wrapper = null;

	                return that;
	            },

	            close: function() {
	                this._close(true);
	                this._stopCenterOnResize();
	                return this;
	            },

	            _close: function(systemTriggered) {
	                var that = this,
	                    wrapper = that.wrapper,
	                    options = that.options,
	                    showOptions = this._animationOptions("open"),
	                    hideOptions = this._animationOptions("close");

	                if (wrapper.is(VISIBLE) && !that.trigger(CLOSE, { userTriggered: !systemTriggered })) {
	                    if (that._closing) {
	                        return;
	                    }
	                    that._closing = true;

	                    options.visible = false;
	                    this._removeOverlay();

	                    wrapper.kendoStop().kendoAnimate({
	                        effects: hideOptions.effects || showOptions.effects,
	                        reverse: hideOptions.reverse === true,
	                        duration: hideOptions.duration,
	                        complete: proxy(this._closeAnimationEnd, this)
	                    });
	                }

	                return that;
	            },

	            center: function() {
	                this._center();
	                this._centerOnResize();
	            },

	            _center: function() {
	                var that = this,
	                    wrapper = that.wrapper,
	                    documentWindow = $(window),
	                    scrollTop = 0,
	                    scrollLeft = 0,
	                    newLeft = scrollLeft + Math.max(0, (documentWindow.width() - wrapper.width()) / 2),
	                    newTop = scrollTop + Math.max(0, (documentWindow.height() - wrapper.height() - parseInt(wrapper.css("paddingTop"), 10)) / 2);

	                wrapper.css({
	                    left: newLeft,
	                    top: newTop
	                });

	                return that;
	            },

	            _centerOnResize: function() {
	                if (this._trackResize) {
	                    return;
	                }

	                kendo.onResize(this._centerCallback);
	                this._trackResize = true;
	            },

	            _stopCenterOnResize: function() {
	                kendo.unbindResize(this._centerCallback);
	                this._trackResize = false;
	            },

	            _removeOverlay: function() {
	                var modals = this._modals();
	                var options = this.options;
	                var hideOverlay = options.modal && !modals.length;

	                if (hideOverlay) {
	                    this._overlay(false).remove();
	                } else if (modals.length) {
	                    this._object(modals.last())._overlay(true);
	                }
	            },

	            _closeAnimationEnd: function() {
	                var that = this;

	                that._closing = false;
	                that.wrapper.hide().css("opacity", "");
	                that.trigger(HIDE);

	                if (that.options.modal) {
	                    var lastModal = that._object(that._modals().last());
	                    if (lastModal) {
	                        lastModal.toFront();
	                    }
	                }
	            },

	            _modals: function() {
	                var that = this;

	                var zStack = $(KWINDOW).filter(function() {
	                    var dom = $(this);
	                    var object = that._object(dom);
	                    var options = object && object.options;

	                    return options && options.modal && that.options.appendTo == options.appendTo && options.visible && dom.is(VISIBLE);
	                }).sort(function(a, b) {
	                    return +$(a).css("zIndex") - +$(b).css("zIndex");
	                });

	                that = null;

	                return zStack;
	            },

	            _object: function(element) {
	                var content = element.children(KCONTENT);
	                var widget = kendo.widgetInstance(content);

	                if (widget) {
	                    return widget;
	                }

	                return undefined;
	            },

	            destroy: function() {
	                var that = this;
	                that._destroy();

	                Widget.fn.destroy.call(that);

	                that.wrapper.remove();
	                that.wrapper = that.element = $();
	            },

	            _destroy: function() {
	                var that = this;
	                var ns = "." + NS;

	                that.wrapper.off(ns);
	                that.element.off(ns);
	                that.wrapper.find(KICONCLOSE + "," + KBUTTONGROUP + " > " + KBUTTON).off(ns);
	                that._stopCenterOnResize();
	            },

	            title: function(html) {
	                var that = this,
	                    wrapper = that.wrapper,
	                    options = that.options,
	                    titlebar = wrapper.children(KDIALOGTITLEBAR),
	                    title = titlebar.children(KDIALOGTITLE),
	                    encodedHtml = kendo.htmlEncode(html);

	                if (!arguments.length) {
	                    return title.html();
	                }

	                if (html === false) {
	                    titlebar.remove();
	                    wrapper.addClass(KTITLELESS);
	                } else {
	                    if (!titlebar.length) {
	                        titlebar = $(templates.titlebar(options)).prependTo(wrapper);
	                        title = titlebar.children(KDIALOGTITLE);
	                        wrapper.removeClass(KTITLELESS);
	                    }
	                    title.html(encodedHtml);
	                }

	                that.options.title = encodedHtml;

	                return that;
	            },

	            content: function(html, data) {
	                var that = this,
	                    content = that.wrapper.children(KCONTENT);

	                if (!defined(html)) {
	                    return content.html();
	                }

	                this.angular("cleanup", function(){
	                    return { elements: content.children() };
	                });

	                kendo.destroy(content.children());
	                content.html(html);

	                this.angular("compile", function(){
	                    var a = [];
	                    for (var i = content.length; --i >= 0;) {
	                        a.push({ dataItem: data });
	                    }
	                    return {
	                        elements: content.children(),
	                        data: a
	                    };
	                });

	                that.options.content = html;

	                return that;
	            },

	            _focusDialog: function() {
	                if (this._defaultFocus) {
	                    this._focus(this._defaultFocus);
	                }
	                this._tabKeyTrap.trap();
	            },

	            _focus: function(node) {
	                if (node) {
	                    node.focus();
	                }
	            },

	            events: [
	                INITOPEN,
	                OPEN,
	                CLOSE,
	                SHOW,
	                HIDE
	            ],

	            options: {
	                title: "",
	                buttonLayout: "stretched",
	                actions: [],
	                modal: true,
	                width: null,
	                height: null,
	                minWidth: 0,
	                minHeight: 0,
	                maxWidth: Infinity,
	                maxHeight: Infinity,
	                content: null,
	                visible: null,
	                appendTo: BODY,
	                closable: true
	            }
	        });

	        var Dialog = DialogBase.extend({
	            options: {
	                name: "Dialog",
	                messages: {
	                    close: "Close"
	                }
	            }
	        });

	        kendo.ui.plugin(Dialog);

	        var PopupBox = DialogBase.extend({
	            _init: function(element, options) {
	                var that = this;

	                that.wrapperTemplate = templates.alertWrapper;
	                options._defaultFocus = null;
	                that._ensureContentId(element);

	                DialogBase.fn._init.call(that, element, options);

	                that.bind(HIDE, proxy(that.destroy, that));

	                that._ariaDescribedBy();
	                that._initFocus();
	            },

	            _ensureContentId: function(element) {
	                var node = $(element);
	                if(!node.attr("id")) {
	                    node.attr("id", kendo.guid() + "_k-popup");
	                }
	            },

	            _ariaDescribedBy: function() {
	                this.wrapper.attr("aria-describedby", this.element.attr("id"));
	            },

	            _initFocus: function() {
	                var o = this.options;

	                this._defaultFocus = this._chooseEntryFocus();
	                if (this._defaultFocus && o.visible && o.modal) {
	                    this._focusDialog();
	                }
	            },

	            _chooseEntryFocus: function() {
	                return this.wrapper.find(KBUTTONGROUP + " > " + KBUTTON)[0];
	            },

	            options: {
	                title: window.location.host,
	                closable: false,
	                messages: messages
	            }
	        });

	        var Alert = PopupBox.extend({
	            _init: function(element, options) {
	                var that = this;
	                PopupBox.fn._init.call(that, element, options);
	                that.wrapper.addClass(KALERT);
	            },

	            options: {
	                name: "Alert",
	                modal: true,
	                actions: [{
	                    text: "#: messages.okText #"
	                }]
	            }
	        });

	        kendo.ui.plugin(Alert);

	        var kendoAlert = function(text) {
	            return $(templates.alert).kendoAlert({ content: text }).data("kendoAlert").open();
	        };

	        var Confirm = PopupBox.extend({
	            _init: function(element, options) {
	                var that = this;
	                PopupBox.fn._init.call(that, element, options);
	                that.wrapper.addClass(KCONFIRM);
	                that.result = $.Deferred();
	            },

	            options: {
	                name: "Confirm",
	                modal: true,
	                actions: [{
	                    text: "#: messages.okText #",
	                    primary: true,
	                    action: function(e) {
	                        e.sender.result.resolve();
	                    }
	                }, {
	                    text: "#: messages.cancel #",
	                    action: function(e) {
	                        e.sender.result.reject();
	                    }
	                }]
	            }
	        });

	        kendo.ui.plugin(Confirm);

	        var kendoConfirm = function(text) {
	            var confirmDialog = $(templates.confirm).kendoConfirm({ content: text }).data("kendoConfirm").open();
	            return confirmDialog.result;
	        };

	        var Prompt = PopupBox.extend({
	            _init: function(element, options) {
	                var that = this;
	                PopupBox.fn._init.call(that, element, options);
	                that.wrapper.addClass(KPROMPT);
	                that._createPrompt();
	                that.result = $.Deferred();
	            },

	            _createPrompt: function() {
	                var value = this.options.value,
	                    promptContainer = $(templates.promptInputContainer(this.options)).insertAfter(this.element);

	                if (value) {
	                    promptContainer.children(KTEXTBOX).val(value);
	                }

	                this._defaultFocus = this._chooseEntryFocus();
	                this._focusDialog();
	            },

	            _chooseEntryFocus: function() {
	                return this.wrapper.find(KTEXTBOX)[0];
	            },

	            options: {
	                name: "Prompt",
	                modal: true,
	                value: "",
	                actions: [{
	                    text: "#: messages.okText #",
	                    primary: true,
	                    action: function(e) {
	                        var sender = e.sender,
	                            value = sender.wrapper.find(KTEXTBOX).val();

	                        sender.result.resolve(value);
	                    }
	                }, {
	                    text: "#: messages.cancel #",
	                    action: function(e) {
	                        var sender = e.sender,
	                            value = sender.wrapper.find(KTEXTBOX).val();

	                        e.sender.result.reject(value);
	                    }
	                }]
	            }
	        });

	        kendo.ui.plugin(Prompt);

	        var kendoPrompt = function(text, value) {
	            var promptDialog = $(templates.prompt).kendoPrompt({
	                content: text,
	                value: value
	            }).data("kendoPrompt").open();

	            return promptDialog.result;
	        };

	        templates = {
	            wrapper: template("<div class='k-widget k-window k-dialog' role='dialog' />"),
	            action: template("<button type='button' class='k-button# if (data.primary) { # k-primary# } role='button' #'></button>"),
	            titlebar: template(
	                "<div class='k-window-titlebar k-dialog-titlebar k-header'>" +
	                    "<span class='k-window-title k-dialog-title'>#: title #</span>" +
	                    "<div class='k-window-actions k-dialog-actions' />" +
	                "</div>"
	            ),
	            close: template("<a role='button' href='\\#' class='k-button k-bare k-button-icon k-window-action k-dialog-action k-dialog-close' title='#: messages.close #' aria-label='#: messages.close #' tabindex='-1'><span class='k-icon k-i-close'></span></a>"),
	            actionbar: template("<div class='k-button-group k-dialog-buttongroup k-dialog-button-layout-#: buttonLayout #' role='toolbar' />"),
	            overlay: "<div class='k-overlay' />",
	            alertWrapper: template("<div class='k-widget k-window k-dialog' role='alertdialog' />"),
	            alert: "<div />",
	            confirm: "<div />",
	            prompt: "<div />",
	            promptInputContainer: template("<div class='k-prompt-container'><input type='text' class='k-textbox' title='#: messages.promptInput #' aria-label='#: messages.promptInput #' /></div>")
	        };

	        kendo.alert = kendoAlert;
	        kendo.confirm = kendoConfirm;
	        kendo.prompt = kendoPrompt;

	    })(window.kendo.jQuery);

	    return window.kendo;

	}, __webpack_require__(422));


/***/ })

/******/ });

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(453);


/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 424:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(9);

/***/ }),

/***/ 425:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(8);

/***/ }),

/***/ 453:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(424), __webpack_require__(425) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "dropdownlist",
	    name: "DropDownList",
	    category: "web",
	    description: "The DropDownList widget displays a list of values and allows the selection of a single value from the list.",
	    depends: [ "list" ],
	    features: [ {
	        id: "mobile-scroller",
	        name: "Mobile scroller",
	        description: "Support for kinetic scrolling in mobile device",
	        depends: [ "mobile.scroller" ]
	    }, {
	        id: "virtualization",
	        name: "VirtualList",
	        description: "Support for virtualization",
	        depends: [ "virtuallist" ]
	    } ]
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        ui = kendo.ui,
	        List = ui.List,
	        Select = ui.Select,
	        support = kendo.support,
	        activeElement = kendo._activeElement,
	        ObservableObject = kendo.data.ObservableObject,
	        keys = kendo.keys,
	        ns = ".kendoDropDownList",
	        DISABLED = "disabled",
	        READONLY = "readonly",
	        CHANGE = "change",
	        FOCUSED = "k-state-focused",
	        DEFAULT = "k-state-default",
	        STATEDISABLED = "k-state-disabled",
	        ARIA_DISABLED = "aria-disabled",
	        HOVEREVENTS = "mouseenter" + ns + " mouseleave" + ns,
	        TABINDEX = "tabindex",
	        STATE_FILTER = "filter",
	        STATE_ACCEPT = "accept",
	        MSG_INVALID_OPTION_LABEL = "The `optionLabel` option is not valid due to missing fields. Define a custom optionLabel as shown here http://docs.telerik.com/kendo-ui/api/javascript/ui/dropdownlist#configuration-optionLabel",
	        proxy = $.proxy;

	    var DropDownList = Select.extend( {
	        init: function(element, options) {
	            var that = this;
	            var index = options && options.index;
	            var optionLabel, text, disabled;

	            that.ns = ns;
	            options = $.isArray(options) ? { dataSource: options } : options;

	            Select.fn.init.call(that, element, options);

	            options = that.options;
	            element = that.element.on("focus" + ns, proxy(that._focusHandler, that));

	            that._focusInputHandler = $.proxy(that._focusInput, that);

	            that.optionLabel = $();
	            that._optionLabel();

	            that._inputTemplate();

	            that._reset();

	            that._prev = "";
	            that._word = "";

	            that._wrapper();

	            that._tabindex();
	            that.wrapper.data(TABINDEX, that.wrapper.attr(TABINDEX));

	            that._span();

	            that._popup();

	            that._mobile();

	            that._dataSource();

	            that._ignoreCase();

	            that._filterHeader();

	            that._aria();

	            that._enable();

	            that._oldIndex = that.selectedIndex = -1;

	            if (index !== undefined) {
	                options.index = index;
	            }

	            that._initialIndex = options.index;

	            that.requireValueMapper(that.options);
	            that._initList();

	            that._cascade();

	            if (options.autoBind) {
	                that.dataSource.fetch();
	            } else if (that.selectedIndex === -1) { //selectedIndex !== -1 when cascade functionality happens instantly
	                text = options.text || "";
	                if (!text) {
	                    optionLabel = options.optionLabel;

	                    if (optionLabel && options.index === 0) {
	                        text = optionLabel;
	                    } else if (that._isSelect) {
	                        text = element.children(":selected").text();
	                    }
	                }

	                that._textAccessor(text);
	            }

	            disabled = $(that.element).parents("fieldset").is(':disabled');

	            if (disabled) {
	                that.enable(false);
	            }

	            that.listView.bind("click", function(e) { e.preventDefault(); });

	            kendo.notify(that);
	        },

	        options: {
	            name: "DropDownList",
	            enabled: true,
	            autoBind: true,
	            index: 0,
	            text: null,
	            value: null,
	            delay: 500,
	            height: 200,
	            dataTextField: "",
	            dataValueField: "",
	            optionLabel: "",
	            cascadeFrom: "",
	            cascadeFromField: "",
	            ignoreCase: true,
	            animation: {},
	            filter: "none",
	            minLength: 1,
	            enforceMinLength: false,
	            virtual: false,
	            template: null,
	            valueTemplate: null,
	            optionLabelTemplate: null,
	            groupTemplate: "#:data#",
	            fixedGroupTemplate: "#:data#"
	        },

	        events: [
	            "open",
	            "close",
	            CHANGE,
	            "select",
	            "filtering",
	            "dataBinding",
	            "dataBound",
	            "cascade",
	            "set"
	        ],

	        setOptions: function(options) {
	            Select.fn.setOptions.call(this, options);

	            this.listView.setOptions(this._listOptions(options));

	            this._optionLabel();
	            this._inputTemplate();
	            this._accessors();
	            this._filterHeader();
	            this._enable();
	            this._aria();

	            if (!this.value() && this.hasOptionLabel()) {
	                this.select(0);
	            }
	        },

	        destroy: function() {
	            var that = this;

	            Select.fn.destroy.call(that);

	            that.wrapper.off(ns);
	            that.element.off(ns);
	            that._inputWrapper.off(ns);

	            that._arrow.off();
	            that._arrow = null;
	            that._arrowIcon = null;

	            that.optionLabel.off();
	        },

	        open: function() {
	            var that = this;

	            if (that.popup.visible()) {
	                return;
	            }

	            if (!that.listView.bound() || that._state === STATE_ACCEPT) {
	                that._open = true;
	                that._state = "rebind";

	                if (that.filterInput) {
	                    that.filterInput.val("");
	                    that._prev = "";
	                }

	                if (that.filterInput && that.options.minLength !== 1) {
	                    that.refresh();
	                    that.popup.one("activate", that._focusInputHandler);
	                    that.popup.open();
	                    that._resizeFilterInput();
	                } else {
	                    that._filterSource();
	                }
	            } else if (that._allowOpening()) {
	                that.popup.one("activate", that._focusInputHandler);
	                that.popup.open();
	                that._resizeFilterInput();
	                that._focusItem();
	            }
	        },

	        _focusInput: function () {
	            this._focusElement(this.filterInput);
	        },

	        _resizeFilterInput: function () {
	            var filterInput = this.filterInput;
	            var originalPrevent = this._prevent;

	            if (!filterInput) {
	                return;
	            }

	            var isInputActive = this.filterInput[0] === activeElement();
	            var caret = kendo.caret(this.filterInput[0])[0];

	            this._prevent = true;

	            filterInput.css("display", "none")
	                       .css("width", this.popup.element.css("width"))
	                       .css("display", "inline-block");

	            if (isInputActive) {
	                filterInput.focus();
	                kendo.caret(filterInput[0], caret);
	            }

	            this._prevent = originalPrevent;
	        },

	        _allowOpening: function() {
	            return this.hasOptionLabel() || this.filterInput || Select.fn._allowOpening.call(this);
	        },

	        toggle: function(toggle) {
	            this._toggle(toggle, true);
	        },

	        current: function(candidate) {
	            var current;

	            if (candidate === undefined) {
	                current = this.listView.focus();

	                if (!current && this.selectedIndex === 0 && this.hasOptionLabel()) {
	                    return this.optionLabel;
	                }

	                return current;
	            }

	            this._focus(candidate);
	        },

	        dataItem: function(index) {
	            var that = this;
	            var dataItem = null;

	            if (index === null) { return index; }

	            if (index === undefined) {
	                dataItem = that.listView.selectedDataItems()[0];
	            } else {
	                if (typeof index !== "number") {
	                    if (that.options.virtual) {
	                        return that.dataSource.getByUid($(index).data("uid"));
	                    }
	                    if (index.hasClass("k-list-optionlabel")) {
	                        index = -1;
	                    } else {
	                        index = $(that.items()).index(index);
	                    }
	                } else if (that.hasOptionLabel()) {
	                    index -= 1;
	                }

	                dataItem = that.dataSource.flatView()[index];
	            }

	            if (!dataItem) {
	                dataItem = that._optionLabelDataItem();
	            }

	            return dataItem;
	        },

	        refresh: function() {
	            this.listView.refresh();
	        },

	        text: function (text) {
	            var that = this;
	            var loweredText;
	            var ignoreCase = that.options.ignoreCase;

	            text = text === null ? "" : text;

	            if (text !== undefined) {
	                if (typeof text !== "string") {
	                    that._textAccessor(text);
	                    return;
	                }

	                loweredText = ignoreCase ? text.toLowerCase() : text;

	                that._select(function(data) {
	                    data = that._text(data);

	                    if (ignoreCase) {
	                        data = (data + "").toLowerCase();
	                    }

	                    return data === loweredText;
	                }).done(function() {
	                    that._textAccessor(that.dataItem() || text);
	                });

	            } else {
	                return that._textAccessor();
	            }
	        },

	        _clearFilter: function() {
	            $(this.filterInput).val("");
	            Select.fn._clearFilter.call(this);
	        },

	        value: function(value) {
	            var that = this;
	            var listView = that.listView;
	            var dataSource = that.dataSource;

	            if (value === undefined) {
	                value = that._accessor() || that.listView.value()[0];
	                return value === undefined || value === null ? "" : value;
	            }

	            that.requireValueMapper(that.options, value);

	            if (value || !that.hasOptionLabel()) {
	                that._initialIndex = null;
	            }

	            this.trigger("set", { value: value });

	            if (that._request && that.options.cascadeFrom && that.listView.bound()) {
	                if (that._valueSetter) {
	                    dataSource.unbind(CHANGE, that._valueSetter);
	                }

	                that._valueSetter = proxy(function() { that.value(value); }, that);

	                dataSource.one(CHANGE, that._valueSetter);
	                return;
	            }

	            if (that._isFilterEnabled() && listView.bound() && listView.isFiltered()) {
	                that._clearFilter();
	            } else {
	                that._fetchData();
	            }

	            listView.value(value).done(function() {
	                that._old = that._accessor();
	                that._oldIndex = that.selectedIndex;
	            });
	        },

	        hasOptionLabel: function() {
	            return this.optionLabel && !!this.optionLabel[0];
	        },

	        _optionLabel: function() {
	            var that = this;
	            var options = that.options;
	            var optionLabel = options.optionLabel;
	            var template = options.optionLabelTemplate;

	            if (!optionLabel) {
	                that.optionLabel.off().remove();
	                that.optionLabel = $();
	                return;
	            }

	            if (!template) {
	                template = "#:";

	                if (typeof optionLabel === "string") {
	                    template += "data";
	                } else {
	                    template += kendo.expr(options.dataTextField, "data");
	                }

	                template += "#";
	            }

	            if (typeof template !== "function") {
	                template = kendo.template(template);
	            }

	            that.optionLabelTemplate = template;

	            if (!that.hasOptionLabel()) {
	                that.optionLabel = $('<div class="k-list-optionlabel"></div>').prependTo(that.list);
	            }

	            that.optionLabel.html(template(optionLabel))
	                            .off()
	                            .click(proxy(that._click, that))
	                            .on(HOVEREVENTS, that._toggleHover);

	            that.angular("compile", function() {
	                return { elements: that.optionLabel, data: [{ dataItem: that._optionLabelDataItem() }] };
	            });
	        },

	        _optionLabelText: function() {
	            var optionLabel = this.options.optionLabel;
	            return (typeof optionLabel === "string") ? optionLabel : this._text(optionLabel);
	        },

	        _optionLabelDataItem: function() {
	            var that = this;
	            var optionLabel = that.options.optionLabel;

	            if (that.hasOptionLabel()) {
	                return $.isPlainObject(optionLabel) ? new ObservableObject(optionLabel) : that._assignInstance(that._optionLabelText(), "");
	            }

	            return null;
	        },

	        _buildOptions: function(data) {
	            var that = this;
	            if (!that._isSelect) {
	                return;
	            }

	            var value = that.listView.value()[0];
	            var optionLabel = that._optionLabelDataItem();
	            var optionLabelValue = optionLabel && that._value(optionLabel);

	            if (value === undefined || value === null) {
	                value = "";
	            }

	            if (optionLabel) {
	                if (optionLabelValue === undefined || optionLabelValue === null) {
	                    optionLabelValue = "";
	                }

	                optionLabel = '<option value="' + optionLabelValue + '">' + that._text(optionLabel) + "</option>";
	            }

	            that._options(data, optionLabel, value);

	            if (value !== List.unifyType(that._accessor(), typeof value)) {
	                that._customOption = null;
	                that._custom(value);
	            }
	        },

	        _listBound: function() {
	            var that = this;
	            var initialIndex = that._initialIndex;
	            var filtered = that._state === STATE_FILTER;

	            var data = that.dataSource.flatView();
	            var dataItem;

	            that._presetValue = false;

	            that._renderFooter();
	            that._renderNoData();
	            that._toggleNoData(!data.length);

	            that._resizePopup(true);

	            that.popup.position();

	            that._buildOptions(data);

	            that._makeUnselectable();

	            if (!filtered) {
	                if (that._open) {
	                    that.toggle(that._allowOpening());
	                }

	                that._open = false;

	                if (!that._fetch) {
	                    if (data.length) {
	                        if (!that.listView.value().length && initialIndex > -1 && initialIndex !== null) {
	                            that.select(initialIndex);
	                        }

	                        that._initialIndex = null;
	                        dataItem = that.listView.selectedDataItems()[0];
	                        if (dataItem && that.text() !== that._text(dataItem)) {
	                            that._selectValue(dataItem);
	                        }
	                    } else if (that._textAccessor() !== that._optionLabelText()) {
	                        that.listView.value("");
	                        that._selectValue(null);
	                        that._oldIndex = that.selectedIndex;
	                    }
	                }
	            }

	            that._hideBusy();
	            that.trigger("dataBound");
	        },

	        _listChange: function() {
	            this._selectValue(this.listView.selectedDataItems()[0]);

	            if (this._presetValue || (this._old && this._oldIndex === -1)) {
	                this._oldIndex = this.selectedIndex;
	            }
	        },

	        _filterPaste: function() {
	            this._search();
	        },

	        _focusHandler: function() {
	            this.wrapper.focus();
	        },

	        _focusinHandler: function() {
	            this._inputWrapper.addClass(FOCUSED);
	            this._prevent = false;
	        },

	        _focusoutHandler: function() {
	            var that = this;
	            var isIFrame = window.self !== window.top;

	            if (!that._prevent) {
	                clearTimeout(that._typingTimeout);

	                if (support.mobileOS.ios && isIFrame) {
	                    that._change();
	                } else {
	                    that._blur();
	                }

	                that._inputWrapper.removeClass(FOCUSED);
	                that._prevent = true;
	                that._open = false;
	                that.element.blur();
	            }
	        },

	        _wrapperMousedown: function() {
	            this._prevent = !!this.filterInput;
	        },

	        _wrapperClick: function(e) {
	            e.preventDefault();
	            this.popup.unbind("activate", this._focusInputHandler);
	            this._focused = this.wrapper;
	            this._toggle();
	        },

	        _editable: function(options) {
	            var that = this;
	            var element = that.element;
	            var disable = options.disable;
	            var readonly = options.readonly;
	            var wrapper = that.wrapper.add(that.filterInput).off(ns);
	            var dropDownWrapper = that._inputWrapper.off(HOVEREVENTS);

	            if (!readonly && !disable) {
	                element.removeAttr(DISABLED).removeAttr(READONLY);

	                dropDownWrapper
	                    .addClass(DEFAULT)
	                    .removeClass(STATEDISABLED)
	                    .on(HOVEREVENTS, that._toggleHover);

	                wrapper
	                    .attr(TABINDEX, wrapper.data(TABINDEX))
	                    .attr(ARIA_DISABLED, false)
	                    .on("keydown" + ns, proxy(that._keydown, that))
	                    .on("focusin" + ns, proxy(that._focusinHandler, that))
	                    .on("focusout" + ns, proxy(that._focusoutHandler, that))
	                    .on("mousedown" + ns, proxy(that._wrapperMousedown, that))
	                    .on("paste" + ns, proxy(that._filterPaste, that));

	                that.wrapper.on("click" + ns, proxy(that._wrapperClick, that));

	                if (!that.filterInput) {
	                    wrapper.on("keypress" + ns, proxy(that._keypress, that));
	                }

	            } else if (disable) {
	                wrapper.removeAttr(TABINDEX);
	                dropDownWrapper
	                    .addClass(STATEDISABLED)
	                    .removeClass(DEFAULT);
	            } else {
	                dropDownWrapper
	                    .addClass(DEFAULT)
	                    .removeClass(STATEDISABLED);

	                wrapper
	                    .on("focusin" + ns, proxy(that._focusinHandler, that))
	                    .on("focusout" + ns, proxy(that._focusoutHandler, that));
	            }

	            element.attr(DISABLED, disable)
	                   .attr(READONLY, readonly);

	            wrapper.attr(ARIA_DISABLED, disable);
	        },

	        _keydown: function(e) {
	            var that = this;
	            var key = e.keyCode;
	            var altKey = e.altKey;
	            var isInputActive;
	            var handled;

	            var isPopupVisible = that.popup.visible();

	            if (that.filterInput) {
	                isInputActive = that.filterInput[0] === activeElement();
	            }

	            if (key === keys.LEFT) {
	                key = keys.UP;
	                handled = true;
	            } else if (key === keys.RIGHT) {
	                key = keys.DOWN;
	                handled = true;
	            }

	            if (handled && isInputActive) {
	                return;
	            }

	            e.keyCode = key;

	            if ((altKey && key === keys.UP) || key === keys.ESC) {
	                that._focusElement(that.wrapper);
	            }

	            if (that._state === STATE_FILTER && key === keys.ESC) {
	                that._clearFilter();
	            }

	            if (key === keys.ENTER && that._typingTimeout && that.filterInput && isPopupVisible) {
	                e.preventDefault();
	                return;
	            }

	            handled = that._move(e);

	            if (handled) {
	                return;
	            }

	            if (!isPopupVisible || !that.filterInput) {
	                var current = that._focus();                

	                if (key === keys.HOME) {
	                    handled = true;
	                    that._firstItem();
	                } else if (key === keys.END) {
	                    handled = true;
	                    that._lastItem();
	                }

	                if (handled) {
	                    if (that.trigger("select", { dataItem: that._getElementDataItem(that._focus()), item: that._focus() })) {
	                        that._focus(current);
	                        return;
	                    }

	                    that._select(that._focus(), true).done(function() {
	                        if (!isPopupVisible) {
	                            that._blur();
	                        }
	                    });
	                    e.preventDefault();
	                }
	            }

	            if (!altKey && !handled && that.filterInput) {
	                that._search();
	            }
	        },

	        _matchText: function(text, word) {
	            var ignoreCase = this.options.ignoreCase;

	            if (text === undefined || text === null) {
	                return false;
	            }

	            text = text + "";

	            if (ignoreCase) {
	                text = text.toLowerCase();
	            }

	            return text.indexOf(word) === 0;
	        },

	        _shuffleData: function(data, splitIndex) {
	            var optionDataItem = this._optionLabelDataItem();

	            if (optionDataItem) {
	                data = [optionDataItem].concat(data);
	            }

	            return data.slice(splitIndex).concat(data.slice(0, splitIndex));
	        },

	        _selectNext: function() {
	            var that = this;
	            var data = that.dataSource.flatView();
	            var dataLength = data.length + (that.hasOptionLabel() ? 1 : 0);
	            var isInLoop = sameCharsOnly(that._word, that._last);
	            var startIndex = that.selectedIndex;
	            var oldFocusedItem;
	            var text;

	            if (startIndex === -1) {
	                startIndex = 0;
	            } else {
	                startIndex += isInLoop ? 1 : 0;
	                startIndex = normalizeIndex(startIndex, dataLength);
	            }

	            data = data.toJSON ? data.toJSON() : data.slice();
	            data = that._shuffleData(data, startIndex);

	            for (var idx = 0; idx < dataLength; idx++) {
	                text = that._text(data[idx]);

	                if (isInLoop && that._matchText(text, that._last)) {
	                    break;
	                } else if (that._matchText(text, that._word)) {
	                    break;
	                }
	            }

	            if (idx !== dataLength) {
	                oldFocusedItem = that._focus();

	                that._select(normalizeIndex(startIndex + idx, dataLength)).done(function() {
	                    var done = function() {
	                        if (!that.popup.visible()) {
	                            that._change();
	                        }
	                    };

	                    if (that.trigger("select", { dataItem: that._getElementDataItem(that._focus()), item: that._focus() })) {
	                        that._select(oldFocusedItem).done(done);
	                    } else {
	                        done();
	                    }
	                });
	            }
	        },

	        _keypress: function(e) {
	            var that = this;

	            if (e.which === 0 || e.keyCode === kendo.keys.ENTER) {
	                return;
	            }

	            var character = String.fromCharCode(e.charCode || e.keyCode);

	            if (that.options.ignoreCase) {
	                character = character.toLowerCase();
	            }

	            if (character === " ") {
	                e.preventDefault();
	            }

	            that._word += character;
	            that._last = character;

	            that._search();
	        },

	        _popupOpen: function() {
	            var popup = this.popup;

	            popup.wrapper = kendo.wrap(popup.element);

	            if (popup.element.closest(".km-root")[0]) {
	                popup.wrapper.addClass("km-popup km-widget");
	                this.wrapper.addClass("km-widget");
	            }
	        },

	        _popup: function() {
	            Select.fn._popup.call(this);
	            this.popup.one("open", proxy(this._popupOpen, this));
	        },

	        _getElementDataItem: function(element) {
	            if (!element || !element[0]) {
	                return null;
	            }

	            if (element[0] === this.optionLabel[0]) {
	                return this._optionLabelDataItem();
	            }

	            return this.listView.dataItemByIndex(this.listView.getElementIndex(element));
	        },

	        _click: function (e) {
	            var that = this;
	            var item = e.item || $(e.currentTarget);

	            e.preventDefault();

	            if (that.trigger("select", { dataItem: that._getElementDataItem(item), item: item })) {
	                that.close();
	                return;
	            }

	            that._userTriggered = true;

	            that._select(item).done(function() {
	                that._focusElement(that.wrapper);
	                that._blur();
	            });
	        },

	        _focusElement: function(element) {
	            var active = activeElement();
	            var wrapper = this.wrapper;
	            var filterInput = this.filterInput;
	            var compareElement = element === filterInput ? wrapper : filterInput;
	            var touchEnabled = support.mobileOS && (support.touch || support.MSPointers || support.pointers);

	            if (filterInput && filterInput[0] === element[0] && touchEnabled) {
	                return;
	            }

	            if (filterInput && compareElement[0] === active) {
	                this._prevent = true;
	                this._focused = element.focus();
	            }
	        },

	        _searchByWord: function(word) {
	            if (!word) {
	                return;
	            }

	            var that = this;
	            var ignoreCase = that.options.ignoreCase;

	            if (ignoreCase) {
	                word = word.toLowerCase();
	            }

	            that._select(function(dataItem) {
	                return that._matchText(that._text(dataItem), word);
	            });
	        },

	        _inputValue: function() {
	            return this.text();
	        },

	        _search: function() {
	            var that = this;
	            var dataSource = that.dataSource;

	            clearTimeout(that._typingTimeout);

	            if (that._isFilterEnabled()) {
	                that._typingTimeout = setTimeout(function() {
	                    var value = that.filterInput.val();

	                    if (that._prev !== value) {
	                        that._prev = value;
	                        that.search(value);
	                        that._resizeFilterInput();
	                    }

	                    that._typingTimeout = null;
	                }, that.options.delay);
	            } else {
	                that._typingTimeout = setTimeout(function() {
	                    that._word = "";
	                }, that.options.delay);

	                if (!that.listView.bound()) {
	                    dataSource.fetch().done(function () {
	                        that._selectNext();
	                    });
	                    return;
	                }

	                that._selectNext();
	            }
	        },

	        _get: function(candidate) {
	            var data, found, idx;
	            var isFunction = typeof candidate === "function";
	            var jQueryCandidate = !isFunction ? $(candidate) : $();

	            if (this.hasOptionLabel()) {
	                if (typeof candidate === "number") {
	                    if (candidate > -1) {
	                        candidate -= 1;
	                    }
	                } else if (jQueryCandidate.hasClass("k-list-optionlabel")) {
	                    candidate = -1;
	                }
	            }

	            if (isFunction) {
	                data = this.dataSource.flatView();

	                for (idx = 0; idx < data.length; idx++) {
	                    if (candidate(data[idx])) {
	                        candidate = idx;
	                        found = true;
	                        break;
	                    }
	                }

	                if (!found) {
	                    candidate = -1;
	                }
	            }

	            return candidate;
	        },

	        _firstItem: function() {
	            if (this.hasOptionLabel()) {
	                this._focus(this.optionLabel);
	            } else {
	                this.listView.focusFirst();
	            }
	        },

	        _lastItem: function() {
	            this._resetOptionLabel();
	            this.listView.focusLast();
	        },

	        _nextItem: function() {
	            if (this.optionLabel.hasClass("k-state-focused")) {
	                this._resetOptionLabel();
	                this.listView.focusFirst();
	            } else {
	                this.listView.focusNext();
	            }
	        },

	        _prevItem: function() {
	            if (this.optionLabel.hasClass("k-state-focused")) {
	                return;
	            }

	            this.listView.focusPrev();
	            if (!this.listView.focus()) {
	                this._focus(this.optionLabel);
	            }
	        },

	        _focusItem: function() {
	            var options = this.options;
	            var listView = this.listView;
	            var focusedItem = listView.focus();
	            var index = listView.select();

	            index = index[index.length - 1];

	            if (index === undefined && options.highlightFirst && !focusedItem) {
	                index = 0;
	            }

	            if (index !== undefined) {
	                listView.focus(index);
	            } else {
	                if (options.optionLabel && (!options.virtual || options.virtual.mapValueTo !== "dataItem")) {
	                    this._focus(this.optionLabel);
	                    this._select(this.optionLabel);
	                } else {
	                    listView.scrollToIndex(0);
	                }
	            }
	        },

	        _resetOptionLabel: function(additionalClass) {
	            this.optionLabel.removeClass("k-state-focused" + (additionalClass || "")).removeAttr("id");
	        },

	        _focus: function(candidate) {
	            var listView = this.listView;
	            var optionLabel = this.optionLabel;

	            if (candidate === undefined) {
	                candidate = listView.focus();

	                if (!candidate && optionLabel.hasClass("k-state-focused")) {
	                    candidate = optionLabel;
	                }

	                return candidate;
	            }

	            this._resetOptionLabel();

	            candidate = this._get(candidate);

	            listView.focus(candidate);

	            if (candidate === -1) {
	                optionLabel.addClass("k-state-focused")
	                           .attr("id", listView._optionID);

	                this._focused.add(this.filterInput)
	                    .removeAttr("aria-activedescendant")
	                    .attr("aria-activedescendant", listView._optionID);
	            }
	        },

	        _select: function(candidate, keepState) {
	            var that = this;

	            candidate = that._get(candidate);

	            return that.listView.select(candidate).done(function() {
	                if (!keepState && that._state === STATE_FILTER) {
	                    that._state = STATE_ACCEPT;
	                }

	                if (candidate === -1) {
	                    that._selectValue(null);
	                }
	            });
	        },

	        _selectValue: function(dataItem) {
	            var that = this;
	            var optionLabel = that.options.optionLabel;
	            var idx = that.listView.select();

	            var value = "";
	            var text = "";

	            idx = idx[idx.length - 1];
	            if (idx === undefined) {
	                idx = -1;
	            }

	            this._resetOptionLabel(" k-state-selected");

	            if (dataItem || dataItem === 0) {
	                text = dataItem;
	                value = that._dataValue(dataItem);
	                if (optionLabel) {
	                    idx += 1;
	                }
	            } else if (optionLabel) {
	                that._focus(that.optionLabel.addClass("k-state-selected"));

	                text = that._optionLabelText();

	                if (typeof optionLabel === "string") {
	                    value = "";
	                } else {
	                    value = that._value(optionLabel);
	                }

	                idx = 0;
	            }

	            that.selectedIndex = idx;

	            if (value === null) {
	                value = "";
	            }

	            that._textAccessor(text);
	            that._accessor(value, idx);

	            that._triggerCascade();
	        },

	        _mobile: function() {
	            var that = this,
	                popup = that.popup,
	                mobileOS = support.mobileOS,
	                root = popup.element.parents(".km-root").eq(0);

	            if (root.length && mobileOS) {
	                popup.options.animation.open.effects = (mobileOS.android || mobileOS.meego) ? "fadeIn" : (mobileOS.ios || mobileOS.wp) ? "slideIn:up" : popup.options.animation.open.effects;
	            }
	        },

	        _filterHeader: function() {
	            var icon;

	            if (this.filterInput) {
	                this.filterInput
	                    .off(ns)
	                    .parent()
	                    .remove();

	                this.filterInput = null;
	            }

	            if (this._isFilterEnabled()) {
	                icon = '<span class="k-icon k-i-zoom"></span>';

	                this.filterInput = $('<input class="k-textbox"/>')
	                                      .attr({
	                                          placeholder: this.element.attr("placeholder"),
	                                          title: this.element.attr("title"),
	                                          role: "listbox",
	                                          "aria-haspopup": true,
	                                          "aria-expanded": false
	                                      });
	                this.list
	                    .prepend($('<span class="k-list-filter" />')
	                    .append(this.filterInput.add(icon)));
	            }
	        },

	        _span: function() {
	            var that = this,
	                wrapper = that.wrapper,
	                SELECTOR = "span.k-input",
	                span;

	            span = wrapper.find(SELECTOR);

	            if (!span[0]) {
	                wrapper.append('<span unselectable="on" class="k-dropdown-wrap k-state-default"><span unselectable="on" class="k-input">&nbsp;</span><span unselectable="on" class="k-select" aria-label="select"><span class="k-icon k-i-arrow-60-down"></span></span></span>')
	                       .append(that.element);

	                span = wrapper.find(SELECTOR);
	            }

	            that.span = span;
	            that._inputWrapper = $(wrapper[0].firstChild);
	            that._arrow = wrapper.find(".k-select");
	            that._arrowIcon = that._arrow.find(".k-icon");
	        },

	        _wrapper: function() {
	            var that = this,
	                element = that.element,
	                DOMelement = element[0],
	                wrapper;

	            wrapper = element.parent();

	            if (!wrapper.is("span.k-widget")) {
	                wrapper = element.wrap("<span />").parent();
	                wrapper[0].style.cssText = DOMelement.style.cssText;
	                wrapper[0].title = DOMelement.title;
	            }

	            that._focused = that.wrapper = wrapper
	                              .addClass("k-widget k-dropdown k-header")
	                              .addClass(DOMelement.className)
	                              .css("display", "")
	                              .attr({
	                                  accesskey: element.attr("accesskey"),
	                                  unselectable: "on",
	                                  role: "listbox",
	                                  "aria-haspopup": true,
	                                  "aria-expanded": false
	                              });

	            element.hide().removeAttr("accesskey");
	        },

	        _clearSelection: function(parent) {
	            this.select(parent.value() ? 0 : -1);
	        },

	        _inputTemplate: function() {
	            var that = this,
	                template = that.options.valueTemplate;


	            if (!template) {
	                template = $.proxy(kendo.template('#:this._text(data)#', { useWithBlock: false }), that);
	            } else {
	                template = kendo.template(template);
	            }

	            that.valueTemplate = template;

	            if (that.hasOptionLabel() && !that.options.optionLabelTemplate) {
	                try {
	                    that.valueTemplate(that._optionLabelDataItem());
	                } catch(e) {
	                    throw new Error(MSG_INVALID_OPTION_LABEL);
	                }
	            }
	        },

	        _textAccessor: function(text) {
	            var dataItem = null;
	            var template = this.valueTemplate;
	            var optionLabelText = this._optionLabelText();
	            var span = this.span;

	            if (text === undefined) {
	                return span.text();
	            }

	            if ($.isPlainObject(text) || text instanceof ObservableObject) {
	                dataItem = text;
	            } else if (optionLabelText && optionLabelText === text) {
	                dataItem = this.options.optionLabel;
	            }

	            if (!dataItem) {
	                dataItem = this._assignInstance(text, this._accessor());
	            }

	            if (this.hasOptionLabel()) {
	                if (dataItem === optionLabelText || this._text(dataItem) === optionLabelText) {
	                    template = this.optionLabelTemplate;

	                    if (typeof this.options.optionLabel === "string" && !this.options.optionLabelTemplate) {
	                        dataItem = optionLabelText;
	                    }
	                }
	            }

	            var getElements = function(){
	                return {
	                    elements: span.get(),
	                    data: [ { dataItem: dataItem } ]
	                };
	            };

	            this.angular("cleanup", getElements);

	            try {
	                span.html(template(dataItem));
	            } catch(e) {
	                //dataItem has missing fields required in custom template
	                span.html("");
	            }

	            this.angular("compile", getElements);
	        },

	        _preselect: function(value, text) {
	            if (!value && !text) {
	                text = this._optionLabelText();
	            }

	            this._accessor(value);
	            this._textAccessor(text);

	            this._old = this._accessor();
	            this._oldIndex = this.selectedIndex;

	            this.listView.setValue(value);

	            this._initialIndex = null;
	            this._presetValue = true;
	        },

	        _assignInstance: function(text, value) {
	            var dataTextField = this.options.dataTextField;
	            var dataItem = {};

	            if (dataTextField) {
	                assign(dataItem, dataTextField.split("."), text);
	                assign(dataItem, this.options.dataValueField.split("."), value);
	                dataItem = new ObservableObject(dataItem);
	            } else {
	                dataItem = text;
	            }

	            return dataItem;
	        }
	    });

	    function assign(instance, fields, value) {
	        var idx = 0,
	            lastIndex = fields.length - 1,
	            field;

	        for (; idx < lastIndex; ++idx) {
	            field = fields[idx];

	            if (!(field in instance)) {
	                instance[field] = {};
	            }

	            instance = instance[field];
	        }

	        instance[fields[lastIndex]] = value;
	    }

	    function normalizeIndex(index, length) {
	        if (index >= length) {
	            index -= length;
	        }
	        return index;
	    }

	    function sameCharsOnly(word, character) {
	        for (var idx = 0; idx < word.length; idx++) {
	            if (word.charAt(idx) !== character) {
	                return false;
	            }
	        }
	        return true;
	    }

	    ui.plugin(DropDownList);
	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(422));


/***/ })

/******/ });

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(460);


/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 427:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(4);

/***/ }),

/***/ 460:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* jshint eqnull: true */
	(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(461), __webpack_require__(427), __webpack_require__(462) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "listbox",
	    name: "ListBox",
	    category: "web",
	    depends: ["draganddrop", "data", "selectable"]
	};

	(function($, undefined) {
	    var kendo = window.kendo;
	    var kendoAttr = kendo.attr;
	    var data = kendo.data;
	    var keys = kendo.keys;
	    var kendoTemplate = kendo.template;
	    var Widget = kendo.ui.Widget;
	    var DataSource = data.DataSource;
	    var Selectable = kendo.ui.Selectable;
	    var DataBoundWidget = kendo.ui.DataBoundWidget;
	    var Class = kendo.Class;

	    var extend = $.extend;
	    var noop = $.noop;
	    var proxy = $.proxy;

	    var DASH = "-";
	    var DOT = ".";
	    var SPACE = " ";
	    var HASH = "#";

	    var KENDO_LISTBOX = "kendoListBox";
	    var NS = DOT + KENDO_LISTBOX;
	    var DISABLED_STATE_CLASS = "k-state-disabled";
	    var SELECTED_STATE_CLASS = "k-state-selected";
	    var ENABLED_ITEM_SELECTOR = ".k-item:not(.k-state-disabled)";
	    var ENABLED_ITEMS_SELECTOR = ".k-list:not(.k-state-disabled) >" + ENABLED_ITEM_SELECTOR;
	    var TOOLBAR_CLASS = "k-listbox-toolbar";
	    var TOOL_SELECTOR = "li > a.k-button:not(.k-state-disabled)";
	    var FOCUSED_CLASS = "k-state-focused";
	    var DRAG_CLUE_CLASS = "k-drag-clue";
	    var DROP_HINT_CLASS = "k-drop-hint";
	    var LIST_CLASS = "k-reset k-list";
	    var LIST_SELECTOR = ".k-reset.k-list";
	    var RESET = "k-reset";

	    var CLICK = "click" + NS;
	    var KEYDOWN = "keydown" + NS;
	    var BLUR = "blur" + NS;
	    var outerWidth = kendo._outerWidth;
	    var outerHeight = kendo._outerHeight;
	    var CHANGE = "change";
	    var DATABOUND = "dataBound";
	    var ADD = "add";
	    var REMOVE = "remove";
	    var REORDER = "reorder";
	    var MOVE_UP = "moveUp";
	    var MOVE_DOWN = "moveDown";
	    var TRANSFER_TO = "transferTo";
	    var TRANSFER_FROM = "transferFrom";
	    var TRANSFER_ALL_TO = "transferAllTo";
	    var TRANSFER_ALL_FROM = "transferAllFrom";
	    var DRAGGEDCLASS = "k-ghost";
	    var UNIQUE_ID = "uid";
	    var TABINDEX = "tabindex";
	    var COMMAND = "command";

	    var MOVE_UP_OFFSET = -1;
	    var MOVE_DOWN_OFFSET = 1;
	    var DRAGSTART = "dragstart";
	    var DRAG = "drag";
	    var DROP = "drop";
	    var DRAGEND = "dragend";
	    var DEFAULT_FILTER = "ul.k-reset.k-list>li.k-item";

	    var RIGHT = "right";
	    var BOTTOM = "bottom";

	    var TOOLBAR_POSITION_CLASS_NAMES = [
	        TOOLBAR_CLASS + DASH + "left",
	        TOOLBAR_CLASS + DASH + RIGHT,
	        TOOLBAR_CLASS + DASH + "top",
	        TOOLBAR_CLASS + DASH + BOTTOM
	    ];

	    function getSortedDomIndices(items) {
	        var indices = $.map(items, function(item) {
	            return $(item).index();
	        });

	        return indices;
	    }

	    function isUndefined(value) {
	        return (typeof value === "undefined");
	    }

	    function defaultHint(element) {
	        return element.clone()
	            .removeClass(DRAGGEDCLASS)
	            .addClass(kendo.format("{0} {1} {2}", SELECTED_STATE_CLASS, RESET, DRAG_CLUE_CLASS))
	            .width(element.width());
	    }

	    function defaultPlaceholder() {
	        return $('<li>').addClass(DROP_HINT_CLASS);
	    }

	    var ListBox = DataBoundWidget.extend({
	        init: function(element, options) {
	            var that = this;
	            Widget.fn.init.call(that, element, options);

	            that._wrapper();
	            that._list();
	            element = that.element.attr("multiple", "multiple").hide();

	            if (element[0] && !that.options.dataSource) {
	                that.options.dataTextField = that.options.dataTextField || "text";
	                that.options.dataValueField = that.options.dataValueField || "value";
	            }
	            that._templates();
	            that._selectable();
	            that._dataSource();
	            that._createToolbar();
	            that._createDraggable();
	            that._createNavigatable();
	        },

	        destroy: function() {
	            var that = this;

	            DataBoundWidget.fn.destroy.call(that);
	            if(!isNaN(that._listTabIndex)) {
	                that._getList().off();
	                that._listTabIndex = null;
	            }
	            that._unbindDataSource();
	            that._destroySelectable();
	            that._destroyToolbar();
	            that.wrapper.off(NS);
	            if(that._target){
	                that._target = null;
	            }
	            if(that._draggable) {
	                that._draggable.destroy();
	                that.placeholder = null;
	            }

	            kendo.destroy(that.element);
	        },

	        events: [
	            CHANGE,
	            DATABOUND,
	            ADD,
	            REMOVE,
	            REORDER,
	            DRAGSTART,
	            DRAG,
	            DROP,
	            DRAGEND
	        ],

	        options: {
	            name: "ListBox",
	            autoBind: true,
	            template: "",
	            dataTextField: "",
	            dataValueField: "",
	            selectable: "single",
	            draggable: null,
	            dropSources: [],
	            connectWith: "",
	            navigatable: true,
	            toolbar: {
	                position: RIGHT,
	                tools: []
	            },
	            messages: {
	                tools: {
	                    remove: "Delete",
	                    moveUp: "Move Up",
	                    moveDown: "Move Down",
	                    transferTo: "Transfer To",
	                    transferFrom: "Transfer From",
	                    transferAllTo: "Transfer All To",
	                    transferAllFrom: "Transfer All From"
	                }
	            }
	        },

	        add: function(dataItems) {
	            var that = this;
	            var items = dataItems && dataItems.length ? dataItems : [dataItems];
	            var itemsLength = items.length;
	            var i;

	            that._unbindDataSource();
	            for (i = 0; i < itemsLength; i++) {
	                that._addItem(items[i]);
	            }
	            that._bindDataSource();
	            that._syncElement();
	        },

	        _addItem: function (dataItem) {
	            var that = this;
	            var item = that.templates.itemTemplate({ item: dataItem, r: that.templates.itemContent });

	            $(item).attr(kendoAttr(UNIQUE_ID), dataItem.uid).appendTo(that._getList());
	            if (typeof dataItem === typeof "") {
	                that.dataSource._data.push(dataItem);
	            } else {
	                that.dataSource.add(dataItem);
	            }
	        },

	        _addItemAt: function(dataItem, index) {
	            var that = this;
	            var item = that.templates.itemTemplate({ item: dataItem, r: that.templates.itemContent });
	            that._unbindDataSource();
	            if (typeof dataItem === typeof "") {
	                that._insertElementAt(item, index);
	                that.dataSource._data.push(dataItem);
	            } else {
	                that._insertElementAt($(item).attr(kendoAttr(UNIQUE_ID), dataItem.uid), index);
	                that.dataSource.add(dataItem);
	            }
	            that._bindDataSource();
	            that._syncElement();
	        },

	        _insertElementAt: function(item, index) {
	            var that = this;
	            var list = that._getList();

	            if (index > 0) {
	                $(item).insertAfter(list.children().eq(index - 1));
	            } else {
	                $(list).prepend(item);
	            }
	        },

	        _createNavigatable: function() {
	            var that = this;
	            var options = that.options;

	            if(options.navigatable) {
	                that._getList().on(CLICK, ENABLED_ITEM_SELECTOR, proxy(that._click, that))
	                            .on(KEYDOWN, proxy(that._keyDown, that))
	                            .on(BLUR, proxy(that._blur, that));
	            }
	        },

	        _getTabIndex: function() {
	            var that = this;
	            var tabindex;

	            if(!isNaN(that._listTabIndex))
	            {
	                return that._listTabIndex;
	            }

	            tabindex = that.element.attr(TABINDEX);
	            that._listTabIndex = !isNaN(tabindex) ? tabindex : 0;

	            that.element.removeAttr(TABINDEX);

	            return that._listTabIndex;
	        },

	        _blur: function() {
	            if(this._target) {
	                this._target.removeClass(FOCUSED_CLASS);
	                this._getList().removeAttr("aria-activedescendant");
	            }
	            this._target = null;
	        },

	        _click: function(e) {
	            var that = this;
	            var target = $(e.currentTarget);
	            var oldTarget = that._target;

	            if (oldTarget) {
	                oldTarget.removeClass(FOCUSED_CLASS);
	            }

	            that._target = target;
	            target.addClass(FOCUSED_CLASS);
	            that._getList().attr("aria-activedescendant", target.attr("id"));

	            if (that._getList()[0] !== kendo._activeElement()) {
	                that.focus();
	            }
	        },

	        _getNavigatableItem: function(key) {
	            var that = this;
	            var current;

	            if (!that._target) {
	                current = that.items().filter(ENABLED_ITEM_SELECTOR).first();
	            }  else {
	                current = that._target;
	            }

	            if (key === keys.UP && that._target) {
	                current = that._target.prevAll(ENABLED_ITEM_SELECTOR).first();
	            }

	            if (key === keys.DOWN && that._target) {
	                current = that._target.nextAll(ENABLED_ITEM_SELECTOR).first();
	            }

	            return current.length ? current : null;
	        },

	        _scrollIntoView: function(item) {
	            if (!item) {
	                return;
	            }

	            if (item[0]) {
	                item = item[0];
	            }

	            var list = this._getList().parent()[0];
	            var itemOffsetTop = item.offsetTop;
	            var contentScrollTop = list.scrollTop;
	            var contentOffsetHeight = list.clientHeight;
	            var bottomDistance = itemOffsetTop + item.offsetHeight;

	            if (contentScrollTop > itemOffsetTop) {
	                contentScrollTop = itemOffsetTop;
	            } else if (bottomDistance > (contentScrollTop + contentOffsetHeight)) {
	                contentScrollTop = (bottomDistance - contentOffsetHeight);
	            }

	            list.scrollTop = contentScrollTop;
	        },

	        _keyDown: function(e) {
	            var that = this;
	            var key = e.keyCode;
	            var current = that._getNavigatableItem(key);
	            var shouldPreventDefault;

	            if(that._target) {
	                that._target.removeClass(FOCUSED_CLASS);
	            }

	            if(!(e.shiftKey && !e.ctrlKey && (key === keys.DOWN || key === keys.UP))) {
	                that._shiftSelecting = false;
	            }

	            if(key == keys.DELETE) {
	                that._executeCommand(REMOVE);
	                if(that._target) {
	                    that._target.removeClass(FOCUSED_CLASS);
	                    that._getList().removeAttr("aria-activedescendant");
	                    that._target = null;
	                }
	                shouldPreventDefault = true;
	            } else if(key === keys.DOWN || key === keys.UP) {
	                if(!current) {
	                    e.preventDefault();
	                    return;
	                }
	                if (e.shiftKey && !e.ctrlKey) {
	                    if (!that._shiftSelecting) {
	                        that.clearSelection();
	                        that._shiftSelecting = true;
	                    }
	                    if (that._target && current.hasClass("k-state-selected")) {
	                        that._target.removeClass(SELECTED_STATE_CLASS);
	                        that.trigger(CHANGE);
	                    } else if(that.options.selectable == "single") {
	                       that.select(current);
	                    } else {
	                       that.select(current.add(that._target));
	                    }
	                } else if (e.shiftKey && e.ctrlKey) {
	                    that._executeCommand(key === keys.DOWN ? MOVE_DOWN : MOVE_UP);
	                    that._scrollIntoView(that._target);
	                    e.preventDefault();
	                    return;
	                } else if (!e.shiftKey && !e.ctrlKey) {
	                    if(that.options.selectable === "multiple"){
	                        that.clearSelection();
	                    }
	                    that.select(current);
	                }

	                that._target = current;
	                if(that._target) {
	                    that._target.addClass(FOCUSED_CLASS);
	                    that._scrollIntoView(that._target);
	                    that._getList().attr("aria-activedescendant", that._target.attr("id"));
	                } else {
	                    that._getList().removeAttr("aria-activedescendant");
	                }
	                shouldPreventDefault = true;
	            } else if(key == keys.SPACEBAR) {
	                if(e.ctrlKey && that._target) {
	                   if(that._target.hasClass(SELECTED_STATE_CLASS)) {
	                       that._target.removeClass(SELECTED_STATE_CLASS);
	                       that.trigger(CHANGE);
	                   } else {
	                       that.select(that._target);
	                   }
	                } else {
	                   that.clearSelection();
	                   that.select(that._target);
	                }
	                shouldPreventDefault = true;
	            } else if(e.ctrlKey && key == keys.RIGHT) {
	                if(e.shiftKey) {
	                   that._executeCommand(TRANSFER_ALL_TO);
	                } else {
	                   that._executeCommand(TRANSFER_TO);
	                }
	                that._target = that.select().length ? that.select(): null;
	                shouldPreventDefault = true;
	            } else if(e.ctrlKey && key == keys.LEFT) {
	                if(e.shiftKey) {
	                   that._executeCommand(TRANSFER_ALL_FROM);
	                } else {
	                   that._executeCommand(TRANSFER_FROM);
	                }
	                shouldPreventDefault = true;
	            }

	            if(shouldPreventDefault) {
	                e.preventDefault();
	            }
	        },

	        focus: function() {
	            this._getList().focus();
	        },

	        _createDraggable: function() {
	            var that = this;
	            var draggable = that.options.draggable;
	            var hint;

	            if(draggable) {
	                hint = draggable.hint;
	                if(!that.options.selectable) {
	                    throw new Error("Dragging requires selection to be enabled");
	                }

	                if(!hint) {
	                    hint = defaultHint;
	                }

	                that._draggable = new kendo.ui.Draggable(that.wrapper, {
	                    filter: draggable.filter ? draggable.filter : DEFAULT_FILTER,
	                    hint: kendo.isFunction(hint) ? hint : $(hint),
	                    dragstart: proxy(that._dragstart, that),
	                    dragcancel: proxy(that._clear, that),
	                    drag: proxy(that._drag, that),
	                    dragend: proxy(that._dragend, that)
	                });
	            }
	        },

	        _dragstart: function(e) {
	            var that = this;
	            var draggedElement = that.draggedElement = e.currentTarget;
	            var placeholder = that.options.draggable.placeholder;
	            var dataItem = that.dataItem(draggedElement);
	            var eventData = { dataItems: dataItem, items: $(draggedElement), draggableEvent: e };

	            if(that.options.draggable.enabled === false) {
	                e.preventDefault();
	                return;
	            }

	            if(!placeholder) {
	                placeholder = defaultPlaceholder;
	            }

	            that.placeholder = kendo.isFunction(placeholder) ? $(placeholder.call(that, draggedElement)) : $(placeholder);

	            if(draggedElement.is(DOT + DISABLED_STATE_CLASS)) {
	                e.preventDefault();
	            } else {
	                if(that.trigger(DRAGSTART, eventData)) {
	                    e.preventDefault();
	                } else {
	                    that.clearSelection();
	                    that.select(draggedElement);
	                    draggedElement.addClass(DRAGGEDCLASS);
	                }
	            }
	        },

	        _clear: function() {
	            this.draggedElement.removeClass(DRAGGEDCLASS);
	            this.placeholder.remove();
	        },

	        _findElementUnderCursor: function(e) {
	            var elementUnderCursor = kendo.elementUnderCursor(e);
	            var draggable = e.sender;

	            if($.contains(draggable.hint[0], elementUnderCursor) || draggable.hint[0] === elementUnderCursor) {
	                draggable.hint.hide();
	                elementUnderCursor = kendo.elementUnderCursor(e);
	                draggable.hint.show();
	            }

	            return elementUnderCursor;
	        },

	        _findTarget: function(e) {
	            var that = this;
	            var element = that._findElementUnderCursor(e);
	            var elementNode = $(element);
	            var list = that._getList();
	            var items;
	            var node;

	            if($.contains(list[0], element)) {
	                items = that.items();
	                element = elementNode.is("li") ? element: elementNode.closest("li")[0];
	                node = items.filter(element)[0] || items.has(element)[0];
	                if(node) {
	                    node = $(node);
	                    return !node.hasClass(DISABLED_STATE_CLASS) ? { element: node, listBox: that } : null;
	                } else {
	                    return null;
	                }
	            } else if (list[0] == element || list.parent()[0] == element) {
	                return { element: $(list), appendToBottom: true, listBox: that };
	            } else {
	                return that._searchConnectedListBox(elementNode);
	            }
	        },

	        _getElementCenter: function(element) {
	            var center = element.length ? kendo.getOffset(element) : null;
	            if(center) {
	                center.top += outerHeight(element) / 2;
	                center.left += outerWidth(element) / 2;
	            }

	            return center;
	        },

	        _searchConnectedListBox: function(element) {
	            var connectedListBox;
	            var items;
	            var node;
	            var originalElement = element;
	            var closestContainer;

	            if(element.hasClass("k-list-scroller k-selectable")) {
	                closestContainer = element;
	            } else {
	                closestContainer = element.closest(".k-list-scroller.k-selectable");
	            }

	            if(closestContainer.length) {
	                connectedListBox = closestContainer.parent().find("[data-role='listbox']").getKendoListBox();
	            } else {
	                return null;
	            }

	            if(connectedListBox && $.inArray(this.element[0].id, connectedListBox.options.dropSources) !== -1) {
	                items = connectedListBox.items();
	                element = element.is("li") ? element[0] : element.closest("li")[0];
	                node = items.filter(element)[0] || items.has(element)[0];
	                if(node) {
	                    node = $(node);
	                    return !node.hasClass(DISABLED_STATE_CLASS) ? { element: node, listBox: connectedListBox } : null;
	                } else if(!items.length ||
	                            originalElement.hasClass("k-list-scroller k-selectable") ||
	                            originalElement.hasClass("k-reset k-list")) {
	                    return { element: connectedListBox._getList(), listBox: connectedListBox, appendToBottom: true };
	                } else {
	                    return null;
	                }
	            }
	            return null;
	        },

	        _drag: function(e) {
	            var that = this;
	            var draggedElement = that.draggedElement;
	            var target = that._findTarget(e);
	            var cursorOffset = { left: e.x.location, top: e.y.location };
	            var dataItem = that.dataItem(draggedElement);
	            var eventData = { dataItems: [dataItem], items: $(draggedElement), draggableEvent: e };
	            var targetCenter;
	            var offsetDelta;
	            var direction;

	            if(that.trigger(DRAG, eventData)) {
	                e.preventDefault();
	                return;
	            }

	            if(target) {
	                targetCenter = this._getElementCenter(target.element);

	                offsetDelta = {
	                    left: Math.round(cursorOffset.left - targetCenter.left),
	                    top: Math.round(cursorOffset.top - targetCenter.top)
	                };

	                if(target.appendToBottom) {
	                    that._movePlaceholder(target, null , draggedElement);
	                    return;
	                }

	                if(offsetDelta.top < 0) {
	                    direction = "prev";
	                } else if(offsetDelta.top > 0) {
	                    direction = "next";
	                }

	                if(direction) {
	                    if(target.element[0] != that.placeholder[0]) {
	                        that._movePlaceholder(target, direction, draggedElement);
	                    }
	                }
	             }
	             else if(that.placeholder.parent().length){
	                that.placeholder.remove();
	             }
	        },

	        _movePlaceholder: function(target, direction, draggedElement) {
	            var that = this;
	            var placeholder = that.placeholder;
	            var draggableOptions = target.listBox.options.draggable;

	            if(placeholder.parent().length) {
	                that.placeholder.remove();
	                if(draggableOptions && draggableOptions.placeholder){
	                    that.placeholder = kendo.isFunction(draggableOptions.placeholder) ? $(draggableOptions.placeholder.call(that, draggedElement)) : $(draggableOptions.placeholder);
	                } else {
	                    that.placeholder = $(defaultPlaceholder.call(that, draggedElement));
	                }
	            }

	            if (!direction) {
	                target.element.append(that.placeholder);
	            } else if (direction === "prev") {
	                target.element.before(that.placeholder);
	            } else if (direction === "next") {
	                target.element.after(that.placeholder);
	            }
	        },

	        _dragend: function(e) {
	            var that = this;
	            var draggedItem = that.draggedElement;
	            var items = that.items();
	            var placeholderIndex = items.not(that.draggedElement).index(that.placeholder);
	            var draggedIndex = items.not(that.placeholder).index(that.draggedElement);
	            var dataItem = that.dataItem(draggedItem);
	            var eventData = { dataItems: [dataItem], items: $(draggedItem) };
	            var connectedListBox = that.placeholder.closest(".k-widget.k-listbox").find("[data-role='listbox']").getKendoListBox();

	            if(that.trigger(DROP, extend({}, eventData, { draggableEvent: e }))) {
	                e.preventDefault();
	                this._clear();
	                return;
	            }

	            if(placeholderIndex >= 0) {
	                if(placeholderIndex !== draggedIndex && !that.trigger(REORDER, extend({}, eventData, { offset: placeholderIndex - draggedIndex }))) {
	                    draggedItem.removeClass(DRAGGEDCLASS);
	                    that.reorder(draggedItem, placeholderIndex);
	                }
	            } else if(connectedListBox) {
	                if(!that.trigger(REMOVE, eventData)) {
	                    that.remove($(draggedItem));
	                }

	                if(!connectedListBox.trigger(ADD, eventData)) {
	                    connectedListBox._addItemAt(dataItem, connectedListBox.items().index(that.placeholder));
	                }
	            }

	            that._clear();
	            that._draggable.dropped = true;

	            that.trigger(DRAGEND, extend({}, eventData, { draggableEvent: e }));
	        },

	        reorder: function(item, index) {
	            var that = this;
	            var dataSource = that.dataSource;
	            var dataItem = that.dataItem(item);
	            var dataItemAtIndex = dataSource.at(index);
	            var itemAtIndex = that.items()[index];
	            var listItem = $(item);

	            if (dataItem && itemAtIndex && dataItemAtIndex) {
	                that._removeElement(listItem);
	                that._insertElementAt(listItem, index);
	                that._updateToolbar();
	            }
	        },

	        remove: function (items) {
	            var that = this;
	            var listItems = that._getItems(items);
	            var itemsLength = listItems.length;
	            var i;

	            that._unbindDataSource();
	            for (i = 0; i < itemsLength; i++) {
	                that._removeItem($(listItems[i]));
	            }
	            that._bindDataSource();
	            that._syncElement();
	            that._updateToolbar();
	            that._updateAllToolbars();
	        },

	        _removeItem: function (item) {
	            var that = this;
	            var dataSource = that.dataSource;
	            var dataItem = that.dataItem(item);
	            if (!dataItem || !dataSource) {
	                return;
	            }
	            if (typeof dataItem === typeof "") {
	                var data = dataSource._data;
	                for (var i = 0; i < data.length; i++) {
	                    if (dataItem === data[i]) {
	                        data[i] = data[data.length - 1];
	                        data.pop();
	                        break;
	                    }
	                }
	            } else {
	                dataSource.remove(dataItem);
	            }
	            that._removeElement(item);
	        },

	        _removeElement: function(item) {
	            kendo.destroy(item);
	            $(item).off().remove();
	        },

	        dataItem: function (element) {
	            var uniqueIdAttr = kendoAttr(UNIQUE_ID);
	            var uid = $(element).attr(uniqueIdAttr) || $(element).closest("[" + uniqueIdAttr + "]").attr(uniqueIdAttr);
	            if (uid) {
	                return this.dataSource.getByUid(uid);
	            }
	            else {
	                return $(element).html();
	            }
	        },

	        _dataItems: function (items) {
	            var dataItems = [];
	            var listItems = $(items);
	            var itemsLength = listItems.length;
	            var i;

	            for (i = 0; i < itemsLength; i++) {
	                dataItems.push(this.dataItem(listItems.eq(i)));
	            }

	            return dataItems;
	        },

	        items: function() {
	            var list = this._getList();
	            return list.children();
	        },

	        select: function(items) {
	            var that = this;
	            var selectable = that.selectable;
	            var enabledItems;

	            if (isUndefined(items)) {
	                return selectable.value();
	            }

	            enabledItems = that.items().filter(items).filter(ENABLED_ITEMS_SELECTOR);

	            if (!selectable.options.multiple) {
	                selectable.clear();
	                enabledItems = enabledItems.first();
	            }

	            return selectable.value(enabledItems);
	        },

	        clearSelection: function() {
	            var that = this;
	            var selectable = that.selectable;

	            if (selectable) {
	                selectable.clear();
	            }
	        },

	        enable: function(items, enable) {
	            var that = this;
	            var enabled = isUndefined(enable) ? true : !!enable;
	            var listItems = that._getItems(items);
	            var itemsLength = listItems.length;
	            var i;

	            for (i = 0; i < itemsLength; i++) {
	                that._enableItem($(listItems[i]), enabled);
	            }

	            that._updateAllToolbars();
	        },

	        _enableItem: function(item, enable) {
	            var that = this;
	            var dataItem = that.dataItem(item);

	            if (dataItem) {
	                if (enable) {
	                    $(item).removeClass(DISABLED_STATE_CLASS);
	                } else {
	                    $(item)
	                        .addClass(DISABLED_STATE_CLASS)
	                        .removeClass(SELECTED_STATE_CLASS);
	                }
	            }
	        },

	        setDataSource: function(dataSource) {
	            var that = this;

	            that.options.dataSource = dataSource;

	            that._dataSource();
	        },

	        _dataSource: function() {
	            var that = this;
	            var options = that.options;
	            var dataSource = options.dataSource || {};

	            dataSource = $.isArray(dataSource) ? { data: dataSource } : dataSource;
	            dataSource.select = that.element;
	            dataSource.fields = [
	                { field: options.dataTextField },
	                { field: options.dataValueField }];

	            that._unbindDataSource();
	            that.dataSource = DataSource.create(dataSource);
	            that._bindDataSource();

	            if (that.options.autoBind) {
	                that.dataSource.fetch();
	            }
	        },

	        _bindDataSource: function() {
	            var that = this;
	            var dataSource = that.dataSource;

	            that._dataChangeHandler = proxy(that.refresh, that);

	            if (dataSource) {
	                dataSource.bind(CHANGE, that._dataChangeHandler);
	            }
	        },

	        _unbindDataSource: function() {
	            var that = this;
	            var dataSource = that.dataSource;

	            if (dataSource) {
	                dataSource.unbind(CHANGE, that._dataChangeHandler);
	            }
	        },

	        _wrapper: function () {
	            var that = this,
	                element = that.element,
	                wrapper = element.parent("div.k-listbox");

	            if (!wrapper[0]) {
	                wrapper = element.wrap('<div class="k-widget k-listbox" deselectable="on" />').parent();
	                wrapper[0].style.cssText = element[0].style.cssText;
	                wrapper[0].title = element[0].title;
	                $('<div class="k-list-scroller" />').insertBefore(element);
	            }

	            that.wrapper = wrapper.addClass(element[0].className).css("display", "");
	            that._innerWrapper = $(wrapper[0].firstChild);
	        },

	        _list: function () {
	            var that = this;
	            $("<ul class='" + LIST_CLASS + "' role='listbox'></ul>").appendTo(that._innerWrapper);
	            if(that.options.navigatable) {
	                that._getList().attr(TABINDEX, that._getTabIndex());
	            }
	        },

	        _templates: function () {
	            var that = this;
	            var options = this.options;
	            var template;

	            if (options.template && typeof options.template == "string") {
	                template = kendo.template(options.template);
	            } else if (!options.template) {
	                template = kendo.template('${' + kendo.expr(options.dataTextField, "data") + "}", { useWithBlock: false });
	            } else {
	                template = options.template;
	            }

	            that.templates = {
	                itemTemplate: kendo.template("# var item = data.item, r = data.r; # <li class='k-item' role='option' aria-selected='false'>#=r(item)#</li>", { useWithBlock: false }),
	                itemContent: template,
	                toolbar: "<div class='" + TOOLBAR_CLASS + "'></div>"
	            };
	        },

	        refresh: function() {
	            var that = this;
	            var view = that.dataSource.view();
	            var template = that.templates.itemTemplate;
	            var html = "";

	            for (var idx = 0; idx < view.length; idx++) {
	                html += template({ item: view[idx], r: that.templates.itemContent });
	            }
	            that._getList().html(html);
	            that._setItemIds();
	            that._createToolbar();
	            that._syncElement();
	            that._updateToolbar();
	            that._updateAllToolbars();
	            that.trigger(DATABOUND);
	        },

	        _syncElement: function () {
	            var options = "";
	            var view = this.dataSource.view();
	            for (var idx = 0; idx < view.length; idx++) {
	                options += this._option(view[idx][this.options.dataValueField] || view[idx], view[idx][this.options.dataTextField] || view[idx], true);
	            }
	            this.element.html(options);
	        },

	        _option: function (dataValue, dataText) {
	            var option = "<option";

	            if (dataValue !== undefined) {
	                dataValue += "";

	                if (dataValue.indexOf('"') !== -1) {
	                    dataValue = dataValue.replace(/"/g, "&quot;");
	                }

	                option += ' value="' + dataValue + '"';
	            }
	            option += " selected>";

	            if (dataText !== undefined) {
	                option += kendo.htmlEncode(dataText);
	            }

	            return option += "</option>";
	        },

	        _setItemIds: function() {
	            var that = this;
	            var items = that.items();
	            var view = that.dataSource.view();
	            var viewLength = view.length;
	            var i;

	            for (i = 0; i < viewLength; i++) {
	                items.eq(i).attr(kendoAttr(UNIQUE_ID), view[i].uid).attr("id", view[i].uid);
	            }
	        },

	        _selectable: function() {
	            var that = this;
	            var selectable = that.options.selectable;
	            var selectableOptions = Selectable.parseOptions(selectable);

	            if (selectableOptions.multiple) {
	                that.element.attr("aria-multiselectable", "true");
	            }

	            that.selectable = new Selectable(that._innerWrapper, {
	                aria: true,
	                multiple: selectableOptions.multiple,
	                filter: ENABLED_ITEM_SELECTOR,
	                change: proxy(that._onSelect, that)
	            });
	        },

	        _onSelect: function() {
	            var that = this;

	            that._updateToolbar();
	            that._updateAllToolbars();
	            that.trigger(CHANGE);
	        },

	        _destroySelectable: function() {
	            var that = this;

	            if (that.selectable) {
	                that.selectable.destroy();
	                that.selectable = null;
	            }
	        },

	        _getList: function() {
	            return this.wrapper.find(LIST_SELECTOR);
	        },

	        _getItems: function(items) {
	            return this.items().filter(items);
	        },

	        _createToolbar: function () {
	            var that = this;
	            var toolbarOptions = that.options.toolbar;
	            var position = toolbarOptions.position || RIGHT;
	            var toolbarInsertion = position === BOTTOM ? "insertAfter" : "insertBefore";
	            var tools = toolbarOptions.tools || [];
	            var messages = that.options.messages;

	            that._destroyToolbar();
	            that.wrapper.removeClass(TOOLBAR_POSITION_CLASS_NAMES.join(SPACE));

	            if (tools.length && tools.length > 0) {
	                var toolbarElement = $(that.templates.toolbar)[toolbarInsertion](that._innerWrapper);
	                that.toolbar = new ToolBar(toolbarElement, extend({}, toolbarOptions, { listBox: that, messages: messages }));
	                that.wrapper.addClass(TOOLBAR_CLASS + DASH + position);
	            }
	        },

	        _destroyToolbar: function() {
	            var that = this;

	            if (that.toolbar) {
	                that.toolbar.destroy();
	                that.toolbar = null;
	            }
	        },

	        _executeCommand: function(commandName) {
	            var that = this;
	            var command = CommandFactory.current.create(commandName, { listBox: that });

	            if (command) {
	                command.execute();
	                that._updateToolbar();
	                that._updateAllToolbars();
	            }
	        },

	        _updateToolbar: function() {
	            var toolbar = this.toolbar;

	            if (toolbar) {
	                toolbar._updateToolStates();
	            }
	        },

	        _updateAllToolbars: function() {
	            var listBoxElements = $("select[data-role='listbox']");
	            var elementsLength = listBoxElements.length;
	            var listBox;
	            var i;

	            for (i = 0; i < elementsLength; i++) {
	                listBox = $(listBoxElements[i]).data(KENDO_LISTBOX);

	                if (listBox) {
	                    listBox._updateToolbar();
	                }
	            }
	        }
	    });

	    kendo.ui.plugin(ListBox);

	    var CommandFactory = Class.extend({
	        init: function() {
	            this._commands = [];
	        },

	        register: function(commandName, commandType) {
	            this._commands.push({
	                commandName: commandName,
	                commandType: commandType
	            });
	        },

	        create: function(commandName, options) {
	            var commands = this._commands;
	            var itemsLength = commands.length;
	            var name = commandName ? commandName.toLowerCase() : "";
	            var match;
	            var command;
	            var i;

	            for (i = 0; i < itemsLength; i++) {
	                command = commands[i];

	                if (command.commandName.toLowerCase() === name) {
	                    match = command;
	                    break;
	                }
	            }

	            if (match) {
	                return new match.commandType(options);
	            }
	        }
	    });
	    CommandFactory.current = new CommandFactory();

	    var ListBoxCommand = Class.extend({
	        init: function(options) {
	            var that = this;

	            that.options = extend({}, that.options, options);
	            that.listBox = that.options.listBox;
	        },

	        options: {
	            listBox: null
	        },

	        getItems: function() {
	            return $(this.listBox.select());
	        },

	        execute: noop,
	        canExecute: noop
	    });

	    var RemoveItemsCommand = ListBoxCommand.extend({
	        execute: function() {
	            var that = this;
	            var listBox = that.listBox;
	            var items = that.getItems();

	            if (!listBox.trigger(REMOVE, { dataItems: listBox._dataItems(items), items: items })) {
	                listBox.remove(items);
	            }
	        },

	        canExecute: function() {
	            return this.listBox.select().length > 0;
	        }
	    });
	    CommandFactory.current.register(REMOVE, RemoveItemsCommand);

	    var MoveItemsCommand = ListBoxCommand.extend({
	        execute: function() {
	            var that = this;

	            if (that.canExecute()) {
	                that.moveItems();
	            }
	        },

	        canExecute: noop,

	        moveItems: function() {
	            var that = this;
	            var listBox = that.listBox;
	            var options = that.options;
	            var items = that.getItems();
	            var offset = options.offset;
	            var indecesInDom = getSortedDomIndices(items);
	            var movedItems = $.makeArray(items.sort(that.itemComparer));
	            var moveAction = options.moveAction;
	            var movedItem;

	            if (!listBox.trigger(REORDER, { dataItems: listBox._dataItems(movedItems), items: $(movedItems), offset: offset })) {
	                while (movedItems.length > 0 && indecesInDom.length > 0) {
	                    movedItem = movedItems[moveAction]();

	                    listBox.reorder(movedItem, indecesInDom[moveAction]() + offset);
	                }
	            }
	        },

	        options: {
	            offset: 0,
	            moveAction: "pop"
	        },

	        itemComparer: function(item1, item2) {
	            var indexItem1 = $(item1).index();
	            var indexItem2 = $(item2).index();

	            if (indexItem1 === indexItem2) {
	                return 0;
	            } else {
	                return (indexItem1 > indexItem2 ? 1 : (-1));
	            }
	        }
	    });

	    var MoveUpItemsCommand = MoveItemsCommand.extend({
	        options: {
	            offset: MOVE_UP_OFFSET,
	            moveAction: "shift"
	        },

	        canExecute: function() {
	            var items = this.getItems();
	            var domIndices = getSortedDomIndices(items);

	            return (domIndices.length > 0 && domIndices[0] > 0);
	        }
	    });
	    CommandFactory.current.register(MOVE_UP, MoveUpItemsCommand);

	    var MoveDownItemsCommand = MoveItemsCommand.extend({
	        options: {
	            offset: MOVE_DOWN_OFFSET,
	            moveAction: "pop"
	        },

	        canExecute: function() {
	            var that = this;
	            var items = that.getItems();
	            var domIndices = getSortedDomIndices(items);

	            return (domIndices.length > 0 && $(domIndices).last()[0] < (that.listBox.items().length - 1));
	        }
	    });
	    CommandFactory.current.register(MOVE_DOWN, MoveDownItemsCommand);

	    var TransferItemsCommand = ListBoxCommand.extend({
	        options: {
	            filter: ENABLED_ITEM_SELECTOR
	        },

	        execute: function() {
	            var that = this;
	            var sourceListBox = that.getSourceListBox();
	            var items = that.getItems().filter(that.options.filter);
	            var dataItems = sourceListBox ? sourceListBox._dataItems(items) : [];
	            var destinationListBox = that.getDestinationListBox();
	            var updatedSelection = that.getUpdatedSelection(items);

	            if (destinationListBox && items.length > 0) {
	                if (!destinationListBox.trigger(ADD, { dataItems: dataItems, items: items })) {
	                    destinationListBox.add(dataItems);
	                }

	                if (!sourceListBox.trigger(REMOVE, { dataItems: dataItems, items: items })) {
	                    sourceListBox.remove(items);
	                    that.updateSelection(updatedSelection);
	                }
	            }
	        },

	        getUpdatedSelection: function(items) {
	            var that = this;
	            var itemFilter = that.options.filter;
	            var sourceListBox = that.getSourceListBox();
	            var lastEnabledItem = sourceListBox ? sourceListBox.items().filter(itemFilter).last() : null;
	            var containsLastItem = $(items).filter(lastEnabledItem).length > 0;
	            var itemToSelect = containsLastItem ? $(items).prevAll(itemFilter)[0] : $(items).nextAll(itemFilter)[0];

	            if ($(items).length === 1 && itemToSelect) {
	                return itemToSelect;
	            } else {
	                return null;
	            }
	        },

	        updateSelection: function(item) {
	            var sourceListBox = this.getSourceListBox();

	            if (sourceListBox && item) {
	                $(sourceListBox.select($(item)));
	                sourceListBox._scrollIntoView(item);
	            }
	        },

	        getSourceListBox: noop,
	        getDestinationListBox: noop
	    });

	    var TransferItemsToCommand = TransferItemsCommand.extend({
	        canExecute: function() {
	            var sourceListBox = this.getSourceListBox();

	            return (sourceListBox ? sourceListBox.select().length > 0 : false);
	        },

	        getSourceListBox: function() {
	            return this.listBox;
	        },

	        getDestinationListBox: function() {
	            var sourceListBox = this.getSourceListBox();
	            return sourceListBox && sourceListBox.options.connectWith ? $(HASH + sourceListBox.options.connectWith).data(KENDO_LISTBOX) : null;
	        },

	        getItems: function() {
	            var sourceListBox = this.getSourceListBox();
	            return sourceListBox ? $(sourceListBox.select()) : $();
	        }
	    });
	    CommandFactory.current.register(TRANSFER_TO, TransferItemsToCommand);

	    var TransferItemsFromCommand = TransferItemsCommand.extend({
	        canExecute: function() {
	            var sourceListBox = this.getSourceListBox();

	            return (sourceListBox ? sourceListBox.select().length > 0 : false);
	        },

	        getSourceListBox: function() {
	            var destinationListBox = this.getDestinationListBox();
	            return (destinationListBox && destinationListBox.options.connectWith) ? $(HASH + destinationListBox.options.connectWith).data(KENDO_LISTBOX) : null;
	        },

	        getDestinationListBox: function() {
	            return this.listBox;
	        },

	        getItems: function() {
	            var sourceListBox = this.getSourceListBox();
	            return sourceListBox ? $(sourceListBox.select()) : $();
	        }
	    });
	    CommandFactory.current.register(TRANSFER_FROM, TransferItemsFromCommand);

	    var TransferAllItemsToCommand = TransferItemsToCommand.extend({
	        canExecute: function() {
	            var sourceListBox = this.getSourceListBox();

	            return (sourceListBox ? sourceListBox.items().filter(ENABLED_ITEM_SELECTOR).length > 0 : false);
	        },

	        getItems: function() {
	            var sourceListBox = this.getSourceListBox();
	            return sourceListBox ? sourceListBox.items() : $();
	        },

	        getUpdatedSelection: noop,
	        updateSelection: noop
	    });
	    CommandFactory.current.register(TRANSFER_ALL_TO, TransferAllItemsToCommand);

	    var TransferAllItemsFromCommand = TransferItemsFromCommand.extend({
	        canExecute: function() {
	            var sourceListBox = this.getSourceListBox();

	            return (sourceListBox ? sourceListBox.items().filter(ENABLED_ITEM_SELECTOR).length > 0 : false);
	        },

	        getItems: function() {
	            var sourceListBox = this.getSourceListBox();
	            return sourceListBox ? sourceListBox.items() : $();
	        },

	        getUpdatedSelection: noop,
	        updateSelection: noop
	    });
	    CommandFactory.current.register(TRANSFER_ALL_FROM, TransferAllItemsFromCommand);

	    var ToolBar = Class.extend({
	        init: function(element, options) {
	            var that = this;

	            that.element = $(element).addClass(TOOLBAR_CLASS);
	            that.options = extend({}, that.options, options);
	            that.listBox = that.options.listBox;

	            that._initTemplates();
	            that._createTools();
	            that._updateToolStates();
	            that._attachEventHandlers();
	        },

	        destroy: function() {
	            var that = this;

	            that._detachEventHandlers();
	            kendo.destroy(that.element);
	            that.element.remove();
	            that.element = null;
	        },

	        options: {
	            position: RIGHT,
	            tools: []
	        },

	        _initTemplates: function() {
	            this.templates = {
	                tool: kendoTemplate(
	                    "<li>" +
	                        "<a href='\\\\#' class='k-button k-button-icon k-tool' data-command='#= command #' title='#= text #' aria-label='#= text #' role='button'>" +
	                            "<span class='k-icon #= iconClass #'></span>" +
	                        "</a>" +
	                    "</li>")
	            };
	        },

	        _createTools: function() {
	            var that = this;
	            var tools = that.options.tools;
	            var toolsLength = tools.length;
	            var toolsMessages = that.options.messages.tools;
	            var toolList = that._createToolList();
	            var tool;
	            var i;

	            for (i = 0; i < toolsLength; i++) {
	                tool = extend({}, ToolBar.defaultTools[tools[i]], { text: toolsMessages[tools[i]] });

	                if (tool) {
	                    toolList.append($(that.templates.tool(tool)));
	                }
	            }

	            that.element.append(toolList);
	        },

	        _createToolList: function() {
	            return $("<ul class='k-reset' />");
	        },

	        _attachEventHandlers: function() {
	            var that = this;

	            that.element.on(CLICK, TOOL_SELECTOR, proxy(that._onToolClick, that));
	        },

	        _detachEventHandlers: function() {
	            this.element.off(NS).find("*").off(NS);
	        },

	        _onToolClick: function(e) {
	            e.preventDefault();

	            this._executeToolCommand($(e.currentTarget).data(COMMAND));
	        },

	        _executeToolCommand: function(command) {
	            var that = this;
	            var listBox = that.listBox;

	            if (listBox) {
	                listBox._executeCommand(command);
	            }
	        },

	        _updateToolStates: function() {
	            var that = this;
	            var tools = that.options.tools;
	            var toolsLength = tools.length;
	            var i;

	            for (i = 0; i < toolsLength; i++) {
	                that._updateToolState(tools[i]);
	            }
	        },

	        _updateToolState: function(toolName) {
	            var that = this;
	            var command = CommandFactory.current.create(toolName, { listBox: that.listBox });
	            var toolElement = that.element.find("[data-command='" + toolName + "']")[0];

	            if (toolElement && command && command.canExecute) {
	                if (command.canExecute()) {
	                    $(toolElement).removeClass(DISABLED_STATE_CLASS);
	                } else {
	                    $(toolElement).addClass(DISABLED_STATE_CLASS);
	                }
	            }
	        }
	    });

	    ToolBar.defaultTools = {
	        remove: {
	            command: REMOVE,
	            iconClass: "k-i-x"
	        },
	        moveUp: {
	            command: MOVE_UP,
	            iconClass: "k-i-arrow-60-up"
	        },
	        moveDown: {
	            command: MOVE_DOWN,
	            iconClass: "k-i-arrow-60-down"
	        },
	        transferTo: {
	            command: TRANSFER_TO,
	            iconClass: "k-i-arrow-60-right"
	        },
	        transferFrom: {
	            command: TRANSFER_FROM,
	            iconClass: "k-i-arrow-60-left"
	        },
	        transferAllTo: {
	            command: TRANSFER_ALL_TO,
	            iconClass: "k-i-arrow-double-60-right"
	        },
	        transferAllFrom: {
	            command: TRANSFER_ALL_FROM,
	            iconClass: "k-i-arrow-double-60-left"
	        }
	    };

	    extend(ListBox, {
	        ToolBar: ToolBar
	    });

	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(422));


/***/ }),

/***/ 461:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(6);

/***/ }),

/***/ 462:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(17);

/***/ })

/******/ });

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(463);


/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 427:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(4);

/***/ }),

/***/ 462:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(17);

/***/ }),

/***/ 463:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(427), __webpack_require__(464), __webpack_require__(462) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "listview",
	    name: "ListView",
	    category: "web",
	    description: "The ListView widget offers rich support for interacting with data.",
	    depends: [ "data" ],
	    features: [ {
	        id: "listview-editing",
	        name: "Editing",
	        description: "Support for record editing",
	        depends: [ "editable" ]
	    }, {
	        id: "listview-selection",
	        name: "Selection",
	        description: "Support for selection",
	        depends: [ "selectable" ]
	    } ]
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        CHANGE = "change",
	        CANCEL = "cancel",
	        DATABOUND = "dataBound",
	        DATABINDING = "dataBinding",
	        Widget = kendo.ui.Widget,
	        keys = kendo.keys,
	        FOCUSSELECTOR =  ">*:not(.k-loading-mask)",
	        PROGRESS = "progress",
	        ERROR = "error",
	        FOCUSED = "k-state-focused",
	        SELECTED = "k-state-selected",
	        KEDITITEM = "k-edit-item",
	        EDIT = "edit",
	        REMOVE = "remove",
	        SAVE = "save",
	        CLICK = "click",
	        NS = ".kendoListView",
	        proxy = $.proxy,
	        activeElement = kendo._activeElement,
	        progress = kendo.ui.progress,
	        DataSource = kendo.data.DataSource;

	    var ListView = kendo.ui.DataBoundWidget.extend( {
	        init: function(element, options) {
	            var that = this;

	            options = $.isArray(options) ? { dataSource: options } : options;

	            Widget.fn.init.call(that, element, options);

	            options = that.options;

	            that.wrapper = element = that.element;

	            if (element[0].id) {
	                that._itemId = element[0].id + "_lv_active";
	            }

	            that._element();

	            that._dataSource();

	            that._templates();

	            that._navigatable();

	            that._selectable();

	            that._pageable();

	            that._crudHandlers();

	            if (that.options.autoBind){
	                that.dataSource.fetch();
	            }

	            kendo.notify(that);
	        },

	        events: [
	            CHANGE,
	            CANCEL,
	            DATABINDING,
	            DATABOUND,
	            EDIT,
	            REMOVE,
	            SAVE
	        ],

	        options: {
	            name: "ListView",
	            autoBind: true,
	            selectable: false,
	            navigatable: false,
	            template: "",
	            altTemplate: "",
	            editTemplate: ""
	        },

	        setOptions: function(options) {
	            Widget.fn.setOptions.call(this, options);

	            this._templates();

	            if (this.selectable) {
	                this.selectable.destroy();
	                this.selectable = null;
	            }

	            this._selectable();
	        },

	        _templates: function() {
	            var options = this.options;

	            this.template = kendo.template(options.template || "");
	            this.altTemplate = kendo.template(options.altTemplate || options.template);
	            this.editTemplate = kendo.template(options.editTemplate || "");
	        },

	        _item: function(action) {
	            return this.element.children()[action]();
	        },

	        items: function() {
	            return this.element.children();
	        },

	        dataItem: function(element) {
	            var attr = kendo.attr("uid");
	            var uid = $(element).closest("[" + attr + "]").attr(attr);

	            return this.dataSource.getByUid(uid);
	        },

	        setDataSource: function(dataSource) {
	            this.options.dataSource = dataSource;
	            this._dataSource();

	            if (this.options.autoBind) {
	                dataSource.fetch();
	            }
	        },

	        _unbindDataSource: function() {
	            var that = this;

	            that.dataSource.unbind(CHANGE, that._refreshHandler)
	                            .unbind(PROGRESS, that._progressHandler)
	                            .unbind(ERROR, that._errorHandler);
	        },

	        _dataSource: function() {
	            var that = this;

	            if (that.dataSource && that._refreshHandler) {
	                that._unbindDataSource();
	            } else {
	                that._refreshHandler = proxy(that.refresh, that);
	                that._progressHandler = proxy(that._progress, that);
	                that._errorHandler = proxy(that._error, that);
	            }

	            that.dataSource = DataSource.create(that.options.dataSource)
	                                .bind(CHANGE, that._refreshHandler)
	                                .bind(PROGRESS, that._progressHandler)
	                                .bind(ERROR, that._errorHandler);
	        },

	        _progress: function() {
	            progress(this.element, true);
	        },

	        _error: function() {
	            progress(this.element, false);
	        },

	        _element: function() {
	            this.element.addClass("k-widget k-listview").attr("role", "listbox");
	        },

	        refresh: function(e) {
	            var that = this,
	                view = that.dataSource.view(),
	                data,
	                items,
	                item,
	                html = "",
	                idx,
	                length,
	                template = that.template,
	                altTemplate = that.altTemplate,
	                active = activeElement();

	            e = e || {};

	            if (e.action === "itemchange") {
	                if (!that._hasBindingTarget() && !that.editable) {
	                    data = e.items[0];
	                    item = that.items().filter("[" + kendo.attr("uid") + "=" + data.uid + "]");

	                    if (item.length > 0) {
	                        idx = item.index();

	                        that.angular("cleanup", function() {
	                            return { elements: [ item ]};
	                        });

	                        item.replaceWith(template(data));
	                        item = that.items().eq(idx);
	                        item.attr(kendo.attr("uid"), data.uid);

	                        that.angular("compile", function() {
	                            return { elements: [ item ], data: [ { dataItem: data } ]};
	                        });

	                        that.trigger("itemChange", {
	                            item: item,
	                            data: data
	                        });
	                    }
	                }

	                return;
	            }

	            if (that.trigger(DATABINDING, { action: e.action || "rebind", items: e.items, index: e.index })) {
	                return;
	            }

	            that._angularItems("cleanup");

	            that._destroyEditable();

	            for (idx = 0, length = view.length; idx < length; idx++) {
	                if (idx % 2) {
	                    html += altTemplate(view[idx]);
	                } else {
	                    html += template(view[idx]);
	                }
	            }

	            that.element.html(html);

	            items = that.items();
	            for (idx = 0, length = view.length; idx < length; idx++) {
	                items.eq(idx).attr(kendo.attr("uid"), view[idx].uid)
	                             .attr("role", "option")
	                             .attr("aria-selected", "false");
	            }

	            if (that.element[0] === active && that.options.navigatable) {
	                that.current(items.eq(0));
	            }

	            that._angularItems("compile");

	            that.trigger(DATABOUND, { action: e.action || "rebind", items: e.items, index: e.index });
	        },

	        _pageable: function() {
	            var that = this,
	                pageable = that.options.pageable,
	                settings,
	                pagerId;

	            if ($.isPlainObject(pageable)) {
	                pagerId = pageable.pagerId;
	                settings = $.extend({}, pageable, {
	                    dataSource: that.dataSource,
	                    pagerId: null
	                });

	                that.pager = new kendo.ui.Pager($("#" + pagerId), settings);
	            }
	        },

	        _selectable: function() {
	            var that = this,
	                multi,
	                current,
	                selectable = that.options.selectable,
	                navigatable = that.options.navigatable;

	            if (selectable) {
	                multi = kendo.ui.Selectable.parseOptions(selectable).multiple;

	                that.selectable = new kendo.ui.Selectable(that.element, {
	                    aria: true,
	                    multiple: multi,
	                    filter: FOCUSSELECTOR,
	                    change: function() {
	                        that.trigger(CHANGE);
	                    }
	                });

	                if (navigatable) {
	                    that.element.on("keydown" + NS, function(e) {
	                        if (e.keyCode === keys.SPACEBAR) {
	                            current = that.current();
	                            if (e.target == e.currentTarget) {
	                                e.preventDefault();
	                            }
	                            if(multi) {
	                                if(!e.ctrlKey) {
	                                    that.selectable.clear();
	                                } else {
	                                    if (current && current.hasClass(SELECTED)) {
	                                        current.removeClass(SELECTED);
	                                        return;
	                                    }
	                                }
	                            } else {
	                                that.selectable.clear();
	                            }

	                            that.selectable.value(current);
	                        }
	                    });
	                }
	            }
	        },

	        current: function(candidate) {
	            var that = this,
	                element = that.element,
	                current = that._current,
	                id = that._itemId;

	            if (candidate === undefined) {
	                return current;
	            }

	            if (current && current[0]) {
	                if (current[0].id === id) {
	                    current.removeAttr("id");
	                }

	                current.removeClass(FOCUSED);
	                element.removeAttr("aria-activedescendant");
	            }

	            if (candidate && candidate[0]) {
	                id = candidate[0].id || id;

	                that._scrollTo(candidate[0]);

	                element.attr("aria-activedescendant", id);
	                candidate.addClass(FOCUSED).attr("id", id);
	            }

	            that._current = candidate;
	        },

	        _scrollTo: function(element) {
	            var that = this,
	                container,
	                UseJQueryoffset = false,
	                SCROLL = "scroll";

	            if (that.wrapper.css("overflow") == "auto" || that.wrapper.css("overflow") == SCROLL) {
	                container = that.wrapper[0];
	            } else {
	                container = window;
	                UseJQueryoffset = true;
	            }

	            var scrollDirectionFunc = function(direction, dimension) {

	                var elementOffset = UseJQueryoffset ? $(element).offset()[direction.toLowerCase()] : element["offset" + direction],
	                    elementDimension = element["client" + dimension],
	                    containerScrollAmount = $(container)[SCROLL + direction](),
	                    containerDimension = $(container)[dimension.toLowerCase()]();

	                if (elementOffset + elementDimension > containerScrollAmount + containerDimension) {
	                    $(container)[SCROLL + direction](elementOffset + elementDimension - containerDimension);
	                } else if (elementOffset < containerScrollAmount) {
	                    $(container)[SCROLL + direction](elementOffset);
	                }
	            };

	            scrollDirectionFunc("Top", "Height");
	            scrollDirectionFunc("Left", "Width");
	        },

	        _navigatable: function() {
	            var that = this,
	                navigatable = that.options.navigatable,
	                element = that.element,
	                clickCallback = function(e) {
	                    that.current($(e.currentTarget));
	                    if(!$(e.target).is(":button,a,:input,a>.k-icon,textarea")) {
	                        element.focus();
	                    }
	                };

	            if (navigatable) {
	                that._tabindex();
	                element.on("focus" + NS, function() {
	                        var current = that._current;
	                        if(!current || !current.is(":visible")) {
	                            current = that._item("first");
	                        }

	                        that.current(current);
	                    })
	                    .on("focusout" + NS, function() {
	                        if (that._current) {
	                            that._current.removeClass(FOCUSED);
	                        }
	                    })
	                    .on("keydown" + NS, function(e) {
	                        var key = e.keyCode,
	                            current = that.current(),
	                            target = $(e.target),
	                            canHandle = !target.is(":button,textarea,a,a>.t-icon,input"),
	                            isTextBox = target.is(":text,:password"),
	                            preventDefault = kendo.preventDefault,
	                            editItem = element.find("." + KEDITITEM),
	                            active = activeElement(), idx;

	                        if ((!canHandle && !isTextBox && keys.ESC != key) || (isTextBox && keys.ESC != key && keys.ENTER != key)) {
	                            return;
	                        }

	                        if (keys.UP === key || keys.LEFT === key) {
	                            if (current) {
	                                current = current.prev();
	                            }

	                            that.current(!current || !current[0] ? that._item("last") : current);
	                            preventDefault(e);
	                        } else if (keys.DOWN === key || keys.RIGHT === key) {
	                            if (current) {
	                                current = current.next();
	                            }
	                            that.current(!current || !current[0] ? that._item("first") : current);
	                            preventDefault(e);
	                        } else if (keys.PAGEUP === key) {
	                            that.current(null);
	                            that.dataSource.page(that.dataSource.page() - 1);
	                            preventDefault(e);
	                        } else if (keys.PAGEDOWN === key) {
	                            that.current(null);
	                            that.dataSource.page(that.dataSource.page() + 1);
	                            preventDefault(e);
	                        } else if (keys.HOME === key) {
	                            that.current(that._item("first"));
	                            preventDefault(e);
	                        } else if (keys.END === key) {
	                            that.current(that._item("last"));
	                            preventDefault(e);
	                        } else if (keys.ENTER === key) {
	                            if (editItem.length !== 0 && (canHandle || isTextBox)) {
	                                idx = that.items().index(editItem);
	                                if (active) {
	                                    active.blur();
	                                }
	                                that.save();
	                                var focusAgain = function(){
	                                    that.element.trigger("focus");
	                                    that.current(that.items().eq(idx));
	                                };
	                                that.one("dataBound", focusAgain);
	                            } else if (that.options.editTemplate !== "") {
	                                that.edit(current);
	                            }
	                        } else if (keys.ESC === key) {
	                            editItem = element.find("." + KEDITITEM);
	                            if (editItem.length === 0) {
	                                return;
	                            }
	                            idx = that.items().index(editItem);
	                            that.cancel();
	                            that.element.trigger("focus");
	                            that.current(that.items().eq(idx));
	                        }
	                    });

	                element.on("mousedown" + NS + " touchstart" + NS, FOCUSSELECTOR, proxy(clickCallback, that));
	            }
	       },

	       clearSelection: function() {
	           var that = this;
	           that.selectable.clear();
	           that.trigger(CHANGE);
	       },

	       select: function(items) {
	           var that = this,
	               selectable = that.selectable;

	            items = $(items);
	            if(items.length) {
	                if(!selectable.options.multiple) {
	                    selectable.clear();
	                    items = items.first();
	                }
	                selectable.value(items);
	                return;
	            }

	           return selectable.value();
	       },

	       _destroyEditable: function() {
	           var that = this;
	           if (that.editable) {
	               that.editable.destroy();
	               delete that.editable;
	           }
	       },

	       _modelFromElement: function(element) {
	           var uid = element.attr(kendo.attr("uid"));

	           return this.dataSource.getByUid(uid);
	       },

	       _closeEditable: function() {
	           var that = this,
	               editable = that.editable,
	               data,
	               item,
	               index,
	               template = that.template;

	           if (editable) {
	               if (editable.element.index() % 2) {
	                   template = that.altTemplate;
	               }

	               that.angular("cleanup", function() {
	                   return { elements: [ editable.element ]};
	               });

	               data = that._modelFromElement(editable.element);
	               that._destroyEditable();

	               index = editable.element.index();
	               editable.element.replaceWith(template(data));
	               item = that.items().eq(index);
	               item.attr(kendo.attr("uid"), data.uid);

	               if (that._hasBindingTarget()) {
	                   kendo.bind(item, data);
	               }

	               that.angular("compile", function() {
	                   return { elements: [ item ], data: [ { dataItem: data } ]};
	               });
	           }
	           return true;
	       },

	       edit: function(item) {
	           var that = this,
	               data = that._modelFromElement(item),
	               container,
	               uid = data.uid,
	               index;

	            that.cancel();

	            item = that.items().filter("[" + kendo.attr("uid") + "=" + uid + "]");
	            index = item.index();
	            item.replaceWith(that.editTemplate(data));
	            container = that.items().eq(index).addClass(KEDITITEM).attr(kendo.attr("uid"), data.uid);
	            that.editable = container.kendoEditable({
	                model: data,
	                clearContainer: false,
	                errorTemplate: false,
	                target: that
	            }).data("kendoEditable");

	            that.trigger(EDIT, { model: data, item: container });
	       },

	       save: function() {
	           var that = this,
	               editable = that.editable,
	               model;

	           if (!editable) {
	               return;
	           }

	           var container = editable.element;
	           model = that._modelFromElement(container);

	           if (editable.end() && !that.trigger(SAVE, { model: model, item: container }))  {
	               that._closeEditable();
	               that.dataSource.sync();
	           }
	       },

	       remove: function(item) {
	           var that = this,
	               dataSource = that.dataSource,
	               data = that._modelFromElement(item);

	           if (that.editable) {
	               dataSource.cancelChanges(that._modelFromElement(that.editable.element));
	               that._closeEditable();
	           }

	           if (!that.trigger(REMOVE, { model: data, item: item })) {
	               item.hide();
	               dataSource.remove(data);
	               dataSource.sync();
	           }
	       },

	       add: function() {
	           var that = this,
	               dataItem,
	               dataSource = that.dataSource,
	               index = dataSource.indexOf((dataSource.view() || [])[0]);

	           if (index < 0) {
	               index = 0;
	           }

	           that.cancel();
	           dataItem = dataSource.insert(index, {});
	           that.edit(that.element.find("[data-uid='" + dataItem.uid + "']"));
	       },

	       cancel: function() {
	           var that = this,
	               dataSource = that.dataSource;

	           if (that.editable) {
	               var container = that.editable.element;
	               var model = that._modelFromElement(container);

	               if (!that.trigger(CANCEL, { model: model, container: container})) {
	                   dataSource.cancelChanges(model);
	                   that._closeEditable();
	               }
	           }
	       },

	       _crudHandlers: function() {
	           var that = this,
	               clickNS = CLICK + NS;

	           that.element.on(clickNS, ".k-edit-button", function(e) {
	               var item = $(this).closest("[" + kendo.attr("uid") + "]");
	               that.edit(item);
	               e.preventDefault();
	           });

	           that.element.on(clickNS, ".k-delete-button", function(e) {
	               var item = $(this).closest("[" + kendo.attr("uid") + "]");
	               that.remove(item);
	               e.preventDefault();
	           });

	           that.element.on(clickNS, ".k-update-button", function(e) {
	               that.save();
	               e.preventDefault();
	           });

	           that.element.on(clickNS, ".k-cancel-button", function(e) {
	               that.cancel();
	               e.preventDefault();
	           });
	       },

	       destroy: function() {
	           var that = this;

	           Widget.fn.destroy.call(that);

	           that._unbindDataSource();

	           that._destroyEditable();

	           that.element.off(NS);

	           if (that.pager) {
	               that.pager.destroy();
	           }

	           kendo.destroy(that.element);
	       }
	    });

	    kendo.ui.plugin(ListView);
	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(422));


/***/ }),

/***/ 464:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(27);

/***/ })

/******/ });

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(465);


/***/ }),

/***/ 421:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(0);

/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 465:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(421) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "maskedtextbox",
	    name: "MaskedTextBox",
	    category: "web",
	    description: "The MaskedTextBox widget allows to specify a mask type on an input field.",
	    depends: [ "core" ]
	};

	(function($, undefined) {
	    var global = window;
	    var min = global.Math.min;
	    var kendo = global.kendo;
	    var caret = kendo.caret;
	    var keys = kendo.keys;
	    var ui = kendo.ui;
	    var Widget = ui.Widget;
	    var NS = ".kendoMaskedTextBox";
	    var proxy = $.proxy;
	    var setTimeout = window.setTimeout;

	    var STATEDISABLED = "k-state-disabled";
	    var STATEINVALID = "k-state-invalid";
	    var DISABLED = "disabled";
	    var READONLY = "readonly";
	    var CHANGE = "change";
	    var MOUSEUP = "mouseup";
	    var DROP = "drop";
	    var KEYDOWN = "keydown";
	    var PASTE = "paste";
	    var INPUT = "input";

	    function ns(name) { return name + NS; }

	    var INPUT_EVENT_NAME = ns(kendo.support.propertyChangeEvent ? "propertychange" : INPUT);

	    function stringDiffStart(str1, str2) {
	        var i = 0;
	        while (i < str2.length) {
	            if (str1[i] !== str2[i]) {
	                break;
	            }
	            i++;
	        }

	        return i;
	    }
	    var MaskedTextBox = Widget.extend({
	        init: function(element, options) {
	            var that = this;
	            var DOMElement;

	            Widget.fn.init.call(that, element, options);

	            that._rules = $.extend({}, that.rules, that.options.rules);

	            element = that.element;
	            DOMElement = element[0];

	            that._wrapper();
	            that._tokenize();
	            that._form();

	            that.element
	                .addClass("k-textbox")
	                .attr("autocomplete", "off")
	                .on("focus" + NS, function() {
	                    var value = DOMElement.value;

	                    if (!value) {
	                        DOMElement.value = that._old = that._emptyMask;
	                    } else {
	                        that._togglePrompt(true);
	                    }

	                    that._oldValue = value;

	                    that._timeoutId = setTimeout(function() {
	                        caret(element, 0, value ? that._maskLength : 0);
	                    });
	                })
	                .on("focusout" + NS, function() {
	                    var value = element.val();

	                    clearTimeout(that._timeoutId);
	                    DOMElement.value = that._old = "";

	                    if (value !== that._emptyMask) {
	                        DOMElement.value = that._old = value;
	                    }

	                    that._change();
	                    that._togglePrompt();
	                });

	             var disabled = element.is("[disabled]") || $(that.element).parents("fieldset").is(':disabled');

	             if (disabled) {
	                 that.enable(false);
	             } else {
	                 that.readonly(element.is("[readonly]"));
	             }

	             that.value(that.options.value || element.val());

	             that._validationIcon = $("<span class='k-icon k-i-warning'></span>")
	                .insertAfter(element);

	             kendo.notify(that);
	        },

	        options: {
	            name: "MaskedTextBox",
	            clearPromptChar: false,
	            unmaskOnPost: false,
	            promptChar: "_",
	            culture: "",
	            rules: {},
	            value: "",
	            mask: ""
	        },

	        events: [
	            CHANGE
	        ],

	        rules: {
	            "0": /\d/,
	            "9": /\d|\s/,
	            "#": /\d|\s|\+|\-/,
	            "L": /[a-zA-Z]/,
	            "?": /[a-zA-Z]|\s/,
	            "&": /\S/,
	            "C": /./,
	            "A": /[a-zA-Z0-9]/,
	            "a": /[a-zA-Z0-9]|\s/
	        },

	        setOptions: function(options) {
	            var that = this;

	            Widget.fn.setOptions.call(that, options);

	            that._rules = $.extend({}, that.rules, that.options.rules);

	            that._tokenize();

	            this._unbindInput();
	            this._bindInput();

	            that.value(that.element.val());
	        },

	        destroy: function() {
	            var that = this;

	            that.element.off(NS);

	            if (that._formElement) {
	                that._formElement.off("reset", that._resetHandler);
	                that._formElement.off("submit", that._submitHandler);
	            }

	            Widget.fn.destroy.call(that);
	        },

	        raw: function() {
	            var unmasked = this._unmask(this.element.val(), 0);
	            return unmasked.replace(new RegExp(this.options.promptChar, "g"), "");
	        },

	        value: function(value) {
	            var element = this.element;
	            var emptyMask = this._emptyMask;

	            if (value === undefined) {
	                return this.element.val();
	            }

	            if (value === null) {
	                value = "";
	            }

	            if (!emptyMask) {
	                this._oldValue = value;
	                element.val(value);
	                return;
	            }

	            value = this._unmask(value + "");

	            element.val(value ? emptyMask : "");

	            this._mask(0, this._maskLength, value);
	            this._unmaskedValue = null;

	            value = element.val();
	            this._oldValue = value;

	            if (kendo._activeElement() !== element) {
	                if (value === emptyMask) {
	                    element.val("");
	                } else {
	                    this._togglePrompt();
	                }
	            }
	        },

	        _togglePrompt: function(show) {
	            var DOMElement = this.element[0];
	            var value = DOMElement.value;

	            if (this.options.clearPromptChar) {
	                if (!show) {
	                    value = value.replace(new RegExp(this.options.promptChar, "g"), " ");
	                } else {
	                    value = this._oldValue;
	                }

	                DOMElement.value = this._old = value;
	            }
	        },

	        readonly: function(readonly) {
	            this._editable({
	                readonly: readonly === undefined ? true : readonly,
	                disable: false
	            });
	        },

	        enable: function(enable) {
	            this._editable({
	                readonly: false,
	                disable: !(enable = enable === undefined ? true : enable)
	            });
	        },

	        _bindInput: function() {
	            var that = this;

	            if (that._maskLength) {
	                if(that.options.$angular) {//detach "input" event in angular scenario to keep the ng-model consistent and updated only when the change event of the textbox is raised.
	                    that.element.off(INPUT);
	                }
	                that.element
	                    .on(ns(KEYDOWN), proxy(that._keydown, that))
	                    .on(ns(DROP), proxy(that._drop, that))
	                    .on(ns(CHANGE), proxy(that._trackChange, that))
	                    .on(INPUT_EVENT_NAME, proxy(that._inputHandler, that));


	                if (kendo.support.browser.msie) {
	                    var version = kendo.support.browser.version;
	                    if (version > 8 && version < 11) {
	                        var events = [ns(MOUSEUP), ns(DROP), ns(KEYDOWN), ns(PASTE)].join(" ");
	                        that.element.on(events, proxy(that._legacyIEInputHandler, that));
	                    }
	                }
	            }
	        },

	        _unbindInput: function() {
	            var events = [INPUT_EVENT_NAME, ns(KEYDOWN), ns(MOUSEUP), ns(DROP), ns(PASTE)].join(" ");

	            this.element.off(events);
	        },

	        _editable: function(options) {
	            var that = this;
	            var element = that.element;
	            var wrapper = that.wrapper;
	            var disable = options.disable;
	            var readonly = options.readonly;

	            that._unbindInput();

	            if (!readonly && !disable) {
	                element.removeAttr(DISABLED)
	                       .removeAttr(READONLY);

	                wrapper.removeClass(STATEDISABLED);

	                that._bindInput();
	            } else {
	                element.attr(DISABLED, disable)
	                       .attr(READONLY, readonly);

	                wrapper.toggleClass(STATEDISABLED, disable);
	            }
	        },

	        _change: function() {
	            var that = this;
	            var value = that.value();

	            if (value !== that._oldValue) {
	                that._oldValue = value;

	                that.trigger(CHANGE);
	                that.element.trigger(CHANGE);
	            }
	            else if (value === "" && that.__changing) {//ensure change is raised when empty value (mask is stripped from input content) for consistent ngjs model update
	                that.element.trigger(CHANGE);
	            }
	        },

	        inputChange: function(backward) {
	            var that = this;
	            var old = that._old;
	            var element = that.element[0];
	            var value = element.value;
	            var selection = caret(element);
	            var cursor = selection[1];
	            var lengthDiff = value.length - old.length;
	            var mobile = kendo.support.mobileOS;

	            if (that.__dropping && lengthDiff < 0) {//dropping in same input on WebKit is raised once for the removal phase and once for the adding phase
	                return;
	            }

	            if (lengthDiff === -1 && mobile.android && mobile.browser === "chrome") {
	                backward = true;
	            }

	            var contentStart = min(cursor, stringDiffStart(value, old));
	            var content = value.substring(contentStart, cursor);

	            element.value = value.substring(0, contentStart) + that._emptyMask.substring(contentStart);

	            var caretPos = that._mask(contentStart, cursor, content);
	            var endContent = that._trimStartPromptChars(value.substring(cursor), min(lengthDiff, caretPos - contentStart));

	            var unmasked = that._unmask(endContent, old.length - endContent.length);
	            that._mask(caretPos, caretPos, unmasked);

	            if (backward) {
	                caretPos = that._findCaretPosBackwards(contentStart);
	            }

	            caret(element, caretPos);

	            //clean-up flags
	            that.__dropping = false;
	        },

	        _trimStartPromptChars: function(content, count) {
	            var promptChar = this.options.promptChar;

	            while (count-- > 0 && content.indexOf(promptChar) === 0) {
	                content = content.substring(1);
	            }

	            return content;
	        },

	        _findCaretPosBackwards: function(pos) {
	            var caretStart = this._find(pos, true);
	            if (caretStart < pos) {
	                caretStart += 1;
	            }

	            return caretStart;
	        },

	        _inputHandler: function() {
	            if (kendo._activeElement() !== this.element[0]) {
	                return;
	            }

	            this.inputChange(this.__backward);
	        },

	        _legacyIEInputHandler: function(e) {
	            var that = this;
	            var input = that.element[0];
	            var value = input.value;
	            var type = e.type;

	            that.__pasting = (type === "paste");

	            setTimeout(function() {
	                if(type === "mouseup" && that.__pasting) {
	                    return;
	                }
	                if (input.value !== value) {
	                    that.inputChange(that.__backward);
	                }
	            });
	        },

	        _trackChange: function() {
	            var that = this;

	            that.__changing = true;
	            setTimeout(function() { that.__changing = false; });
	        },

	        _form: function() {
	            var that = this;
	            var element = that.element;
	            var formId = element.attr("form");
	            var form = formId ? $("#" + formId) : element.closest("form");

	            if (form[0]) {
	                that._resetHandler = function() {
	                    setTimeout(function() {
	                        that.value(element[0].value);
	                    });
	                };

	                that._submitHandler = function() {
	                    that.element[0].value = that._old = that.raw();
	                };

	                if (that.options.unmaskOnPost) {
	                    form.on("submit", that._submitHandler);
	                }

	                that._formElement = form.on("reset", that._resetHandler);
	            }
	        },

	        _keydown: function(e) {
	            var key = e.keyCode;

	            this.__backward = key === keys.BACKSPACE;

	            if (key === keys.ENTER) {
	                this._change();
	            }
	        },

	        _drop: function() {
	            this.__dropping = true;
	        },

	        _find: function(idx, backward) {
	            var value = this.element.val() || this._emptyMask;
	            var step = 1;

	            if (backward === true) {
	                step = -1;
	            }

	            while (idx > -1 || idx <= this._maskLength) {
	                if (value.charAt(idx) !== this.tokens[idx]) {
	                    return idx;
	                }

	                idx += step;
	            }

	            return -1;
	        },

	        _mask: function(start, end, value, backward) {
	            var element = this.element[0];
	            var current = element.value || this._emptyMask;
	            var empty = this.options.promptChar;
	            var valueLength;
	            var chrIdx = 0;
	            var unmasked;
	            var chr;
	            var idx;

	            start = this._find(start, backward);

	            if (start > end) {
	                end = start;
	            }

	            unmasked = this._unmask(current.substring(end), end);
	            value = this._unmask(value, start);
	            valueLength = value.length;

	            if (value) {
	                unmasked = unmasked.replace(new RegExp("^_{0," + valueLength + "}"), "");
	            }

	            value += unmasked;
	            current = current.split("");
	            chr = value.charAt(chrIdx);

	            while (start < this._maskLength) {
	                current[start] = chr || empty;
	                chr = value.charAt(++chrIdx);

	                if (idx === undefined && chrIdx > valueLength) {
	                    idx = start;
	                }

	                start = this._find(start + 1);
	            }

	            element.value = this._old = current.join("");

	            if (kendo._activeElement() === element) {
	                if (idx === undefined) {
	                    idx = this._maskLength;
	                }

	                caret(element, idx);
	            }

	            return idx;
	        },

	        _unmask: function(value, idx) {
	            if (!value) {
	                return "";
	            }

	            if (this._unmaskedValue === value) {
	                return this._unmaskedValue;
	            }
	            value = (value + "").split("");

	            var chr;
	            var token;
	            var chrIdx = 0;
	            var tokenIdx = idx || 0;

	            var empty = this.options.promptChar;

	            var valueLength = value.length;
	            var tokensLength = this.tokens.length;

	            var result = "";

	            while (tokenIdx < tokensLength) {
	                chr = value[chrIdx];
	                token = this.tokens[tokenIdx];

	                if (chr === token || chr === empty) {
	                    result += chr === empty ? empty : "";

	                    chrIdx += 1;
	                    tokenIdx += 1;
	                } else if (typeof token !== "string") {
	                    if ((token && token.test && token.test(chr)) || ($.isFunction(token) && token(chr))) {
	                        result += chr;
	                        tokenIdx += 1;
	                    } else {
	                        if (valueLength === 1) {
	                            this._blinkInvalidState();
	                        }
	                    }

	                    chrIdx += 1;
	                } else {
	                    tokenIdx += 1;
	                }

	                if (chrIdx >= valueLength) {
	                    break;
	                }
	            }
	            this._unmaskedValue = result;
	            return result;
	        },

	        _wrapper: function () {
	            var that = this;
	            var element = that.element;
	            var DOMElement = element[0];

	            var wrapper = element.wrap("<span class='k-widget k-maskedtextbox'></span>").parent();
	            wrapper[0].style.cssText = DOMElement.style.cssText;
	            DOMElement.style.width = "100%";
	            that.wrapper = wrapper.addClass(DOMElement.className);
	        },

	        _blinkInvalidState: function () {
	            var that = this;

	            that.wrapper.addClass(STATEINVALID);
	            clearTimeout(that._invalidStateTimeout);
	            that._invalidStateTimeout = setTimeout(proxy(that._removeInvalidState, that), 100);
	        },

	        _removeInvalidState: function () {
	            var that = this;

	            that.wrapper.removeClass(STATEINVALID);
	            that._invalidStateTimeout = null;
	        },

	        _tokenize: function() {
	            var tokens = [];
	            var tokenIdx = 0;

	            var mask = this.options.mask || "";
	            var maskChars = mask.split("");
	            var length = maskChars.length;
	            var idx = 0;
	            var chr;
	            var rule;

	            var emptyMask = "";
	            var promptChar = this.options.promptChar;
	            var numberFormat = kendo.getCulture(this.options.culture).numberFormat;
	            var rules = this._rules;

	            for (; idx < length; idx++) {
	                chr = maskChars[idx];
	                rule = rules[chr];

	                if (rule) {
	                    tokens[tokenIdx] = rule;
	                    emptyMask += promptChar;
	                    tokenIdx += 1;
	                } else {
	                    if (chr === "." || chr === ",") {
	                        chr = numberFormat[chr];
	                    } else if (chr === "$") {
	                        chr = numberFormat.currency.symbol;
	                    } else if (chr === "\\") {
	                        idx += 1;
	                        chr = maskChars[idx];
	                    }

	                    chr = chr.split("");

	                    for (var i = 0, l = chr.length; i < l; i++) {
	                        tokens[tokenIdx] = chr[i];
	                        emptyMask += chr[i];
	                        tokenIdx += 1;
	                    }
	                }
	            }

	            this.tokens = tokens;

	            this._emptyMask = emptyMask;
	            this._maskLength = emptyMask.length;
	        }
	    });

	    ui.plugin(MaskedTextBox);

	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(422));


/***/ })

/******/ });

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(466);


/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 433:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(1);

/***/ }),

/***/ 466:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(433) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "menu",
	    name: "Menu",
	    category: "web",
	    description: "The Menu widget displays hierarchical data as a multi-level menu.",
	    depends: [ "popup" ]
	};

	(function ($, undefined) {
	    var kendo = window.kendo,
	        ui = kendo.ui,
	        activeElement = kendo._activeElement,
	        touch = (kendo.support.touch && kendo.support.mobileOS),
	        MOUSEDOWN = "mousedown",
	        CLICK = "click",
	        DELAY = 30,
	        SCROLLSPEED = 50,
	        extend = $.extend,
	        proxy = $.proxy,
	        each = $.each,
	        template = kendo.template,
	        keys = kendo.keys,
	        Widget = ui.Widget,
	        excludedNodesRegExp = /^(ul|a|div)$/i,
	        NS = ".kendoMenu",
	        IMG = "img",
	        OPEN = "open",
	        MENU = "k-menu",
	        LINK = "k-link",
	        LAST = "k-last",
	        CLOSE = "close",
	        TIMER = "timer",
	        FIRST = "k-first",
	        IMAGE = "k-image",
	        SELECT = "select",
	        ZINDEX = "zIndex",
	        ACTIVATE = "activate",
	        DEACTIVATE = "deactivate",
	        POINTERDOWN = "touchstart" + NS + " MSPointerDown" + NS + " pointerdown" + NS,
	        pointers = kendo.support.pointers,
	        msPointers = kendo.support.msPointers,
	        allPointers = msPointers || pointers,
	        MOUSEENTER = pointers ? "pointerenter" : (msPointers ? "MSPointerEnter" : "mouseenter"),
	        MOUSELEAVE = pointers ? "pointerleave" : (msPointers ? "MSPointerLeave" : "mouseleave"),
	        MOUSEWHEEL = "DOMMouseScroll" + NS + " mousewheel" + NS,
	        RESIZE = kendo.support.resize + NS,
	        SCROLLWIDTH = "scrollWidth",
	        SCROLLHEIGHT = "scrollHeight",
	        OFFSETWIDTH = "offsetWidth",
	        OFFSETHEIGHT = "offsetHeight",
	        POPUP_ID_ATTR = "group",
	        POPUP_OPENER_ATTR = "groupparent",
	        DOCUMENT_ELEMENT = $(document.documentElement),
	        KENDOPOPUP = "kendoPopup",
	        DEFAULTSTATE = "k-state-default",
	        HOVERSTATE = "k-state-hover",
	        FOCUSEDSTATE = "k-state-focused",
	        DISABLEDSTATE = "k-state-disabled",
	        SELECTEDSTATE = "k-state-selected",
	        menuSelector = ".k-menu",
	        groupSelector = ".k-menu-group",
	        animationContainerSelector = ".k-animation-container",
	        popupSelector = groupSelector + "," + animationContainerSelector,
	        allItemsSelector = ":not(.k-list) > .k-item",
	        disabledSelector = ".k-item.k-state-disabled",
	        itemSelector = ".k-item:not(.k-state-disabled)",
	        linkSelector = ".k-item:not(.k-state-disabled) > .k-link",
	        exclusionSelector = ":not(.k-item.k-separator)",
	        nextSelector = exclusionSelector + ":eq(0)",
	        lastSelector = exclusionSelector + ":last",
	        templateSelector = "div:not(.k-animation-container,.k-list-container)",
	        scrollButtonSelector = ".k-menu-scroll-button",
	        touchPointerTypes = { "2": 1, "touch": 1 },

	        templates = {
	            content: template(
	                "<div #= contentCssAttributes(item) # tabindex='-1'>#= content(item) #</div>"
	            ),
	            group: template(
	                "<ul class='#= groupCssClass(group) #'#= groupAttributes(group) # role='menu' aria-hidden='true'>" +
	                    "#= renderItems(data) #" +
	                "</ul>"
	            ),
	            itemWrapper: template(
	                "<#= tag(item) # class='#= textClass(item) #'#= textAttributes(item) #>" +
	                    "#= image(data) ##= sprite(item) ##= text(item) #" +
	                    "#= arrow(data) #" +
	                "</#= tag(item) #>"
	            ),
	            item: template(
	                "<li class='#= wrapperCssClass(group, item) #' #= itemCssAttributes(item) # role='menuitem'  #=item.items ? \"aria-haspopup='true'\": \"\"#" +
	                    "#=item.enabled === false ? \"aria-disabled='true'\" : ''#>" +
	                    "#= itemWrapper(data) #" +
	                    "# if (item.items) { #" +
	                    "#= subGroup({ items: item.items, menu: menu, group: { expanded: item.expanded } }) #" +
	                    "# } else if (item.content || item.contentUrl) { #" +
	                    "#= renderContent(data) #" +
	                    "# } #" +
	                "</li>"
	            ),
	            scrollButton: template(
	                "<span class='k-button k-button-icon k-menu-scroll-button k-scroll-#= direction #' unselectable='on'>" +
	                "<span class='k-icon k-i-arrow-60-#= direction #'></span></span>"
	            ),
	            image: template("<img #= imageCssAttributes(item) # alt='' src='#= item.imageUrl #' />"), // class='k-image'
	            arrow: template("<span class='#= arrowClass(item, group) #'></span>"),
	            sprite: template("<span class='k-sprite #= spriteCssClass #'></span>"),
	            empty: template("")
	        },

	        rendering = {

	            wrapperCssClass: function (group, item) {
	                var result = "k-item",
	                    index = item.index;

	                if (item.enabled === false) {
	                    result += " k-state-disabled";
	                } else {
	                    result += " k-state-default";
	                }

	                if (group.firstLevel && index === 0) {
	                    result += " k-first";
	                }

	                if (index == group.length-1) {
	                    result += " k-last";
	                }

	                if (item.cssClass) {
	                    result += " " + item.cssClass;
	                }

	                if(item.attr && item.attr.hasOwnProperty("class")) {
	                    result += " " + item.attr["class"];
	                }

	                if(item.selected) {
	                    result += " " + SELECTEDSTATE;
	                }

	                return result;
	            },

	            itemCssAttributes: function (item) {
	                var result = "";
	                var attributes = item.attr || {};

	                for (var attr in attributes) {
	                    if(attributes.hasOwnProperty(attr) && attr !== "class") {
	                        result += attr + "=\"" + attributes[attr] + "\" ";
	                    }
	                }

	                return result;
	            },

	            imageCssAttributes: function (item) {
	                var result = "";
	                var attributes = item.imageAttr || {};

	                if (!attributes['class']) {
	                    attributes['class'] = IMAGE;
	                } else {
	                    attributes['class'] += " " + IMAGE;
	                }

	                for (var attr in attributes) {
	                    if(attributes.hasOwnProperty(attr)) {
	                        result += attr + "=\"" + attributes[attr] + "\" ";
	                    }
	                }

	                return result;
	            },

	            contentCssAttributes: function (item) {
	                var result = "";
	                var attributes = item.contentAttr || {};
	                var defaultClasses = "k-content k-group k-menu-group";

	                if (!attributes['class']) {
	                    attributes['class'] = defaultClasses;
	                } else {
	                    attributes['class'] += " " + defaultClasses;
	                }

	                for (var attr in attributes) {
	                    if(attributes.hasOwnProperty(attr)) {
	                        result += attr + "=\"" + attributes[attr] + "\" ";
	                    }
	                }

	                return result;
	            },

	            textClass: function() {
	                return LINK;
	            },

	            textAttributes: function(item) {
	                return item.url ? " href='" + item.url + "'" : "";
	            },

	            arrowClass: function(item, group) {
	                var result = "k-icon";

	                if (group.horizontal) {
	                    result += " k-i-arrow-60-down";
	                } else {
	                    result += " k-i-arrow-60-right";
	                }

	                return result;
	            },

	            text: function(item) {
	                return item.encoded === false ? item.text : kendo.htmlEncode(item.text);
	            },

	            tag: function(item) {
	                return item.url ? "a" : "span";
	            },

	            groupAttributes: function(group) {
	                return group.expanded !== true ? " style='display:none'" : "";
	            },

	            groupCssClass: function() {
	                return "k-group k-menu-group";
	            },

	            content: function(item) {
	                return item.content ? item.content : "&nbsp;";
	            }
	        };

	    function getEffectDirection(direction, root) {
	        direction = direction.split(" ")[!root+0] || direction;
	        return direction.replace("top", "up").replace("bottom", "down");
	    }

	    function parseDirection(direction, root, isRtl) {
	        direction = direction.split(" ")[!root+0] || direction;
	        var output = { origin: ["bottom", (isRtl ? "right" : "left")], position: ["top", (isRtl ? "right" : "left")] },
	            horizontal = /left|right/.test(direction);

	        if (horizontal) {
	            output.origin = [ "top", direction ];
	            output.position[1] = kendo.directions[direction].reverse;
	        } else {
	            output.origin[0] = direction;
	            output.position[0] = kendo.directions[direction].reverse;
	        }

	        output.origin = output.origin.join(" ");
	        output.position = output.position.join(" ");

	        return output;
	    }

	    function contains(parent, child) {
	        try {
	            return $.contains(parent, child);
	        } catch (e) {
	            return false;
	        }
	    }

	    function updateItemClasses (item) {
	        item = $(item);

	        item.addClass("k-item")
	            .children(IMG)
	            .addClass(IMAGE);
	        item
	            .children("a")
	            .addClass(LINK)
	            .children(IMG)
	            .addClass(IMAGE);
	        item
	            .filter(":not([disabled])")
	            .addClass(DEFAULTSTATE);
	        item
	            .filter(".k-separator")
	            .empty()
	            .append("&nbsp;");
	        item
	            .filter("li[disabled]")
	            .addClass(DISABLEDSTATE)
	            .removeAttr("disabled")
	            .attr("aria-disabled", true);

	        if (!item.filter("[role]").length) {
	            item.attr("role", "menuitem");
	        }

	        if (!item.children("." + LINK).length) {
	            item
	                .contents()      // exclude groups, real links, templates and empty text nodes
	                .filter(function() { return (!this.nodeName.match(excludedNodesRegExp) && !(this.nodeType == 3 && !$.trim(this.nodeValue))); })
	                .wrapAll("<span class='" + LINK + "'/>");
	        }

	        updateArrow(item);
	        updateFirstLast(item);
	    }

	    function updateArrow (item) {
	        item = $(item);

	        item.find("> .k-link > [class*=k-i-arrow]:not(.k-sprite)").remove();

	        item.filter(":has(.k-menu-group)")
	            .children(".k-link:not(:has([class*=k-i-arrow]:not(.k-sprite)))")
	            .each(function () {
	                var item = $(this),
	                    arrowCssClass = getArrowCssClass(item);

	                item.append("<span class='k-icon " + arrowCssClass + "'/>");
	            });
	    }

	    function getArrowCssClass (item) {
	        var arrowCssClass,
	            parent = item.parent().parent(),
	            isRtl = kendo.support.isRtl(parent);

	        if (parent.hasClass(MENU + "-horizontal")) {
	            arrowCssClass = " k-i-arrow-60-down";
	        } else {
	            if (isRtl) {
	                arrowCssClass = " k-i-arrow-60-left";
	            }
	            else {
	                arrowCssClass = " k-i-arrow-60-right";
	            }
	        }
	        return arrowCssClass;
	    }

	    function updateFirstLast (item) {
	        item = $(item);

	        item.filter(".k-first:not(:first-child)").removeClass(FIRST);
	        item.filter(".k-last:not(:last-child)").removeClass(LAST);
	        item.filter(":first-child").addClass(FIRST);
	        item.filter(":last-child").addClass(LAST);
	    }

	    function storeItemSelectEventHandler (element, options) {
	        var selectHandler = getItemSelectEventHandler(options);
	        if(selectHandler) {
	            setItemData(element, selectHandler);
	        }

	        if (options.items) {
	            $(element).children("ul").children("li").each(function(i){
	                storeItemSelectEventHandler(this, options.items[i]);
	            });
	        }
	    }

	    function setItemData (element, selectHandler) {
	        $(element).children(".k-link").data({
	            selectHandler : selectHandler
	        });
	    }

	    function getItemSelectEventHandler (options) {
	        var selectHandler = options.select,
	            isFunction = kendo.isFunction;

	        if (selectHandler && isFunction(selectHandler)) {
	            return selectHandler;
	        }
	        return null;
	    }

	    function popupOpenerSelector(id){
	        return id ? "li[data-groupparent='" + id + "']" : "li[data-groupparent]";
	    }
	    function popupGroupSelector(id) {
	        return id ? "ul[data-group='" + id + "']" : "ul[data-group]";
	    }
	    function getChildPopups (currentPopup, overflowWrapper) {
	        var childPopupOpener = currentPopup.find(popupOpenerSelector());
	        var result = [];
	        childPopupOpener.each(function(i, opener){
	            opener = $(opener);
	            var popupId = opener.data(POPUP_OPENER_ATTR);
	            var popup = currentPopup;
	            while(popupId) {
	                popup = overflowWrapper.find(popupGroupSelector(popupId) + ":visible");
	                if (popup.length) {
	                    result.push(popup);
	                }
	                opener = popup.find(popupOpenerSelector());
	                popupId = opener.data(POPUP_OPENER_ATTR);
	            }
	        });

	        return result;
	    }

	    function popupParentItem(popupElement, overflowWrapper) {
	        var popupId = popupElement.data(POPUP_ID_ATTR);
	        return popupId ? overflowWrapper.find(popupOpenerSelector(popupId)) : $([]);
	    }

	    function itemPopup(item, overflowWrapper) {
	        var popupId = item.data(POPUP_OPENER_ATTR);
	        return popupId ? overflowWrapper.children(animationContainerSelector).children(popupGroupSelector(popupId)) : $([]);
	    }

	    function overflowMenuParents(current, overflowWrapper) {
	        var parents = [];
	        var getParents = function(item){
	            while (item.parentNode && !overflowWrapper.is(item.parentNode)) {
	                parents.push(item.parentNode);
	                item = item.parentNode;
	            }
	        };
	        var elem = current[0] || current;
	        getParents(elem);
	        var last = parents[parents.length - 1];
	        while($(last).is(animationContainerSelector)){
	            var popupElement = $(last).children("ul");
	            elem = popupParentItem(popupElement, overflowWrapper)[0];
	            if (!elem) {
	                break;
	            }
	            parents.push(elem);
	            getParents(elem);
	            last = parents[parents.length - 1];
	        }
	        return parents;
	    }

	    function mousewheelDelta(e) {
	        var delta = 0;

	        if (e.wheelDelta) {
	            delta = -e.wheelDelta / 120;
	            delta = delta > 0 ? Math.ceil(delta) : Math.floor(delta);
	        }

	        if (e.detail) {
	            delta = Math.round(e.detail / 3);
	        }

	        return delta;
	    }

	    function parentsScroll(current, scrollDirection) {
	        var scroll = 0;
	        var parent = current.parentNode;
	        while(parent && !isNaN(parent[scrollDirection])) {
	            scroll += parent[scrollDirection];
	            parent = parent.parentNode;
	        }
	        return scroll;
	    }

	    function isPointerTouch(e){
	        return allPointers && e.originalEvent.pointerType in touchPointerTypes;
	    }

	    function isTouch(e){
	        var ev = e.originalEvent;
	        return touch && /touch/i.test(ev.type || "");
	    }

	    function removeSpacesBetweenItems(ul){
	        ul.contents().filter(function(){ return this.nodeName != "LI"; }).remove();
	    }

	    var Menu = Widget.extend({
	        init: function(element, options) {
	            var that = this;

	            Widget.fn.init.call(that, element, options);

	            element = that.wrapper = that.element;
	            options = that.options;

	            that._initData(options);

	            that._updateClasses();

	            that._animations(options);

	            that.nextItemZIndex = 100;

	            that._tabindex();

	            that._initOverflow(options);

	            that._attachMenuEventsHandlers();

	            if (options.openOnClick) {
	                that.clicked = false;
	            }

	            element.attr("role", "menubar");

	            if (element[0].id) {
	                that._ariaId = kendo.format("{0}_mn_active", element[0].id);
	            }

	            kendo.notify(that);
	        },

	        events: [
	            OPEN,
	            CLOSE,
	            ACTIVATE,
	            DEACTIVATE,
	            SELECT
	        ],

	        options: {
	            name: "Menu",
	            animation: {
	                open: {
	                    duration: 200
	                },
	                close: { // if close animation effects are defined, they will be used instead of open.reverse
	                    duration: 100
	                }
	            },
	            orientation: "horizontal",
	            direction: "default",
	            openOnClick: false,
	            closeOnClick: true,
	            hoverDelay: 100,
	            scrollable: false,
	            popupCollision: undefined
	        },

	        _initData: function(options) {
	            var that = this;

	            if (options.dataSource) {
	                that.angular("cleanup", function(){
	                    return {
	                        elements: that.element.children()
	                    };
	                });
	                that.element.empty();
	                that.append(options.dataSource, that.element);
	                that.angular("compile", function(){
	                    return {
	                        elements: that.element.children()
	                    };
	                });
	            }
	        },

	        _attachMenuEventsHandlers: function() {
	            var that = this;
	            var element = that.element;
	            var options = that.options;
	            var overflowWrapper = that._overflowWrapper();

	            (overflowWrapper || element).on(POINTERDOWN, itemSelector, proxy(that._focusHandler, that))
	                   .on(CLICK + NS, disabledSelector, false)
	                   .on(CLICK + NS, itemSelector, proxy(that._click , that))
	                   .on(POINTERDOWN + " " + MOUSEDOWN + NS, ".k-content", proxy(that._preventClose, that))
	                   .on(MOUSEENTER + NS, itemSelector, proxy(that._mouseenter, that))
	                   .on(MOUSELEAVE + NS, itemSelector, proxy(that._mouseleave, that))
	                   .on(MOUSEENTER + NS + " " + MOUSELEAVE + NS + " " +
	                       MOUSEDOWN + NS + " " + CLICK + NS, linkSelector, proxy(that._toggleHover, that));

	            element.on("keydown" + NS, proxy(that._keydown, that))
	                   .on("focus" + NS, proxy(that._focus, that))
	                   .on("focus" + NS, ".k-content", proxy(that._focus, that))
	                   .on("blur" + NS, proxy(that._removeHoverItem, that))
	                   .on("blur" + NS, "[tabindex]", proxy(that._checkActiveElement, that));

	            if (overflowWrapper) {
	                overflowWrapper
	                    .on(MOUSELEAVE + NS, popupSelector, proxy(that._mouseleavePopup, that))
	                    .on(MOUSEENTER + NS, popupSelector, proxy(that._mouseenterPopup, that));
	            }

	            if (options.openOnClick) {
	                that._documentClickHandler = proxy(that._documentClick, that);
	                $(document).click(that._documentClickHandler);
	            }
	        },

	        _detachMenuEventsHandlers: function() {
	            var that = this;
	            var overflowWrapper = that._overflowWrapper();

	            if (overflowWrapper) {
	                overflowWrapper.off(NS);
	            }

	            that.element.off(NS);

	            if (that._documentClickHandler) {
	                $(document).unbind("click", that._documentClickHandler);
	            }
	        },

	        _initOverflow: function(options) {
	            var that = this;
	            var isHorizontal = options.orientation == "horizontal";
	            var backwardBtn, forwardBtn;

	            if (options.scrollable) {
	                that._openedPopups = {};
	                that._scrollWrapper = that.element.wrap("<div class='k-menu-scroll-wrapper " + options.orientation + "'></div>").parent();
	                if (isHorizontal) {
	                    removeSpacesBetweenItems(that.element);
	                }

	                backwardBtn = $(templates.scrollButton({direction: isHorizontal ? "left" : "up"}));
	                forwardBtn = $(templates.scrollButton({direction: isHorizontal ? "right": "down"}));
	                backwardBtn.add(forwardBtn).appendTo(that._scrollWrapper);

	                that._initScrolling(that.element, backwardBtn, forwardBtn, isHorizontal);

	                var initialWidth = that.element.outerWidth();
	                var initialCssWidth = that.element[0].style.width;
	                initialCssWidth = initialCssWidth === "auto" ? "" : initialCssWidth;

	                if (isHorizontal) {
	                    $(window).on(RESIZE, kendo.throttle(function(){
	                        that._setOverflowWrapperWidth(initialWidth, initialCssWidth);
	                        that._toggleScrollButtons(that.element, backwardBtn, forwardBtn, isHorizontal);
	                    }, 100));
	                }

	                that._setOverflowWrapperWidth(initialWidth, initialCssWidth);
	                that._toggleScrollButtons(that.element, backwardBtn, forwardBtn, isHorizontal);
	            }
	        },

	        _overflowWrapper: function(){
	            return this._scrollWrapper || this._popupsWrapper;
	        },

	        _setOverflowWrapperWidth: function(initialWidth, initialCssWidth) {
	            var that = this;
	            var wrapperCssWidth = that._scrollWrapper.css("width");

	            that._scrollWrapper.css({width: ""});
	            var wrapperWidth = that._scrollWrapper.outerWidth();
	            that._scrollWrapper.css({ width: wrapperCssWidth });

	            var menuWidth = that.element.outerWidth();
	            var borders = that.element[0].offsetWidth - that.element[0].clientWidth;

	            if (menuWidth != wrapperWidth) {
	                var width = initialCssWidth ? Math.min(initialWidth, wrapperWidth) : wrapperWidth;
	                that.element.width(width - borders);
	                that._scrollWrapper.width(width);
	            }
	        },

	        _reinitOverflow: function(options) {
	            var that = this;
	            var overflowChanged = ((options.scrollable && !that.options.scrollable) || (!options.scrollable && that.options.scrollable)) ||
	                (options.scrollable && that.options.scrollable && options.scrollable.distance != that.options.scrollable.distance) ||
	                options.orientation != that.options.orientation;

	            if (overflowChanged) {
	                that._detachMenuEventsHandlers();
	                that._destroyOverflow();
	                that._initOverflow(options);
	                that._attachMenuEventsHandlers();
	            }
	        },

	        _destroyOverflow: function() {
	            var that = this;
	            var overflowWrapper = that._overflowWrapper();
	            if(overflowWrapper) {
	                overflowWrapper.off(NS);
	                overflowWrapper.find(scrollButtonSelector).off(NS).remove();
	                overflowWrapper.children(animationContainerSelector).each(function(i, popupWrapper){
	                    var ul = $(popupWrapper).children(groupSelector);
	                    ul.off(MOUSEWHEEL);
	                    var popupParentLi = popupParentItem(ul, overflowWrapper);
	                    if (popupParentLi.length) {
	                        popupParentLi.append(popupWrapper);
	                    }
	                });

	                overflowWrapper.find(popupOpenerSelector()).removeAttr("data-groupparent");
	                overflowWrapper.find(popupGroupSelector()).removeAttr("data-group");
	                that.element.off(MOUSEWHEEL);
	                $(window).off(RESIZE);
	                overflowWrapper.contents().unwrap();

	                that._scrollWrapper = that._popupsWrapper = that._openedPopups = undefined;
	            }
	        },

	        _initScrolling: function(scrollElement, backwardBtn, forwardBtn, isHorizontal) {
	            var that = this;
	            var scrollable = that.options.scrollable;
	            var distance =  $.isNumeric(scrollable.distance) ? scrollable.distance : SCROLLSPEED;
	            var mouseWheelDistance = distance / 2;
	            var backward = "-=" + distance;
	            var forward = "+=" + distance;
	            var backwardDouble = "-=" + distance * 2;
	            var forwardDouble = "+=" + distance * 2;
	            var scrolling = false;
	            var touchEvents = false;

	            var scroll = function(value) {
	                var scrollValue = isHorizontal ? {"scrollLeft": value} : { "scrollTop": value };
	                scrollElement.finish().animate(scrollValue, "fast", "linear", function () {
	                    if (scrolling) {
	                        scroll(value);
	                    }
	                });
	                that._toggleScrollButtons(scrollElement, backwardBtn, forwardBtn, isHorizontal);
	            };

	            var mouseenterHandler = function(e) {
	                if (!scrolling && !touchEvents) {
	                    scroll(e.data.direction);
	                    scrolling = true;
	                }
	            };

	            var mousedownHandler = function(e) {
	                var scrollValue = isHorizontal ? {"scrollLeft": e.data.direction} : { "scrollTop": e.data.direction };
	                touchEvents = isTouch(e) || isPointerTouch(e);
	                scrollElement.stop().animate(scrollValue, "fast", "linear", function(){
	                    if (!touchEvents) {
	                        $(e.currentTarget).trigger(MOUSEENTER);
	                    } else {
	                         that._toggleScrollButtons(scrollElement, backwardBtn, forwardBtn, isHorizontal);
	                         scrolling = true;
	                    }
	                });
	                scrolling = false;

	                e.stopPropagation();
	                e.preventDefault();
	            };

	            backwardBtn.on(MOUSEENTER + NS, {direction: backward}, mouseenterHandler)
	                .on(kendo.eventMap.down + NS, {direction: backwardDouble}, mousedownHandler);

	            forwardBtn.on(MOUSEENTER + NS, {direction: forward}, mouseenterHandler)
	                .on(kendo.eventMap.down + NS, {direction: forwardDouble}, mousedownHandler);

	            backwardBtn.add(forwardBtn)
	                .on(MOUSELEAVE + NS, function() {
	                    scrollElement.stop();
	                    scrolling = false;
	                    that._toggleScrollButtons(scrollElement, backwardBtn, forwardBtn, isHorizontal);
	                });

	            scrollElement.on(MOUSEWHEEL, function(e){
	                if (!e.ctrlKey && !e.shiftKey && !e.altKey) {
	                    var wheelDelta = mousewheelDelta(e.originalEvent);
	                    var scrollSpeed = Math.abs(wheelDelta) * mouseWheelDistance;
	                    var value = (wheelDelta > 0 ? "+=" : "-=") + scrollSpeed;
	                    var scrollValue = isHorizontal ? {"scrollLeft": value} : {"scrollTop": value };

	                    that._closeChildPopups(scrollElement);

	                    scrollElement.finish().animate(scrollValue, "fast", "linear", function(){
	                        that._toggleScrollButtons(scrollElement, backwardBtn, forwardBtn, isHorizontal);
	                    });
	                    e.preventDefault();
	                }
	            });
	        },

	        _toggleScrollButtons: function(scrollElement, backwardBtn, forwardBtn, horizontal) {
	            var currentScroll = horizontal ? scrollElement.scrollLeft() : scrollElement.scrollTop();
	            var scrollSize = horizontal ? SCROLLWIDTH : SCROLLHEIGHT;
	            var offset = horizontal ? OFFSETWIDTH : OFFSETHEIGHT;

	            backwardBtn.toggle(currentScroll !== 0);
	            forwardBtn.toggle(currentScroll < scrollElement[0][scrollSize] - scrollElement[0][offset] - 1);
	        },

	        setOptions: function(options) {
	            var animation = this.options.animation;

	            this._animations(options);

	            options.animation = extend(true, animation, options.animation);

	            if ("dataSource" in options) {
	                this._initData(options);
	            }

	            this._updateClasses();
	            this._reinitOverflow(options);

	            Widget.fn.setOptions.call(this, options);
	        },

	        destroy: function() {
	            var that = this;

	            Widget.fn.destroy.call(that);

	            that._detachMenuEventsHandlers();

	            that._destroyOverflow();

	            kendo.destroy(that.element);
	        },

	        enable: function (element, enable) {
	            this._toggleDisabled(element, enable !== false);

	            return this;
	        },

	        disable: function (element) {
	            this._toggleDisabled(element, false);

	            return this;
	        },

	        append: function (item, referenceItem) {
	            referenceItem = this.element.find(referenceItem);

	            var inserted = this._insert(item, referenceItem, referenceItem.length ? referenceItem.find("> .k-menu-group, > .k-animation-container > .k-menu-group") : null);

	            each(inserted.items, function (i) {
	                inserted.group.append(this);
	                updateArrow(this);
	                storeItemSelectEventHandler(this, item[i] || item);
	            });

	            updateArrow(referenceItem);
	            updateFirstLast(inserted.group.find(".k-first, .k-last").add(inserted.items));

	            return this;
	        },

	        insertBefore: function (item, referenceItem) {
	            referenceItem = this.element.find(referenceItem);

	            var inserted = this._insert(item, referenceItem, referenceItem.parent());

	            each(inserted.items, function (i) {
	                referenceItem.before(this);
	                updateArrow(this);
	                updateFirstLast(this);
	                storeItemSelectEventHandler(this, item[i] || item);
	            });

	            updateFirstLast(referenceItem);

	            return this;
	        },

	        insertAfter: function (item, referenceItem) {
	            referenceItem = this.element.find(referenceItem);

	            var inserted = this._insert(item, referenceItem, referenceItem.parent());

	            each(inserted.items, function (i) {
	                referenceItem.after(this);
	                updateArrow(this);
	                updateFirstLast(this);
	                storeItemSelectEventHandler(this, item[i] || item);
	            });

	            updateFirstLast(referenceItem);

	            return this;
	        },

	        _insert: function (item, referenceItem, parent) {
	            var that = this,
	                items, groups;

	            if (!referenceItem || !referenceItem.length) {
	                parent = that.element;
	            }

	            var plain = $.isPlainObject(item),
	                groupData = {
	                    firstLevel: parent.hasClass(MENU),
	                    horizontal: parent.hasClass(MENU + "-horizontal"),
	                    expanded: true,
	                    length: parent.children().length
	                };

	            if (referenceItem && !parent.length) {
	                parent = $(Menu.renderGroup({ group: groupData })).appendTo(referenceItem);
	            }

	            if (plain || $.isArray(item)) { // is JSON
	                items = $($.map(plain ? [ item ] : item, function (value, idx) {
	                            if (typeof value === "string") {
	                                return $(value).get();
	                            } else {
	                                return $(Menu.renderItem({
	                                    group: groupData,
	                                    item: extend(value, { index: idx })
	                                })).get();
	                            }
	                        }));
	            } else {
	                if (typeof item == "string" && item.charAt(0) != "<") {
	                    items = that.element.find(item);
	                } else {
	                    items = $(item);
	                }

	                groups = items.find("> ul")
	                                .addClass("k-menu-group")
	                                .attr("role", "menu");

	                items = items.filter("li");

	                items.add(groups.find("> li")).each(function () {
	                    updateItemClasses(this);
	                });
	            }

	            return { items: items, group: parent };
	        },

	        remove: function (element) {
	            element = this.element.find(element);

	            var that = this,
	                parent = element.parentsUntil(that.element, allItemsSelector),
	                group = element.parent("ul:not(.k-menu)");

	            element.remove();

	            if (group && !group.children(allItemsSelector).length) {
	                var container = group.parent(animationContainerSelector);
	                if (container.length) {
	                    container.remove();
	                } else {
	                    group.remove();
	                }
	            }

	            if (parent.length) {
	                parent = parent.eq(0);

	                updateArrow(parent);
	                updateFirstLast(parent);
	            }

	            return that;
	        },

	        open: function (element) {
	            var that = this;
	            var options = that.options;
	            var horizontal = options.orientation == "horizontal";
	            var direction = options.direction;
	            var isRtl = kendo.support.isRtl(that.wrapper);
	            var overflowWrapper = that._overflowWrapper();
	            element = (overflowWrapper || that.element).find(element);

	            if (/^(top|bottom|default)$/.test(direction)) {
	                if (isRtl) {
	                    direction = horizontal ? (direction + " left").replace("default", "bottom") : "left";
	                } else {
	                    direction = horizontal ? (direction + " right").replace("default", "bottom") : "right";
	                }
	            }

	            var visiblePopups = ">.k-popup:visible,>.k-animation-container>.k-popup:visible";
	            var closePopup = function () {
	                var popup = $(this).data(KENDOPOPUP);
	                if (popup) {
	                    popup.close(true);
	                }
	            };

	            element.siblings()
	                   .find(visiblePopups)
	                   .each(closePopup);

	            if (overflowWrapper) {
	                element.find(visiblePopups).each(closePopup);
	            }

	            element.each(function () {
	                var li = $(this);

	                clearTimeout(li.data(TIMER));

	                li.data(TIMER, setTimeout(function () {
	                    var ul = li.find(".k-menu-group:first:hidden");
	                    var popup;
	                    var overflowPopup;

	                    if  (!ul[0] && overflowWrapper) {
	                        overflowPopup = that._getPopup(li);
	                        ul = overflowPopup && overflowPopup.element;
	                    }
	                    if (ul.is(":visible")) {
	                        return;
	                    }

	                    if (ul[0] && that._triggerEvent({ item: li[0], type: OPEN }) === false) {

	                        if (!ul.find(".k-menu-group")[0] && ul.children(".k-item").length > 1) {
	                            var windowHeight = $(window).height(),
	                                setScrolling = function(){
	                                    ul.css({maxHeight: windowHeight - (kendo._outerHeight(ul) - ul.height()) - kendo.getShadows(ul).bottom, overflow: "auto"});
	                                };

	                            if (kendo.support.browser.msie && kendo.support.browser.version <= 7) {
	                                setTimeout(setScrolling, 0); // timeout required by IE7
	                            } else {
	                                setScrolling();
	                            }
	                        } else {
	                            ul.css({maxHeight: "", overflow: ""});
	                        }

	                        li.data(ZINDEX, li.css(ZINDEX));
	                        var nextZindex = that.nextItemZIndex++;
	                        li.css(ZINDEX, nextZindex);

	                        if (that.options.scrollable) {
	                            li.parent().siblings(scrollButtonSelector).css({zIndex: ++nextZindex});
	                        }

	                        popup = ul.data(KENDOPOPUP);
	                        var root = li.parent().hasClass(MENU),
	                            parentHorizontal = root && horizontal,
	                            directions = parseDirection(direction, root, isRtl),
	                            effects = options.animation.open.effects,
	                            openEffects = effects !== undefined ? effects : "slideIn:" + getEffectDirection(direction, root);

	                        if (!popup) {
	                            popup = ul.kendoPopup({
	                                activate: function() { that._triggerEvent({ item: this.wrapper.parent(), type: ACTIVATE }); },
	                                deactivate: function(e) {
	                                    e.sender.element // Restore opacity after fade.
	                                        .removeData("targetTransform")
	                                        .css({ opacity: "" });
	                                    that._triggerEvent({ item: this.wrapper.parent(), type: DEACTIVATE });
	                                },
	                                origin: directions.origin,
	                                position: directions.position,
	                                collision: options.popupCollision !== undefined ? options.popupCollision : (parentHorizontal ? "fit" : "fit flip"),
	                                anchor: li,
	                                appendTo: overflowWrapper || li,
	                                animation: {
	                                    open: extend(true, { effects: openEffects }, options.animation.open),
	                                    close: options.animation.close
	                                },
	                                open: proxy(that._popupOpen, that),
	                                close: function (e) {
	                                    var li = e.sender.wrapper.parent();

	                                    if (overflowWrapper) {
	                                        var popupId = e.sender.element.data(POPUP_ID_ATTR);
	                                        if (popupId) {
	                                            li = (overflowWrapper || that.element).find(popupOpenerSelector(popupId));
	                                        }
	                                        e.sender.wrapper.children(scrollButtonSelector).hide();
	                                    }

	                                    if (!that._triggerEvent({ item: li[0], type: CLOSE })) {
	                                        li.css(ZINDEX, li.data(ZINDEX));
	                                        li.removeData(ZINDEX);

	                                        if (that.options.scrollable) {
	                                            li.parent().siblings(scrollButtonSelector).css({zIndex: ""});
	                                        }

	                                        if (touch || allPointers) {
	                                            li.removeClass(HOVERSTATE);
	                                            that._removeHoverItem();
	                                        }
	                                    } else {
	                                        e.preventDefault();
	                                    }
	                                }
	                            }).data(KENDOPOPUP);
	                        } else {
	                            popup = ul.data(KENDOPOPUP);
	                            popup.options.origin = directions.origin;
	                            popup.options.position = directions.position;
	                            popup.options.animation.open.effects = openEffects;
	                        }
	                        ul.removeAttr("aria-hidden");

	                        that._configurePopupOverflow(popup, li);

	                        popup.open();

	                        that._initPopupScrolling(popup);
	                    }

	                }, that.options.hoverDelay));
	            });

	            return that;
	        },

	        _configurePopupOverflow: function(popup, popupOpener) {
	            var that = this;
	           if (that.options.scrollable) {
	                that._wrapPopupElement(popup);
	                if (!popupOpener.attr("data-groupparent")) {
	                    var groupId = new Date().getTime();
	                    popupOpener.attr("data-groupparent", groupId);
	                    popup.element.attr("data-group", groupId);
	                }
	           }
	        },

	        _wrapPopupElement: function(popup){
	            if (!popup.element.parent().is(animationContainerSelector)) {
	                popup.wrapper = kendo.wrap(popup.element, popup.options.autosize)
	                    .css({
	                        overflow: "hidden",
	                        display: "block",
	                        position: "absolute"
	                    });
	            }
	        },

	        _initPopupScrolling: function(popup, isHorizontal, skipMouseEvents) {
	            var that = this;

	            if (that.options.scrollable && popup.element[0].scrollHeight > popup.element[0].offsetHeight) {
	                that._initPopupScrollButtons(popup, isHorizontal, skipMouseEvents);
	            }
	        },

	        _initPopupScrollButtons: function(popup, isHorizontal, skipMouseEvents) {
	            var that = this;
	            var scrollButtons = popup.wrapper.children(scrollButtonSelector);
	            var animation = that.options.animation;
	            var timeout = ((animation && animation.open && animation.open.duration) || 0) + DELAY;
	            setTimeout(function() {
	                if (!scrollButtons.length) {
	                    var backwardBtn = $(templates.scrollButton({direction: isHorizontal ? "left" : "up"}));
	                    var forwardBtn = $(templates.scrollButton({direction: isHorizontal ? "right": "down"}));

	                    scrollButtons = backwardBtn.add(forwardBtn).appendTo(popup.wrapper);

	                    that._initScrolling(popup.element, backwardBtn, forwardBtn, isHorizontal);
	                    if (!skipMouseEvents) {
	                        scrollButtons.on(MOUSEENTER + NS, function() {
	                            var overflowWrapper = that._overflowWrapper();
	                            $(getChildPopups(popup.element, overflowWrapper)).each(function(i, p){
	                                var popupOpener = overflowWrapper.find(popupOpenerSelector(p.data(POPUP_ID_ATTR)));
	                                that.close(popupOpener);
	                            });
	                        })
	                        .on(MOUSELEAVE + NS, function(){
	                            setTimeout(function(){
	                                if ($.isEmptyObject(that._openedPopups)) {
	                                    that._closeParentPopups(popup.element);
	                                }
	                            }, DELAY);
	                        });
	                    }
	                }
	                that._toggleScrollButtons(popup.element, scrollButtons.first(), scrollButtons.last(), isHorizontal);
	            }, timeout);
	        },

	        _popupOpen: function(e) {
	            e.sender.element.children("." + FOCUSEDSTATE).removeClass(FOCUSEDSTATE);
	            if (this.options.scrollable) {
	                this._setPopupHeight(e.sender);
	            }
	        },

	        _setPopupHeight: function(popup, isFixed){
	            var popupElement = popup.element;
	            var popups = popupElement.add(popupElement.parent(animationContainerSelector));

	            popups.height((popupElement.hasClass(MENU) && this._initialHeight) || "");

	            var location = popup._location(isFixed);
	            var windowHeight = $(window).height();
	            var popupOuterHeight = location.height;
	            var popupOffsetTop = isFixed ? 0 : Math.max(location.top, 0);
	            var scrollTop = isFixed ? 0 : parentsScroll(this._overflowWrapper()[0], "scrollTop");
	            var bottomScrollbar = window.innerHeight - windowHeight;
	            var maxHeight = windowHeight - kendo.getShadows(popupElement).bottom + bottomScrollbar;
	            var canFit = maxHeight + scrollTop > popupOuterHeight + popupOffsetTop;

	            if (!canFit) {
	                var height = Math.min(maxHeight, maxHeight - popupOffsetTop + scrollTop);
	                popups.css({overflow: "hidden", height: height + "px"});
	            }
	        },

	        close: function (items, dontClearClose) {
	            var that = this;
	            var overflowWrapper = that._overflowWrapper();
	            var element = (overflowWrapper || that.element);

	            items = element.find(items);

	            if (!items.length) {
	                items = element.find(">.k-item");
	            }

	            var hasChildPopupsHovered = function(currentPopup){
	                var result = false;
	                if ($.isEmptyObject(that._openedPopups)) {
	                    return result;
	                }
	                $(getChildPopups(currentPopup, overflowWrapper)).each(function(i, popup){
	                    result = !!that._openedPopups[popup.data(POPUP_ID_ATTR).toString()];
	                    return !result;
	                });
	                return result;
	            };

	            var isPopupMouseLeaved = function(opener) {
	                var groupId = opener.data(POPUP_OPENER_ATTR);
	                return (!overflowWrapper || !groupId || !that._openedPopups[groupId.toString()]);
	            };

	            items.each(function () {
	                var li = $(this);

	                if (!dontClearClose && that._isRootItem(li)) {
	                    that.clicked = false;
	                }

	                clearTimeout(li.data(TIMER));

	                li.data(TIMER, setTimeout(function () {
	                    var popup = that._getPopup(li);
	                    if (popup && (isPopupMouseLeaved(li) || that._forceClose)) {
	                        if (!that._forceClose && hasChildPopupsHovered(popup.element)) {
	                            return;
	                        }

	                        popup.close();
	                        popup.element.attr("aria-hidden", true);

	                        if (overflowWrapper) {
	                            if (that._forceClose && items.last().is(li[0])) {
	                                delete that._forceClose;
	                            }
	                        }
	                    }
	                }, that.options.hoverDelay));
	            });

	            return that;
	        },

	        _getPopup: function(li) {
	            var that = this;
	            var popup = li.find(".k-menu-group:not(.k-list-container):not(.k-calendar-container):first:visible").data(KENDOPOPUP);
	            var overflowWrapper = that._overflowWrapper();

	            if (!popup && overflowWrapper) {
	                var groupId = li.data(POPUP_OPENER_ATTR);
	                if (groupId) {
	                    var popupElement = overflowWrapper.find(popupGroupSelector(groupId));
	                    popup = popupElement.data(KENDOPOPUP);
	                }
	            }
	            return popup;
	        },

	        _toggleDisabled: function (items, enable) {
	            this.element.find(items).each(function () {
	                $(this)
	                    .toggleClass(DEFAULTSTATE, enable)
	                    .toggleClass(DISABLEDSTATE, !enable)
	                    .attr("aria-disabled", !enable);
	            });
	        },

	        _toggleHover: function(e) {
	            var target = $(kendo.eventTarget(e) || e.target).closest(allItemsSelector),
	                isEnter = e.type == MOUSEENTER || MOUSEDOWN.indexOf(e.type) !== -1;

	            if (!target.parents("li." + DISABLEDSTATE).length) {
	                target.toggleClass(HOVERSTATE, isEnter || e.type == "mousedown" || e.type == "click");
	            }

	            this._removeHoverItem();
	        },

	        _preventClose: function() {
	            if (!this.options.closeOnClick) {
	                this._closurePrevented = true;
	            }
	        },

	        _checkActiveElement: function(e) {
	            var that = this,
	                hoverItem = $(e ? e.currentTarget : this._hoverItem()),
	                target = that._findRootParent(hoverItem)[0];

	            if (!this._closurePrevented) {
	                setTimeout(function() {
	                    if (!document.hasFocus() || (!contains(target, kendo._activeElement()) && e && !contains(target, e.currentTarget))) {
	                        that.close(target);
	                    }
	                }, 0);
	            }

	            this._closurePrevented = false;
	        },

	        _removeHoverItem: function() {
	            var oldHoverItem = this._hoverItem();

	            if (oldHoverItem && oldHoverItem.hasClass(FOCUSEDSTATE)) {
	                oldHoverItem.removeClass(FOCUSEDSTATE);
	                this._oldHoverItem = null;
	            }
	        },

	        _updateClasses: function() {
	            var element = this.element,
	                nonContentGroupsSelector = ".k-menu-init div ul",
	                items;

	            element.removeClass("k-menu-horizontal k-menu-vertical");
	            element.addClass("k-widget k-reset k-header k-menu-init " + MENU).addClass(MENU + "-" + this.options.orientation);

	            element.find("li > ul")
	                   .filter(function() {
	                       return !kendo.support.matchesSelector.call(this, nonContentGroupsSelector);
	                   })
	                   .addClass("k-group k-menu-group")
	                   .attr("role", "menu")
	                   .attr("aria-hidden", element.is(":visible"))
	                   .end()
	                   .find("li > div")
	                   .addClass("k-content")
	                   .attr("tabindex", "-1"); // Capture the focus before the Menu

	            items = element.find("> li,.k-menu-group > li");

	            element.removeClass("k-menu-init");

	            items.each(function () {
	                updateItemClasses(this);
	            });
	        },

	        _mouseenter: function (e) {
	            var that = this;
	            var element = $(e.currentTarget);
	            var hasChildren = that._itemHasChildren(element);
	            var popupId = element.data(POPUP_OPENER_ATTR) || element.parent().data(POPUP_ID_ATTR);
	            var pointerTouch = isPointerTouch(e);

	            if (popupId) {
	                that._openedPopups[popupId.toString()] = true;
	            }

	            if (e.delegateTarget != element.parents(menuSelector)[0] && e.delegateTarget != element.parents(".k-menu-scroll-wrapper,.k-popups-wrapper")[0]) {
	                return;
	            }

	            if ((!that.options.openOnClick || that.clicked) && !touch &&
	                !(pointerTouch && that._isRootItem(element.closest(allItemsSelector)))) {
	                if (!contains(e.currentTarget, e.relatedTarget) && hasChildren) {
	                    that.open(element);
	                }
	            }

	            if (that.options.openOnClick && that.clicked || touch) {
	                element.siblings().each(proxy(function (_, sibling) {
	                    that.close(sibling, true);
	                }, that));
	            }
	        },

	        _mouseleave: function (e) {
	            var that = this;
	            var element = $(e.currentTarget);
	            var popupOpener = element.data(POPUP_OPENER_ATTR);
	            var hasChildren = (element.children(animationContainerSelector).length || element.children(groupSelector).length) || popupOpener;
	            var $window = $(window);

	            if (popupOpener) {
	                delete that._openedPopups[popupOpener.toString()];
	            }

	            if (element.parentsUntil(animationContainerSelector, ".k-list-container,.k-calendar-container")[0]) {
	                e.stopImmediatePropagation();
	                return;
	            }

	            if (!that.options.openOnClick && !touch && !isPointerTouch(e) &&
	                !contains(e.currentTarget, e.relatedTarget || e.target) && hasChildren &&
	                !contains(e.currentTarget, kendo._activeElement())) {
	                    that.close(element);
	                    return;
	            }

	            // Detect if cursor goes outside the viewport of the browser
	            if( (!e.toElement && !e.relatedTarget) ||
	                e.clientX < 0 || e.clientY < 0 ||
	                e.clientY > $window.height() ||
	                e.clientX > $window.width()){
	                that.close(element);
	            }
	        },

	        _mouseenterPopup: function(e){
	            var that = this;
	            var popupElement = $(e.currentTarget);

	            if (popupElement.parent().is(animationContainerSelector)) {
	                 return;
	            }

	            popupElement = popupElement.children("ul");
	            var popupId = popupElement.data(POPUP_ID_ATTR);

	            if (popupId) {
	                that._openedPopups[popupId.toString()] = true;
	            }
	        },

	        _mouseleavePopup: function (e) {
	            var that = this;
	            var popupElement = $(e.currentTarget);

	            if (!isPointerTouch(e) && popupElement.is(animationContainerSelector)) {
	                that._closePopups(popupElement.children("ul"));
	            }
	        },

	        _closePopups: function(rootPopup) {
	            var that = this;
	            var overflowWrapper = that._overflowWrapper();
	            var popupId = rootPopup.data(POPUP_ID_ATTR);

	            if (popupId) {
	                delete that._openedPopups[popupId.toString()];
	                var groupParent = overflowWrapper.find(popupOpenerSelector(popupId));

	                setTimeout(function() {
	                    if (that.options.openOnClick) {
	                        that._closeChildPopups(rootPopup);
	                    } else {
	                        if ($.isEmptyObject(that._openedPopups)) {
	                            var innerPopup = that._innerPopup(rootPopup);
	                            that._closeParentPopups(innerPopup);
	                        } else {
	                            that.close(groupParent, true);
	                        }
	                    }
	                }, 0);
	            }
	        },

	        _closeChildPopups: function(current){
	            var that = this;
	            var overflowWrapper = that._overflowWrapper();
	            $(getChildPopups(current, overflowWrapper)).each(function(){
	                var popupOpener = overflowWrapper.find(popupOpenerSelector(this.data(POPUP_ID_ATTR)));
	                that.close(popupOpener, true);
	            });
	        },

	        _innerPopup: function(current) {
	            var overflowWrapper = this._overflowWrapper();
	            var popups = getChildPopups(current, overflowWrapper);
	            return popups[popups.length - 1] || current;
	        },

	        _closeParentPopups: function (current) {
	            var that = this;
	            var overflowWrapper = that._overflowWrapper();
	            var popupId = current.data(POPUP_ID_ATTR);
	            var popupOpener = overflowWrapper.find(popupOpenerSelector(popupId));
	            popupId = popupOpener.parent().data(POPUP_ID_ATTR);
	            that.close(popupOpener, true);
	            while (popupId && !that._openedPopups[popupId]) {
	                if (popupOpener.parent().is(menuSelector)) {
	                    break;
	                }
	                popupOpener = overflowWrapper.find(popupOpenerSelector(popupId));
	                that.close(popupOpener, true);
	                popupId = popupOpener.parent().data(POPUP_ID_ATTR);
	            }
	        },

	        _click: function (e) {
	            var that = this, openHandle,
	                options = that.options,
	                target = $(kendo.eventTarget(e)),
	                targetElement = target[0],
	                nodeName = target[0] ? target[0].nodeName.toUpperCase() : "",
	                formNode = (nodeName == "INPUT" || nodeName == "SELECT" || nodeName == "BUTTON" || nodeName == "LABEL"),
	                link = target.closest("." + LINK),
	                element = target.closest(allItemsSelector),
	                itemElement = element[0],
	                href = link.attr("href"), childGroup, childGroupVisible,
	                targetHref = target.attr("href"),
	                sampleHref = $("<a href='#' />").attr("href"),
	                isLink = (!!href && href !== sampleHref),
	                isLocalLink = isLink && !!href.match(/^#/),
	                isTargetLink = (!!targetHref && targetHref !== sampleHref),
	                overflowWrapper = that._overflowWrapper(),
	                shouldCloseTheRootItem;

	            while (targetElement && targetElement.parentNode != itemElement) {
	                targetElement = targetElement.parentNode;
	            }

	            if ($(targetElement).is(templateSelector)) {
	                return;
	            }

	            if (element.hasClass(DISABLEDSTATE)) {
	                e.preventDefault();
	                return;
	            }

	            if (!e.handled && that._triggerSelect(target, itemElement) && !formNode) { // We shouldn't stop propagation and shoudn't prevent form elements.
	                e.preventDefault();
	            }

	            e.handled = true;

	            childGroup = element.children(popupSelector);
	            if (overflowWrapper) {
	                var childPopupId = element.data(POPUP_OPENER_ATTR);
	                if (childPopupId) {
	                    childGroup = overflowWrapper.find(popupGroupSelector(childPopupId));
	                }
	            }
	            childGroupVisible = childGroup.is(":visible");
	            shouldCloseTheRootItem = options.openOnClick && childGroupVisible && that._isRootItem(element);

	            if (options.closeOnClick && (!isLink || isLocalLink) && (!childGroup.length || shouldCloseTheRootItem)) {
	                element.removeClass(HOVERSTATE).css("height"); // Force refresh for Chrome
	                that._oldHoverItem = that._findRootParent(element);
	                var item = that._parentsUntil(link, that.element, allItemsSelector);
	                that._forceClose = !!overflowWrapper;
	                that.close(item);
	                that.clicked = false;
	                if ("MSPointerUp".indexOf(e.type) != -1) {
	                    e.preventDefault();
	                }
	                return;
	            }

	            if (isLink && e.enterKey) {
	                link[0].click();
	            }

	            if ((!that._isRootItem(element) || !options.openOnClick) && !kendo.support.touch && !(allPointers && that._isRootItem(element.closest(allItemsSelector)))) {
	                return;
	            }

	            if (!isLink && !formNode && !isTargetLink) {
	                e.preventDefault();
	            }

	            that.clicked = true;
	            openHandle = childGroup.is(":visible") ? CLOSE : OPEN;
	            if (!options.closeOnClick && openHandle == CLOSE) {
	                return;
	            }
	            that[openHandle](element);
	        },

	        _parentsUntil: function(context, top, selector) {
	            var overflowWrapper = this._overflowWrapper();
	            if (!overflowWrapper) {
	                return context.parentsUntil(top, selector);
	            } else {
	                var parents = overflowMenuParents(context, overflowWrapper);
	                var result = [];
	                $(parents).each(function(){
	                    var parent = $(this);
	                    if (parent.is(top)) {
	                        return false;
	                    }
	                    if (parent.is(selector)) {
	                        result.push(this);
	                    }
	                });
	                return $(result);
	            }
	        },

	        _triggerSelect: function (target, itemElement) {
	            var selectHandler = target.data("selectHandler"),
	                itemSelectEventData;

	            if (selectHandler) {
	                itemSelectEventData = this._getEventData(target);
	                selectHandler.call(this, itemSelectEventData);
	            }

	            var isSelectItemDefaultPrevented = itemSelectEventData && itemSelectEventData.isDefaultPrevented();
	            var isSelectDefaultPrevented = this._triggerEvent({ item: itemElement, type: SELECT });
	            return isSelectItemDefaultPrevented || isSelectDefaultPrevented;
	        },

	        _getEventData: function (target) {
	            var eventData = {
	                sender: this,
	                target: target,
	                _defaultPrevented: false,
	                preventDefault: function () {
	                    this._defaultPrevented = true;
	                },
	                isDefaultPrevented: function () {
	                    return this._defaultPrevented;
	                }
	            };
	            return eventData;
	        },

	        _documentClick: function (e) {
	            var that = this;

	            if (contains((that._overflowWrapper() || that.element)[0], e.target)) {
	                return;
	            }

	            that.clicked = false;
	        },

	        _focus: function (e) {
	            var that = this,
	                target = e.target,
	                hoverItem = that._hoverItem(),
	                active = activeElement();

	            if (target != that.wrapper[0] && !$(target).is(":kendoFocusable")) {
	                e.stopPropagation();
	                $(target).closest(".k-content").closest(".k-menu-group").closest(".k-item").addClass(FOCUSEDSTATE);
	                that.wrapper.focus();
	                return;
	            }

	            if (active === e.currentTarget) {
	                if (hoverItem.length) {
	                    that._moveHover([], hoverItem);
	                } else if (!that._oldHoverItem) {
	                    that._moveHover([], that.wrapper.children().first());
	                }
	            }
	        },

	        _keydown: function (e) {
	            var that = this,
	                key = e.keyCode,
	                hoverItem = that._oldHoverItem,
	                target,
	                belongsToVertical,
	                hasChildren,
	                isRtl = kendo.support.isRtl(that.wrapper);

	            if (e.target != e.currentTarget && key != keys.ESC) {
	                return;
	            }

	            if (!hoverItem) {
	                hoverItem  = that._oldHoverItem = that._hoverItem();
	            }

	            belongsToVertical = that._itemBelongsToVertival(hoverItem);
	            hasChildren = that._itemHasChildren(hoverItem);

	            if (key == keys.RIGHT) {
	                target = that[isRtl ? "_itemLeft" : "_itemRight"](hoverItem, belongsToVertical, hasChildren);
	            } else if (key == keys.LEFT) {
	                target = that[isRtl ? "_itemRight" : "_itemLeft"](hoverItem, belongsToVertical, hasChildren);
	            } else if (key == keys.DOWN) {
	                target = that._itemDown(hoverItem, belongsToVertical, hasChildren);
	            } else if (key == keys.UP) {
	                target = that._itemUp(hoverItem, belongsToVertical, hasChildren);
	            } else if (key == keys.ESC) {
	                target = that._itemEsc(hoverItem, belongsToVertical);
	            } else if (key == keys.ENTER || key == keys.SPACEBAR) {
	                target = hoverItem.children(".k-link");
	                if (target.length > 0) {
	                    that._click({ target: target[0], preventDefault: function () {}, enterKey: true });
	                    that._moveHover(hoverItem, that._findRootParent(hoverItem));
	                }
	            } else if (key == keys.TAB) {
	                target = that._findRootParent(hoverItem);
	                that._moveHover(hoverItem, target);
	                that._checkActiveElement();
	                return;
	            }

	            if (target && target[0]) {
	                e.preventDefault();
	                e.stopPropagation(); // needed to handle ESC in column menu only when a root item is focused
	            }
	        },

	        _hoverItem: function() {
	            return this.wrapper.find(".k-item.k-state-hover,.k-item.k-state-focused").filter(":visible");
	        },

	        _itemBelongsToVertival: function (item) {
	            var menuIsVertical = this.wrapper.hasClass("k-menu-vertical");

	            if (!item.length) {
	                return menuIsVertical;
	            }
	            return item.parent().hasClass("k-menu-group") || menuIsVertical;
	        },

	        _itemHasChildren: function (item) {
	            if (!item || !item.length || !item[0].nodeType) {
	                return false;
	            }
	            return item.children("ul.k-menu-group, div.k-animation-container").length > 0 ||
	                (!!item.data(POPUP_OPENER_ATTR) && !!this._overflowWrapper().children(popupGroupSelector(item.data(POPUP_OPENER_ATTR))));
	        },

	        _moveHover: function (item, nextItem) {
	            var that = this,
	                id = that._ariaId;

	            if (item.length && nextItem.length) {
	                item.removeClass(FOCUSEDSTATE);
	            }

	            if (nextItem.length) {
	                if (nextItem[0].id) {
	                    id = nextItem[0].id;
	                }

	                nextItem.addClass(FOCUSEDSTATE);
	                that._oldHoverItem = nextItem;

	                if (id) {
	                    that.element.removeAttr("aria-activedescendant");
	                    $("#" + id).removeAttr("id");
	                    nextItem.attr("id", id);
	                    that.element.attr("aria-activedescendant", id);
	                }
	                that._scrollToItem(nextItem);
	            }
	        },

	        _findRootParent: function (item) {
	            if (this._isRootItem(item)) {
	                return item;
	            } else {
	                return this._parentsUntil(item, menuSelector, "li.k-item").last();
	            }
	        },

	        _isRootItem: function (item) {
	            return item.parent().hasClass(MENU);
	        },

	        _itemRight: function (item, belongsToVertical, hasChildren) {
	            var that = this,
	                nextItem,
	                parentItem,
	                overflowWrapper;

	            if (item.hasClass(DISABLEDSTATE)) {
	                return;
	            }

	            if (!belongsToVertical) {
	                nextItem = item.nextAll(nextSelector);
	                if (!nextItem.length) {
	                    nextItem = item.prevAll(lastSelector);
	                }
	            } else if (hasChildren) {
	                that.open(item);
	                nextItem = that._childPopupElement(item).children().first();
	            } else if (that.options.orientation == "horizontal") {
	                parentItem = that._findRootParent(item);
	                overflowWrapper = that._overflowWrapper();
	                if (overflowWrapper) {
	                    var rootPopup = itemPopup(parentItem, overflowWrapper);
	                    that._closeChildPopups(rootPopup);
	                }
	                that.close(parentItem);
	                nextItem = parentItem.nextAll(nextSelector);
	            }

	            if (nextItem && !nextItem.length) {
	                nextItem = that.wrapper.children(".k-item").first();
	            } else if (!nextItem) {
	                nextItem = [];
	            }

	            that._moveHover(item, nextItem);
	            return nextItem;
	        },

	        _itemLeft: function (item, belongsToVertical) {
	            var that = this,
	                nextItem,
	                overflowWrapper;

	            if (!belongsToVertical) {
	                nextItem = item.prevAll(nextSelector);
	                if (!nextItem.length) {
	                    nextItem = item.nextAll(lastSelector);
	                }
	            } else {
	                nextItem = item.parent().closest(".k-item");
	                overflowWrapper = that._overflowWrapper();
	                if (!nextItem.length && overflowWrapper) {
	                    nextItem = popupParentItem(item.parent(), overflowWrapper);
	                }
	                that.close(nextItem);
	                if (that._isRootItem(nextItem) && that.options.orientation == "horizontal") {
	                    nextItem = nextItem.prevAll(nextSelector);
	                }
	            }

	            if (!nextItem.length) {
	                nextItem = that.wrapper.children(".k-item").last();
	            }

	            that._moveHover(item, nextItem);
	            return nextItem;
	        },

	        _itemDown: function (item, belongsToVertical, hasChildren) {
	            var that = this,
	                nextItem;

	            if (!belongsToVertical) {
	                if (!hasChildren || item.hasClass(DISABLEDSTATE)) {
	                    return;
	                } else {
	                    that.open(item);
	                    nextItem = that._childPopupElement(item).children().first();
	                }
	            } else {
	                nextItem = item.nextAll(nextSelector);
	            }

	            if (!nextItem.length && item.length) {
	                nextItem = item.parent().children().first();
	            } else if (!item.length) {
	                nextItem = that.wrapper.children(".k-item").first();
	            }

	            that._moveHover(item, nextItem);
	            return nextItem;
	        },

	        _itemUp: function (item, belongsToVertical) {
	            var that = this,
	                nextItem;

	            if (!belongsToVertical) {
	                return;
	            } else {
	                nextItem = item.prevAll(nextSelector);
	            }

	            if (!nextItem.length && item.length) {
	                nextItem = item.parent().children().last();
	            } else if (!item.length) {
	                nextItem = that.wrapper.children(".k-item").last();
	            }

	            that._moveHover(item, nextItem);
	            return nextItem;
	        },

	        _scrollToItem: function(item){
	            var that = this;
	            if (that.options.scrollable && item && item.length) {
	                var ul = item.parent();
	                var isHorizontal = ul.hasClass(MENU) ? that.options.orientation == "horizontal" : false;
	                var scrollDir = isHorizontal ? "scrollLeft" : "scrollTop";
	                var getSize = isHorizontal ? kendo._outerWidth : kendo._outerHeight;
	                var currentScrollOffset = ul[scrollDir]();
	                var itemSize = getSize(item);
	                var itemOffset = item[0][isHorizontal ? "offsetLeft" : "offsetTop"];
	                var ulSize = getSize(ul);
	                var scrollButtons = ul.siblings(scrollButtonSelector);
	                var scrollButtonSize = scrollButtons.length ? getSize(scrollButtons.first()) : 0;
	                var itemPosition;

	                if (currentScrollOffset + ulSize < itemOffset + itemSize + scrollButtonSize) {
	                    itemPosition = itemOffset + itemSize - ulSize + scrollButtonSize;
	                } else if (currentScrollOffset > itemOffset - scrollButtonSize) {
	                    itemPosition = itemOffset - scrollButtonSize;
	                }

	                if (!isNaN(itemPosition)) {
	                    var scrolling = {};
	                    scrolling[scrollDir] = itemPosition;
	                    ul.finish().animate(scrolling, "fast", "linear", function () {
	                        that._toggleScrollButtons(ul, scrollButtons.first(), scrollButtons.last(), isHorizontal);
	                    });
	                }
	            }
	        },

	        _itemEsc: function (item, belongsToVertical) {
	            var that = this,
	                nextItem;

	            if (!belongsToVertical) {
	                return item;
	            } else {
	                nextItem = item.parent().closest(".k-item");
	                that.close(nextItem);
	                that._moveHover(item, nextItem);
	            }

	            return nextItem;
	        },

	        _childPopupElement: function(item) {
	            var popupElement = item.find(".k-menu-group");
	            var wrapper = this._overflowWrapper();
	            if (!popupElement.length && wrapper) {
	                popupElement = itemPopup(item, wrapper);
	            }
	            return popupElement;
	        },

	        _triggerEvent: function(e) {
	            var that = this;

	            return that.trigger(e.type, { type: e.type, item: e.item });
	        },

	        _focusHandler: function (e) {
	            var that = this,
	                item = $(kendo.eventTarget(e)).closest(allItemsSelector);

	            if (item.hasClass(DISABLEDSTATE)) {
	                return;
	            }

	            setTimeout(function () {
	                that._moveHover([], item);
	                if (item.children(".k-content")[0]) {
	                    item.parent().closest(".k-item").removeClass(FOCUSEDSTATE);
	                }
	            }, 200);
	        },

	        _animations: function(options) {
	            if (options && ("animation" in options) && !options.animation) {
	                options.animation = { open: { effects: {} }, close: { hide: true, effects: {} } };
	            }
	        }

	    });

	    // client-side rendering
	    extend(Menu, {
	        renderItem: function (options) {
	            options = extend({ menu: {}, group: {} }, options);

	            var empty = templates.empty,
	                item = options.item;

	            return templates.item(extend(options, {
	                image: item.imageUrl ? templates.image : empty,
	                sprite: item.spriteCssClass ? templates.sprite : empty,
	                itemWrapper: templates.itemWrapper,
	                renderContent: Menu.renderContent,
	                arrow: item.items || item.content ? templates.arrow : empty,
	                subGroup: Menu.renderGroup
	            }, rendering));
	        },

	        renderGroup: function (options) {
	            return templates.group(extend({
	                renderItems: function(options) {
	                    var html = "",
	                        i = 0,
	                        items = options.items,
	                        len = items ? items.length : 0,
	                        group = extend({ length: len }, options.group);

	                    for (; i < len; i++) {
	                        html += Menu.renderItem(extend(options, {
	                            group: group,
	                            item: extend({ index: i }, items[i])
	                        }));
	                    }

	                    return html;
	                }
	            }, options, rendering));
	        },

	        renderContent: function (options) {
	            return templates.content(extend(options, rendering));
	        }
	    });

	    var ContextMenu = Menu.extend({
	        init: function(element, options) {
	            var that = this;

	            Menu.fn.init.call(that, element, options);

	            that._marker = kendo.guid().substring(0, 8);

	            that.target = $(that.options.target);

	            that._popup();
	            that._wire();
	        },

	        _initOverflow: function(options){
	            var that = this;
	            if (options.scrollable && !that._overflowWrapper()) {
	                that._openedPopups = {};

	                that._popupsWrapper = (that.element.parent().is(animationContainerSelector) ? that.element.parent() : that.element)
	                    .wrap("<div class='k-popups-wrapper " + options.orientation + "'></div>").parent();

	                if (that.options.orientation == "horizontal") {
	                    removeSpacesBetweenItems(that.element);
	                }

	                if (options.appendTo) {
	                    options.appendTo.append(that._popupsWrapper);
	                }

	                that._initialHeight = that.element[0].style.height;
	                that._initialWidth = that.element[0].style.width;
	            }
	        },

	        options: {
	            name: "ContextMenu",
	            filter: null,
	            showOn: "contextmenu",
	            orientation: "vertical",
	            alignToAnchor: false,
	            target: "body"
	        },

	        events: [
	            OPEN,
	            CLOSE,
	            ACTIVATE,
	            DEACTIVATE,
	            SELECT
	        ],

	        setOptions: function(options) {
	            var that = this;

	            Menu.fn.setOptions.call(that, options);

	            that.target.off(that.showOn + NS + that._marker, that._showProxy);

	            if (that.userEvents) {
	                that.userEvents.destroy();
	            }

	            that.target = $(that.options.target);
	            if (options.orientation && that.popup.wrapper[0]) {
	                that.popup.element.unwrap();
	            }

	            that._wire();

	            Menu.fn.setOptions.call(this, options);
	        },

	        destroy: function() {
	            var that = this;

	            that.target.off(that.options.showOn + NS + that._marker);
	            DOCUMENT_ELEMENT.off(kendo.support.mousedown + NS + that._marker, that._closeProxy);

	            if (that.userEvents) {
	                that.userEvents.destroy();
	            }

	            Menu.fn.destroy.call(that);
	        },

	        open: function(x, y) {
	            var that = this;

	            x = $(x)[0];

	            if (contains(that.element[0], $(x)[0]) || that._itemHasChildren($(x))) { // call parent open for children elements
	                Menu.fn.open.call(that, x);
	            } else {
	                if (that._triggerEvent({ item: that.element, type: OPEN }) === false) {
	                    if (that.popup.visible() && that.options.filter) {
	                        that.popup.close(true);
	                        that.popup.element.kendoStop(true);
	                    }

	                    if (y !== undefined) {
	                        var overflowWrapper = that._overflowWrapper();
	                        if (overflowWrapper) {
	                            var offset = overflowWrapper.offset();
	                            x -= offset.left;
	                            y -= offset.top;
	                        }
	                        that.popup.wrapper.hide();
	                        that._configurePopupScrolling(x, y);
	                        that.popup.open(x, y);
	                    } else {
	                        that.popup.options.anchor = (x ? x : that.popup.anchor) || that.target;
	                        that.popup.element.kendoStop(true);
	                        that._configurePopupScrolling();
	                        that.popup.open();
	                    }

	                    DOCUMENT_ELEMENT.off(that.popup.downEvent, that.popup._mousedownProxy);
	                    DOCUMENT_ELEMENT
	                        .on(kendo.support.mousedown + NS + that._marker, that._closeProxy);
	                }
	            }

	            return that;
	        },

	        _configurePopupScrolling: function(x, y){
	            var that = this;
	            var popup = that.popup;
	            var isHorizontal = that.options.orientation == "horizontal";

	            if (that.options.scrollable) {
	                that._wrapPopupElement(popup);

	                popup.element.parent().css({
	                    position: "",
	                    height: ""
	                });

	                popup.element.css({
	                    visibility: "hidden",
	                    display: "",
	                    position: ""
	                });

	                if (isHorizontal) {
	                    that._setPopupWidth(popup, isNaN(x) ? undefined : {isFixed: true, x: x, y: y});
	                } else {
	                    that._setPopupHeight(popup, isNaN(x) ? undefined : {isFixed: true, x: x, y: y});
	                }

	                popup.element.css({
	                    visibility: "",
	                    display: "none",
	                    position: "absolute"
	                });

	                that._initPopupScrollButtons(popup, isHorizontal, true);
	                popup.element.siblings(scrollButtonSelector).hide();
	            }
	        },

	        _setPopupWidth: function(popup, isFixed){
	            var popupElement = popup.element;
	            var popups = popupElement.add(popupElement.parent(animationContainerSelector));

	            popups.width(this._initialWidth || "");

	            var location = popup._location(isFixed);
	            var windowWidth = $(window).width();
	            var popupOuterWidth = location.width;
	            var popupOffsetLeft = Math.max(location.left, 0);
	            var scrollLeft = isFixed ? 0 : parentsScroll(this._overflowWrapper()[0], "scrollLeft");
	            var shadow = kendo.getShadows(popupElement);
	            var maxWidth = windowWidth - shadow.left - shadow.right;
	            var canFit = maxWidth + scrollLeft > popupOuterWidth + popupOffsetLeft;

	            if (!canFit) {
	                popups.css({overflow: "hidden", width: (maxWidth - popupOffsetLeft + scrollLeft) + "px"});
	            }
	        },

	        close: function() {
	            var that = this;

	            if (contains(that.element[0], $(arguments[0])[0]) || that._itemHasChildren(arguments[0])) {
	                Menu.fn.close.call(that, arguments[0]);
	            } else {
	                if (that.popup.visible()) {
	                    if (that._triggerEvent({ item: that.element, type: CLOSE }) === false) {
	                        that.popup.close();
	                        DOCUMENT_ELEMENT.off(kendo.support.mousedown + NS, that._closeProxy);
	                        that.unbind(SELECT, that._closeTimeoutProxy);
	                    }
	                }
	            }
	        },

	        _showHandler: function (e) {
	            var ev = e, offset,
	                that = this,
	                options = that.options;

	            if (e.event) {
	                ev = e.event;
	                ev.pageX = e.x.location;
	                ev.pageY = e.y.location;
	            }

	            if (contains(that.element[0], e.relatedTarget || e.target)) {
	                return;
	            }

	            that._eventOrigin = ev;

	            ev.preventDefault();
	            ev.stopImmediatePropagation();

	            that.element.find("." + FOCUSEDSTATE).removeClass(FOCUSEDSTATE);

	            if ((options.filter && kendo.support.matchesSelector.call(ev.currentTarget, options.filter)) || !options.filter) {
	                if (options.alignToAnchor) {
	                    that.popup.options.anchor = ev.currentTarget;
	                    that.open(ev.currentTarget);
	                } else {
	                    that.popup.options.anchor = ev.currentTarget;

	                    if (that._targetChild) {
	                        offset = that.target.offset();
	                        that.open(ev.pageX - offset.left, ev.pageY - offset.top);
	                    } else {
	                        that.open(ev.pageX, ev.pageY);
	                    }
	                }
	            }
	        },

	        _closeHandler: function (e) {
	            var that = this,
	                target = $(e.relatedTarget || e.target),
	                sameTarget = target.closest(that.target.selector)[0] == that.target[0],
	                item = target.closest(itemSelector),
	                children = that._itemHasChildren(item),
	                overflowWrapper = that._overflowWrapper(),
	                containment = contains(that.element[0], target[0]) || (overflowWrapper && contains(overflowWrapper[0], target[0]));

	            that._eventOrigin = e;

	            var normalClick = e.which !== 3;

	            if (that.popup.visible() && ((normalClick && sameTarget) || !sameTarget) && ((that.options.closeOnClick && !children && containment) || !containment)) {
	                if (containment) {
	                    this.unbind(SELECT, this._closeTimeoutProxy);
	                    that.bind(SELECT, that._closeTimeoutProxy);
	                } else {
	                    that.close();
	                }
	            }
	        },

	        _wire: function() {
	            var that = this,
	                options = that.options,
	                target = that.target;

	            that._showProxy = proxy(that._showHandler, that);
	            that._closeProxy = proxy(that._closeHandler, that);
	            that._closeTimeoutProxy = proxy(that.close, that);

	            if (target[0]) {
	                if (kendo.support.mobileOS && options.showOn == "contextmenu") {
	                    that.userEvents = new kendo.UserEvents(target, {
	                        filter: options.filter,
	                        allowSelection: false
	                    });

	                    target.on(options.showOn + NS + that._marker, false);
	                    that.userEvents.bind("hold", that._showProxy);
	                } else {
	                    if (options.filter) {
	                        target.on(options.showOn + NS + that._marker, options.filter, that._showProxy);
	                    } else {
	                        target.on(options.showOn + NS + that._marker, that._showProxy);
	                    }
	                }
	            }
	        },

	        _triggerEvent: function(e) {
	            var that = this,
	                anchor = $(that.popup.options.anchor)[0],
	                origin = that._eventOrigin;

	            that._eventOrigin = undefined;

	            return that.trigger(e.type, extend({ type: e.type, item: e.item || this.element[0], target: anchor }, origin ? { event: origin } : {} ));
	        },

	        _popup: function() {
	            var that = this;
	            var overflowWrapper = that._overflowWrapper();

	            that._triggerProxy = proxy(that._triggerEvent, that);

	            that.popup = that.element
	                            .addClass("k-context-menu")
	                            .kendoPopup({
	                                anchor: that.target || "body",
	                                copyAnchorStyles: that.options.copyAnchorStyles,
	                                collision: that.options.popupCollision || "fit",
	                                animation: that.options.animation,
	                                activate: that._triggerProxy,
	                                deactivate: that._triggerProxy,
	                                appendTo: overflowWrapper || that.options.appendTo,
	                                close: !overflowWrapper ? $.noop : function(e) {
	                                    $(getChildPopups(e.sender.element, overflowWrapper)).each(function(i, p) {
	                                        var popup = p.data(KENDOPOPUP);
	                                        if (popup) {
	                                            popup.close(true);
	                                        }
	                                    });
	                                }
	                            }).data(KENDOPOPUP);

	            that._targetChild = contains(that.target[0], that.popup.element[0]);
	        }
	    });

	    ui.plugin(Menu);
	    ui.plugin(ContextMenu);

	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(422));


/***/ })

/******/ });

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(467);


/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 467:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(468), __webpack_require__(469) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "mobile.actionsheet",
	    name: "ActionSheet",
	    category: "mobile",
	    description: "The mobile ActionSheet widget displays a set of choices related to a task the user initiates.",
	    depends: [ "mobile.popover", "mobile.shim" ]
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        support = kendo.support,
	        ui = kendo.mobile.ui,
	        Shim = ui.Shim,
	        Popup = ui.Popup,
	        Widget = ui.Widget,
	        OPEN = "open",
	        CLOSE = "close",
	        COMMAND = "command",
	        BUTTONS = "li>a",
	        CONTEXT_DATA = "actionsheetContext",
	        WRAP = '<div class="km-actionsheet-wrapper" />',
	        cancelTemplate = kendo.template('<li class="km-actionsheet-cancel"><a href="\\#">#:cancel#</a></li>');

	    var ActionSheet = Widget.extend({
	        init: function(element, options) {
	            var that = this,
	                ShimClass,
	                tablet,
	                type,
	                os = support.mobileOS;

	            Widget.fn.init.call(that, element, options);

	            options = that.options;
	            type = options.type;
	            element = that.element;

	            if (type === "auto") {
	                tablet = os && os.tablet;
	            } else {
	                tablet = type === "tablet";
	            }

	            ShimClass = tablet ? Popup : Shim;

	            if (options.cancelTemplate) {
	                cancelTemplate = kendo.template(options.cancelTemplate);
	            }

	            element
	                .addClass("km-actionsheet")
	                .append(cancelTemplate({cancel: that.options.cancel}))
	                .wrap(WRAP)
	                .on("up", BUTTONS, "_click")
	                .on("click", BUTTONS, kendo.preventDefault);

	            that.view().bind("destroy", function() {
	                that.destroy();
	            });

	            that.wrapper = element.parent().addClass(type ? " km-actionsheet-" + type : "");

	            that.shim = new ShimClass(that.wrapper, $.extend({modal: os.ios && os.majorVersion < 7, className: "km-actionsheet-root"}, that.options.popup) );

	            that._closeProxy = $.proxy(that, "_close");
	            that._shimHideProxy = $.proxy(that, "_shimHide");
	            that.shim.bind("hide", that._shimHideProxy);

	            if (tablet) {
	                kendo.onResize(that._closeProxy);
	            }

	            kendo.notify(that, ui);
	        },

	        events: [
	            OPEN,
	            CLOSE,
	            COMMAND
	        ],

	        options: {
	            name: "ActionSheet",
	            cancel: "Cancel",
	            type: "auto",
	            popup: { height: "auto" }
	        },

	        open: function(target, context) {
	            var that = this;
	            that.target = $(target);
	            that.context = context;
	            that.shim.show(target);
	        },

	        close: function() {
	            this.context = this.target = null;
	            this.shim.hide();
	        },

	        openFor: function(target) {
	            var that = this,
	                context = target.data(CONTEXT_DATA);

	            that.open(target, context);
	            that.trigger(OPEN, { target: target, context: context });
	        },

	        destroy: function() {
	            Widget.fn.destroy.call(this);
	            kendo.unbindResize(this._closeProxy);
	            this.shim.destroy();
	        },

	        _click: function(e) {
	            if (e.isDefaultPrevented()) {
	                return;
	            }

	            var currentTarget = $(e.currentTarget);
	            var action = currentTarget.data("action");

	            if (action) {
	                var actionData = {
	                    target: this.target,
	                    context: this.context
	                },
	                $angular = this.options.$angular;

	                if ($angular) {
	                    this.element.injector().get("$parse")(action)($angular[0])(actionData);
	                } else {
	                    kendo.getter(action)(window)(actionData);
	                }
	            }

	            this.trigger(COMMAND, { target: this.target, context: this.context, currentTarget: currentTarget });

	            e.preventDefault();
	            this._close();
	        },

	        _shimHide: function(e) {
	            if (!this.trigger(CLOSE)) {
	                this.context = this.target = null;
	            } else {
	                e.preventDefault();
	            }
	        },

	        _close: function(e) {
	            if (!this.trigger(CLOSE)) {
	                this.close();
	            } else {
	                e.preventDefault();
	            }
	        }
	    });

	    ui.plugin(ActionSheet);
	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(422));


/***/ }),

/***/ 468:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(30);

/***/ }),

/***/ 469:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(16);

/***/ })

/******/ });

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(470);


/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 470:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(471), __webpack_require__(472) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "mobile.application",
	    name: "Application",
	    category: "mobile",
	    description: "The Mobile application provides a framework to build native looking web applications on mobile devices.",
	    depends: [ "mobile.pane", "router" ]
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        mobile = kendo.mobile,
	        support = kendo.support,
	        Widget = mobile.ui.Widget,
	        Pane = mobile.ui.Pane,

	        DEFAULT_OS = "ios7",
	        OS = support.mobileOS,
	        BERRYPHONEGAP = OS.device == "blackberry" && OS.flatVersion >= 600 && OS.flatVersion < 1000 && OS.appMode,
	        FONT_SIZE_COEF = 0.93,
	        VERTICAL = "km-vertical",
	        CHROME =  OS.browser === "chrome",
	        BROKEN_WEBVIEW_RESIZE = OS.ios && OS.flatVersion >= 700 && OS.flatVersion < 800 && (OS.appMode || CHROME),
	        INITIALLY_HORIZONTAL = (Math.abs(window.orientation) / 90 == 1),
	        HORIZONTAL = "km-horizontal",

	        MOBILE_PLATFORMS = {
	            ios7: { ios: true, browser: "default", device: "iphone", flatVersion: "700", majorVersion: "7", minorVersion: "0.0", name: "ios", tablet: false },
	            ios: { ios: true, browser: "default", device: "iphone", flatVersion: "612", majorVersion: "6", minorVersion: "1.2", name: "ios", tablet: false },
	            android: { android: true, browser: "default", device: "android", flatVersion: "442", majorVersion: "4", minorVersion: "4.2", name: "android", tablet: false },
	            blackberry: { blackberry: true, browser: "default", device: "blackberry", flatVersion: "710", majorVersion: "7", minorVersion: "1.0", name: "blackberry", tablet: false },
	            meego: { meego: true, browser: "default", device: "meego", flatVersion: "850", majorVersion: "8", minorVersion: "5.0", name: "meego", tablet: false },
	            wp: { wp: true, browser: "default", device: "wp", flatVersion: "800", majorVersion: "8", minorVersion: "0.0", name: "wp", tablet: false }
	        },

	        viewportTemplate = kendo.template('<meta content="initial-scale=#: data.scale #, maximum-scale=#: data.scale #, user-scalable=no#=data.height#" name="viewport" />', {usedWithBlock: false}),
	        systemMeta = kendo.template('<meta name="apple-mobile-web-app-capable" content="#= data.webAppCapable === false ? \'no\' : \'yes\' #" /> ' +
	                     '<meta name="apple-mobile-web-app-status-bar-style" content="#=data.statusBarStyle#" /> ' +
	                     '<meta name="msapplication-tap-highlight" content="no" /> ', {usedWithBlock: false}),
	        clipTemplate = kendo.template('<style>.km-view { clip: rect(0 #= data.width #px #= data.height #px 0); }</style>', {usedWithBlock: false}),
	        ENABLE_CLIP = OS.android && OS.browser != "chrome" || OS.blackberry,

	        iconMeta = kendo.template('<link rel="apple-touch-icon' + (OS.android ? '-precomposed' : '') + '" # if(data.size) { # sizes="#=data.size#" #}# href="#=data.icon#" />', {usedWithBlock: false}),

	        HIDEBAR = (OS.device == "iphone" || OS.device == "ipod") && OS.majorVersion < 7,
	        SUPPORT_SWIPE_TO_GO_BACK = (OS.device == "iphone" || OS.device == "ipod") && OS.majorVersion >= 7,
	        HISTORY_TRANSITION = SUPPORT_SWIPE_TO_GO_BACK ? "none" : null,
	        BARCOMPENSATION = OS.browser == "mobilesafari" ? 60 : 0,
	        STATUS_BAR_HEIGHT = 20,
	        WINDOW = $(window),
	        SCREEN = window.screen,
	        HEAD = $("head"),

	        // mobile app events
	        INIT = "init",
	        proxy = $.proxy;

	    function osCssClass(os, options) {
	        var classes = [];

	        if (OS) {
	            classes.push("km-on-" + OS.name);
	        }

	        if (os.skin) {
	            classes.push("km-" + os.skin);
	        } else {
	            if (os.name == "ios" && os.majorVersion > 6) {
	                classes.push("km-ios7");
	            } else {
	                classes.push("km-" + os.name);
	            }
	        }
	        if ((os.name == "ios" && os.majorVersion < 7) || os.name != "ios") {
	            classes.push("km-" + os.name + os.majorVersion);
	        }
	        classes.push("km-" + os.majorVersion);
	        classes.push("km-m" + (os.minorVersion ? os.minorVersion[0] : 0));

	        if (os.variant && ((os.skin && os.skin === os.name) || !os.skin || os.setDefaultPlatform === false)) {
	            classes.push("km-" + (os.skin ? os.skin : os.name) + "-" + os.variant);
	        }

	        if (os.cordova) {
	            classes.push("km-cordova");
	        }
	        if (os.appMode) {
	            classes.push("km-app");
	        } else {
	            classes.push("km-web");
	        }

	        if (options && options.statusBarStyle) {
	            classes.push("km-" + options.statusBarStyle + "-status-bar");
	        }

	        return classes.join(" ");
	    }

	    function wp8Background(os) {
	        return 'km-wp-' + (os.noVariantSet ?
	                            (parseInt($("<div style='background: Background' />").css("background-color").split(",")[1], 10) === 0 ? 'dark' : 'light') :
	                            os.variant + " km-wp-" + os.variant + "-force");
	    }

	    function isOrientationHorizontal(element) {
	        return OS.wp ? element.css("animation-name") == "-kendo-landscape" : (Math.abs(window.orientation) / 90 == 1);
	    }

	    function getOrientationClass(element) {
	        return isOrientationHorizontal(element) ? HORIZONTAL : VERTICAL;
	    }

	    function setMinimumHeight(pane) {
	        pane.parent().addBack()
	               .css("min-height", window.innerHeight);
	    }

	    function applyViewportHeight() {
	        $("meta[name=viewport]").remove();
	            HEAD.append(viewportTemplate({
	            height: ", width=device-width" +  // width=device-width was removed for iOS6, but this should stay for BB PhoneGap.
	                        (isOrientationHorizontal() ?
	                            ", height=" + window.innerHeight + "px"  :
	                            (support.mobileOS.flatVersion >= 600 && support.mobileOS.flatVersion < 700) ?
	                                ", height=" + window.innerWidth + "px" :
	                                ", height=device-height")
	        }));
	    }

	    var Application = Widget.extend({
	        init: function(element, options) {
	            // global reference to current application
	            mobile.application = this;
	            $($.proxy(this, 'bootstrap', element, options));
	        },

	        bootstrap: function(element, options) {
	            element = $(element);

	            if (!element[0]) {
	                element = $(document.body);
	            }

	            Widget.fn.init.call(this, element, options);
	            this.element.removeAttr("data-" + kendo.ns + "role");

	            this._setupPlatform();
	            this._attachMeta();
	            this._setupElementClass();
	            this._attachHideBarHandlers();
	            var paneOptions = $.extend({}, this.options);
	            delete paneOptions.name;

	            var that = this,
	                startHistory = function() {
	                    that.pane = new Pane(that.element, paneOptions);
	                    that.pane.navigateToInitial();

	                    if (that.options.updateDocumentTitle) {
	                        that._setupDocumentTitle();
	                    }

	                    that._startHistory();
	                    that.trigger(INIT);
	                };

	            if (this.options.$angular) {
	                setTimeout(startHistory);
	            } else {
	                startHistory();
	            }
	        },

	        options: {
	            name: "Application",
	            hideAddressBar: true,
	            browserHistory: true,
	            historyTransition: HISTORY_TRANSITION,
	            modelScope: window,
	            statusBarStyle: "black",
	            transition: "",
	            retina: false,
	            platform: null,
	            skin: null,
	            updateDocumentTitle: true,
	            useNativeScrolling: false
	        },

	        events: [
	            INIT
	        ],

	        navigate: function(url, transition) {
	            this.pane.navigate(url, transition);
	        },

	        replace: function(url, transition) {
	            this.pane.replace(url, transition);
	        },

	        scroller: function() {
	            return this.view().scroller;
	        },

	        hideLoading: function() {
	            if (this.pane) {
	                this.pane.hideLoading();
	            } else {
	                throw new Error("The mobile application instance is not fully instantiated. Please consider activating loading in the application init event handler.");
	            }
	        },

	        showLoading: function() {
	            if (this.pane) {
	                this.pane.showLoading();
	            } else {
	                throw new Error("The mobile application instance is not fully instantiated. Please consider activating loading in the application init event handler.");
	            }
	        },

	        changeLoadingMessage: function(message) {
	            if (this.pane) {
	                this.pane.changeLoadingMessage(message);
	            } else {
	                throw new Error("The mobile application instance is not fully instantiated. Please consider changing the message in the application init event handler.");
	            }
	        },

	        view: function() {
	            return this.pane.view();
	        },

	        skin: function(skin) {
	            var that = this;

	            if (!arguments.length) {
	                return that.options.skin;
	            }

	            that.options.skin = skin || "";
	            that.element[0].className = "km-pane";
	            that._setupPlatform();
	            that._setupElementClass();

	            return that.options.skin;
	        },

	        destroy: function() {
	            Widget.fn.destroy.call(this);
	            this.pane.destroy();
	            if (this.options.browserHistory) {
	                this.router.destroy();
	            }
	        },

	        _setupPlatform: function() {
	            var that = this,
	                platform = that.options.platform,
	                skin = that.options.skin,
	                split = [],
	                os = OS || MOBILE_PLATFORMS[DEFAULT_OS];

	            if (platform) {
	                os.setDefaultPlatform = true;
	                if (typeof platform === "string") {
	                    split = platform.split("-");
	                    os = $.extend({ variant: split[1] }, os, MOBILE_PLATFORMS[split[0]]);
	                } else {
	                    os = platform;
	                }
	            }

	            if (skin) {
	                split = skin.split("-");
	                if (!OS) {
	                    os.setDefaultPlatform = false;
	                }
	                os = $.extend({}, os, { skin: split[0], variant: split[1] });
	            }

	            if (!os.variant) {
	                os.noVariantSet = true;
	                os.variant = "dark";
	            }

	            that.os = os;

	            that.osCssClass = osCssClass(that.os, that.options);

	            if (os.name == "wp") {
	                if (!that.refreshBackgroundColorProxy) {
	                    that.refreshBackgroundColorProxy = $.proxy(function () {
	                        if (that.os.variant && (that.os.skin && that.os.skin === that.os.name) || !that.os.skin) {
	                            that.element.removeClass("km-wp-dark km-wp-light km-wp-dark-force km-wp-light-force").addClass(wp8Background(that.os));
	                        }
	                    }, that);
	                }

	                $(document).off("visibilitychange", that.refreshBackgroundColorProxy);
	                $(document).off("resume", that.refreshBackgroundColorProxy);

	                if (!os.skin) {
	                    that.element.parent().css("overflow", "hidden");

	                    $(document).on("visibilitychange", that.refreshBackgroundColorProxy); // Restore theme on browser focus (using the Visibility API).
	                    $(document).on("resume", that.refreshBackgroundColorProxy); // PhoneGap fires resume.

	                    that.refreshBackgroundColorProxy();
	                }
	            }
	        },

	        _startHistory: function() {
	            if (this.options.browserHistory) {
	                this.router = new kendo.Router({ pushState: this.options.pushState, root: this.options.root, hashBang: this.options.hashBang });
	                this.pane.bindToRouter(this.router);
	                this.router.start();
	            } else {
	                if (!this.options.initial) {
	                    this.pane.navigate("");
	                }
	            }
	        },

	        _resizeToScreenHeight: function() {
	            var includeStatusBar = $("meta[name=apple-mobile-web-app-status-bar-style]").attr("content").match(/black-translucent|hidden/),
	                element = this.element,
	                height;

	            if (CHROME) {
	                height = window.innerHeight;
	            } else {
	                if (isOrientationHorizontal(element)) {
	                    if (includeStatusBar) {
	                        if (INITIALLY_HORIZONTAL) {
	                            height = SCREEN.availWidth + STATUS_BAR_HEIGHT;
	                        } else {
	                            height = SCREEN.availWidth;
	                        }
	                    } else {
	                        if (INITIALLY_HORIZONTAL) {
	                            height = SCREEN.availWidth;
	                        } else {
	                            height = SCREEN.availWidth - STATUS_BAR_HEIGHT;
	                        }
	                    }
	                } else {
	                    if (includeStatusBar) {
	                        if (INITIALLY_HORIZONTAL) {
	                            height = SCREEN.availHeight;
	                        } else {
	                            height = SCREEN.availHeight + STATUS_BAR_HEIGHT;
	                        }
	                    } else {
	                        if (INITIALLY_HORIZONTAL) {
	                            height = SCREEN.availHeight - STATUS_BAR_HEIGHT;
	                        } else {
	                            height = SCREEN.availHeight;
	                        }
	                    }
	                }
	            }

	            element.height(height);
	        },

	        _setupElementClass: function() {
	            var that = this, size,
	                element = that.element;

	            element.parent().addClass("km-root km-" + (that.os.tablet ? "tablet" : "phone"));
	            element.addClass(that.osCssClass + " " + getOrientationClass(element));
	            if (this.options.useNativeScrolling) {
	                element.parent().addClass("km-native-scrolling");
	            }

	            if (CHROME) {
	                element.addClass("km-ios-chrome");
	            }

	            if (support.wpDevicePixelRatio) {
	                element.parent().css("font-size", support.wpDevicePixelRatio + "em");
	            }

	            if (this.options.retina) {
	                element.parent().addClass("km-retina");
	                element.parent().css("font-size", (support.devicePixelRatio * FONT_SIZE_COEF) + "em");
	            }

	            if (BERRYPHONEGAP) {
	                applyViewportHeight();
	            }
	            if (that.options.useNativeScrolling) {
	                element.parent().addClass("km-native-scrolling");
	            } else if (ENABLE_CLIP) {
	                size = (screen.availWidth > screen.availHeight ? screen.availWidth : screen.availHeight) + 200;
	                $(clipTemplate({ width: size, height: size })).appendTo(HEAD);
	            }

	            if (BROKEN_WEBVIEW_RESIZE) {
	                that._resizeToScreenHeight();
	            }

	            kendo.onResize(function() {
	                element
	                    .removeClass("km-horizontal km-vertical")
	                    .addClass(getOrientationClass(element));

	                if (that.options.useNativeScrolling) {
	                    setMinimumHeight(element);
	                }

	                if (BROKEN_WEBVIEW_RESIZE) {
	                    that._resizeToScreenHeight();
	                }

	                if (BERRYPHONEGAP) {
	                    applyViewportHeight();
	                }

	                kendo.resize(element);
	            });
	        },

	        _clearExistingMeta: function() {
	            HEAD.find("meta")
	                .filter("[name|='apple-mobile-web-app'],[name|='msapplication-tap'],[name='viewport']")
	                .remove();
	        },

	        _attachMeta: function() {
	            var options = this.options,
	                icon = options.icon, size;

	            this._clearExistingMeta();

	            if (!BERRYPHONEGAP) {
	                HEAD.prepend(viewportTemplate({ height: "", scale : this.options.retina ? 1 / support.devicePixelRatio : "1.0" }));
	            }

	            HEAD.prepend(systemMeta(options));

	            if (icon) {
	                if (typeof icon === "string") {
	                    icon = { "" : icon };
	                }

	                for(size in icon) {
	                    HEAD.prepend(iconMeta({ icon: icon[size], size: size }));
	                }
	            }

	            if (options.useNativeScrolling) {
	                setMinimumHeight(this.element);
	            }
	        },

	        _attachHideBarHandlers: function() {
	            var that = this,
	                hideBar = proxy(that, "_hideBar");

	            if (support.mobileOS.appMode || !that.options.hideAddressBar || !HIDEBAR || that.options.useNativeScrolling) {
	                return;
	            }

	            that._initialHeight = {};

	            WINDOW.on("load", hideBar);

	            kendo.onResize(function() {
	                setTimeout(window.scrollTo, 0, 0, 1);
	            });
	        },

	        _setupDocumentTitle: function() {
	            var that = this,
	                defaultTitle = document.title;

	            that.pane.bind("viewShow", function(e) {
	                var title = e.view.title;
	                document.title = title !== undefined ? title : defaultTitle;
	            });
	        },

	        _hideBar: function() {
	            var that = this,
	                element = that.element;

	            element.height(kendo.support.transforms.css + "calc(100% + " + BARCOMPENSATION + "px)");
	            $(window).trigger(kendo.support.resize);
	        }
	    });

	    kendo.mobile.Application = Application;
	    kendo.ui.plugin(Application, kendo.mobile, 'Mobile');
	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(422));


/***/ }),

/***/ 471:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(10);

/***/ }),

/***/ 472:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(33);

/***/ })

/******/ });

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(474);


/***/ }),

/***/ 421:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(0);

/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 474:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(421) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "mobile.buttongroup",
	    name: "ButtonGroup",
	    category: "mobile",
	    description: "The Kendo mobile ButtonGroup widget is a linear set of grouped buttons.",
	    depends: [ "core" ]
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        ui = kendo.mobile.ui,
	        Widget = ui.Widget,
	        ACTIVE = "state-active",
	        DISABLE = "state-disabled",
	        SELECT = "select",
	        SELECTOR = "li:not(.km-" + ACTIVE +")";

	    function className(name) {
	        return "k-" + name + " km-" + name;
	    }

	    function createBadge(value) {
	        return $('<span class="' + className("badge") + '">' + value + '</span>');
	    }

	    var ButtonGroup = Widget.extend({
	        init: function(element, options) {
	            var that = this;

	            Widget.fn.init.call(that, element, options);

	            that.element.addClass("km-buttongroup k-widget k-button-group").find("li").each(that._button);

	            that.element.on(that.options.selectOn, SELECTOR, "_select");

	            that._enable = true;
	            that.select(that.options.index);

	            if(!that.options.enable) {
	                that._enable = false;
	                that.wrapper.addClass(className(DISABLE));
	            }
	        },

	        events: [
	            SELECT
	        ],

	        options: {
	            name: "ButtonGroup",
	            selectOn: "down",
	            index: -1,
	            enable: true
	        },

	        current: function() {
	            return this.element.find(".km-" + ACTIVE);
	        },

	        select: function (li) {
	            var that = this,
	                index = -1;

	            if (li === undefined || li === -1 || !that._enable || $(li).is(".km-" + DISABLE)) {
	                return;
	            }

	            that.current().removeClass(className(ACTIVE));

	            if (typeof li === "number") {
	                index = li;
	                li = $(that.element[0].children[li]);
	            } else if (li.nodeType) {
	                li = $(li);
	                index = li.index();
	            }

	            li.addClass(className(ACTIVE));
	            that.selectedIndex = index;
	        },

	        badge: function(item, value) {
	            var buttongroup = this.element, badge;

	            if (!isNaN(item)) {
	                item = buttongroup.children().get(item);
	            }

	            item = buttongroup.find(item);
	            badge = $(item.children(".km-badge")[0] || createBadge(value).appendTo(item));

	            if (value || value === 0) {
	                badge.html(value);
	                return this;
	            }

	            if (value === false) {
	                badge.empty().remove();
	                return this;
	            }

	            return badge.html();
	        },

	        enable: function(enable) {
	            if(typeof enable == "undefined") {
	                enable = true;
	            }

	            this.wrapper.toggleClass(className(DISABLE), !enable);

	            this._enable = this.options.enable = enable;
	        },

	        _button: function() {
	            var button = $(this).addClass(className("button")),
	                icon = kendo.attrValue(button, "icon"),
	                badge = kendo.attrValue(button, "badge"),
	                span = button.children("span"),
	                image = button.find("img").addClass(className("image"));

	            if (!span[0]) {
	                span = button.wrapInner("<span/>").children("span");
	            }

	            span.addClass(className("text"));

	            if (!image[0] && icon) {
	                button.prepend($('<span class="' + className("icon") + ' ' + className(icon) + '"/>'));
	            }

	            if (badge || badge === 0) {
	                createBadge(badge).appendTo(button);
	            }
	        },

	        _select: function(e) {
	            if (e.which > 1 || e.isDefaultPrevented() || !this._enable) {
	                return;
	            }

	            this.select(e.currentTarget);
	            this.trigger(SELECT, { index: this.selectedIndex });
	        }
	    });

	    ui.plugin(ButtonGroup);
	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(422));


/***/ })

/******/ });

/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(475);


/***/ }),

/***/ 421:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(0);

/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 475:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(421) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "mobile.collapsible",
	    name: "Collapsible",
	    category: "mobile",
	    description: "The Kendo mobile Collapsible widget provides ability for creating collapsible blocks of content.",
	    depends: [ "core", "userevents" ]
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        ui = kendo.mobile.ui,
	        Widget = ui.Widget,
	        COLLAPSIBLE = "km-collapsible",
	        HEADER = "km-collapsible-header",
	        CONTENT = "km-collapsible-content",
	        INSET = "km-collapsibleinset",
	        HEADER_WRAPPER = "<div data-role='collapsible-header' class='" + HEADER + "'></div>",
	        CONTENT_WRAPPER = "<div data-role='collapsible-content' class='" + CONTENT + "'></div>",

	        COLLAPSED = "km-collapsed",
	        EXPANDED = "km-expanded",
	        ANIMATED = "km-animated",

	        //icon position
	        LEFT = "left",

	        //events
	        EXAPND = "expand",
	        COLLAPSE = "collapse";

	    var Collapsible = Widget.extend({
	        init: function(element, options) {
	            var that = this,
	                container = $(element);

	            Widget.fn.init.call(that, container, options);

	            container.addClass(COLLAPSIBLE);

	            that._buildHeader();
	            that.content = container.children().not(that.header).wrapAll(CONTENT_WRAPPER).parent();

	            that._userEvents = new kendo.UserEvents(that.header, {
	                fastTap: true,
	                tap: function() { that.toggle(); }
	            });

	            container.addClass(that.options.collapsed ? COLLAPSED : EXPANDED);

	            if (that.options.inset) {
	                container.addClass(INSET);
	            }

	            if (that.options.animation) {
	                that.content.addClass(ANIMATED);
	                that.content.height(0);
	                if (that.options.collapsed) {
	                    that.content.hide();
	                }
	            } else if (that.options.collapsed) {
	                that.content.hide();
	            }
	        },

	        events: [
	            EXAPND,
	            COLLAPSE
	        ],

	        options: {
	            name: "Collapsible",
	            collapsed: true,
	            collapseIcon: "arrow-n",
	            expandIcon: "arrow-s",
	            iconPosition: LEFT,
	            animation: true,
	            inset: false
	        },

	        destroy: function() {
	            Widget.fn.destroy.call(this);
	            this._userEvents.destroy();
	        },

	        expand: function(instant) {
	            var icon = this.options.collapseIcon,
	                content = this.content,
	                ios = kendo.support.mobileOS.ios;

	            if (!this.trigger(EXAPND)) {
	                if (icon) {
	                    this.header.find(".km-icon").removeClass().addClass("km-icon km-" + icon);
	                }
	                this.element.removeClass(COLLAPSED).addClass(EXPANDED);

	                if (this.options.animation && !instant) {
	                    content.off("transitionend");
	                    content.show();
	                    if (ios) { content.removeClass(ANIMATED); } //required to get the height of the content on iOS
	                    content.height(this._getContentHeight());
	                    if (ios) { content.addClass(ANIMATED); }

	                    kendo.resize(content);
	                } else {
	                    content.show();
	                }
	            }
	        },

	        collapse: function(instant) {
	            var icon = this.options.expandIcon,
	                content = this.content;

	            if (!this.trigger(COLLAPSE)) {
	                if (icon) {
	                    this.header.find(".km-icon").removeClass().addClass("km-icon km-" + icon);
	                }
	                this.element.removeClass(EXPANDED).addClass(COLLAPSED);

	                if (this.options.animation && !instant) {
	                    content.one("transitionend", function() { content.hide(); });
	                    content.height(0);
	                } else {
	                    content.hide();
	                }
	            }
	        },

	        toggle: function(instant) {
	            if (this.isCollapsed()) {
	                this.expand(instant);
	            } else {
	                this.collapse(instant);
	            }
	        },

	        isCollapsed: function() {
	            return this.element.hasClass(COLLAPSED);
	        },

	        resize: function() {
	            if (!this.isCollapsed() && this.options.animation) {
	                this.content.height(this._getContentHeight());
	            }
	        },

	        _buildHeader: function() {
	            var header = this.element.children(":header").wrapAll(HEADER_WRAPPER),
	                iconSpan = $('<span class="km-icon"/>'),
	                icon = this.options.collapsed ? this.options.expandIcon : this.options.collapseIcon,
	                iconPosition = this.options.iconPosition;

	            if (icon) {
	                header.prepend(iconSpan);
	                iconSpan.addClass("km-" + icon);
	            }

	            this.header = header.parent();
	            this.header.addClass("km-icon-" + iconPosition);
	        },

	        _getContentHeight: function() {
	            var style = this.content.attr("style"),
	                height;

	            this.content.css({
	                position:   'absolute',
	                visibility: 'hidden',
	                height: "auto"
	            });

	            height = this.content.height();

	            this.content.attr("style", style ? style : "");

	            return height;
	        }
	    });

	    ui.plugin(Collapsible);
	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(422));


/***/ })

/******/ });

/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(476);


/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 435:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(5);

/***/ }),

/***/ 476:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(477), __webpack_require__(435) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "mobile.drawer",
	    name: "Drawer",
	    category: "mobile",
	    description: "The Kendo Mobile Drawer widget provides slide to reveal global application toolbox",
	    depends: [ "mobile.view", "userevents" ]
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        mobile = kendo.mobile,
	        os = kendo.support.mobileOS,
	        Transition = kendo.effects.Transition,
	        roleSelector = kendo.roleSelector,
	        AXIS = "x",
	        ui = mobile.ui,
	        SWIPE_TO_OPEN = !(os.ios && os.majorVersion == 7 && !os.appMode),
	        BEFORE_SHOW = "beforeShow",
	        INIT = "init",
	        SHOW = "show",
	        HIDE = "hide",
	        AFTER_HIDE = "afterHide",
	        NULL_VIEW = { enable: $.noop };

	    var Drawer = ui.View.extend({
	        init: function(element, options) {
	            // move the drawer to the top, in order to hide it
	            $(element).parent().prepend(element);

	            mobile.ui.Widget.fn.init.call(this, element, options);

	            if (!this.options.$angular) {
	                this._layout();
	                this._scroller();
	            }

	            this._model();

	            var pane = this.element.closest(roleSelector("pane")).data("kendoMobilePane"),
	                userEvents;

	            if (pane) {
	                this.pane = pane;
	                this.pane.bind("viewShow", function(e) {
	                    drawer._viewShow(e);
	                });

	                this.pane.bind("sameViewRequested", function() {
	                    drawer.hide();
	                });

	                userEvents = this.userEvents = new kendo.UserEvents(pane.element, {
	                    fastTap: true,
	                    filter: roleSelector("view splitview"),
	                    allowSelection: true
	                });

	            } else {
	                this.currentView = NULL_VIEW;
	                var container = $(this.options.container);

	                if (!container) {
	                    throw new Error("The drawer needs a container configuration option set.");
	                }

	                userEvents = this.userEvents = new kendo.UserEvents(container, { fastTap: true, allowSelection: true });
	                this._attachTransition(container);
	            }

	            var drawer = this;

	            var hide = function(e) {
	                if (drawer.visible) {
	                    drawer.hide();
	                    e.preventDefault();
	                }
	            };

	            if (this.options.swipeToOpen && SWIPE_TO_OPEN) {
	                userEvents.bind("press", function() { drawer.transition.cancel(); });
	                userEvents.bind("start", function(e) { drawer._start(e); });
	                userEvents.bind("move", function(e) { drawer._update(e); });
	                userEvents.bind("end", function(e) { drawer._end(e); });
	                userEvents.bind("tap", hide);
	            } else {
	                userEvents.bind("press", hide);
	            }

	            this.leftPositioned = this.options.position === "left";

	            this.visible = false;

	            this.element.hide().addClass("km-drawer").addClass(this.leftPositioned ? "km-left-drawer" : "km-right-drawer");
	            this.trigger(INIT);
	        },

	        options: {
	            name: "Drawer",
	            position: "left",
	            views: [],
	            swipeToOpenViews: [],
	            swipeToOpen: true,
	            title: "",
	            container: null
	        },

	        events: [
	            BEFORE_SHOW,
	            HIDE,
	            AFTER_HIDE,
	            INIT,
	            SHOW
	        ],

	        show: function() {
	            if (this._activate()) {
	                this._show();
	            }
	        },

	        hide: function() {
	            if (!this.currentView) {
	                return;
	            }

	            this.currentView.enable();

	            Drawer.current = null;
	            this._moveViewTo(0);
	            this.trigger(HIDE, { view: this });
	        },

	        // Alias in order to support popover/modalview etc. interface
	        openFor: function() {
	            if (this.visible) {
	                this.hide();
	            } else {
	                this.show();
	            }
	        },

	        destroy: function() {
	            ui.View.fn.destroy.call(this);
	            this.userEvents.destroy();
	        },

	        _activate: function() {
	            if (this.visible) {
	                return true;
	            }

	            var visibleOnCurrentView = this._currentViewIncludedIn(this.options.views);

	            if (!visibleOnCurrentView || this.trigger(BEFORE_SHOW, { view: this })) {
	                return false;
	            }

	            this._setAsCurrent();
	            this.element.show();

	            this.trigger(SHOW, { view: this });
	            this._invokeNgController();
	            return true;
	        },

	        _currentViewIncludedIn: function(views) {
	            if (!this.pane || !views.length) {
	                return true;
	            }

	            var view = this.pane.view();
	            return $.inArray(view.id.replace('#', ''), views) > -1 || $.inArray(view.element.attr("id"), views) > -1;
	        },

	        _show: function() {
	            this.currentView.enable(false);

	            this.visible = true;
	            var offset = this.element.width();

	            if (!this.leftPositioned) {
	                offset = -offset;
	            }

	            this._moveViewTo(offset);
	        },

	        _setAsCurrent: function() {
	            if (Drawer.last !== this) {
	                if (Drawer.last) {
	                    Drawer.last.element.hide();
	                }
	                this.element.show();
	            }

	            Drawer.last = this;
	            Drawer.current = this;
	        },

	        _moveViewTo: function(offset) {
	            this.userEvents.cancel();
	            this.transition.moveTo({ location: offset, duration: 400, ease: Transition.easeOutExpo });
	        },

	        _viewShow: function(e) {
	            if (this.currentView) {
	                this.currentView.enable();
	            }

	            if (this.currentView === e.view) {
	                this.hide();
	                return;
	            }

	            this.currentView = e.view;
	            this._attachTransition(e.view.element);
	        },

	        _attachTransition: function(element) {
	            var that = this,
	                movable = this.movable,
	                currentOffset = movable && movable.x;


	            if (this.transition) {
	                this.transition.cancel();
	                this.movable.moveAxis("x", 0);
	            }

	            movable = this.movable = new kendo.ui.Movable(element);

	            this.transition = new Transition({
	                axis: AXIS,
	                movable: this.movable,
	                onEnd: function() {
	                    if (movable[AXIS] === 0) {
	                        element[0].style.cssText = "";
	                        that.element.hide();
	                        that.trigger(AFTER_HIDE);
	                        that.visible = false;
	                    }
	                }
	            });

	            if (currentOffset) {
	                element.addClass("k-fx-hidden");
	                kendo.animationFrame(function() {
	                    element.removeClass("k-fx-hidden");
	                    that.movable.moveAxis(AXIS, currentOffset);
	                    that.hide();
	                });
	            }
	        },

	        _start: function(e) {
	            var userEvents = e.sender;

	            // ignore non-horizontal swipes
	            if (Math.abs(e.x.velocity) < Math.abs(e.y.velocity) || kendo.triggeredByInput(e.event) || !this._currentViewIncludedIn(this.options.swipeToOpenViews)) {
	                userEvents.cancel();
	                return;
	            }

	            var leftPositioned = this.leftPositioned,
	                visible = this.visible,
	                canMoveLeft = leftPositioned && visible || !leftPositioned && !Drawer.current,
	                canMoveRight = !leftPositioned && visible || leftPositioned && !Drawer.current,
	                leftSwipe = e.x.velocity < 0;

	            if ((canMoveLeft && leftSwipe) || (canMoveRight && !leftSwipe)) {
	                if (this._activate()) {
	                    userEvents.capture();
	                    return;
	                }
	            }

	            userEvents.cancel();
	        },

	        _update: function(e) {
	            var movable = this.movable,
	                newPosition = movable.x + e.x.delta,
	                limitedPosition;

	            if (this.leftPositioned) {
	                limitedPosition = Math.min(Math.max(0, newPosition), this.element.width());
	            } else {
	                limitedPosition = Math.max(Math.min(0, newPosition), -this.element.width());
	            }

	            this.movable.moveAxis(AXIS, limitedPosition);
	            e.event.preventDefault();
	            e.event.stopPropagation();
	        },

	        _end: function(e) {
	            var velocity = e.x.velocity,
	                pastHalf = Math.abs(this.movable.x) > this.element.width() / 2,
	                velocityThreshold = 0.8,
	                shouldShow;

	            if (this.leftPositioned) {
	                shouldShow = velocity > -velocityThreshold && (velocity > velocityThreshold || pastHalf);
	            } else {
	                shouldShow = velocity < velocityThreshold && (velocity < -velocityThreshold || pastHalf);
	            }

	            if(shouldShow) {
	                this._show();
	            } else {
	                this.hide();
	            }
	        }
	    });

	    ui.plugin(Drawer);
	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(422));


/***/ }),

/***/ 477:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(11);

/***/ })

/******/ });

/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(478);


/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 427:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(4);

/***/ }),

/***/ 435:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(5);

/***/ }),

/***/ 478:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(427), __webpack_require__(435), __webpack_require__(479) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "mobile.listview",
	    name: "ListView",
	    category: "mobile",
	    description: "The Kendo Mobile ListView widget is used to display flat or grouped list of items.",
	    depends: [ "data", "userevents", "mobile.button" ]
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        Node = window.Node,
	        mobile = kendo.mobile,
	        ui = mobile.ui,
	        outerHeight = kendo._outerHeight,
	        DataSource = kendo.data.DataSource,
	        Widget = ui.DataBoundWidget,
	        ITEM_SELECTOR = ".km-list > li, > li:not(.km-group-container)",
	        HIGHLIGHT_SELECTOR = ".km-listview-link, .km-listview-label",
	        ICON_SELECTOR = "[" + kendo.attr("icon") + "]",
	        proxy = $.proxy,
	        attrValue = kendo.attrValue,
	        GROUP_CLASS = "km-group-title",
	        ACTIVE_CLASS = "km-state-active",
	        GROUP_WRAPPER = '<div class="' + GROUP_CLASS + '"><div class="km-text"></div></div>',
	        GROUP_TEMPLATE = kendo.template('<li><div class="' + GROUP_CLASS + '"><div class="km-text">#= this.headerTemplate(data) #</div></div><ul>#= kendo.render(this.template, data.items)#</ul></li>'),
	        WRAPPER = '<div class="km-listview-wrapper" />',
	        SEARCH_TEMPLATE = kendo.template('<form class="km-filter-form"><div class="km-filter-wrap"><input type="search" placeholder="#=placeholder#"/><a href="\\#" class="km-filter-reset" title="Clear"><span class="km-icon km-clear"></span><span class="km-text">Clear</span></a></div></form>'),
	        NS = ".kendoMobileListView",
	        STYLED = "styled",
	        DATABOUND = "dataBound",
	        DATABINDING = "dataBinding",
	        ITEM_CHANGE = "itemChange",
	        CLICK = "click",
	        CHANGE = "change",
	        PROGRESS = "progress",
	        FUNCTION = "function",

	        whitespaceRegExp = /^\s+$/,
	        buttonRegExp = /button/;

	    function whitespace() {
	        return this.nodeType === Node.TEXT_NODE && this.nodeValue.match(whitespaceRegExp);
	    }

	    function addIcon(item, icon) {
	        if (icon && !item[0].querySelector(".km-icon")) {
	            item.prepend('<span class="km-icon km-' + icon + '"/>');
	        }
	    }

	    function enhanceItem(item) {
	        addIcon(item, attrValue(item, "icon"));
	        addIcon(item, attrValue(item.children(ICON_SELECTOR), "icon"));
	    }

	    function enhanceLinkItem(item) {
	        var parent = item.parent(),
	            itemAndDetailButtons = item.add(parent.children(kendo.roleSelector("detailbutton"))),
	            otherNodes = parent.contents().not(itemAndDetailButtons).not(whitespace);

	        if (otherNodes.length) {
	            return;
	        }

	        item.addClass("km-listview-link")
	            .attr(kendo.attr("role"), "listview-link");

	        addIcon(item, attrValue(parent, "icon"));
	        addIcon(item, attrValue(item, "icon"));
	    }

	    function enhanceCheckBoxItem(label) {
	        if (!label[0].querySelector("input[type=checkbox],input[type=radio]")) {
	            return;
	        }

	        var item = label.parent();

	        if (item.contents().not(label).not(function() { return this.nodeType == 3; })[0]) {
	            return;
	        }

	        label.addClass("km-listview-label");

	        label.children("[type=checkbox],[type=radio]").addClass("km-widget km-icon km-check");
	    }

	    function putAt(element, top) {
	        $(element).css('transform', 'translate3d(0px, ' + top + 'px, 0px)');
	    }

	    var HeaderFixer = kendo.Class.extend({
	        init: function(listView) {
	            var scroller = listView.scroller();

	            if (!scroller) {
	                return;
	            }

	            this.options = listView.options;
	            this.element = listView.element;
	            this.scroller = listView.scroller();
	            this._shouldFixHeaders();

	            var headerFixer = this;

	            var cacheHeaders = function() {
	                headerFixer._cacheHeaders();
	            };

	            listView.bind("resize", cacheHeaders);

	            listView.bind(STYLED, cacheHeaders);
	            listView.bind(DATABOUND, cacheHeaders);

	            this._scrollHandler = function(e) {
	                headerFixer._fixHeader(e);
	            };
	            scroller.bind("scroll", this._scrollHandler);
	        },

	        destroy: function() {
	            var that = this;
	            if (that.scroller) {
	                that.scroller.unbind("scroll", that._scrollHandler);
	            }
	        },

	        _fixHeader: function(e) {
	            if (!this.fixedHeaders) {
	                return;
	            }

	            var i = 0,
	                scroller = this.scroller,
	                headers = this.headers,
	                scrollTop = e.scrollTop,
	                headerPair,
	                offset,
	                header;

	            do {
	                headerPair = headers[i++];
	                if (!headerPair) {
	                    header = $("<div />");
	                    break;
	                }
	                offset = headerPair.offset;
	                header = headerPair.header;
	            } while (offset + 1 > scrollTop);

	            if (this.currentHeader != i) {
	                scroller.fixedContainer.html(header.clone());
	                this.currentHeader = i;
	            }
	        },

	        _shouldFixHeaders: function() {
	            this.fixedHeaders = this.options.type === "group" && this.options.fixedHeaders;
	        },

	        _cacheHeaders: function() {
	            this._shouldFixHeaders();

	            if (!this.fixedHeaders) {
	                return;
	            }

	            var headers = [], offset = this.scroller.scrollTop;

	            this.element.find("." + GROUP_CLASS).each(function(_, header) {
	                header = $(header);
	                headers.unshift({
	                    offset: header.position().top + offset,
	                    header: header
	                });
	            });

	            this.headers = headers;
	            this._fixHeader({ scrollTop: offset });
	        }
	    });

	    var DEFAULT_PULL_PARAMETERS = function() {
	        return { page: 1 };
	    };

	    var RefreshHandler = kendo.Class.extend({
	        init: function(listView) {
	            var handler = this,
	                options = listView.options,
	                scroller = listView.scroller(),
	                pullParameters = options.pullParameters || DEFAULT_PULL_PARAMETERS;

	            this.listView = listView;
	            this.scroller = scroller;

	            listView.bind("_dataSource", function(e) {
	                handler.setDataSource(e.dataSource);
	            });

	            scroller.setOptions({
	                pullToRefresh: true,
	                pull: function() {
	                    if (!handler._pulled) {
	                        handler._pulled = true;
	                        handler.dataSource.read(pullParameters.call(listView, handler._first));
	                    }
	                },
	                messages: {
	                    pullTemplate: options.messages.pullTemplate,
	                    releaseTemplate: options.messages.releaseTemplate,
	                    refreshTemplate: options.messages.refreshTemplate
	                }
	            });
	        },

	        setDataSource: function(dataSource) {
	            var handler = this;

	            this._first = dataSource.view()[0];
	            this.dataSource = dataSource;

	            dataSource.bind("change", function() {
	                handler._change();
	            });

	            dataSource.bind("error", function() {
	                handler._change();
	            });
	        },

	        _change: function() {
	            var scroller = this.scroller,
	                dataSource = this.dataSource;

	            if (this._pulled) {
	                scroller.pullHandled();
	            }

	            if (this._pulled || !this._first) {
	                var view = dataSource.view();

	                if (view[0]) {
	                    this._first = view[0];
	                }
	            }

	            this._pulled = false;
	        }
	    });

	    var VirtualList = kendo.Observable.extend({
	        init: function(options) {
	            var list = this;

	            kendo.Observable.fn.init.call(list);

	            list.buffer = options.buffer;
	            list.height = options.height;
	            list.item = options.item;
	            list.items = [];
	            list.footer = options.footer;

	            list.buffer.bind("reset", function() {
	                list.refresh();
	            });

	        },

	        refresh: function() {
	            var buffer = this.buffer,
	                items = this.items,
	                endReached = false;

	            while(items.length) {
	                items.pop().destroy();
	            }

	            this.offset = buffer.offset;

	            var itemConstructor = this.item,
	                prevItem,
	                item;

	            for (var idx = 0; idx < buffer.viewSize; idx ++) {
	                if (idx === buffer.total()) {
	                    endReached = true;
	                    break;
	                }
	                item = itemConstructor(this.content(this.offset + items.length));
	                item.below(prevItem);
	                prevItem = item;
	                items.push(item);
	            }

	            this.itemCount = items.length;

	            this.trigger("reset");

	            this._resize();

	            if (endReached) {
	                this.trigger("endReached");
	            }
	        },

	        totalHeight: function() {
	            if (!this.items[0]) {
	                return 0;
	            }

	            var list = this,
	                items = list.items,
	                top = items[0].top,
	                bottom = items[items.length - 1].bottom,
	                averageItemHeight = (bottom - top) / list.itemCount,
	                remainingItemsCount = list.buffer.length - list.offset - list.itemCount;

	            return (this.footer ? this.footer.height : 0) + bottom + remainingItemsCount * averageItemHeight;
	        },

	        batchUpdate: function(top) {
	            var height = this.height(),
	                items = this.items,
	                item,
	                initialOffset = this.offset;

	            if (!items[0]) {
	                return;
	            }

	            if (this.lastDirection) { // scrolling up
	                while(items[items.length - 1].bottom > top + height * 2) {
	                    if (this.offset === 0) {
	                        break;
	                    }

	                    this.offset --;
	                    item = items.pop();
	                    item.update(this.content(this.offset));
	                    item.above(items[0]);
	                    items.unshift(item);
	                }
	            } else { // scrolling down
	                while (items[0].top < top - height) {
	                    var nextIndex = this.offset + this.itemCount; // here, it should be offset + 1 + itemCount - 1.

	                    if (nextIndex === this.buffer.total()) {
	                        this.trigger("endReached");
	                        break;
	                    }

	                    if (nextIndex === this.buffer.length) {
	                        break;
	                    }

	                    item = items.shift();
	                    item.update(this.content(this.offset + this.itemCount));
	                    item.below(items[items.length - 1]);
	                    items.push(item);
	                    this.offset ++;
	                }
	            }

	            if (initialOffset !== this.offset) {
	                this._resize();
	            }
	        },

	        update: function(top) {
	            var list = this,
	                items = this.items,
	                item,
	                firstItem,
	                lastItem,
	                height = this.height(),
	                itemCount = this.itemCount,
	                padding = height / 2,
	                up = (this.lastTop || 0) > top,
	                topBorder = top - padding,
	                bottomBorder = top + height + padding;

	            if (!items[0]) {
	                return;
	            }

	            this.lastTop = top;
	            this.lastDirection = up;

	            if (up) { // scrolling up
	               if (items[0].top > topBorder &&  // needs reorder
	                   items[items.length - 1].bottom > bottomBorder + padding && // enough padding below
	                   this.offset > 0 // we are not at the top
	                  )
	               {
	                    this.offset --;
	                    item = items.pop();
	                    firstItem = items[0];
	                    item.update(this.content(this.offset));
	                    items.unshift(item);

	                    item.above(firstItem);
	                    list._resize();
	               }
	            } else { // scrolling down
	                if (
	                    items[items.length - 1].bottom < bottomBorder && // needs reorder
	                    items[0].top < topBorder - padding // enough padding above
	                )
	                {
	                    var nextIndex = this.offset + itemCount; // here, it should be offset + 1 + itemCount - 1.

	                    if (nextIndex === this.buffer.total()) {
	                        this.trigger("endReached");
	                    } else if (nextIndex !== this.buffer.length) {
	                        item = items.shift();
	                        lastItem = items[items.length - 1];
	                        items.push(item);
	                        item.update(this.content(this.offset + this.itemCount));
	                        list.offset ++;

	                        item.below(lastItem);
	                        list._resize();
	                    }
	                }
	            }
	        },

	        content: function(index) {
	            return this.buffer.at(index);
	        },

	        destroy: function() {
	            this.unbind();
	        },

	        _resize: function() {
	            var items = this.items,
	                top = 0,
	                bottom = 0,
	                firstItem = items[0],
	                lastItem = items[items.length - 1];

	            if (firstItem) {
	                top = firstItem.top;
	                bottom = lastItem.bottom;
	            }

	            this.trigger("resize", { top: top, bottom: bottom });

	            if (this.footer) {
	                this.footer.below(lastItem);
	            }
	        }
	    });

	    // export for testing purposes
	    kendo.mobile.ui.VirtualList = VirtualList;

	    var VirtualListViewItem = kendo.Class.extend({
	        init: function(listView, dataItem) {
	            var element = listView.append([dataItem], true)[0],
	                height = element.offsetHeight;

	            $.extend(this, {
	                top: 0,
	                element: element,
	                listView: listView,
	                height: height,
	                bottom: height
	            });
	        },

	        update: function(dataItem) {
	            this.element = this.listView.setDataItem(this.element, dataItem);
	        },

	        above: function(item) {
	            if (item) {
	                this.height = this.element.offsetHeight;
	                this.top = item.top - this.height;
	                this.bottom = item.top;
	                putAt(this.element, this.top);
	            }
	        },

	        below: function(item) {
	            if (item) {
	                this.height = this.element.offsetHeight;
	                this.top = item.bottom;
	                this.bottom = this.top + this.height;
	                putAt(this.element, this.top);
	            }
	        },

	        destroy: function() {
	            kendo.destroy(this.element);
	            $(this.element).remove();
	        }
	    });

	    var LOAD_ICON = '<div><span class="km-icon"></span><span class="km-loading-left"></span><span class="km-loading-right"></span></div>';
	    var VirtualListViewLoadingIndicator = kendo.Class.extend({
	        init: function(listView) {
	            this.element = $('<li class="km-load-more km-scroller-refresh" style="display: none"></li>').appendTo(listView.element);
	            this._loadIcon = $(LOAD_ICON).appendTo(this.element);
	        },

	        enable: function() {
	            this.element.show();
	            this.height = outerHeight(this.element, true);
	        },

	        disable: function() {
	            this.element.hide();
	            this.height = 0;
	        },

	        below: function(item) {
	            if (item) {
	                this.top = item.bottom;
	                this.bottom = this.height + this.top;
	                putAt(this.element, this.top);
	            }
	        }
	    });

	    var VirtualListViewPressToLoadMore = VirtualListViewLoadingIndicator.extend({
	        init: function(listView, buffer) {

	            this._loadIcon = $(LOAD_ICON).hide();
	            this._loadButton = $('<a class="km-load">' + listView.options.messages.loadMoreText + '</a>').hide();
	            this.element = $('<li class="km-load-more" style="display: none"></li>').append(this._loadIcon).append(this._loadButton).appendTo(listView.element);

	            var loadMore = this;

	            this._loadButton.kendoMobileButton().data("kendoMobileButton").bind("click", function() {
	                loadMore._hideShowButton();
	                buffer.next();
	            });

	            buffer.bind("resize", function() {
	                loadMore._showLoadButton();
	            });

	            this.height = outerHeight(this.element, true);
	            this.disable();
	        },

	        _hideShowButton: function() {
	            this._loadButton.hide();
	            this.element.addClass("km-scroller-refresh");
	            this._loadIcon.css('display', 'block');
	        },

	        _showLoadButton: function() {
	            this._loadButton.show();
	            this.element.removeClass("km-scroller-refresh");
	            this._loadIcon.hide();
	        }
	    });

	    var VirtualListViewItemBinder = kendo.Class.extend({
	        init: function(listView) {
	            var binder = this;

	            this.chromeHeight = outerHeight(listView.wrapper.children().not(listView.element));
	            this.listView = listView;
	            this.scroller = listView.scroller();
	            this.options = listView.options;

	            listView.bind("_dataSource", function(e) {
	                binder.setDataSource(e.dataSource, e.empty);
	            });

	            listView.bind("resize", function() {
	                if (!binder.list.items.length) {
	                    return;
	                }

	                binder.scroller.reset();
	                binder.buffer.range(0);
	                binder.list.refresh();
	            });

	            this.scroller.makeVirtual();

	            this._scroll = function(e) {
	                binder.list.update(e.scrollTop);
	            };
	            this.scroller.bind('scroll', this._scroll);
	            this._scrollEnd = function(e) {
	                binder.list.batchUpdate(e.scrollTop);
	            };
	            this.scroller.bind('scrollEnd', this._scrollEnd);
	        },

	        destroy: function() {
	            this.list.unbind();
	            this.buffer.unbind();
	            this.scroller.unbind('scroll', this._scroll);
	            this.scroller.unbind('scrollEnd', this._scrollEnd);
	        },

	        setDataSource: function(dataSource, empty) {
	            var binder = this,
	                options = this.options,
	                listView = this.listView,
	                scroller = listView.scroller(),
	                pressToLoadMore = options.loadMore,
	                pageSize,
	                buffer,
	                footer;

	            this.dataSource = dataSource;

	            pageSize = dataSource.pageSize() || options.virtualViewSize;

	            if (!pageSize && !empty) {
	                throw new Error("the DataSource does not have page size configured. Page Size setting is mandatory for the mobile listview virtual scrolling to work as expected.");
	            }

	            if (this.buffer) {
	                this.buffer.destroy();
	            }

	            buffer = new kendo.data.Buffer(dataSource, Math.floor(pageSize / 2), pressToLoadMore);

	            if (pressToLoadMore) {
	                footer = new VirtualListViewPressToLoadMore(listView, buffer);
	            } else {
	                footer = new VirtualListViewLoadingIndicator(listView);
	            }

	            if (this.list) {
	                this.list.destroy();
	            }

	            var list = new VirtualList({
	                buffer: buffer,
	                footer: footer,
	                item: function(dataItem) { return new VirtualListViewItem(listView, dataItem); },
	                height: function() { return scroller.height(); }
	            });

	            list.bind("resize", function() {
	                binder.updateScrollerSize();
	                listView.updateSize();
	            });

	            list.bind("reset", function() {
	                binder.footer.enable();
	            });

	            list.bind("endReached", function() {
	                footer.disable();
	                binder.updateScrollerSize();
	            });

	            buffer.bind("expand", function() {
	                list.lastDirection = false; // expand down
	                list.batchUpdate(scroller.scrollTop);
	            });

	            $.extend(this, {
	                buffer: buffer,
	                scroller: scroller,
	                list: list,
	                footer: footer
	            });
	        },

	        updateScrollerSize: function() {
	            this.scroller.virtualSize(0, this.list.totalHeight() + this.chromeHeight);
	        },

	        refresh: function() {
	            this.list.refresh();
	        },

	        reset: function() {
	            this.buffer.range(0);
	            this.list.refresh();
	        }
	    });

	    var ListViewItemBinder = kendo.Class.extend({
	        init: function(listView) {
	            var binder = this;
	            this.listView = listView;
	            this.options = listView.options;

	            var itemBinder = this;

	            this._refreshHandler = function(e) {
	                itemBinder.refresh(e);
	            };

	            this._progressHandler = function() {
	                listView.showLoading();
	            };

	            listView.bind("_dataSource", function(e) {
	                binder.setDataSource(e.dataSource);
	            });
	        },

	        destroy: function() {
	            this._unbindDataSource();
	        },

	        reset: function() { },

	        refresh: function(e) {
	            var action = e && e.action,
	                dataItems = e && e.items,
	                listView = this.listView,
	                dataSource = this.dataSource,
	                prependOnRefresh = this.options.appendOnRefresh,
	                view = dataSource.view(),
	                groups = dataSource.group(),
	                groupedMode = groups && groups[0],
	                item;


	            if (action === "itemchange") {
	                if(!listView._hasBindingTarget()) {
	                    item = listView.findByDataItem(dataItems)[0];
	                    if (item) {
	                        listView.setDataItem(item, dataItems[0]);
	                    }
	                }
	                return;
	            }

	            var removedItems, addedItems, addedDataItems;
	            var adding = (action === "add" && !groupedMode) || (prependOnRefresh && !listView._filter);
	            var removing = action === "remove" && !groupedMode;

	            if (adding) {
	                // no need to unbind anything
	                removedItems = [];
	            } else if (removing) {
	                // unbind the items about to be removed;
	                removedItems = listView.findByDataItem(dataItems);
	            }

	            if (listView.trigger(DATABINDING, { action: action || "rebind", items: dataItems, removedItems: removedItems, index: e && e.index })) {
	                if (this._shouldShowLoading()) {
	                    listView.hideLoading();
	                }
	                return;
	            }

	            if (action === "add" && !groupedMode) {
	                var index = view.indexOf(dataItems[0]);
	                if (index > -1) {
	                    addedItems = listView.insertAt(dataItems, index);
	                    addedDataItems = dataItems;
	                }
	            } else if (action === "remove" && !groupedMode) {
	                addedItems = [];
	                listView.remove(dataItems);
	            } else if (groupedMode) {
	                listView.replaceGrouped(view);
	            }
	            else if (prependOnRefresh && !listView._filter) {
	                addedItems = listView.prepend(view);
	                addedDataItems = view;
	            }
	            else {
	                listView.replace(view);
	            }

	            if (this._shouldShowLoading()) {
	                listView.hideLoading();
	            }

	            listView.trigger(DATABOUND, { ns: ui, addedItems: addedItems, addedDataItems: addedDataItems });
	        },

	        setDataSource: function(dataSource) {
	            if (this.dataSource) {
	                this._unbindDataSource();
	            }

	            this.dataSource = dataSource;
	            dataSource.bind(CHANGE, this._refreshHandler);

	            if (this._shouldShowLoading()) {
	                this.dataSource.bind(PROGRESS, this._progressHandler);
	            }
	        },

	        _unbindDataSource: function() {
	            this.dataSource.unbind(CHANGE, this._refreshHandler).unbind(PROGRESS, this._progressHandler);
	        },

	        _shouldShowLoading: function() {
	            var options = this.options;
	            return !options.pullToRefresh && !options.loadMore && !options.endlessScroll;
	        }
	    });

	    var ListViewFilter = kendo.Class.extend({
	        init: function(listView) {
	            var filter = this,
	                filterable = listView.options.filterable,
	                events = "change paste",
	                that = this;

	            this.listView = listView;
	            this.options = filterable;

	            listView.element.before(SEARCH_TEMPLATE({ placeholder: filterable.placeholder || "Search..." }));

	            if (filterable.autoFilter !== false) {
	                events += " keyup";
	            }

	            this.element = listView.wrapper.find(".km-search-form");

	            this.searchInput = listView.wrapper.find("input[type=search]")
	                .closest("form").on("submit" + NS, function(e) {
	                    e.preventDefault();
	                })
	                .end()
	                .on("focus" + NS, function() {
	                    filter._oldFilter = filter.searchInput.val();
	                })
	                .on(events.split(" ").join(NS + " ") + NS, proxy(this._filterChange, this));

	            this.clearButton = listView.wrapper.find(".km-filter-reset")
	                .on(CLICK, proxy(this, "_clearFilter"))
	                .hide();

	             this._dataSourceChange = $.proxy(this._refreshInput, this);
	             listView.bind("_dataSource", function(e) {
	                 e.dataSource.bind("change", that._dataSourceChange);
	             });
	        },

	        _refreshInput: function() {
	            var appliedFilters = this.listView.dataSource.filter();
	            var searchInput = this.listView._filter.searchInput;

	            if (!appliedFilters || appliedFilters.filters[0].field !== this.listView.options.filterable.field)  {
	                searchInput.val("");
	            } else {
	                searchInput.val(appliedFilters.filters[0].value);
	            }
	        },

	        _search: function(expr) {
	            this._filter = true;
	            this.clearButton[expr ? "show" : "hide"]();
	            this.listView.dataSource.filter(expr);
	        },

	        _filterChange: function(e) {
	            var filter = this;
	            if (e.type == "paste" && this.options.autoFilter !== false) {
	                setTimeout(function() {
	                    filter._applyFilter();
	                }, 1);
	            } else {
	                this._applyFilter();
	            }
	        },

	        _applyFilter: function() {
	            var options = this.options,
	                value = this.searchInput.val(),
	                expr = value.length ? {
	                    field: options.field,
	                    operator: options.operator || "startswith",
	                    ignoreCase: options.ignoreCase,
	                    value: value
	                } : null;

	            if (value === this._oldFilter) {
	                return;
	            }

	            this._oldFilter = value;
	            this._search(expr);
	        },

	        _clearFilter: function(e) {
	            this.searchInput.val("");
	            this._search(null);

	            e.preventDefault();
	        }
	    });

	    var ListView = Widget.extend({
	        init: function(element, options) {
	            var listView = this;

	            Widget.fn.init.call(this, element, options);

	            element = this.element;

	            options = this.options;

	            // support for legacy typo in configuration options: scrollTreshold -> scrollThreshold.
	            if (options.scrollTreshold) {
	                options.scrollThreshold = options.scrollTreshold;
	            }

	            element
	                .on("down", HIGHLIGHT_SELECTOR, "_highlight")
	                .on("move up cancel", HIGHLIGHT_SELECTOR, "_dim");

	            this._userEvents = new kendo.UserEvents(element, {
	                fastTap: true,
	                filter: ITEM_SELECTOR,
	                allowSelection: true,
	                tap: function(e) {
	                    listView._click(e);
	                }
	            });

	            // HACK!!! to negate the ms touch action from the user events.
	            element.css("-ms-touch-action", "auto");

	            element.wrap(WRAPPER);

	            this.wrapper = this.element.parent();

	            this._headerFixer = new HeaderFixer(this);

	            this._itemsCache = {};
	            this._templates();

	            this.virtual = options.endlessScroll || options.loadMore;

	            this._style();

	            if (this.options.$angular && (this.virtual || this.options.pullToRefresh)) {
	                setTimeout($.proxy(this, "_start"));
	            } else {
	                this._start();
	            }

	        },

	        _start: function() {
	            var options = this.options;

	            if (this.options.filterable) {
	                this._filter = new ListViewFilter(this);
	            }

	            if (this.virtual) {
	                this._itemBinder = new VirtualListViewItemBinder(this);
	            } else {
	                this._itemBinder = new ListViewItemBinder(this);
	            }

	            if (this.options.pullToRefresh) {
	                this._pullToRefreshHandler = new RefreshHandler(this);
	            }

	            this.setDataSource(options.dataSource);

	            this._enhanceItems(this.items());

	            kendo.notify(this, ui);
	        },

	        events: [
	            CLICK,
	            DATABINDING,
	            DATABOUND,
	            ITEM_CHANGE
	        ],

	        options: {
	            name: "ListView",
	            style: "",
	            type: "flat",
	            autoBind: true,
	            fixedHeaders: false,
	            template: "#:data#",
	            headerTemplate: '<span class="km-text">#:value#</span>',
	            appendOnRefresh: false,
	            loadMore: false,
	            endlessScroll: false,
	            scrollThreshold: 30,
	            pullToRefresh: false,
	            messages: {
	                loadMoreText: "Press to load more",
	                pullTemplate: "Pull to refresh",
	                releaseTemplate: "Release to refresh",
	                refreshTemplate: "Refreshing"
	            },
	            pullOffset: 140,
	            filterable: false,
	            virtualViewSize: null
	        },

	        refresh: function() {
	            this._itemBinder.refresh();
	        },

	        reset: function() {
	            this._itemBinder.reset();
	        },

	        setDataSource: function(dataSource) {
	            // the listView should have a ready datasource for MVVM to function properly. But an empty datasource should not empty the element
	            var emptyDataSource = !dataSource;
	            this.dataSource = DataSource.create(dataSource);

	            this.trigger("_dataSource", { dataSource: this.dataSource, empty: emptyDataSource });

	            if (this.options.autoBind && !emptyDataSource) {
	                this.items().remove();
	                this.dataSource.fetch();
	            }
	        },

	        destroy: function() {
	            Widget.fn.destroy.call(this);
	            kendo.destroy(this.element);
	            this._userEvents.destroy();
	            if (this._itemBinder) {
	                this._itemBinder.destroy();
	            }

	            if(this._headerFixer) {
	                this._headerFixer.destroy();
	            }

	            this.element.unwrap();
	            delete this.element;
	            delete this.wrapper;
	            delete this._userEvents;
	        },

	        items: function() {
	            if (this.options.type === "group") {
	                return this.element.find(".km-list").children();
	            } else {
	                return this.element.children().not('.km-load-more');
	            }
	        },

	        scroller: function() {
	            if (!this._scrollerInstance) {
	                this._scrollerInstance = this.element.closest(".km-scroll-wrapper").data("kendoMobileScroller");
	            }

	            return this._scrollerInstance;
	        },

	        showLoading: function() {
	            var view = this.view();
	            if (view && view.loader) {
	                view.loader.show();
	            }
	        },

	        hideLoading: function() {
	            var view = this.view();
	            if (view && view.loader) {
	                view.loader.hide();
	            }
	        },

	        insertAt: function(dataItems, index, triggerChange) {
	            var listView = this;
	            return listView._renderItems(dataItems, function(items) {
	                if (index === 0) {
	                    listView.element.prepend(items);
	                }
	                else if (index === -1) {
	                    listView.element.append(items);
	                } else {
	                    listView.items().eq(index - 1).after(items);
	                }

	                if (triggerChange) {
	                    for (var i = 0; i < items.length; i ++) {
	                        listView.trigger(ITEM_CHANGE, { item: items.eq(i), data: dataItems[i], ns: ui });
	                    }
	                }
	            });
	        },

	        append: function(dataItems, triggerChange) {
	            return this.insertAt(dataItems, -1, triggerChange);
	        },

	        prepend: function(dataItems, triggerChange) {
	            return this.insertAt(dataItems, 0, triggerChange);
	        },

	        replace: function(dataItems) {
	            this.options.type = "flat";
	            this._angularItems("cleanup");
	            kendo.destroy(this.element.children());
	            this.element.empty();
	            this._userEvents.cancel();
	            this._style();
	            return this.insertAt(dataItems, 0);
	        },

	        replaceGrouped: function(groups) {
	            this.options.type = "group";
	            this._angularItems("cleanup");
	            this.element.empty();
	            var items = $(kendo.render(this.groupTemplate, groups));

	            this._enhanceItems(items.children("ul").children("li"));
	            this.element.append(items);
	            mobile.init(items);
	            this._style();
	            this._angularItems("compile");
	        },

	        remove: function(dataItems) {
	            var items = this.findByDataItem(dataItems);
	            this.angular("cleanup", function(){
	                return { elements: items };
	            });
	            kendo.destroy(items);
	            items.remove();
	        },

	        findByDataItem: function(dataItems) {
	            var selectors = [];

	            for (var idx = 0, length = dataItems.length; idx < length; idx ++) {
	                selectors[idx] = "[data-" + kendo.ns + "uid=" + dataItems[idx].uid + "]";
	            }

	            return this.element.find(selectors.join(","));
	        },

	        // item is a DOM element, not jQuery object.
	        setDataItem: function(item, dataItem) {
	            var listView = this,
	                replaceItem = function(items) {
	                    var newItem = $(items[0]);
	                    kendo.destroy(item);
	                    listView.angular("cleanup", function(){ return { elements: [ $(item) ] }; });
	                    $(item).replaceWith(newItem);
	                    listView.trigger(ITEM_CHANGE, { item: newItem, data: dataItem, ns: ui });
	                };

	            return this._renderItems([dataItem], replaceItem)[0];
	        },

	        updateSize: function() {
	            this._size = this.getSize();
	        },

	        _renderItems: function(dataItems, callback) {
	            var items = $(kendo.render(this.template, dataItems));

	            callback(items);

	            this.angular("compile", function() {
	                return {
	                    elements: items,
	                    data: dataItems.map(function(data){
	                        return { dataItem: data };
	                    })
	                };
	            });

	            mobile.init(items);
	            this._enhanceItems(items);

	            return items;
	        },

	        _dim: function(e) {
	            this._toggle(e, false);
	        },

	        _highlight: function(e) {
	            this._toggle(e, true);
	        },

	        _toggle: function(e, highlight) {
	            if (e.which > 1) {
	                return;
	            }

	            var clicked = $(e.currentTarget),
	                item = clicked.parent(),
	                role = attrValue(clicked, "role") || "",
	                plainItem = (!role.match(buttonRegExp)),
	                prevented = e.isDefaultPrevented();

	            if (plainItem) {
	                item.toggleClass(ACTIVE_CLASS, highlight && !prevented);
	            }
	        },

	        _templates: function() {
	            var template = this.options.template,
	                headerTemplate = this.options.headerTemplate,
	                dataIDAttribute = ' data-uid="#=arguments[0].uid || ""#"',
	                templateProxy = {},
	                groupTemplateProxy = {};

	            if (typeof template === FUNCTION) {
	                templateProxy.template = template;
	                template = "#=this.template(data)#";
	            }

	            this.template = proxy(kendo.template("<li" + dataIDAttribute + ">" + template + "</li>"), templateProxy);

	            groupTemplateProxy.template = this.template;

	            if (typeof headerTemplate === FUNCTION) {
	                groupTemplateProxy._headerTemplate = headerTemplate;
	                headerTemplate = "#=this._headerTemplate(data)#";
	            }

	            groupTemplateProxy.headerTemplate = kendo.template(headerTemplate);

	            this.groupTemplate = proxy(GROUP_TEMPLATE, groupTemplateProxy);
	        },

	        _click: function(e) {
	            if (e.event.which > 1 || e.event.isDefaultPrevented()) {
	                return;
	            }

	            var dataItem,
	                item = e.target,
	                target = $(e.event.target),
	                buttonElement = target.closest(kendo.roleSelector("button", "detailbutton", "backbutton")),
	                button = kendo.widgetInstance(buttonElement, ui),
	                id = item.attr(kendo.attr("uid"));

	            if (id) {
	                dataItem = this.dataSource.getByUid(id);
	            }

	            if (this.trigger(CLICK, {target: target, item: item, dataItem: dataItem, button: button})) {
	                e.preventDefault();
	            }
	        },

	        _styleGroups: function() {
	            var rootItems = this.element.children();

	            rootItems.children("ul").addClass("km-list");

	            rootItems.each(function() {
	                var li = $(this),
	                    groupHeader = li.contents().first();

	                li.addClass("km-group-container");
	                if (!groupHeader.is("ul") && !groupHeader.is("div." + GROUP_CLASS)) {
	                    groupHeader.wrap(GROUP_WRAPPER);
	                }
	            });
	        },

	        _style: function() {
	            var options = this.options,
	                grouped = options.type === "group",
	                element = this.element,
	                inset = options.style === "inset";

	            element.addClass("km-listview")
	                .toggleClass("km-list", !grouped)
	                .toggleClass("km-virtual-list", this.virtual)
	                .toggleClass("km-listinset", !grouped && inset)
	                .toggleClass("km-listgroup", grouped && !inset)
	                .toggleClass("km-listgroupinset", grouped && inset);

	            if (!element.parents(".km-listview")[0]) {
	                element.closest(".km-content").toggleClass("km-insetcontent", inset); // iOS has white background when the list is not inset.
	            }

	            if (grouped) {
	                this._styleGroups();
	            }

	            this.trigger(STYLED);
	        },

	        _enhanceItems: function(items) {
	            items.each(function() {
	                var item = $(this),
	                    child,
	                    enhanced = false;

	                item.children().each(function() {
	                    child = $(this);
	                    if (child.is("a")) {
	                        enhanceLinkItem(child);
	                        enhanced = true;
	                    } else if (child.is("label")) {
	                        enhanceCheckBoxItem(child);
	                        enhanced = true;
	                    }
	                });

	                if (!enhanced) {
	                    enhanceItem(item);
	                }
	            });
	        }
	    });

	    ui.plugin(ListView);
	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(422));


/***/ }),

/***/ 479:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(28);

/***/ })

/******/ });

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(481);


/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 469:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(16);

/***/ }),

/***/ 477:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(11);

/***/ }),

/***/ 481:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(469), __webpack_require__(477) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "mobile.modalview",
	    name: "ModalView",
	    category: "mobile",
	    description: "The Kendo ModalView is used to present self-contained functionality in the context of the current task.",
	    depends: [ "mobile.shim", "mobile.view" ]
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        ui = kendo.mobile.ui,
	        Shim = ui.Shim,
	        Widget = ui.Widget,
	        BEFORE_OPEN = "beforeOpen",
	        OPEN = "open",
	        CLOSE = "close",
	        INIT = "init",
	        WRAP = '<div class="km-modalview-wrapper" />';

	    var ModalView = ui.View.extend({
	        init: function(element, options) {
	            var that = this;

	            Widget.fn.init.call(that, element, options);

	            that._id();
	            that._wrap();
	            that._shim();

	            if (!this.options.$angular) {
	                that._layout();
	                that._scroller();
	                that._model();
	            }

	            that.element.css("display", "");

	            that.trigger(INIT);
	        },

	        events: [
	            INIT,
	            BEFORE_OPEN,
	            OPEN,
	            CLOSE
	        ],

	        options: {
	            name: "ModalView",
	            modal: true,
	            width: null,
	            height: null
	        },

	        destroy: function() {
	            Widget.fn.destroy.call(this);
	            this.shim.destroy();
	        },

	        open: function(target) {
	            var that = this;
	            that.target = $(target);
	            that.shim.show();

	            that._invokeNgController();

	            // necessary for the mobile view interface
	            that.trigger("show", { view: that });
	        },

	        // Interface implementation, called from the pane click handlers
	        openFor: function(target) {
	            if (!this.trigger(BEFORE_OPEN, { target: target })) {
	                this.open(target);
	                this.trigger(OPEN, { target: target });
	            }
	        },

	        close: function() {
	            if (this.element.is(":visible") && !this.trigger(CLOSE)) {
	                this.shim.hide();
	            }
	        },

	        _wrap: function() {
	            var that = this,
	                element = that.element,
	                options = that.options,
	                width, height;

	            width = element[0].style.width || "auto";
	            height = element[0].style.height || "auto";

	            element.addClass("km-modalview").wrap(WRAP);

	            that.wrapper = element.parent().css({
	                width: options.width || width || 300,
	                height: options.height || height || 300
	            }).addClass(height == "auto" ? " km-auto-height" : "");

	            element.css({ width: "", height: "" });
	        },

	        _shim: function() {
	            var that = this;

	            that.shim = new Shim(that.wrapper, {
	                modal: that.options.modal,
	                position: "center center",
	                align: "center center",
	                effect: "fade:in",
	                className: "km-modalview-root",
	                hide: function(e) {
	                    if (that.trigger(CLOSE)) {
	                        e.preventDefault();
	                    }
	                }
	            });
	        }
	    });

	    ui.plugin(ModalView);
	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(422));


/***/ })

/******/ });

/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(482);


/***/ }),

/***/ 421:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(0);

/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 482:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(421) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "mobile.navbar",
	    name: "NavBar",
	    category: "mobile",
	    description: "The Kendo mobile NavBar widget is used inside a mobile View or Layout Header element to display an application navigation bar.",
	    depends: [ "core" ]
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        mobile = kendo.mobile,
	        ui = mobile.ui,
	        Widget = ui.Widget;

	    function createContainer(align, element) {
	        var items = element.find("[" + kendo.attr("align") + "=" + align + "]");

	        if (items[0]) {
	            return $('<div class="km-' + align + 'item" />').append(items).prependTo(element);
	        }
	    }

	    function toggleTitle(centerElement) {
	        var siblings = centerElement.siblings(),
	            noTitle = !!centerElement.children("ul")[0],
	            showTitle = (!!siblings[0] && $.trim(centerElement.text()) === ""),
	            android = !!(kendo.mobile.application && kendo.mobile.application.element.is(".km-android"));

	        centerElement.prevAll().toggleClass("km-absolute", noTitle);
	        centerElement.toggleClass("km-show-title", showTitle);
	        centerElement.toggleClass("km-fill-title", showTitle && !$.trim(centerElement.html()));
	        centerElement.toggleClass("km-no-title", noTitle);
	        centerElement.toggleClass("km-hide-title", android && !siblings.children().is(":visible"));
	    }

	    var NavBar = Widget.extend({
	        init: function(element, options) {
	            var that = this;

	            Widget.fn.init.call(that, element, options);

	            element = that.element;

	            that.container().bind("show", $.proxy(this, "refresh"));

	            element.addClass("km-navbar").wrapInner($('<div class="km-view-title km-show-title" />'));
	            that.leftElement = createContainer("left", element);
	            that.rightElement = createContainer("right", element);
	            that.centerElement = element.find(".km-view-title");
	        },

	        options: {
	            name: "NavBar"
	        },

	        title: function(value) {
	            this.element.find(kendo.roleSelector("view-title")).text(value);
	            toggleTitle(this.centerElement);
	        },

	        refresh: function(e) {
	            var view = e.view;
	            this.title(view.options.title);
	        },

	        destroy: function() {
	            Widget.fn.destroy.call(this);
	            kendo.destroy(this.element);
	        }
	    });

	    ui.plugin(NavBar);
	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(422));


/***/ })

/******/ });

/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(488);


/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 427:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(4);

/***/ }),

/***/ 461:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(6);

/***/ }),

/***/ 487:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(7);

/***/ }),

/***/ 488:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(487), __webpack_require__(427), __webpack_require__(461) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "mobile.scrollview",
	    name: "ScrollView",
	    category: "mobile",
	    description: "The Kendo Mobile ScrollView widget is used to scroll content wider than the device screen.",
	    depends: [ "fx", "data", "draganddrop" ]
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        mobile = kendo.mobile,
	        ui = mobile.ui,
	        proxy = $.proxy,
	        Transition = kendo.effects.Transition,
	        Pane = kendo.ui.Pane,
	        PaneDimensions = kendo.ui.PaneDimensions,
	        Widget = ui.DataBoundWidget,
	        DataSource = kendo.data.DataSource,
	        Buffer = kendo.data.Buffer,
	        BatchBuffer = kendo.data.BatchBuffer,

	        // Math
	        math = Math,
	        abs  = math.abs,
	        ceil = math.ceil,
	        round = math.round,
	        max = math.max,
	        min = math.min,
	        floor = math.floor,

	        CHANGE = "change",
	        CHANGING = "changing",
	        REFRESH = "refresh",
	        CURRENT_PAGE_CLASS = "current-page",
	        VIRTUAL_PAGE_CLASS = "virtual-page",
	        FUNCTION = "function",
	        ITEM_CHANGE = "itemChange",
	        CLEANUP = "cleanup",

	        VIRTUAL_PAGE_COUNT = 3,
	        LEFT_PAGE = -1,
	        CETER_PAGE = 0,
	        RIGHT_PAGE = 1,

	        LEFT_SWIPE = -1,
	        NUDGE = 0,
	        RIGHT_SWIPE = 1;

	    function className(name) {
	        return "k-" + name + " km-" + name;
	    }

	    var Pager = kendo.Class.extend({
	        init: function(scrollView) {
	            var that = this,
	                element = $("<ol class='" + className("pages") + "'/>");

	            scrollView.element.append(element);

	            this._changeProxy = proxy(that, "_change");
	            this._refreshProxy = proxy(that, "_refresh");
	            scrollView.bind(CHANGE, this._changeProxy);
	            scrollView.bind(REFRESH, this._refreshProxy);

	            $.extend(that, { element: element, scrollView: scrollView });
	        },

	        items: function() {
	            return this.element.children();
	        },

	        _refresh: function(e) {
	            var pageHTML = "";

	            for (var idx = 0; idx < e.pageCount; idx ++) {
	                pageHTML += "<li/>";
	            }

	            this.element.html(pageHTML);
	            this.items().eq(e.page).addClass(className(CURRENT_PAGE_CLASS));
	        },

	        _change: function(e) {
	            this.items()
	                .removeClass(className(CURRENT_PAGE_CLASS))
	                .eq(e.page).addClass(className(CURRENT_PAGE_CLASS));
	        },

	        destroy: function() {
	            this.scrollView.unbind(CHANGE, this._changeProxy);
	            this.scrollView.unbind(REFRESH, this._refreshProxy);
	            this.element.remove();
	        }
	    });

	    kendo.mobile.ui.ScrollViewPager = Pager;

	    var TRANSITION_END = "transitionEnd",
	        DRAG_START = "dragStart",
	        DRAG_END = "dragEnd";

	    var ElasticPane = kendo.Observable.extend({
	        init: function(element, options) {
	            var that = this;

	            kendo.Observable.fn.init.call(this);

	            this.element = element;
	            this.container = element.parent();

	            var movable,
	                transition,
	                userEvents,
	                dimensions,
	                dimension,
	                pane;

	            movable = new kendo.ui.Movable(that.element);

	            transition = new Transition({
	                axis: "x",
	                movable: movable,
	                onEnd: function() {
	                    that.trigger(TRANSITION_END);
	                }
	            });

	            userEvents = new kendo.UserEvents(element, {
	                fastTap: true,
	                start: function(e) {
	                    if (abs(e.x.velocity) * 2 >= abs(e.y.velocity)) {
	                        userEvents.capture();
	                    } else {
	                        userEvents.cancel();
	                    }

	                    that.trigger(DRAG_START, e);
	                    transition.cancel();
	                },
	                allowSelection: true,
	                end: function(e) {
	                    that.trigger(DRAG_END, e);
	                }
	            });

	            dimensions = new PaneDimensions({
	                element: that.element,
	                container: that.container
	            });

	            dimension = dimensions.x;

	            dimension.bind(CHANGE, function() {
	                that.trigger(CHANGE);
	            });

	            pane = new Pane({
	                dimensions: dimensions,
	                userEvents: userEvents,
	                movable: movable,
	                elastic: true
	            });

	            $.extend(that, {
	                duration: options && options.duration || 1,
	                movable: movable,
	                transition: transition,
	                userEvents: userEvents,
	                dimensions: dimensions,
	                dimension: dimension,
	                pane: pane
	            });

	            this.bind([TRANSITION_END, DRAG_START, DRAG_END, CHANGE], options);
	        },

	        size: function() {
	            return { width: this.dimensions.x.getSize(), height: this.dimensions.y.getSize() };
	        },

	        total: function() {
	            return this.dimension.getTotal();
	        },

	        offset: function() {
	            return -this.movable.x;
	        },

	        updateDimension: function() {
	            this.dimension.update(true);
	        },

	        refresh: function() {
	            this.dimensions.refresh();
	        },

	        moveTo: function(offset) {
	            this.movable.moveAxis("x", -offset);
	        },

	        transitionTo: function(offset, ease, instant) {
	            if (instant) {
	                this.moveTo(-offset);
	            } else {
	                this.transition.moveTo({ location: offset, duration: this.duration, ease: ease });
	            }
	        }
	    });

	    kendo.mobile.ui.ScrollViewElasticPane = ElasticPane;

	    var ScrollViewContent = kendo.Observable.extend({
	        init: function(element, pane, options) {
	            var that = this;

	            kendo.Observable.fn.init.call(this);
	            that.element = element;
	            that.pane = pane;
	            that._getPages();
	            this.page = 0;
	            this.pageSize = options.pageSize || 1;
	            this.contentHeight = options.contentHeight;
	            this.enablePager = options.enablePager;
	            this.pagerOverlay = options.pagerOverlay;
	        },

	        scrollTo: function(page, instant) {
	            this.page = page;
	            this.pane.transitionTo(- page * this.pane.size().width, Transition.easeOutExpo, instant);
	        },

	        paneMoved: function(swipeType, bounce, callback, /*internal*/ instant) {
	            var that = this,
	                pane = that.pane,
	                width = pane.size().width * that.pageSize,
	                approx = round,
	                ease = bounce ? Transition.easeOutBack : Transition.easeOutExpo,
	                snap,
	                nextPage;

	            if (swipeType === LEFT_SWIPE) {
	                approx = ceil;
	            } else if (swipeType === RIGHT_SWIPE) {
	                approx = floor;
	            }

	            nextPage = approx(pane.offset() / width);

	            snap = max(that.minSnap, min(-nextPage * width, that.maxSnap));

	            if (nextPage != that.page) {
	                if (callback && callback({ currentPage: that.page, nextPage: nextPage })) {
	                    snap = -that.page * pane.size().width;
	                }
	            }

	            pane.transitionTo(snap, ease, instant);
	        },

	        updatePage: function() {
	            var pane = this.pane,
	                page = round(pane.offset() / pane.size().width);

	            if (page != this.page) {
	                this.page = page;
	                return true;
	            }

	            return false;
	        },

	        forcePageUpdate: function() {
	            return this.updatePage();
	        },

	        resizeTo: function(size) {
	            var pane = this.pane,
	                width = size.width;

	            this.pageElements.width(width);

	            if (this.contentHeight === "100%") {
	                var containerHeight = this.element.parent().height();

	                if (this.enablePager === true) {
	                    var pager = this.element.parent().find("ol.km-pages");
	                    if (!this.pagerOverlay && pager.length) {
	                        containerHeight -= kendo._outerHeight(pager, true);
	                    }
	                }

	                this.element.css("height", containerHeight);
	                this.pageElements.css("height", containerHeight);
	            }

	            // re-read pane dimension after the pageElements have been resized.
	            pane.updateDimension();

	            if (!this._paged) {
	                this.page = floor(pane.offset() / width);
	            }

	            this.scrollTo(this.page, true);

	            this.pageCount = ceil(pane.total() / width);
	            this.minSnap = - (this.pageCount - 1) * width;
	            this.maxSnap = 0;
	        },

	        _getPages: function() {
	            this.pageElements = this.element.find(kendo.roleSelector("page"));
	            this._paged = this.pageElements.length > 0;
	        }
	    });

	    kendo.mobile.ui.ScrollViewContent = ScrollViewContent;

	    var VirtualScrollViewContent = kendo.Observable.extend({
	        init: function(element, pane, options) {
	            var that = this;

	            kendo.Observable.fn.init.call(this);

	            that.element = element;
	            that.pane = pane;
	            that.options = options;
	            that._templates();
	            that.page = options.page || 0;
	            that.pages = [];
	            that._initPages();
	            that.resizeTo(that.pane.size());

	            that.pane.dimension.forceEnabled();
	        },

	        setDataSource: function(dataSource) {
	            this.dataSource = DataSource.create(dataSource);
	            this._buffer();
	            this._pendingPageRefresh = false;
	            this._pendingWidgetRefresh = false;
	        },

	        _viewShow: function() {
	            var that = this;
	            if (that._pendingWidgetRefresh) {
	                setTimeout(function() {
	                    that._resetPages();
	                }, 0);
	                that._pendingWidgetRefresh = false;
	            }
	        },

	        _buffer: function() {
	            var itemsPerPage = this.options.itemsPerPage;

	            if (this.buffer) {
	                this.buffer.destroy();
	            }

	            if (itemsPerPage > 1) {
	                this.buffer = new BatchBuffer(this.dataSource, itemsPerPage);
	            } else {
	                this.buffer = new Buffer(this.dataSource, itemsPerPage * 3);
	            }

	            this._resizeProxy = proxy(this, "_onResize");
	            this._resetProxy = proxy(this, "_onReset");
	            this._endReachedProxy = proxy(this, "_onEndReached");

	            this.buffer.bind({
	                "resize": this._resizeProxy,
	                "reset": this._resetProxy,
	                "endreached": this._endReachedProxy
	            });
	        },

	        _templates: function() {
	            var template = this.options.template,
	                emptyTemplate = this.options.emptyTemplate,
	                templateProxy = {},
	                emptyTemplateProxy = {};

	            if (typeof template === FUNCTION) {
	                templateProxy.template = template;
	                template = "#=this.template(data)#";
	            }

	            this.template = proxy(kendo.template(template), templateProxy);

	            if (typeof emptyTemplate === FUNCTION) {
	                emptyTemplateProxy.emptyTemplate = emptyTemplate;
	                emptyTemplate = "#=this.emptyTemplate(data)#";
	            }

	            this.emptyTemplate = proxy(kendo.template(emptyTemplate), emptyTemplateProxy);
	        },

	        _initPages: function() {
	            var pages = this.pages,
	                element = this.element,
	                page;

	            for (var i = 0; i < VIRTUAL_PAGE_COUNT; i++) {
	                page = new Page(element);
	                pages.push(page);
	            }

	            this.pane.updateDimension();
	        },

	        resizeTo: function(size) {
	            var pages = this.pages,
	                pane = this.pane;

	            for (var i = 0; i < pages.length; i++) {
	                pages[i].setWidth(size.width);
	            }

	            if (this.options.contentHeight === "auto") {
	                this.element.css("height", this.pages[1].element.height());
	            }

	            else if (this.options.contentHeight === "100%") {
	                var containerHeight = this.element.parent().height();

	                if (this.options.enablePager === true) {
	                    var pager = this.element.parent().find("ol.km-pages");
	                    if (!this.options.pagerOverlay && pager.length) {
	                        containerHeight -= kendo._outerHeight(pager, true);
	                    }
	                }

	                this.element.css("height", containerHeight);
	                pages[0].element.css("height", containerHeight);
	                pages[1].element.css("height", containerHeight);
	                pages[2].element.css("height", containerHeight);
	            }

	            pane.updateDimension();

	            this._repositionPages();

	            this.width = size.width;
	        },

	        scrollTo: function(page) {
	            var buffer = this.buffer,
	                dataItem;

	            buffer.syncDataSource();
	            dataItem = buffer.at(page);

	            if (!dataItem) {
	                return;
	            }

	            this._updatePagesContent(page);

	            this.page = page;
	        },

	        paneMoved: function(swipeType, bounce, callback, /*internal*/ instant) {
	            var that = this,
	                pane = that.pane,
	                width = pane.size().width,
	                offset = pane.offset(),
	                thresholdPassed = Math.abs(offset) >= width / 3,
	                ease = bounce ? kendo.effects.Transition.easeOutBack : kendo.effects.Transition. easeOutExpo,
	                isEndReached = that.page + 2 > that.buffer.total(),
	                nextPage,
	                delta = 0;

	            if (swipeType === RIGHT_SWIPE) {
	                if (that.page !== 0) {
	                    delta = -1; //backward
	                }
	            } else if (swipeType === LEFT_SWIPE && !isEndReached) {
	                delta = 1; //forward
	            } else if (offset > 0 && (thresholdPassed && !isEndReached)) {
	                delta = 1; //forward
	            } else if (offset < 0 && thresholdPassed) {
	                if (that.page !== 0) {
	                    delta = -1; //backward
	                }
	            }

	            nextPage = that.page;
	            if (delta) {
	                nextPage = (delta > 0) ? nextPage + 1 : nextPage - 1;
	            }

	            if (callback && callback({ currentPage: that.page, nextPage: nextPage })) {
	                delta = 0;
	            }

	            if (delta === 0) {
	                that._cancelMove(ease, instant);
	            } else if (delta === -1) {
	                that._moveBackward(instant);
	            } else if (delta === 1) {
	                that._moveForward(instant);
	            }
	        },

	        updatePage: function() {
	            var pages = this.pages;

	            if (this.pane.offset() === 0) {
	                return false;
	            }

	            if (this.pane.offset() > 0) {
	                pages.push(this.pages.shift());//forward
	                this.page++;
	                this.setPageContent(pages[2], this.page + 1);
	            } else {
	                pages.unshift(this.pages.pop()); //back
	                this.page--;
	                this.setPageContent(pages[0], this.page - 1);
	            }

	            this._repositionPages();

	            this._resetMovable();

	            return true;
	        },

	        forcePageUpdate: function() {
	            var offset = this.pane.offset(),
	                threshold  = this.pane.size().width * 3/4;

	            if (abs(offset) > threshold) {
	                return this.updatePage();
	            }

	            return false;
	        },

	        _resetMovable: function() {
	            this.pane.moveTo(0);
	        },

	        _moveForward: function(instant) {
	            this.pane.transitionTo(-this.width, kendo.effects.Transition.easeOutExpo, instant);
	        },

	        _moveBackward: function(instant) {
	            this.pane.transitionTo(this.width, kendo.effects.Transition.easeOutExpo, instant);
	        },

	        _cancelMove: function(ease, /*internal*/ instant) {
	            this.pane.transitionTo(0, ease, instant);
	        },

	        _resetPages: function() {
	            this.page = this.options.page || 0;

	            this._updatePagesContent(this.page);
	            this._repositionPages();

	            this.trigger("reset");
	        },

	        _onResize: function() {
	            this.pageCount = ceil(this.dataSource.total() / this.options.itemsPerPage);

	            if (this._pendingPageRefresh) {
	                this._updatePagesContent(this.page);
	                this._pendingPageRefresh = false;
	            }

	            this.trigger("resize");
	        },

	        _onReset: function() {
	            this.pageCount = ceil(this.dataSource.total() / this.options.itemsPerPage);
	            this._resetPages();
	        },

	        _onEndReached: function() {
	            this._pendingPageRefresh = true;
	        },

	        _repositionPages: function() {
	            var pages = this.pages;

	            pages[0].position(LEFT_PAGE);
	            pages[1].position(CETER_PAGE);
	            pages[2].position(RIGHT_PAGE);
	        },

	        _updatePagesContent: function(offset) {
	            var pages = this.pages,
	                currentPage = offset || 0;

	            this.setPageContent(pages[0], currentPage - 1);
	            this.setPageContent(pages[1], currentPage);
	            this.setPageContent(pages[2], currentPage + 1);
	        },

	        setPageContent: function(page, index) {
	            var buffer = this.buffer,
	                template = this.template,
	                emptyTemplate = this.emptyTemplate,
	                view = null;

	            if (index >= 0) {
	                view = buffer.at(index);
	                if ($.isArray(view) && !view.length) {
	                    view = null;
	                }
	            }

	            this.trigger(CLEANUP, { item: page.element });

	            if (view !== null) {
	                page.content(template(view));
	            } else {
	                page.content(emptyTemplate({}));
	            }

	            kendo.mobile.init(page.element);
	            this.trigger(ITEM_CHANGE, { item: page.element, data: view, ns: kendo.mobile.ui });

	        }
	    });

	    kendo.mobile.ui.VirtualScrollViewContent = VirtualScrollViewContent;

	    var Page = kendo.Class.extend({
	        init: function(container) {
	            this.element = $("<div class='" + className(VIRTUAL_PAGE_CLASS) + "'></div>");
	            this.width = container.width();
	            this.element.width(this.width);
	            container.append(this.element);
	        },

	        content: function(theContent) {
	            this.element.html(theContent);
	        },

	        position: function(position) { //position can be -1, 0, 1
	            this.element.css("transform", "translate3d(" + this.width * position + "px, 0, 0)");
	        },

	        setWidth: function(width) {
	            this.width = width;
	            this.element.width(width);
	        }
	    });

	    kendo.mobile.ui.VirtualPage = Page;

	    var ScrollView = Widget.extend({
	        init: function(element, options) {
	            var that = this;

	            Widget.fn.init.call(that, element, options);

	            options = that.options;
	            element = that.element;

	            kendo.stripWhitespace(element[0]);

	            element
	                .wrapInner("<div/>")
	                .addClass("k-widget " + className("scrollview"));

	            if (this.options.enablePager) {
	                this.pager = new Pager(this);

	                if (this.options.pagerOverlay) {
	                    element.addClass(className("scrollview-overlay"));
	                }
	            }

	            that.inner = element.children().first();
	            that.page = 0;
	            that.inner.css("height", options.contentHeight);

	            that.pane = new ElasticPane(that.inner, {
	                duration: this.options.duration,
	                transitionEnd: proxy(this, "_transitionEnd"),
	                dragStart: proxy(this, "_dragStart"),
	                dragEnd: proxy(this, "_dragEnd"),
	                change: proxy(this, REFRESH)
	            });

	            that.bind("resize", function() {
	                that.pane.refresh();
	            });

	            that.page = options.page;

	            var empty = this.inner.children().length === 0;

	            var content = empty ? new VirtualScrollViewContent(that.inner, that.pane, options) : new ScrollViewContent(that.inner, that.pane, options);

	            content.page = that.page;

	            content.bind("reset", function() {
	                this._pendingPageRefresh = false;
	                that._syncWithContent();
	                that.trigger(REFRESH, { pageCount: content.pageCount, page: content.page });
	            });

	            content.bind("resize", function() {
	                that.trigger(REFRESH, { pageCount: content.pageCount, page: content.page });
	            });

	            content.bind(ITEM_CHANGE, function(e) {
	                that.trigger(ITEM_CHANGE, e);

	                that.angular("compile", function() {
	                    return { elements: e.item, data: [ { dataItem: e.data } ] };
	                });
	            });

	            content.bind(CLEANUP, function(e) {
	                that.angular("cleanup", function() {
	                    return { elements: e.item };
	                });
	            });

	            that._content = content;
	            that.setDataSource(options.dataSource);

	            var mobileContainer = that.container();

	            if (mobileContainer.nullObject) {
	                that.viewInit();
	                that.viewShow();
	            } else {
	                mobileContainer.bind("show", proxy(this, "viewShow")).bind("init", proxy(this, "viewInit"));
	            }
	        },

	        options: {
	            name: "ScrollView",
	            page: 0,
	            duration: 400,
	            velocityThreshold: 0.8,
	            contentHeight: "auto",
	            pageSize: 1,
	            itemsPerPage: 1,
	            bounceVelocityThreshold: 1.6,
	            enablePager: true,
	            pagerOverlay: false,
	            autoBind: true,
	            template: "",
	            emptyTemplate: ""
	        },

	        events: [
	            CHANGING,
	            CHANGE,
	            REFRESH
	        ],

	        destroy: function() {
	            Widget.fn.destroy.call(this);
	            kendo.destroy(this.element);
	        },

	        viewInit: function() {
	            if (this.options.autoBind) {
	                this._content.scrollTo(this._content.page, true);
	            }
	        },

	        viewShow: function() {
	            this.pane.refresh();
	        },

	        refresh: function() {
	            var content = this._content;

	            content.resizeTo(this.pane.size());
	            this.page = content.page;
	            this.trigger(REFRESH, { pageCount: content.pageCount, page: content.page });
	        },

	        content: function(html) {
	           this.element.children().first().html(html);
	           this._content._getPages();
	           this.pane.refresh();
	        },

	        value: function(item) {
	            var dataSource = this.dataSource;

	            if (item) {
	                this.scrollTo(dataSource.indexOf(item), true);
	            } else {
	                return dataSource.at(this.page);
	            }
	        },

	        scrollTo: function(page, instant) {
	            this._content.scrollTo(page, instant);
	            this._syncWithContent();
	        },

	        prev: function() {
	            var that = this,
	                prevPage = that.page - 1;

	            if (that._content instanceof VirtualScrollViewContent) {
	                that._content.paneMoved(RIGHT_SWIPE, undefined, function(eventData) {
	                    return that.trigger(CHANGING, eventData);
	                });
	            } else if (prevPage > -1) {
	                that.scrollTo(prevPage);
	            }
	        },

	        next: function() {
	            var that = this,
	                nextPage = that.page + 1;

	            if (that._content instanceof VirtualScrollViewContent) {
	                that._content.paneMoved(LEFT_SWIPE, undefined, function(eventData) {
	                    return that.trigger(CHANGING, eventData);
	                });
	            } else if (nextPage < that._content.pageCount) {
	                that.scrollTo(nextPage);
	            }
	        },

	        setDataSource: function(dataSource) {
	            if (!(this._content instanceof VirtualScrollViewContent)) {
	                return;
	            }
	            // the scrollview should have a ready datasource for MVVM to function properly. But an empty datasource should not empty the element
	            var emptyDataSource = !dataSource;
	            this.dataSource = DataSource.create(dataSource);

	            this._content.setDataSource(this.dataSource);

	            if (this.options.autoBind && !emptyDataSource) {
	                // this.items().remove();
	                this.dataSource.fetch();
	            }
	        },

	        items: function() {
	            return this.element.find(".km-" + VIRTUAL_PAGE_CLASS);
	        },

	        _syncWithContent: function() {
	            var pages = this._content.pages,
	                buffer = this._content.buffer,
	                data,
	                element;

	            this.page = this._content.page;

	            data = buffer ? buffer.at(this.page) : undefined;
	            if (!(data instanceof Array)) {
	                data = [data];
	            }
	            element = pages ? pages[1].element : undefined;

	            this.trigger(CHANGE, { page: this.page, element: element, data: data });
	        },

	        _dragStart: function() {
	            if (this._content.forcePageUpdate()) {
	                this._syncWithContent();
	            }
	        },

	        _dragEnd: function(e) {
	            var that = this,
	                velocity = e.x.velocity,
	                velocityThreshold = this.options.velocityThreshold,
	                swipeType = NUDGE,
	                bounce = abs(velocity) > this.options.bounceVelocityThreshold;

	            if (velocity > velocityThreshold) {
	                swipeType = RIGHT_SWIPE;
	            } else if (velocity < -velocityThreshold) {
	                swipeType = LEFT_SWIPE;
	            }

	            this._content.paneMoved(swipeType, bounce, function(eventData) {
	                return that.trigger(CHANGING, eventData);
	            });
	        },

	        _transitionEnd: function() {
	            if (this._content.updatePage()) {
	                this._syncWithContent();
	            }
	        }
	    });

	    ui.plugin(ScrollView);

	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(422));


/***/ })

/******/ });

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(490);


/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 471:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(10);

/***/ }),

/***/ 490:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(471) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "mobile.splitview",
	    name: "SplitView",
	    category: "mobile",
	    description: "The mobile SplitView is a tablet-specific view that consists of two or more mobile Pane widgets.",
	    depends: [ "mobile.pane" ]
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        ui = kendo.mobile.ui,
	        Widget = ui.Widget,
	        EXPANED_PANE_SHIM = "<div class='km-expanded-pane-shim' />",
	        View = ui.View;

	    var SplitView = View.extend({
	        init: function(element, options) {
	            var that = this,
	            pane, modalViews;

	            Widget.fn.init.call(that, element, options);
	            element = that.element;

	            $.extend(that, options);

	            that._id();

	            if (!that.options.$angular) {
	                that._layout();
	                that._overlay();
	            } else {
	                that._overlay();
	            }

	            that._style();

	            modalViews = element.children(that._locate("modalview"));

	            if (!that.options.$angular) {
	                kendo.mobile.init(modalViews);
	            } else {
	                modalViews.each(function(idx, element) {
	                    kendo.compileMobileDirective($(element), options.$angular[0]);
	                });
	            }

	            that.panes = [];
	            that._paramsHistory = [];

	            if (!that.options.$angular) {
	                that.content.children(kendo.roleSelector("pane")).each(function() {
	                    pane = kendo.initWidget(this, {}, ui.roles);
	                    that.panes.push(pane);
	                });
	            } else {
	                that.element.children(kendo.directiveSelector("pane")).each(function() {
	                    pane = kendo.compileMobileDirective($(this), options.$angular[0]);
	                    that.panes.push(pane);
	                });

	                that.element.children(kendo.directiveSelector("header footer")).each(function() {
	                    kendo.compileMobileDirective($(this), options.$angular[0]);
	                });
	            }

	            that.expandedPaneShim = $(EXPANED_PANE_SHIM).appendTo(that.element);

	            that._shimUserEvents = new kendo.UserEvents(that.expandedPaneShim, {
	                fastTap: true,
	                tap: function() {
	                    that.collapsePanes();
	                }
	            });
	        },

	        _locate: function(selectors) {
	            return this.options.$angular ? kendo.directiveSelector(selectors) : kendo.roleSelector(selectors);
	        },

	        options: {
	            name: "SplitView",
	            style: "horizontal"
	        },

	        expandPanes: function() {
	            this.element.addClass("km-expanded-splitview");
	        },

	        collapsePanes: function() {
	            this.element.removeClass("km-expanded-splitview");
	        },

	        // Implement view interface
	        _layout: function() {
	            var that = this,
	                element = that.element;

	            that.transition = kendo.attrValue(element, "transition");
	            kendo.mobile.ui.View.prototype._layout.call(this);
	            kendo.mobile.init(this.header.add(this.footer));
	            that.element.addClass("km-splitview");
	            that.content.addClass("km-split-content");
	        },

	        _style: function () {
	            var style = this.options.style,
	                element = this.element,
	                styles;

	            if (style) {
	                styles = style.split(" ");
	                $.each(styles, function () {
	                    element.addClass("km-split-" + this);
	                });
	            }
	        },

	        showStart: function() {
	            var that = this;
	            that.element.css("display", "");

	            if (!that.inited) {
	                that.inited = true;
	                $.each(that.panes, function() {
	                    if (this.options.initial) {
	                        this.navigateToInitial();
	                    } else {
	                        this.navigate("");
	                    }
	                });
	                that.trigger("init", {view: that});
	            } else {
	                this._invokeNgController();
	            }

	            that.trigger("show", {view: that});
	        }
	    });

	    ui.plugin(SplitView);
	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(422));


/***/ })

/******/ });

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(491);


/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 435:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(5);

/***/ }),

/***/ 487:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(7);

/***/ }),

/***/ 491:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* jshint multistr: true */
	(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(487), __webpack_require__(435) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "mobile.switch",
	    name: "Switch",
	    category: "mobile",
	    description: "The mobile Switch widget is used to display two exclusive choices.",
	    depends: [ "fx", "userevents" ]
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        ui = kendo.mobile.ui,
	        outerWidth = kendo._outerWidth,
	        Widget = ui.Widget,
	        support = kendo.support,
	        CHANGE = "change",
	        SWITCHON = "switch-on",
	        SWITCHOFF = "switch-off",
	        MARGINLEFT = "margin-left",
	        ACTIVE_STATE = "state-active",
	        DISABLED_STATE = "state-disabled",
	        DISABLED = "disabled",
	        TRANSFORMSTYLE = support.transitions.css + "transform",
	        proxy = $.proxy;

	    function className(name) {
	        return "k-" + name + " km-" + name;
	    }

	    function limitValue(value, minLimit, maxLimit) {
	        return Math.max(minLimit, Math.min(maxLimit, value));
	    }

	    var SWITCH_MARKUP = '<span class="' + className("switch") + ' ' + className("widget") + '">\
	        <span class="' + className("switch-wrapper") + '">\
	            <span class="' + className("switch-background") + '"></span>\
	        </span> \
	        <span class="' + className("switch-container") + '">\
	            <span class="' + className("switch-handle") + '"> \
	                <span class="' + className("switch-label-on") + '">{0}</span> \
	                <span class="' + className("switch-label-off") + '">{1}</span> \
	            </span> \
	        </span>\
	    </span>';

	    var Switch = Widget.extend({
	        init: function(element, options) {
	            var that = this, checked;

	            Widget.fn.init.call(that, element, options);

	            options = that.options;

	            that.wrapper = $(kendo.format(SWITCH_MARKUP, options.onLabel, options.offLabel));
	            that.handle = that.wrapper.find(".km-switch-handle");
	            that.background = that.wrapper.find(".km-switch-background");
	            that.wrapper.insertBefore(that.element).prepend(that.element);

	            that._drag();

	            that.origin = parseInt(that.background.css(MARGINLEFT), 10);

	            that.constrain = 0;
	            that.snapPoint = 0;

	            element = that.element[0];
	            element.type = "checkbox";
	            that._animateBackground = true;

	            checked = that.options.checked;

	            if (checked === null) {
	                checked = element.checked;
	            }

	            that.check(checked);

	            that.options.enable = that.options.enable && !that.element.attr(DISABLED);
	            that.enable(that.options.enable);

	            that.refresh();
	            kendo.notify(that, kendo.mobile.ui);
	        },

	        refresh: function() {
	            var that = this,
	                handleWidth = outerWidth(that.handle, true);

	            that.width = that.wrapper.width();

	            that.constrain  = that.width - handleWidth;
	            that.snapPoint = that.constrain / 2;

	            if (typeof that.origin != "number") {
	                that.origin = parseInt(that.background.css(MARGINLEFT), 10);
	            }

	            that.background.data("origin", that.origin);

	            that.check(that.element[0].checked);
	        },

	        events: [
	            CHANGE
	        ],

	        options: {
	            name: "Switch",
	            onLabel: "on",
	            offLabel: "off",
	            checked: null,
	            enable: true
	        },

	        check: function(check) {
	            var that = this,
	                element = that.element[0];

	            if (check === undefined) {
	                return element.checked;
	            }

	            that._position(check ? that.constrain : 0);
	            element.checked = check;
	            that.wrapper
	                .toggleClass(className(SWITCHON), check)
	                .toggleClass(className(SWITCHOFF), !check);
	        },

	        // alias for check, NG support
	        value: function() {
	            return this.check.apply(this, arguments);
	        },

	        destroy: function() {
	            Widget.fn.destroy.call(this);
	            this.userEvents.destroy();
	        },

	        toggle: function() {
	            var that = this;

	            that.check(!that.element[0].checked);
	        },

	        enable: function(enable) {
	            var element = this.element,
	                wrapper = this.wrapper;

	            if(typeof enable == "undefined") {
	                enable = true;
	            }

	            this.options.enable = enable;

	            if(enable) {
	                element.removeAttr(DISABLED);
	            } else {
	                element.attr(DISABLED, DISABLED);
	            }

	            wrapper.toggleClass(className(DISABLED_STATE), !enable);
	        },

	        _resize: function() {
	            this.refresh();
	        },

	        _move: function(e) {
	            var that = this;
	            e.preventDefault();
	            that._position(limitValue(that.position + e.x.delta, 0, that.width - outerWidth(that.handle, true)));
	        },

	        _position: function(position) {
	            var that = this;

	            that.position = position;
	            that.handle.css(TRANSFORMSTYLE, "translatex(" + position + "px)");

	            if (that._animateBackground) {
	                that.background.css(MARGINLEFT, that.origin + position);
	            }
	        },

	        _start: function() {
	            if(!this.options.enable) {
	                this.userEvents.cancel();
	            } else {
	                this.userEvents.capture();
	                this.handle.addClass(className(ACTIVE_STATE));
	            }
	        },

	        _stop: function() {
	            var that = this;

	            that.handle.removeClass(className(ACTIVE_STATE));
	            that._toggle(that.position > that.snapPoint);
	        },

	        _toggle: function (checked) {
	            var that = this,
	                handle = that.handle,
	                element = that.element[0],
	                value = element.checked,
	                duration = kendo.mobile.application && kendo.mobile.application.os.wp ? 100 : 200,
	                distance;

	            that.wrapper
	                .toggleClass(className(SWITCHON), checked)
	                .toggleClass(className(SWITCHOFF), !checked);

	            that.position = distance = checked * that.constrain;

	            if (that._animateBackground) {
	                that.background
	                    .kendoStop(true, true)
	                    .kendoAnimate({ effects: "slideMargin", offset: distance, reset: true, reverse: !checked, axis: "left", duration: duration });
	            }

	            handle
	                .kendoStop(true, true)
	                .kendoAnimate({
	                    effects: "slideTo",
	                    duration: duration,
	                    offset: distance + "px,0",
	                    reset: true,
	                    complete: function () {
	                        if (value !== checked) {
	                            element.checked = checked;
	                            that.trigger(CHANGE, { checked: checked });
	                        }
	                    }
	                });
	        },

	        _drag: function() {
	            var that = this;

	            that.userEvents = new kendo.UserEvents(that.wrapper, {
	                fastTap: true,
	                tap: function() {
	                    if(that.options.enable) {
	                        that._toggle(!that.element[0].checked);
	                    }
	                },
	                start: proxy(that._start, that),
	                move: proxy(that._move, that),
	                end: proxy(that._stop, that)
	            });
	        }
	    });

	    ui.plugin(Switch);
	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(422));


/***/ })

/******/ });

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(492);


/***/ }),

/***/ 421:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(0);

/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 492:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(421) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "mobile.tabstrip",
	    name: "TabStrip",
	    category: "mobile",
	    description: "The mobile TabStrip widget is used inside a mobile view or layout footer element to display an application-wide group of navigation buttons.",
	    depends: [ "core" ]
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        ui = kendo.mobile.ui,
	        Widget = ui.Widget,
	        ACTIVE_STATE_CLASS = "km-state-active",
	        SELECT = "select";

	    function createBadge(value) {
	        return $('<span class="km-badge">' + value + '</span>');
	    }

	    var TabStrip = Widget.extend({
	        init: function(element, options) {
	            var that = this;

	            Widget.fn.init.call(that, element, options);
	            that.container().bind("show", $.proxy(this, "refresh"));

	            that.element
	               .addClass("km-tabstrip")
	               .find("a").each(that._buildButton)
	               .eq(that.options.selectedIndex).addClass(ACTIVE_STATE_CLASS);

	            that.element.on("down", "a", "_release");
	        },

	        events: [
	            SELECT
	        ],

	        switchTo: function(url) {
	            var tabs = this.element.find('a'),
	                tab,
	                path,
	                idx = 0,
	                length = tabs.length;

	            if(isNaN(url)) {
	                for (; idx < length; idx ++) {
	                    tab = tabs[idx];
	                    path = tab.href.replace(/(\#.+)(\?.+)$/, "$1"); // remove the fragment query string - http://www.foo.com?foo#bar**?baz=qux**

	                    if (path.indexOf(url, path.length - url.length) !== -1) {
	                        this._setActiveItem($(tab));
	                        return true;
	                    }
	                }
	            } else {
	                this._setActiveItem(tabs.eq(url));
	                return true;
	            }

	            return false;
	        },

	        switchByFullUrl: function(url) {
	            var tab;

	            tab = this.element.find("a[href$='" + url + "']");
	            this._setActiveItem(tab);
	        },

	        clear: function() {
	            this.currentItem().removeClass(ACTIVE_STATE_CLASS);
	        },

	        currentItem: function() {
	            return this.element.children("." + ACTIVE_STATE_CLASS);
	        },

	        badge: function(item, value) {
	            var tabstrip = this.element, badge;

	            if (!isNaN(item)) {
	                item = tabstrip.children().get(item);
	            }

	            item = tabstrip.find(item);
	            badge = $(item.find(".km-badge")[0] || createBadge(value).insertAfter(item.children(".km-icon")));

	            if (value || value === 0) {
	                badge.html(value);
	                return this;
	            }

	            if (value === false) {
	                badge.empty().remove();
	                return this;
	            }

	            return badge.html();
	        },

	        _release: function(e) {
	            if (e.which > 1) {
	                return;
	            }

	            var that = this,
	                item = $(e.currentTarget);

	            if (item[0] === that.currentItem()[0]) {
	                return;
	            }

	            if (that.trigger(SELECT, {item: item})) {
	                e.preventDefault();
	            } else {
	                that._setActiveItem(item);
	            }
	        },

	        _setActiveItem: function(item) {
	            if (!item[0]) {
	                return;
	            }
	            this.clear();
	            item.addClass(ACTIVE_STATE_CLASS);
	        },

	        _buildButton: function() {
	            var button = $(this),
	                icon = kendo.attrValue(button, "icon"),
	                badge = kendo.attrValue(button, "badge"),
	                image = button.find("img"),
	                iconSpan = $('<span class="km-icon"/>');

	            button
	                .addClass("km-button")
	                .attr(kendo.attr("role"), "tab")
	                    .contents().not(image)
	                    .wrapAll('<span class="km-text"/>');

	            if (image[0]) {
	                image.addClass("km-image").prependTo(button);
	            } else {
	                button.prepend(iconSpan);
	                if (icon) {
	                    iconSpan.addClass("km-" + icon);
	                    if (badge || badge === 0) {
	                        createBadge(badge).insertAfter(iconSpan);
	                    }
	                }
	            }
	        },

	        refresh: function(e) {
	            var url = e.view.id;

	            if (url && !this.switchTo(e.view.id)) {
	                this.switchTo(url);
	            }
	        },

	        options: {
	            name: "TabStrip",
	            selectedIndex: 0,
	            enable: true
	        }
	    });

	    ui.plugin(TabStrip);
	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(422));


/***/ })

/******/ });

/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(495);


/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 424:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(9);

/***/ }),

/***/ 425:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(8);

/***/ }),

/***/ 495:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(424), __webpack_require__(425) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "multiselect",
	    name: "MultiSelect",
	    category: "web",
	    description: "The MultiSelect widget allows the selection from pre-defined values.",
	    depends: [ "list" ],
	    features: [ {
	        id: "mobile-scroller",
	        name: "Mobile scroller",
	        description: "Support for kinetic scrolling in mobile device",
	        depends: [ "mobile.scroller" ]
	    }, {
	        id: "virtualization",
	        name: "VirtualList",
	        description: "Support for virtualization",
	        depends: [ "virtuallist" ]
	    } ]
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        ui = kendo.ui,
	        List = ui.List,
	        keys = kendo.keys,
	        activeElement = kendo._activeElement,
	        ObservableArray = kendo.data.ObservableArray,
	        proxy = $.proxy,
	        ID = "id",
	        LI = "li",
	        ACCEPT = "accept",
	        FILTER = "filter",
	        REBIND = "rebind",
	        OPEN = "open",
	        CLOSE = "close",
	        CHANGE = "change",
	        PROGRESS = "progress",
	        SELECT = "select",
	        DESELECT = "deselect",
	        ARIA_DISABLED = "aria-disabled",
	        FOCUSEDCLASS = "k-state-focused",
	        HIDDENCLASS = "k-hidden",
	        HOVERCLASS = "k-state-hover",
	        STATEDISABLED = "k-state-disabled",
	        DISABLED = "disabled",
	        READONLY = "readonly",
	        ns = ".kendoMultiSelect",
	        CLICK = "click" + ns,
	        KEYDOWN = "keydown" + ns,
	        MOUSEENTER = "mouseenter" + ns,
	        MOUSELEAVE = "mouseleave" + ns,
	        HOVEREVENTS = MOUSEENTER + " " + MOUSELEAVE,
	        quotRegExp = /"/g,
	        isArray = $.isArray,
	        styles = ["font-family",
	                  "font-size",
	                  "font-stretch",
	                  "font-style",
	                  "font-weight",
	                  "letter-spacing",
	                  "text-transform",
	                  "line-height"];

	    var MultiSelect = List.extend({
	        init: function(element, options) {
	            var that = this, id, disabled;

	            that.ns = ns;
	            List.fn.init.call(that, element, options);

	            that._optionsMap = {};
	            that._customOptions = {};

	            that._wrapper();
	            that._tagList();
	            that._input();
	            that._textContainer();
	            that._loader();
	            that._clearButton();

	            that._tabindex(that.input);

	            element = that.element.attr("multiple", "multiple").hide();
	            options = that.options;

	            if (!options.placeholder) {
	                options.placeholder = element.data("placeholder");
	            }

	            id = element.attr(ID);

	            if (id) {
	                that._tagID = id + "_tag_active";

	                id = id + "_taglist";
	                that.tagList.attr(ID, id);
	            }

	            that._aria(id);
	            that._dataSource();
	            that._ignoreCase();
	            that._popup();

	            that._tagTemplate();
	            that.requireValueMapper(that.options);
	            that._initList();

	            that._reset();
	            that._enable();
	            that._placeholder();

	            if (options.autoBind) {
	                that.dataSource.fetch();
	            } else if (options.value) {
	                that._preselect(options.value);
	            }

	            disabled = $(that.element).parents("fieldset").is(':disabled');

	            if (disabled) {
	                that.enable(false);
	            }

	            kendo.notify(that);
	            that._toggleCloseVisibility();
	        },

	        options: {
	            name: "MultiSelect",
	            tagMode: "multiple",
	            enabled: true,
	            autoBind: true,
	            autoClose: true,
	            highlightFirst: true,
	            dataTextField: "",
	            dataValueField: "",
	            filter: "startswith",
	            ignoreCase: true,
	            minLength: 1,
	            enforceMinLength: false,
	            delay: 100,
	            value: null,
	            maxSelectedItems: null,
	            placeholder: "",
	            height: 200,
	            animation: {},
	            virtual: false,
	            itemTemplate: "",
	            tagTemplate: "",
	            groupTemplate: "#:data#",
	            fixedGroupTemplate: "#:data#",
	            clearButton: true
	        },

	        events: [
	            OPEN,
	            CLOSE,
	            CHANGE,
	            SELECT,
	            DESELECT,
	            "filtering",
	            "dataBinding",
	            "dataBound"
	        ],

	        setDataSource: function(dataSource) {
	            this.options.dataSource = dataSource;

	            this._state = "";
	            this._dataSource();

	            this.listView.setDataSource(this.dataSource);

	            if (this.options.autoBind) {
	                this.dataSource.fetch();
	            }
	        },

	        setOptions: function(options) {
	            var listOptions = this._listOptions(options);

	            List.fn.setOptions.call(this, options);

	            this.listView.setOptions(listOptions);

	            this._accessors();
	            this._aria(this.tagList.attr(ID));
	            this._tagTemplate();
	        },

	        currentTag: function(candidate) {
	            var that = this;

	            if (candidate !== undefined) {
	                if (that._currentTag) {
	                    that._currentTag
	                        .removeClass(FOCUSEDCLASS)
	                        .removeAttr(ID);

	                    that.input.removeAttr("aria-activedescendant");
	                }

	                if (candidate) {
	                    candidate.addClass(FOCUSEDCLASS).attr(ID, that._tagID);

	                    that.input
	                        .attr("aria-activedescendant", that._tagID);
	                }

	                that._currentTag = candidate;
	            } else {
	                return that._currentTag;
	            }
	        },

	        dataItems: function() {
	            return this.listView.selectedDataItems();
	        },

	        destroy: function() {
	            var that = this,
	                ns = that.ns;

	            clearTimeout(that._busy);
	            clearTimeout(that._typingTimeout);

	            that.wrapper.off(ns);
	            that.tagList.off(ns);
	            that.input.off(ns);
	            that._clear.off(ns);

	            List.fn.destroy.call(that);
	        },

	        _activateItem: function() {
	            List.fn._activateItem.call(this);
	            this.currentTag(null);
	        },

	        _listOptions: function(options) {
	            var that = this;
	            var listOptions = List.fn._listOptions.call(that, $.extend(options, {
	                selectedItemChange: proxy(that._selectedItemChange, that),
	                selectable: "multiple"
	            }));

	            var itemTemplate = this.options.itemTemplate || this.options.template;
	            var template = listOptions.itemTemplate || itemTemplate || listOptions.template;

	            if (!template) {
	                template = "#:" + kendo.expr(listOptions.dataTextField, "data") + "#";
	            }

	            listOptions.template = template;

	            return listOptions;
	        },

	        _setListValue: function() {
	            List.fn._setListValue.call(this, this._initialValues.slice(0));
	        },

	        _listChange: function(e) {
	            var data = this.dataSource.flatView();
	            var optionsMap = this._optionsMap;
	            var valueGetter = this._value;

	            if (this._state === REBIND) {
	                this._state = "";
	            }

	            for (var i = 0; i < e.added.length; i++) {
	                if (optionsMap[valueGetter(e.added[i].dataItem)] === undefined) {
	                    this._render(data); //render select element <option> tags if the item does not persist in the current data view
	                    break;
	                }
	            }

	            this._selectValue(e.added, e.removed);
	        },

	        _selectedItemChange: function(e) {
	            var items = e.items;
	            var context;
	            var idx;

	            for (idx = 0; idx < items.length; idx++) {
	                context = items[idx];
	                this.tagList.children().eq(context.index).children("span:first").html(this.tagTextTemplate(context.item));
	            }
	        },

	        _wrapperMousedown: function(e) {
	            var that = this;
	            var notInput = e.target.nodeName.toLowerCase() !== "input";
	            var target = $(e.target);
	            var closeButton = target.hasClass("k-select") || target.hasClass("k-icon");

	            if (closeButton) {
	                closeButton = !target.closest(".k-select").children(".k-i-arrow-60-down").length;
	            }

	            if (notInput && !(closeButton && kendo.support.mobileOS)) {
	                e.preventDefault();
	            }

	            if (!closeButton) {
	                if (that.input[0] !== activeElement() && notInput) {
	                    that.input.focus();
	                }

	                if (that.options.minLength === 1) {
	                    that.open();
	                }
	            }

	        },

	        _inputFocus: function() {
	            this._placeholder(false);
	            this.wrapper.addClass(FOCUSEDCLASS);
	        },

	        _inputFocusout: function() {
	            var that = this;

	            clearTimeout(that._typingTimeout);

	            that.wrapper.removeClass(FOCUSEDCLASS);

	            that._placeholder(!that.listView.selectedDataItems()[0], true);
	            that.close();

	            if (that._state === FILTER) {
	                that._state = ACCEPT;
	                that.listView.skipUpdate(true);
	            }

	            that.element.blur();
	        },

	        _removeTag: function(tag) {
	            var that = this;
	            var state = that._state;
	            var position = tag.index();
	            var listView = that.listView;
	            var value = listView.value()[position];
	            var dataItem = that.listView.selectedDataItems()[position];
	            var customIndex = that._customOptions[value];
	            var option;

	            if (that.trigger(DESELECT, { dataItem: dataItem, item: tag })) {
	                that._close();
	                return;
	            }

	            if (customIndex === undefined && (state === ACCEPT || state === FILTER)) {
	                customIndex = that._optionsMap[value];
	            }

	            var done = function() {
	                that.currentTag(null);
	                that._change();
	                that._close();
	            };

	            if (customIndex === undefined) {
	                listView.select(listView.select()[position]).done(done);
	            } else {
	                option = that.element[0].children[customIndex];
	                option.selected = false;

	                listView.removeAt(position);
	                tag.remove();
	                done();
	            }
	        },

	        _tagListClick: function(e) {
	            var target = $(e.currentTarget);

	            if (!target.children(".k-i-arrow-60-down").length) {
	                this._removeTag(target.closest(LI));
	            }
	        },

	        _clearClick: function() {
	            var that = this;

	            that.tagList.children().each(function(index, tag) {
	                that._removeTag($(tag));
	            });

	            that.input.val("");
	            that._search();
	            that.trigger("change");
	            that.focus();
	        },

	        _editable: function(options) {
	            var that = this,
	                disable = options.disable,
	                readonly = options.readonly,
	                wrapper = that.wrapper.off(ns),
	                tagList = that.tagList.off(ns),
	                input = that.element.add(that.input.off(ns));

	            if (!readonly && !disable) {
	                wrapper
	                    .removeClass(STATEDISABLED)
	                    .on(HOVEREVENTS, that._toggleHover)
	                    .on("mousedown" + ns + " touchend" + ns, proxy(that._wrapperMousedown, that));

	                that.input.on(KEYDOWN, proxy(that._keydown, that))
	                    .on("paste" + ns, proxy(that._search, that))
	                    .on("focus" + ns, proxy(that._inputFocus, that))
	                    .on("focusout" + ns, proxy(that._inputFocusout, that));

	                that._clear.on("click" + ns, proxy(that._clearClick, that));
	                input.removeAttr(DISABLED)
	                     .removeAttr(READONLY)
	                     .attr(ARIA_DISABLED, false);

	                tagList
	                    .on(MOUSEENTER, LI, function() { $(this).addClass(HOVERCLASS); })
	                    .on(MOUSELEAVE, LI, function() { $(this).removeClass(HOVERCLASS); })
	                    .on(CLICK, "li.k-button .k-select", proxy(that._tagListClick, that));
	            } else {
	                if (disable) {
	                    wrapper.addClass(STATEDISABLED);
	                } else {
	                    wrapper.removeClass(STATEDISABLED);
	                }

	                input.attr(DISABLED, disable)
	                     .attr(READONLY, readonly)
	                     .attr(ARIA_DISABLED, disable);
	            }
	        },

	        _close: function() {
	            var that = this;
	            if (that.options.autoClose) {
	                that.close();
	            } else {
	                that.popup.position();
	            }
	        },

	        _filterSource: function(filter, force) {
	            if(!force) {
	                force = this._retrieveData;
	            }
	            this._retrieveData = false;
	            List.fn._filterSource.call(this, filter, force);
	        },

	        close: function() {
	            this.popup.close();
	        },

	        open: function() {
	            var that = this;

	            if (that._request) {
	                that._retrieveData = false;
	            }

	            if (that._retrieveData || !that.listView.bound() || that._state === ACCEPT) {
	                that._open = true;
	                that._state = REBIND;

	                that.listView.skipUpdate(true);

	                that._filterSource();
	            } else if (that._allowOpening()) {
	                that.popup.open();
	                that._focusItem();
	            }
	        },

	        toggle: function(toggle) {
	            toggle = toggle !== undefined ? toggle : !this.popup.visible();

	            this[toggle ? OPEN : CLOSE]();
	        },

	        refresh: function() {
	            this.listView.refresh();
	        },

	        _listBound: function() {
	            var that = this;
	            var data = that.dataSource.flatView();
	            var skip = that.listView.skip();

	            that._render(data);

	            that._renderFooter();
	            that._renderNoData();
	            that._toggleNoData(!data.length);

	            that._resizePopup();

	            if (that._open) {
	                that._open = false;
	                that.toggle(that._allowOpening());
	            }

	            that.popup.position();

	            if (that.options.highlightFirst && (skip === undefined || skip === 0)) {
	                that.listView.focusFirst();
	            }

	            if (that._touchScroller) {
	                that._touchScroller.reset();
	            }

	            that._hideBusy();
	            that._makeUnselectable();

	            that.trigger("dataBound");
	        },

	        _inputValue: function() {
	            var that = this;
	            var inputValue = that.input.val();

	            if (that.options.placeholder === inputValue) {
	                inputValue = "";
	            }
	            return inputValue;
	        },

	        value: function(value) {
	            var that = this;
	            var listView = that.listView;
	            var oldValue = listView.value().slice();
	            var maxSelectedItems = that.options.maxSelectedItems;
	            var clearFilters = listView.bound() && listView.isFiltered();

	            if (value === undefined) {
	                return oldValue;
	            }

	            that.requireValueMapper(that.options, value);

	            value = that._normalizeValues(value);

	            if (maxSelectedItems !== null && value.length > maxSelectedItems) {
	                value = value.slice(0, maxSelectedItems);
	            }

	            if (clearFilters) {
	                that._clearFilter();
	            }

	            listView.value(value);
	            that._old = listView.value(); //get a new array reference

	            if (!clearFilters) {
	                that._fetchData();
	            }
	        },

	        _preselect: function(data, value) {
	            var that = this;

	            if (!isArray(data) && !(data instanceof kendo.data.ObservableArray)) {
	                data = [data];
	            }

	            if ($.isPlainObject(data[0]) || data[0] instanceof kendo.data.ObservableObject || !that.options.dataValueField) {
	                that.dataSource.data(data);
	                that.value(value || that._initialValues);
	                that._retrieveData = true;
	            }
	        },

	        _setOption: function(value, selected) {
	            var option = this.element[0].children[this._optionsMap[value]];

	            if (option) {
	                option.selected = selected;
	            }
	        },

	        _fetchData: function() {
	            var that = this;
	            var hasItems = !!that.dataSource.view().length;
	            var isEmptyArray = that.listView.value().length === 0;

	            if (isEmptyArray || that._request) {
	                return;
	            }

	            if (that._retrieveData || (!that._fetch && !hasItems)) {
	                that._fetch = true;
	                that._retrieveData = false;
	                that.dataSource.read().done(function() {
	                    that._fetch = false;
	                });
	            }
	        },

	        _isBound: function() {
	            return this.listView.bound() && !this._retrieveData;
	        },

	        _dataSource: function() {
	            var that = this,
	                element = that.element,
	                options = that.options,
	                dataSource = options.dataSource || {};

	            dataSource = isArray(dataSource) ? {data: dataSource} : dataSource;

	            dataSource.select = element;
	            dataSource.fields = [{ field: options.dataTextField },
	                                 { field: options.dataValueField }];

	            if (that.dataSource && that._refreshHandler) {
	                that._unbindDataSource();
	            } else {
	                that._progressHandler = proxy(that._showBusy, that);
	                that._errorHandler = proxy(that._hideBusy, that);
	            }

	            that.dataSource = kendo.data.DataSource.create(dataSource)
	                                   .bind(PROGRESS, that._progressHandler)
	                                   .bind("error", that._errorHandler);
	        },

	        _reset: function() {
	            var that = this,
	                element = that.element,
	                formId = element.attr("form"),
	                form = formId ? $("#" + formId) : element.closest("form");

	            if (form[0]) {
	                that._resetHandler = function() {
	                    setTimeout(function() {
	                        that.value(that._initialValues);
	                        that._placeholder();
	                    });
	                };

	                that._form = form.on("reset", that._resetHandler);
	            }
	        },

	        _initValue: function() {
	            var value = this.options.value || this.element.val();

	            this._old = this._initialValues = this._normalizeValues(value);
	        },

	        _normalizeValues: function(value) {
	            var that = this;

	            if (value === null) {
	                value = [];
	            } else if (value && $.isPlainObject(value)) {
	                value = [that._value(value)];
	            } else if (value && $.isPlainObject(value[0])) {
	                value = $.map(value, function(dataItem) { return that._value(dataItem); });
	            } else if (!isArray(value) && !(value instanceof ObservableArray)) {
	                value = [value];
	            } else if (isArray(value)) {
	                value = value.slice();
	            }

	            return value;
	        },

	        _change: function() {
	            var that = this,
	                value = that.value();

	            if (!compare(value, that._old)) {
	                that._old = value.slice();

	                that.trigger(CHANGE);

	                // trigger the DOM change event so any subscriber gets notified
	                that.element.trigger(CHANGE);
	            }
	            that._toggleCloseVisibility();
	        },

	        _click: function(e) {
	            var that = this;
	            var item = e.item;

	            e.preventDefault();

	            that._select(item).done(function() {
	                that._change();
	                that._close();
	            });
	        },

	        _keydown: function(e) {
	            var that = this;
	            var key = e.keyCode;
	            var tag = that._currentTag;
	            var listView = that.listView;
	            var current = listView.focus();
	            var hasValue = that.input.val();
	            var isRtl = kendo.support.isRtl(that.wrapper);
	            var visible = that.popup.visible();

	            if (key === keys.DOWN) {
	                e.preventDefault();

	                if (!visible) {
	                    that.open();

	                    if (!current) {
	                        listView.focusFirst();
	                    }
	                    return;
	                }

	                if (current) {
	                    listView.focusNext();
	                    if (!listView.focus()) {
	                        listView.focusLast();
	                    }
	                } else {
	                    listView.focusFirst();
	                }
	            } else if (key === keys.UP) {
	                if (visible) {
	                    if (current) {
	                        listView.focusPrev();
	                    }

	                    if (!listView.focus()) {
	                        that.close();
	                    }
	                }
	                e.preventDefault();
	            } else if ((key === keys.LEFT && !isRtl) || (key === keys.RIGHT && isRtl)) {
	                if (!hasValue) {
	                    tag = tag ? tag.prev() : $(that.tagList[0].lastChild);
	                    if (tag[0]) {
	                        that.currentTag(tag);
	                    }
	                }
	            } else if ((key === keys.RIGHT && !isRtl) || (key === keys.LEFT && isRtl)) {
	                if (!hasValue && tag) {
	                    tag = tag.next();
	                    that.currentTag(tag[0] ? tag : null);
	                }
	            } else if (key === keys.ENTER && visible) {
	                that._select(current).done(function() {
	                    that._change();
	                    that._close();
	                });
	                e.preventDefault();
	            } else if (key === keys.ESC) {
	                if (visible) {
	                    e.preventDefault();
	                } else {
	                    that.currentTag(null);
	                }

	                that.close();
	            } else if (key === keys.HOME) {
	                if (visible) {
	                    listView.focusFirst();
	                } else if (!hasValue) {
	                    tag = that.tagList[0].firstChild;

	                    if (tag) {
	                        that.currentTag($(tag));
	                    }
	                }
	            } else if (key === keys.END) {
	                if (visible) {
	                    listView.focusLast();
	                } else if (!hasValue) {
	                    tag = that.tagList[0].lastChild;

	                    if (tag) {
	                        that.currentTag($(tag));
	                    }
	                }
	            } else if ((key === keys.DELETE || key === keys.BACKSPACE) && !hasValue) {
	                if (that.options.tagMode === "single") {
	                    listView.value([]);
	                    that._change();
	                    that._close();
	                    return;
	                }

	                if (key === keys.BACKSPACE && !tag) {
	                    tag = $(that.tagList[0].lastChild);
	                }

	                if (tag && tag[0]) {
	                    that._removeTag(tag);
	                }
	            } else if (that.popup.visible() && (key === keys.PAGEDOWN || key === keys.PAGEUP)) {
	                e.preventDefault();

	                var direction = key === keys.PAGEDOWN ? 1 : -1;
	                listView.scrollWith(direction * listView.screenHeight());
	            } else {
	                clearTimeout(that._typingTimeout);
	                setTimeout(function() { that._scale(); });
	                that._search();
	            }
	        },

	        _hideBusy: function () {
	            var that = this;
	            clearTimeout(that._busy);
	            that.input.attr("aria-busy", false);
	            that._loading.addClass(HIDDENCLASS);
	            that._request = false;
	            that._busy = null;
	            that._showClear();
	        },

	        _showBusyHandler: function() {
	            this.input.attr("aria-busy", true);
	            this._loading.removeClass(HIDDENCLASS);
	            this._hideClear();
	        },

	        _showBusy: function () {
	            var that = this;

	            that._request = true;

	            if (that._busy) {
	                return;
	            }

	            that._busy = setTimeout(proxy(that._showBusyHandler, that), 100);
	        },

	        _placeholder: function(show, skipCaret) {
	            var that = this;
	            var input = that.input;
	            var active = activeElement();
	            var placeholder = that.options.placeholder;
	            var inputValue = input.val();
	            var isActive = input[0] === active;
	            var caretPos = inputValue.length;

	            if (!isActive || that.options.autoClose || inputValue === placeholder) {
	                caretPos = 0;
	                inputValue = "";
	            }

	            if (show === undefined) {
	                show = false;
	                if (input[0] !== active) {
	                    show = !that.listView.selectedDataItems()[0];
	                }
	            }

	            that._prev = inputValue;
	            input.toggleClass("k-readonly", show).val(show ? placeholder : inputValue);

	            if (isActive && !skipCaret) {
	                kendo.caret(input[0], caretPos, caretPos);
	            }

	            that._scale();
	        },

	        _scale: function() {
	            var that = this,
	                wrapper = that.wrapper,
	                wrapperWidth = wrapper.width(),
	                span = that._span.text(that.input.val()),
	                textWidth;

	            if (!wrapper.is(":visible")) {
	                span.appendTo(document.documentElement);
	                wrapperWidth = textWidth = span.width() + 25;
	                span.appendTo(wrapper);
	            } else {
	                textWidth = span.width() + 25;
	            }

	            that.input.width(textWidth > wrapperWidth ? wrapperWidth : textWidth);
	        },

	        _option: function(dataValue, dataText, selected) {
	            var option = "<option";

	            if (dataValue !== undefined) {
	                dataValue += "";

	                if (dataValue.indexOf('"') !== -1) {
	                    dataValue = dataValue.replace(quotRegExp, "&quot;");
	                }

	                option += ' value="' + dataValue + '"';
	            }

	            if (selected) {
	                option += ' selected';
	            }

	            option += ">";

	            if (dataText !== undefined) {
	                option += kendo.htmlEncode(dataText);
	            }

	            return option += "</option>";
	        },

	        _render: function(data) {
	            var selectedItems = this.listView.selectedDataItems();
	            var values = this.listView.value();
	            var length = data.length;
	            var selectedIndex;
	            var options = "";
	            var dataItem;
	            var value;
	            var idx;

	            if (values.length !== selectedItems.length) {
	                selectedItems = this._buildSelectedItems(values);
	            }

	            var custom = {};
	            var optionsMap = {};

	            for (idx = 0; idx < length; idx++) {
	                dataItem = data[idx];
	                value = this._value(dataItem);

	                selectedIndex = this._selectedItemIndex(value, selectedItems);
	                if (selectedIndex !== -1) {
	                    selectedItems.splice(selectedIndex, 1);
	                }

	                optionsMap[value] = idx;
	                options += this._option(value, this._text(dataItem), selectedIndex !== -1);
	            }

	            if (selectedItems.length) {
	                for (idx = 0; idx < selectedItems.length; idx++) {
	                    dataItem = selectedItems[idx];

	                    value = this._value(dataItem);
	                    custom[value] = length;
	                    optionsMap[value] = length;

	                    length += 1;
	                    options += this._option(value, this._text(dataItem), true);
	                }
	            }

	            this._customOptions = custom;
	            this._optionsMap = optionsMap;

	            this.element.html(options);
	        },

	        _buildSelectedItems: function(values) {
	            var valueField = this.options.dataValueField;
	            var textField = this.options.dataTextField;
	            var result = [];
	            var item;

	            for (var idx = 0; idx < values.length; idx++) {
	                item = {};
	                item[valueField] = values[idx];
	                item[textField] = values[idx];

	                result.push(item);
	            }

	            return result;
	        },

	        _selectedItemIndex: function(value, selectedItems) {
	            var valueGetter = this._value;
	            var idx = 0;

	            for (; idx < selectedItems.length; idx++) {
	                if (value === valueGetter(selectedItems[idx])) {
	                    return idx;
	                }
	            }

	            return -1;
	        },

	        _search: function() {
	            var that = this;

	            that._typingTimeout = setTimeout(function() {
	                var value = that._inputValue();
	                if (that._prev !== value) {
	                    that._prev = value;
	                    that.search(value);
	                    that._toggleCloseVisibility();
	                }
	            }, that.options.delay);
	        },

	        _toggleCloseVisibility: function() {
	            if (this.value().length || (this.input.val() && this.input.val() !== this.options.placeholder)) {
	                this._showClear();
	            } else {
	                this._hideClear();
	            }
	        },

	        _allowOpening: function() {
	            return this._allowSelection() && List.fn._allowOpening.call(this);
	        },

	        _allowSelection: function() {
	            var max = this.options.maxSelectedItems;
	            return max === null || max > this.listView.value().length;
	        },

	        _angularTagItems: function(cmd) {
	            var that = this;

	            that.angular(cmd, function() {
	                return {
	                    elements: that.tagList[0].children,
	                    data: $.map(that.dataItems(), function(dataItem) {
	                        return { dataItem: dataItem };
	                    })
	                };
	            });
	        },

	        _selectValue: function(added, removed) {
	            var that = this;
	            var values = that.value();
	            var total = that.dataSource.total();
	            var tagList = that.tagList;
	            var getter = that._value;
	            var removedItem;
	            var addedItem;
	            var idx;

	            that._angularTagItems("cleanup");

	            if (that.options.tagMode === "multiple") {
	                for (idx = removed.length - 1; idx > -1; idx--) {
	                    removedItem = removed[idx];

	                    tagList[0].removeChild(tagList[0].children[removedItem.position]);

	                    that._setOption(getter(removedItem.dataItem), false);
	                }

	                for (idx = 0; idx < added.length; idx++) {
	                    addedItem = added[idx];

	                    tagList.append(that.tagTemplate(addedItem.dataItem));

	                    that._setOption(getter(addedItem.dataItem), true);
	                }
	            } else {
	                if (!that._maxTotal || that._maxTotal < total) {
	                    that._maxTotal = total;
	                }

	                tagList.html("");

	                if (values.length) {
	                    tagList.append(that.tagTemplate({
	                        values: values,
	                        dataItems: that.dataItems(),
	                        maxTotal: that._maxTotal,
	                        currentTotal: total
	                    }));
	                }

	                for (idx = removed.length - 1; idx > -1; idx--) {
	                    that._setOption(getter(removed[idx].dataItem), false);
	                }

	                for (idx = 0; idx < added.length; idx++) {
	                    that._setOption(getter(added[idx].dataItem), true);
	                }
	            }

	            that._angularTagItems("compile");
	            that._placeholder();
	        },

	        _select: function(candidate) {
	            var resolved = $.Deferred().resolve();

	            if (!candidate) {
	                return resolved;
	            }

	            var that = this;
	            var listView = that.listView;
	            var dataItem = listView.dataItemByIndex(listView.getElementIndex(candidate));
	            var isSelected = candidate.hasClass("k-state-selected");

	            if (that._state === REBIND) {
	                that._state = "";
	            }

	            if (!that._allowSelection()) {
	                return resolved;
	            }

	            if (that.trigger(isSelected ? DESELECT : SELECT, { dataItem: dataItem, item: candidate })) {
	                that._close();
	                return resolved;
	            }

	            return listView.select(candidate).done(function() {
	                that._placeholder();

	                if (that._state === FILTER) {
	                    that._state = ACCEPT;
	                    listView.skipUpdate(true);
	                }
	            });
	        },

	        _input: function() {
	            var that = this;
	            var element = that.element;
	            var accessKey = element[0].accessKey;
	            var input = that._innerWrapper.children("input.k-input");

	            if (!input[0]) {
	                input = $('<input class="k-input" style="width: 25px" />').appendTo(that._innerWrapper);
	            }

	            element.removeAttr("accesskey");

	            that._focused = that.input = input.attr({
	                "accesskey": accessKey,
	                "autocomplete": "off",
	                "role": "listbox",
	                "title": element[0].title,
	                "aria-expanded": false
	            });
	        },

	        _tagList: function() {
	            var that = this,
	                tagList = that._innerWrapper.children("ul");

	            if (!tagList[0]) {
	                tagList = $('<ul role="listbox" deselectable="on" class="k-reset"/>').appendTo(that._innerWrapper);
	            }

	            that.tagList = tagList;
	        },

	        _tagTemplate: function() {
	            var that = this;
	            var options = that.options;
	            var tagTemplate = options.tagTemplate;
	            var hasDataSource = options.dataSource;
	            var isMultiple = options.tagMode === "multiple";
	            var defaultTemplate;

	            if (that.element[0].length && !hasDataSource) {
	                options.dataTextField = options.dataTextField || "text";
	                options.dataValueField = options.dataValueField || "value";
	            }

	            defaultTemplate = isMultiple ? kendo.template("#:" + kendo.expr(options.dataTextField, "data") + "#", { useWithBlock: false }) : kendo.template("#:values.length# item(s) selected");

	            that.tagTextTemplate = tagTemplate = tagTemplate ? kendo.template(tagTemplate) : defaultTemplate;

	            that.tagTemplate = function(data) {
	                return '<li class="k-button" deselectable="on"><span deselectable="on">' +
	                        tagTemplate(data) +
	                        '</span><span unselectable="on" aria-label="' +
	                        (isMultiple ? "delete" : "open") +
	                        '" class="k-select"><span class="k-icon ' +
	                        (isMultiple ? "k-i-close" : "k-i-arrow-60-down") + '">' +
	                        '</span></span></li>';
	            };
	        },

	        _loader: function() {
	            this._loading = $('<span class="k-icon k-i-loading ' + HIDDENCLASS + '"></span>').insertAfter(this.input);
	        },

	        _clearButton: function() {
	            this._clear = $('<span deselectable="on" class="k-icon k-clear-value k-i-close" title="clear"></span>').attr({
	                "role": "button",
	                "tabIndex": -1
	            });
	            if (this.options.clearButton) {
	                this._clear.insertAfter(this.input);
	            }
	        },

	        _textContainer: function() {
	            var computedStyles = kendo.getComputedStyles(this.input[0], styles);

	            computedStyles.position = "absolute";
	            computedStyles.visibility = "hidden";
	            computedStyles.top = -3333;
	            computedStyles.left = -3333;

	            this._span = $("<span/>").css(computedStyles).appendTo(this.wrapper);
	        },

	        _wrapper: function() {
	            var that = this,
	                element = that.element,
	                wrapper = element.parent("span.k-multiselect");

	            if (!wrapper[0]) {
	                wrapper = element.wrap('<div class="k-widget k-multiselect k-header" deselectable="on" />').parent();
	                wrapper[0].style.cssText = element[0].style.cssText;
	                wrapper[0].title = element[0].title;

	                $('<div class="k-multiselect-wrap k-floatwrap" deselectable="on" />').insertBefore(element);
	            }

	            that.wrapper = wrapper.addClass(element[0].className).css("display", "");
	            that._innerWrapper = $(wrapper[0].firstChild);
	        }
	    });

	    function compare(a, b) {
	        var length;

	        if ((a === null && b !== null) || (a !== null && b === null)) {
	            return false;
	        }

	        length = a.length;
	        if (length !== b.length) {
	            return false;
	        }

	        while (length--) {
	            if (a[length] !== b[length]) {
	                return false;
	            }
	        }

	        return true;
	    }

	    ui.plugin(MultiSelect);

	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(422));


/***/ })

/******/ });

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(496);


/***/ }),

/***/ 421:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(0);

/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 433:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(1);

/***/ }),

/***/ 496:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(421), __webpack_require__(433) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "notification",
	    name: "Notification",
	    category: "web",
	    description: "The Notification widget displays user alerts.",
	    depends: [ "core", "popup" ],
	    features: [ {
	        id: "notification-fx",
	        name: "Animation",
	        description: "Support for animation",
	        depends: [ "fx" ]
	    } ]
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        Widget = kendo.ui.Widget,
	        proxy = $.proxy,
	        extend = $.extend,
	        setTimeout = window.setTimeout,
	        CLICK = "click",
	        SHOW = "show",
	        HIDE = "hide",
	        KNOTIFICATION = "k-notification",
	        KICLOSE = ".k-notification-wrap .k-i-close",
	        KHIDING = "k-hiding",
	        INFO = "info",
	        SUCCESS = "success",
	        WARNING = "warning",
	        ERROR = "error",
	        TOP = "top",
	        LEFT = "left",
	        BOTTOM = "bottom",
	        RIGHT = "right",
	        UP = "up",
	        NS = ".kendoNotification",
	        WRAPPER = '<div class="k-widget k-notification"></div>',
	        TEMPLATE = '<div class="k-notification-wrap">' +
	                '<span class="k-icon k-i-#=typeIcon#" title="#=typeIcon#"></span>' +
	                '#=content#' +
	                '<span class="k-icon k-i-close" title="Hide"></span>' +
	            '</div>',
	        SAFE_TEMPLATE = TEMPLATE.replace("#=content#", "#:content#");

	    var Notification = Widget.extend({
	        init: function(element, options) {
	            var that = this;

	            Widget.fn.init.call(that, element, options);

	            options = that.options;

	            if (!options.appendTo || !$(options.appendTo).is(element)) {
	                that.element.hide();
	            }

	            that._compileTemplates(options.templates);
	            that._guid = "_" + kendo.guid();
	            that._isRtl = kendo.support.isRtl(element);
	            that._compileStacking(options.stacking, options.position.top, options.position.left);

	            kendo.notify(that);
	        },

	        events: [
	            SHOW,
	            HIDE
	        ],

	        options: {
	            name: "Notification",
	            position: {
	                pinned: true,
	                top: null,
	                left: null,
	                bottom: 20,
	                right: 20
	            },
	            stacking: "default",
	            hideOnClick: true,
	            button: false,
	            allowHideAfter: 0,
	            autoHideAfter: 5000,
	            appendTo: null,
	            width: null,
	            height: null,
	            templates: [],
	            animation: {
	                open: {
	                    effects: "fade:in",
	                    duration: 300
	                },
	                close: {
	                    effects: "fade:out",
	                    duration: 600,
	                    hide: true
	                }
	            }
	        },

	        _compileTemplates: function(templates) {
	            var that = this;
	            var kendoTemplate = kendo.template;

	            that._compiled = {};

	            $.each(templates, function(key, value) {
	                that._compiled[value.type] = kendoTemplate(value.template || $("#" + value.templateId).html());
	            });

	            that._defaultCompiled = kendoTemplate(TEMPLATE);
	            that._safeCompiled = kendoTemplate(SAFE_TEMPLATE);
	        },

	        _getCompiled: function(type, safe) {
	            var defaultCompiled = safe ? this._safeCompiled : this._defaultCompiled;

	            return type ? this._compiled[type] || defaultCompiled : defaultCompiled;
	        },

	        _compileStacking: function(stacking, top, left) {
	            var that = this,
	                paddings = { paddingTop: 0, paddingRight: 0, paddingBottom: 0, paddingLeft: 0 },
	                horizontalAlignment = left !== null ? LEFT : RIGHT,
	                origin, position;

	            switch (stacking) {
	                case "down":
	                    origin = BOTTOM + " " + horizontalAlignment;
	                    position = TOP + " " + horizontalAlignment;
	                    delete paddings.paddingBottom;
	                break;
	                case RIGHT:
	                    origin = TOP + " " + RIGHT;
	                    position = TOP + " " + LEFT;
	                    delete paddings.paddingRight;
	                break;
	                case LEFT:
	                    origin = TOP + " " + LEFT;
	                    position = TOP + " " + RIGHT;
	                    delete paddings.paddingLeft;
	                break;
	                case UP:
	                    origin = TOP + " " + horizontalAlignment;
	                    position = BOTTOM + " " + horizontalAlignment;
	                    delete paddings.paddingTop;
	                break;
	                default:
	                    if (top !== null) {
	                        origin = BOTTOM + " " + horizontalAlignment;
	                        position = TOP + " " + horizontalAlignment;
	                        delete paddings.paddingBottom;
	                    } else {
	                        origin = TOP + " " + horizontalAlignment;
	                        position = BOTTOM + " " + horizontalAlignment;
	                        delete paddings.paddingTop;
	                    }
	                break;
	            }

	            that._popupOrigin = origin;
	            that._popupPosition = position;
	            that._popupPaddings = paddings;
	        },

	        _attachPopupEvents: function(options, popup) {
	            var that = this,
	                allowHideAfter = options.allowHideAfter,
	                attachDelay = !isNaN(allowHideAfter) && allowHideAfter > 0,
	                closeIcon;

	            function attachClick(target) {
	                target.on(CLICK + NS, function () {
	                    that._hidePopup(popup);
	                });
	            }

	            if (options.hideOnClick) {
	                popup.bind("activate", function() {
	                    if (attachDelay) {
	                        setTimeout(function(){
	                            attachClick(popup.element);
	                        }, allowHideAfter);
	                    } else {
	                        attachClick(popup.element);
	                    }
	                });
	            } else if (options.button) {
	                closeIcon = popup.element.find(KICLOSE);
	                if (attachDelay) {
	                    setTimeout(function(){
	                        attachClick(closeIcon);
	                    }, allowHideAfter);
	                } else {
	                    attachClick(closeIcon);
	                }
	            }
	        },

	        _showPopup: function(wrapper, options) {
	            var that = this,
	                autoHideAfter = options.autoHideAfter,
	                x = options.position.left,
	                y = options.position.top,
	                popup, openPopup;

	            openPopup = $("." + that._guid + ":not(." + KHIDING + ")").last();

	            popup = new kendo.ui.Popup(wrapper, {
	                anchor: openPopup[0] ? openPopup : document.body,
	                origin: that._popupOrigin,
	                position: that._popupPosition,
	                animation: options.animation,
	                modal: true,
	                collision: "",
	                isRtl: that._isRtl,
	                close: function() {
	                    that._triggerHide(this.element);
	                },
	                deactivate: function(e) {
	                    e.sender.element.off(NS);
	                    e.sender.element.find(KICLOSE).off(NS);
	                    e.sender.destroy();
	                }
	            });

	            that._attachPopupEvents(options, popup);

	            if (openPopup[0]) {
	                popup.open();
	            } else {
	                if (x === null) {
	                    x = $(window).width() - wrapper.width() - options.position.right;
	                }

	                if (y === null) {
	                    y = $(window).height() - wrapper.height() - options.position.bottom;
	                }

	                popup.open(x, y);
	            }

	            popup.wrapper.addClass(that._guid).css(extend({margin:0,zIndex:10050}, that._popupPaddings));

	            if (options.position.pinned) {
	                popup.wrapper.css("position", "fixed");
	                if (openPopup[0]) {
	                    that._togglePin(popup.wrapper, true);
	                }
	            } else if (!openPopup[0]) {
	                that._togglePin(popup.wrapper, false);
	            }

	            if (autoHideAfter > 0) {
	                setTimeout(function () {
	                    that._hidePopup(popup);
	                }, autoHideAfter);
	            }
	        },

	        _hidePopup: function (popup) {
	            popup.wrapper.addClass(KHIDING);
	            popup.close();
	        },

	        _togglePin: function(wrapper, pin) {
	            var win = $(window),
	                sign = pin ? -1 : 1;

	            wrapper.css({
	                top: parseInt(wrapper.css(TOP), 10) + sign * win.scrollTop(),
	                left: parseInt(wrapper.css(LEFT), 10) + sign * win.scrollLeft()
	            });
	        },

	        _attachStaticEvents: function(options, wrapper) {
	            var that = this,
	                allowHideAfter = options.allowHideAfter,
	                attachDelay = !isNaN(allowHideAfter) && allowHideAfter > 0;

	            function attachClick(target) {
	                target.on(CLICK + NS, proxy(that._hideStatic, that, wrapper));
	            }

	            if (options.hideOnClick) {
	                if (attachDelay) {
	                    setTimeout(function(){
	                        attachClick(wrapper);
	                    }, allowHideAfter);
	                } else {
	                    attachClick(wrapper);
	                }
	            } else if (options.button) {
	                if (attachDelay) {
	                    setTimeout(function(){
	                        attachClick(wrapper.find(KICLOSE));
	                    }, allowHideAfter);
	                } else {
	                    attachClick(wrapper.find(KICLOSE));
	                }
	            }
	        },

	        _showStatic: function(wrapper, options) {
	            var that = this,
	                autoHideAfter = options.autoHideAfter,
	                animation = options.animation,
	                insertionMethod = options.stacking == UP || options.stacking == LEFT ? "prependTo" : "appendTo";

	            wrapper
	                .addClass(that._guid)
	                [insertionMethod](options.appendTo)
	                .hide()
	                .kendoAnimate(animation.open || false);

	            that._attachStaticEvents(options, wrapper);

	            if (autoHideAfter > 0) {
	                setTimeout(function(){
	                    that._hideStatic(wrapper);
	                }, autoHideAfter);
	            }
	        },

	        _hideStatic: function(wrapper) {
	            wrapper.kendoAnimate(extend(this.options.animation.close || false, { complete: function() {
	                wrapper.off(NS).find(KICLOSE).off(NS);
	                wrapper.remove();
	            }}));
	            this._triggerHide(wrapper);
	        },

	        _triggerHide: function(element) {
	            this.trigger(HIDE, { element: element });
	            this.angular("cleanup", function(){
	                return { elements: element };
	            });
	        },

	        show: function(content, type, safe) {
	            var that = this,
	                options = that.options,
	                wrapper = $(WRAPPER),
	                args, defaultArgs;

	            if (!type) {
	                type = INFO;
	            }

	            if (content !== null && content !== undefined && content !== "") {

	                if (kendo.isFunction(content)) {
	                    content = content();
	                }

	                defaultArgs = {typeIcon: type, content: ""};

	                if ($.isPlainObject(content)) {
	                    args = extend(defaultArgs, content);
	                } else {
	                    args = extend(defaultArgs, {content: content});
	                }

	                wrapper
	                    .addClass(KNOTIFICATION + "-" + type)
	                    .toggleClass(KNOTIFICATION + "-button", options.button)
	                    .attr("data-role", "alert")
	                    .css({width: options.width, height: options.height})
	                    .append(that._getCompiled(type, safe)(args));

	                that.angular("compile", function(){
	                    return {
	                        elements: wrapper,
	                        data: [{ dataItem: args }]
	                    };
	                });

	                if ($(options.appendTo)[0]) {
	                    that._showStatic(wrapper, options);
	                } else {
	                    that._showPopup(wrapper, options);
	                }

	                that.trigger(SHOW, {element: wrapper});
	            }

	            return that;
	        },

	        showText: function(content, type) {
	            this.show(content, type, true);
	        },

	        info: function(content) {
	            return this.show(content, INFO);
	        },

	        success: function(content) {
	            return this.show(content, SUCCESS);
	        },

	        warning: function(content) {
	            return this.show(content, WARNING);
	        },

	        error: function(content) {
	            return this.show(content, ERROR);
	        },

	        hide: function() {
	            var that = this,
	                openedNotifications = that.getNotifications();

	            if (that.options.appendTo) {
	                openedNotifications.each(function(idx, element){
	                    that._hideStatic($(element));
	                });
	            } else {
	                openedNotifications.each(function(idx, element){
	                    var popup = $(element).data("kendoPopup");
	                    if (popup) {
	                        that._hidePopup(popup);
	                    }
	                });
	            }

	            return that;
	        },

	        getNotifications: function() {
	            var that = this,
	                guidElements = $("." + that._guid + ":not(." + KHIDING + ")");

	            if (that.options.appendTo) {
	                return guidElements;
	            } else {
	                return guidElements.children("." + KNOTIFICATION);
	            }
	        },

	        setOptions: function(newOptions) {
	            var that = this,
	                options;

	            Widget.fn.setOptions.call(that, newOptions);

	            options = that.options;

	            if (newOptions.templates !== undefined) {
	                that._compileTemplates(options.templates);
	            }

	            if (newOptions.stacking !== undefined || newOptions.position !== undefined) {
	                that._compileStacking(options.stacking, options.position.top, options.position.left);
	            }
	        },

	        destroy: function() {
	            Widget.fn.destroy.call(this);
	            this.getNotifications().off(NS).find(KICLOSE).off(NS);
	        }
	    });

	    kendo.ui.plugin(Notification);

	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(422));


/***/ })

/******/ });

/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(498);


/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 427:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(4);

/***/ }),

/***/ 498:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(427) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "pager",
	    name: "Pager",
	    category: "framework",
	    depends: [ "data" ],
	    advanced: true
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        ui = kendo.ui,
	        Widget = ui.Widget,
	        proxy = $.proxy,
	        FIRST = ".k-i-seek-w",
	        LAST = ".k-i-seek-e",
	        PREV = ".k-i-arrow-w",
	        NEXT = ".k-i-arrow-e",
	        CHANGE = "change",
	        NS = ".kendoPager",
	        CLICK = "click",
	        KEYDOWN = "keydown",
	        DISABLED = "disabled",
	        MOUSEDOWN = "down",
	        DOCUMENT_ELEMENT = $(document.documentElement),
	        iconTemplate = kendo.template('<a href="\\#" aria-label="#=text#" title="#=text#" class="k-link k-pager-nav #= wrapClassName #"><span class="k-icon #= className #"></span></a>');

	    function button(template, idx, text, numeric, title) {
	        return template( {
	            idx: idx,
	            text: text,
	            ns: kendo.ns,
	            numeric: numeric,
	            title: title || ""
	        });
	    }

	    function icon(className, text, wrapClassName) {
	        return iconTemplate({
	            className: className.substring(1),
	            text: text,
	            wrapClassName: wrapClassName || ""
	        });
	    }

	    function update(element, selector, page, disabled) {
	       element.find(selector)
	              .parent()
	              .attr(kendo.attr("page"), page)
	              .attr("tabindex", -1)
	              .toggleClass("k-state-disabled", disabled);
	    }

	    function first(element, page) {
	        update(element, FIRST, 1, page <= 1);
	    }

	    function prev(element, page) {
	        update(element, PREV, Math.max(1, page - 1), page <= 1);
	    }

	    function next(element, page, totalPages) {
	        update(element, NEXT, Math.min(totalPages, page + 1), page >= totalPages);
	    }

	    function last(element, page, totalPages) {
	        update(element, LAST, totalPages, page >= totalPages);
	    }

	    var Pager = Widget.extend( {
	        init: function(element, options) {
	            var that = this, page, totalPages;

	            Widget.fn.init.call(that, element, options);

	            options = that.options;
	            that.dataSource = kendo.data.DataSource.create(options.dataSource);
	            that.linkTemplate = kendo.template(that.options.linkTemplate);
	            that.selectTemplate = kendo.template(that.options.selectTemplate);
	            that.currentPageTemplate = kendo.template(that.options.currentPageTemplate);

	            page = that.page();
	            totalPages = that.totalPages();

	            that._refreshHandler = proxy(that.refresh, that);

	            that.dataSource.bind(CHANGE, that._refreshHandler);
	            that.downEvent = kendo.applyEventMap(MOUSEDOWN, kendo.guid());
	            if (options.previousNext) {
	                if (!that.element.find(FIRST).length) {
	                    that.element.append(icon(FIRST, options.messages.first, "k-pager-first"));

	                    first(that.element, page, totalPages);
	                }

	                if (!that.element.find(PREV).length) {
	                    that.element.append(icon(PREV, options.messages.previous));

	                    prev(that.element, page, totalPages);
	                }
	            }

	            if (options.numeric) {
	                that.list = that.element.find(".k-pager-numbers");

	                if (!that.list.length) {
	                   that.list = $('<ul class="k-pager-numbers k-reset" />').appendTo(that.element);
	                }
	            }

	            if (options.input) {
	                if (!that.element.find(".k-pager-input").length) {
	                   that.element.append('<span class="k-pager-input k-label">'+
	                       options.messages.page +
	                       '<input class="k-textbox">' +
	                       kendo.format(options.messages.of, totalPages) +
	                       '</span>');
	                }

	                that.element.on(KEYDOWN + NS, ".k-pager-input input", proxy(that._keydown, that));
	            }

	            if (options.previousNext) {
	                if (!that.element.find(NEXT).length) {
	                    that.element.append(icon(NEXT, options.messages.next));

	                    next(that.element, page, totalPages);
	                }

	                if (!that.element.find(LAST).length) {
	                    that.element.append(icon(LAST, options.messages.last, "k-pager-last"));

	                    last(that.element, page, totalPages);
	                }
	            }

	            if (options.pageSizes){
	                if (!that.element.find(".k-pager-sizes").length){
	                    var pageSizes = options.pageSizes.length ? options.pageSizes : ["all", 5, 10, 20];
	                    var pageItems = $.map(pageSizes, function(size) {
	                        if (size.toLowerCase && size.toLowerCase() === "all") {
	                            return "<option value='all'>" + options.messages.allPages + "</option>";
	                        }

	                        return "<option>" + size + "</option>";
	                    });

	                    $('<span class="k-pager-sizes k-label"><select/>' + options.messages.itemsPerPage + "</span>")
	                        .appendTo(that.element)
	                        .find("select").html(pageItems.join("")).end()
	                        .appendTo(that.element);
	                }

	                that.element.find(".k-pager-sizes select").val(that.pageSize());

	                if (kendo.ui.DropDownList) {
	                   that.element.find(".k-pager-sizes select").show().kendoDropDownList();
	                }

	                that.element.on(CHANGE + NS, ".k-pager-sizes select", proxy(that._change, that));
	            }

	            if (options.refresh) {
	                if (!that.element.find(".k-pager-refresh").length) {
	                    that.element.append('<a href="#" class="k-pager-refresh k-link" title="' + options.messages.refresh +
	                        '" aria-label="' + options.messages.refresh + '"><span class="k-icon k-i-reload"></span></a>');
	                }

	                that.element.on(CLICK + NS, ".k-pager-refresh", proxy(that._refreshClick, that));
	            }

	            if (options.info) {
	                if (!that.element.find(".k-pager-info").length) {
	                    that.element.append('<span class="k-pager-info k-label" />');
	                }
	            }

	            that.element
	                .on(CLICK + NS , "a", proxy(that._click, that))
	                .addClass("k-pager-wrap k-widget k-floatwrap");

	            that.element.on(CLICK + NS , ".k-current-page", proxy(that._toggleActive, that));

	            if (options.autoBind) {
	                that.refresh();
	            }

	            kendo.notify(that);
	        },

	        destroy: function() {
	            var that = this;

	            Widget.fn.destroy.call(that);

	            that.element.off(NS);
	            that.dataSource.unbind(CHANGE, that._refreshHandler);
	            that._refreshHandler = null;

	            kendo.destroy(that.element);
	            that.element = that.list = null;
	        },

	        events: [
	            CHANGE
	        ],

	        options: {
	            name: "Pager",
	            selectTemplate: '<li><span class="k-state-selected">#=text#</span></li>',
	            currentPageTemplate: '<li class="k-current-page"><span class="k-link k-pager-nav">#=text#</span></li>',
	            linkTemplate: '<li><a tabindex="-1" href="\\#" class="k-link" data-#=ns#page="#=idx#" #if (title !== "") {# title="#=title#" #}#>#=text#</a></li>',
	            buttonCount: 10,
	            autoBind: true,
	            numeric: true,
	            info: true,
	            input: false,
	            previousNext: true,
	            pageSizes: false,
	            refresh: false,
	            messages: {
	                allPages: "All",
	                display: "{0} - {1} of {2} items",
	                empty: "No items to display",
	                page: "Page",
	                of: "of {0}",
	                itemsPerPage: "items per page",
	                first: "Go to the first page",
	                previous: "Go to the previous page",
	                next: "Go to the next page",
	                last: "Go to the last page",
	                refresh: "Refresh",
	                morePages: "More pages"
	            }
	        },

	        setDataSource: function(dataSource) {
	            var that = this;

	            that.dataSource.unbind(CHANGE, that._refreshHandler);
	            that.dataSource = that.options.dataSource = dataSource;
	            dataSource.bind(CHANGE, that._refreshHandler);

	            if (that.options.autoBind) {
	                dataSource.fetch();
	            }
	        },

	        refresh: function(e) {
	            var that = this,
	                idx,
	                end,
	                start = 1,
	                reminder,
	                page = that.page(),
	                html = "",
	                options = that.options,
	                pageSize = that.pageSize(),
	                total = that.dataSource.total(),
	                totalPages = that.totalPages(),
	                linkTemplate = that.linkTemplate,
	                buttonCount = options.buttonCount;

	            DOCUMENT_ELEMENT.unbind(that.downEvent, $.proxy(that._hideList, that));
	            if (e && e.action == "itemchange") {
	                return;
	            }

	            if (options.numeric) {

	                if (page > buttonCount) {
	                    reminder = (page % buttonCount);

	                    start = (reminder === 0) ? (page - buttonCount) + 1 : (page - reminder) + 1;
	                }

	                end = Math.min((start + buttonCount) - 1, totalPages);

	                if (start > 1) {
	                    html += button(linkTemplate, start - 1, "...", false, options.messages.morePages);
	                }

	                for (idx = start; idx <= end; idx++) {
	                    html += button(idx == page ? that.selectTemplate : linkTemplate, idx, idx, true);
	                }

	                if (end < totalPages) {
	                    html += button(linkTemplate, idx, "...", false, options.messages.morePages);
	                }

	                if (html === "") {
	                    html = that.selectTemplate({ text: 0 });
	                }

	                html = this.currentPageTemplate({ text: page }) + html;

	                that.list.removeClass("k-state-expanded").html(html);
	            }

	            if (options.info) {
	                if (total > 0) {
	                    html = kendo.format(options.messages.display,
	                        Math.min((page - 1) * pageSize + 1, total), // first item in the page
	                        Math.min(page * pageSize, total), // last item in the page
	                    total);
	                } else {
	                    html = options.messages.empty;
	                }

	                that.element.find(".k-pager-info").html(html);
	            }

	            if (options.input) {
	                that.element
	                    .find(".k-pager-input")
	                    .html(that.options.messages.page +
	                        '<input class="k-textbox" aria-label="' + page + '">' +
	                        kendo.format(options.messages.of, totalPages))
	                    .find("input")
	                    .val(page)
	                    .attr(DISABLED, total < 1)
	                    .toggleClass("k-state-disabled", total < 1);
	            }

	            if (options.previousNext) {
	                first(that.element, page, totalPages);

	                prev(that.element, page, totalPages);

	                next(that.element, page, totalPages);

	                last(that.element, page, totalPages);
	            }

	            if (options.pageSizes) {
	                var hasAll = that.element.find(".k-pager-sizes option[value='all']").length > 0;
	                var selectAll = hasAll && pageSize === this.dataSource.total();
	                var text = pageSize;
	                if (selectAll) {
	                    pageSize = "all";
	                    text = options.messages.allPages;
	                }

	                that.element
	                    .find(".k-pager-sizes select")
	                    .val(pageSize)
	                    .attr("aria-label", pageSize)
	                    .filter("[" + kendo.attr("role") + "=dropdownlist]")
	                    .kendoDropDownList("value", pageSize)
	                    .kendoDropDownList("text", text); // handles custom values
	            }
	        },

	        _keydown: function(e) {
	            if (e.keyCode === kendo.keys.ENTER) {
	                var input = this.element.find(".k-pager-input").find("input"),
	                    page = parseInt(input.val(), 10);

	                if (isNaN(page) || page < 1 || page > this.totalPages()) {
	                    page = this.page();
	                }

	                input.val(page);

	                this.page(page);
	            }
	        },

	        _refreshClick: function(e) {
	            e.preventDefault();

	            this.dataSource.read();
	        },

	        _change: function(e) {
	            var value = e.currentTarget.value;
	            var pageSize = parseInt(value, 10);
	            var dataSource = this.dataSource;

	            if (!isNaN(pageSize)){
	                dataSource.pageSize(pageSize);
	            } else if ((value + "").toLowerCase() == "all") {
	                dataSource.pageSize(dataSource.total());
	            }
	        },

	        _toggleActive: function() {
	            var that = this;

	            if (that.list.hasClass("k-state-expanded")) {
	                DOCUMENT_ELEMENT.unbind(that.downEvent, $.proxy(that._hideList, that));
	            } else {
	                DOCUMENT_ELEMENT.bind(that.downEvent, $.proxy(that._hideList, that));
	            }
	            that.list.toggleClass("k-state-expanded");
	        },

	        _hideList: function(e) {
	             var that = this,
	                target = kendo.eventTarget(e);

	            if (!$.contains(that.list[0], target)) {
	                DOCUMENT_ELEMENT.unbind(that.downEvent, $.proxy(that._hideList, that));
	                that.list.removeClass("k-state-expanded");
	            }
	        },

	        _click: function(e) {
	            var target = $(e.currentTarget);

	            e.preventDefault();

	            if (!target.is(".k-state-disabled")) {
	                this.page(target.attr(kendo.attr("page")));
	            }
	        },

	        totalPages: function() {
	            return Math.ceil((this.dataSource.total() || 0) / (this.pageSize() || 1));
	        },

	        pageSize: function() {
	            return this.dataSource.pageSize() || this.dataSource.total();
	        },

	        page: function(page) {
	            if (page !== undefined) {
	                if (this.trigger("pageChange", { index: page })) {
	                   return;
	                }

	                this.dataSource.page(page);

	                this.trigger(CHANGE, { index: page });
	            } else {
	                if (this.dataSource.total() > 0) {
	                    return this.dataSource.page();
	                } else {
	                    return 0;
	                }
	            }
	        }
	    });

	    ui.plugin(Pager);
	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(422));


/***/ })

/******/ });

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(499);


/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 427:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(4);

/***/ }),

/***/ 499:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(427) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "panelbar",
	    name: "PanelBar",
	    category: "web",
	    description: "The PanelBar widget displays hierarchical data as a multi-level expandable panel bar.",
	    depends: [ "core", "data", "data.odata" ]
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        ui = kendo.ui,
	        keys = kendo.keys,
	        extend = $.extend,
	        proxy = $.proxy,
	        each = $.each,
	        isArray = $.isArray,
	        template = kendo.template,
	        Widget = ui.Widget,
	        HierarchicalDataSource = kendo.data.HierarchicalDataSource,
	        excludedNodesRegExp = /^(ul|a|div)$/i,
	        NS = ".kendoPanelBar",
	        IMG = "img",
	        HREF = "href",
	        LAST = "k-last",
	        LINK = "k-link",
	        LINKSELECTOR = "." + LINK,
	        ERROR = "error",
	        ITEM = ".k-item",
	        GROUP = ".k-group",
	        VISIBLEGROUP = GROUP + ":visible",
	        IMAGE = "k-image",
	        FIRST = "k-first",
	        CHANGE = "change",
	        EXPAND = "expand",
	        SELECT = "select",
	        CONTENT = "k-content",
	        ACTIVATE = "activate",
	        COLLAPSE = "collapse",
	        DATABOUND = "dataBound",
	        MOUSEENTER = "mouseenter",
	        MOUSELEAVE = "mouseleave",
	        CONTENTLOAD = "contentLoad",
	        UNDEFINED = "undefined",
	        ACTIVECLASS = "k-state-active",
	        GROUPS = "> .k-panel",
	        CONTENTS = "> .k-content",
	        STRING = "string",
	        FOCUSEDCLASS = "k-state-focused",
	        DISABLEDCLASS = "k-state-disabled",
	        SELECTEDCLASS = "k-state-selected",
	        SELECTEDSELECTOR = "." + SELECTEDCLASS,
	        HIGHLIGHTCLASS = "k-state-highlight",
	        ACTIVEITEMSELECTOR = ITEM + ":not(.k-state-disabled)",
	        clickableItems = "> " + ACTIVEITEMSELECTOR + " > " + LINKSELECTOR + ", .k-panel > " + ACTIVEITEMSELECTOR + " > " + LINKSELECTOR,
	        disabledItems = ITEM + ".k-state-disabled > .k-link",
	        selectableItems = "> li > " + SELECTEDSELECTOR + ", .k-panel > li > " + SELECTEDSELECTOR,
	        defaultState = "k-state-default",
	        ARIA_DISABLED = "aria-disabled",
	        ARIA_EXPANDED = "aria-expanded",
	        ARIA_HIDDEN = "aria-hidden",
	        ARIA_SELECTED = "aria-selected",
	        VISIBLE = ":visible",
	        EMPTY = ":empty",
	        SINGLE = "single",
	        bindings = {
	            text: "dataTextField",
	            url: "dataUrlField",
	            spriteCssClass: "dataSpriteCssClassField",
	            imageUrl: "dataImageUrlField"
	        },
	        itemIcon,
	        rendering = {
	        aria: function(item) {
	            var attr = "";

	            if (item.items || item.content || item.contentUrl || item.expanded) {
	                attr += ARIA_EXPANDED + "='" + (item.expanded ? "true" : "false") + "' ";
	            }

	            if (item.enabled === false) {
	                attr += ARIA_DISABLED + "='true'";
	            }

	            return attr;
	        },

	    wrapperCssClass: function (group, item) {
	        var result = "k-item",
	            index = item.index;

	        if (item.enabled === false) {
	            result += " " + DISABLEDCLASS;
	        } else if (item.expanded === true) {
	            result += " " + ACTIVECLASS;
	        } else {
	            result += " k-state-default";
	        }

	        if (index === 0) {
	            result += " k-first";
	        }

	        if (index == group.length - 1) {
	            result += " k-last";
	        }

	        if (item.cssClass) {
	            result += " " + item.cssClass;
	        }

	        return result;
	    },

	    textClass: function(item, group) {
	        var result = LINK;

	        if (group.firstLevel) {
	            result += " k-header";
	        }

	        return result;
	    },
	    textAttributes: function(url) {
	        return url ? " href='" + url + "'" : "";
	    },
	    arrowClass: function(item) {
	        var result = "k-icon";

	        result += item.expanded ? " k-panelbar-collapse k-i-arrow-n" : " k-panelbar-expand k-i-arrow-s";

	        return result;
	    },
	    text: function(item) {
	         return item.encoded === false ? item.text : kendo.htmlEncode(item.text);
	    },
	    groupAttributes: function(group) {
	        return group.expanded !== true ? " style='display:none'" : "";
	    },
	    groupCssClass: function() {
	        return "k-group k-panel";
	    },
	    contentAttributes: function(content) {
	        return content.item.expanded !== true ? " style='display:none'" : "";
	    },
	    content: function(item) {
	        return item.content ? item.content : item.contentUrl ? "" : "&nbsp;";
	    },
	    contentUrl: function(item) {
	        return item.contentUrl ? 'href="' + item.contentUrl + '"' : "";
	    }
	};

	    function updateFirstLast (items) {
	        items = $(items);

	        items.filter(".k-first:not(:first-child)").removeClass(FIRST);
	        items.filter(".k-last:not(:last-child)").removeClass(LAST);
	        items.filter(":first-child").addClass(FIRST);
	        items.filter(":last-child").addClass(LAST);
	    }

	     function updateItemHtml(item) {
	        var wrapper = item,
	            group = item.children("ul"),
	            toggleButton = wrapper.children(".k-link").children(".k-icon");

	        if (item.hasClass("k-panelbar")) {
	            return;
	        }

	        if (!toggleButton.length && group.length) {
	            toggleButton = $("<span class='k-icon' />").appendTo(wrapper);
	        } else if (!group.length || !group.children().length) {
	            toggleButton.remove();
	            group.remove();
	        }
	     }

	    itemIcon = function(item) {
	        return item.children("span").children(".k-icon");
	    };

	    var PanelBar = kendo.ui.DataBoundWidget.extend({
	        init: function(element, options) {
	            var that = this,
	                content,
	                hasDataSource;

	           if (isArray(options)) {
	                options = { dataSource: options };
	           }

	            hasDataSource = options && !!options.dataSource;

	            Widget.fn.init.call(that, element, options);

	            element = that.wrapper = that.element.addClass("k-widget k-reset k-header k-panelbar");
	            options = that.options;

	            if (element[0].id) {
	                that._itemId = element[0].id + "_pb_active";
	            }

	            that._tabindex();

	            that._accessors();

	            that._dataSource();

	            that._templates();

	            that._initData(hasDataSource);

	            that._updateClasses();

	            that._animations(options);

	            element
	                .on("click" + NS, clickableItems, function(e) {
	                    if (that._click($(e.currentTarget))) {
	                        e.preventDefault();
	                    }
	                })
	                .on(MOUSEENTER  + NS + " " + MOUSELEAVE + NS, clickableItems, that._toggleHover)
	                .on("click" + NS, disabledItems, false)
	                .on("click" + NS, ".k-request-retry", proxy(that._retryRequest, that))
	                .on("keydown" + NS, $.proxy(that._keydown, that))
	                .on("focus" + NS, function() {
	                    var item = that.select();
	                    that._current(item[0] ? item : that._first());
	                })
	                .on("blur" + NS, function() {
	                    that._current(null);
	                })
	                .attr("role", "menu");

	            content = element.find("li." + ACTIVECLASS + " > ." + CONTENT);

	            if (content[0]) {
	                that.expand(content.parent(), false);
	            }

	            if (!options.dataSource) {
	                that._angularCompile();
	            }

	            kendo.notify(that);
	        },

	        events: [
	            EXPAND,
	            COLLAPSE,
	            SELECT,
	            ACTIVATE,
	            CHANGE,
	            ERROR,
	            DATABOUND,
	            CONTENTLOAD
	        ],
	        options: {
	            name: "PanelBar",
	            dataSource: {},
	            animation: {
	                expand: {
	                    effects: "expand:vertical",
	                    duration: 200
	                },
	                collapse: { // if collapse animation effects are defined, they will be used instead of expand.reverse
	                    duration: 200
	                }
	            },
	            messages: {
	                loading: "Loading...",
	                requestFailed: "Request failed.",
	                retry: "Retry"
	            },
	            autoBind: true,
	            loadOnDemand: true,
	            expandMode: "multiple",
	            dataTextField: null
	        },

	        _angularCompile: function() {
	            var that = this;
	            that.angular("compile", function(){
	                return {
	                    elements: that.element.children("li"),
	                    data: [{ dataItem: that.options.$angular}]
	                };
	            });
	        },

	        _angularCompileElements: function(html, items) {
	            var that = this;
	            that.angular("compile", function(){
	                return {
	                    elements: html,
	                    data: $.map(items, function(item) {
	                        return [{ dataItem: item }];
	                    })
	                };
	            });
	        },

	        _angularCleanup: function() {
	            var that = this;

	            that.angular("cleanup", function(){
	                return { elements: that.element.children("li") };
	            });
	        },

	        destroy: function() {
	            Widget.fn.destroy.call(this);

	            this.element.off(NS);

	            this._angularCleanup();

	            kendo.destroy(this.element);
	        },

	        _initData: function(hasDataSource) {
	            var that = this;

	            if (hasDataSource) {
	                that.element.empty();
	                 if (that.options.autoBind) {
	                    that._progress(true);

	                    that.dataSource.fetch();
	                 }
	            }
	        },

	        _templates: function() {
	            var that = this,
	                options = that.options,
	                fieldAccessor = proxy(that._fieldAccessor, that);

	              if (options.template && typeof options.template == STRING) {
	                    options.template = template(options.template);
	              } else if (!options.template) {
	                     options.template = template(
	                        "# var text = " + fieldAccessor("text") + "(data.item); #" +
	                        "# if (typeof data.item.encoded != 'undefined' && data.item.encoded === false) {#" +
	                            "#= text #" +
	                        "# } else { #" +
	                            "#: text #" +
	                        "# } #"
	                    );
	                }

	            that.templates = {
	                content: template(
	                    "<div role='region' class='k-content'#= contentAttributes(data) #>#= content(item) #</div>"
	                ),
	                group: template(
	                    "<ul role='group' aria-hidden='true' class='#= groupCssClass(group) #'#= groupAttributes(group) #>" +
	                        "#= renderItems(data) #" +
	                    "</ul>"
	                ),
	                itemWrapper: template(
	                     "# var url = " + fieldAccessor("url") + "(item); #" +
	                     "# var imageUrl = " + fieldAccessor("imageUrl") + "(item); #" +
	                     "# var spriteCssClass = " + fieldAccessor("spriteCssClass") + "(item); #" +
	                     "# var contentUrl = contentUrl(item); #" +
	                     "# var tag = url||contentUrl ? 'a' : 'span'; #" +

	                    "<#= tag # class='#= textClass(item, group) #' #= contentUrl ##= textAttributes(url) #>" +
	                        "# if (imageUrl) { #" +
	                              "<img class='k-image' alt='' src='#= imageUrl #' />" +
	                        "# } #" +

	                        "# if (spriteCssClass) { #" +
	                            "<span class='k-sprite #= spriteCssClass #'></span>" +
	                        "# } #" +
	                      "#= data.panelBar.options.template(data) #" +
	                      "#= arrow(data) #" +
	                    "</#= tag #>"
	                ),

	                item: template(
	                    "<li role='menuitem' #=aria(item)#class='#= wrapperCssClass(group, item) #'" +
	                         kendo.attr("uid") + "='#= item.uid #'>" +
	                        "#= itemWrapper(data) #" +
	                        "# if (item.items && item.items.length > 0) { #" +
	                        "#= subGroup({ items: item.items, panelBar: panelBar, group: { expanded: item.expanded } }) #" +
	                        "# } else if (item.content || item.contentUrl) { #" +
	                        "#= renderContent(data) #" +
	                        "# } #" +
	                    "</li>"
	                ),
	                loading: template("<div class='k-item'><span class='k-icon k-i-loading'></span> #: data.messages.loading #</div>"),
	                retry: template(
	                    "#: data.messages.requestFailed # " +
	                    "<button class='k-button k-request-retry'>#: data.messages.retry #</button>"
	                ),
	                arrow: template("<span class='#= arrowClass(item) #'></span>"),
	                empty: template("")
	            };
	        },

	        setOptions: function(options) {
	            var animation = this.options.animation;

	            this._animations(options);

	            options.animation = extend(true, animation, options.animation);

	            if ("dataSource" in options) {
	                this.setDataSource(options.dataSource);
	            }

	            Widget.fn.setOptions.call(this, options);
	        },

	        expand: function (element, useAnimation) {
	            var that = this,
	                animBackup = {};

	            element = this.element.find(element);

	            if (that._animating && element.find("ul").is(":visible")) {
	                that.one("complete", function() {
	                    setTimeout(function() {
	                        that.expand(element);
	                    });
	                });
	                return;
	            }
	            that._animating = true;

	            useAnimation = useAnimation !== false;

	            element.each(function (index, item) {
	                item = $(item);
	                var wrapper = element.children(".k-group,.k-content");

	                if (!wrapper.length) {
	                    wrapper =  that._addGroupElement(element);
	                }

	                 var groups = wrapper.add(item.find(CONTENTS));

	                if (!item.hasClass(DISABLEDCLASS) && groups.length > 0) {

	                    if (that.options.expandMode == SINGLE && that._collapseAllExpanded(item)) {
	                        return that;
	                    }

	                    element.find("." + HIGHLIGHTCLASS).removeClass(HIGHLIGHTCLASS);
	                    item.addClass(HIGHLIGHTCLASS);

	                    if (!useAnimation) {
	                        animBackup = that.options.animation;
	                        that.options.animation = { expand: { effects: {} }, collapse: { hide: true, effects: {} } };
	                    }

	                    if (!that._triggerEvent(EXPAND, item)) {
	                        that._toggleItem(item, false, false);
	                    }

	                    if (!useAnimation) {
	                        that.options.animation = animBackup;
	                    }
	                }
	            });

	            return that;
	        },

	        collapse: function (element, useAnimation) {
	            var that = this,
	                animBackup = {};

	            that._animating = true;

	            useAnimation = useAnimation !== false;
	            element = that.element.find(element);

	            element.each(function (index, item) {
	                item = $(item);
	                var groups = item.find(GROUPS).add(item.find(CONTENTS));

	                if (!item.hasClass(DISABLEDCLASS) && groups.is(VISIBLE)) {
	                    item.removeClass(HIGHLIGHTCLASS);

	                    if (!useAnimation) {
	                        animBackup = that.options.animation;
	                        that.options.animation = { expand: { effects: {} }, collapse: { hide: true, effects: {} } };
	                    }

	                    if (!that._triggerEvent(COLLAPSE, item)) {
	                        that._toggleItem(item, true);
	                    }

	                    if (!useAnimation) {
	                        that.options.animation = animBackup;
	                    }
	                }

	            });
	            return that;
	        },

	         updateArrow: function(items) {
	                var that = this;

	                items = $(items);
	                items.children(LINKSELECTOR).children(".k-panelbar-collapse, .k-panelbar-expand").remove();

	                items
	                    .filter(function() {
	                        var dataItem = that.dataItem(this);

	                        if (!dataItem) {
	                            return $(this).find(".k-panel").length > 0 ||
	                                $(this).find(".k-content").length > 0;
	                        }

	                        return dataItem.hasChildren || dataItem.content || dataItem.contentUrl;
	                    })
	                    .children(".k-link:not(:has([class*=k-i-arrow]))")
	                    .each(function () {
	                        var item = $(this),
	                            parent = item.parent();

	                        item.append("<span class='k-icon " + (parent.hasClass(ACTIVECLASS) ? " k-panelbar-collapse k-i-arrow-n" : " k-panelbar-expand k-i-arrow-s") + "'/>");
	                    });
	         },

	        _accessors: function() {
	            var that = this,
	                options = that.options,
	                i, field, textField,
	                element = that.element;

	            for (i in bindings) {
	                field = options[bindings[i]];
	                textField = element.attr(kendo.attr(i + "-field"));

	                if (!field && textField) {
	                    field = textField;
	                }

	                if (!field) {
	                    field = i;
	                }

	                if (!isArray(field)) {
	                    field = [field];
	                }

	                options[bindings[i]] = field;
	            }
	        },

	        _progress: function(item, showProgress) {
	            var element = this.element;
	            var loadingText = this.templates.loading({ messages: this.options.messages });

	            if (arguments.length == 1) {
	                showProgress = item;

	                if (showProgress) {
	                    element.html(loadingText);
	                } else {
	                    element.empty();
	                }
	            }
	            else {
	                itemIcon(item).toggleClass("k-i-loading", showProgress).removeClass("k-i-refresh");
	            }
	        },

	        _refreshRoot: function(items) {
	            var that = this;
	            var parent = that.element;
	            var  groupData = {
	                firstLevel: true,
	                expanded: true,
	                length: parent.children().length
	            };

	            this.element.empty();

	            var rootItemsHtml = $.map(items, function(value, idx) {
	                    if (typeof value === "string") {
	                        return $(value);
	                    } else {
	                        value.items = [];
	                        return $(that.renderItem({
	                            group: groupData,
	                            item: extend(value, { index: idx })
	                        }));
	                    }
	            });

	            this.element.append(rootItemsHtml);
	            this._angularCompileElements(rootItemsHtml, items);
	        },

	        _refreshChildren: function(item, parentNode) {
	            var i, children, child;

	            parentNode.children(".k-group").empty();
	            var items = item.children.data();
	            if (!items.length) {
	                updateItemHtml(parentNode);
	                children = parentNode.children(".k-group").children("li");
	                this._angularCompileElements(children, items);
	            } else {
	                this.append(item.children, parentNode);

	                if(this.options.loadOnDemand){
	                    this._toggleGroup(parentNode.children(".k-group"), false);
	                }
	                children = parentNode.children(".k-group").children("li");

	                for (i = 0; i < children.length; i++) {
	                    child = children.eq(i);
	                    this.trigger("itemChange", {
	                        item: child,
	                        data: this.dataItem(child),
	                        ns: ui
	                    });
	                }
	            }
	        },

	        findByUid: function(uid) {
	            var items = this.element.find(".k-item");
	            var uidAttr = kendo.attr("uid");
	            var result;

	            for (var i = 0; i < items.length; i++) {
	                if (items[i].getAttribute(uidAttr) == uid) {
	                    result = items[i];
	                    break;
	                }
	            }

	            return $(result);
	        },

	        refresh: function(e) {
	            var options = this.options;
	            var node = e.node;
	            var action = e.action;
	            var items = e.items;
	            var parentNode = this.wrapper;
	            var loadOnDemand = options.loadOnDemand;

	            if (e.field) {
	                if (!items[0] || !items[0].level) {
	                    return;
	                }

	                return this._updateItems(items, e.field);
	            }

	            if (node) {
	                parentNode = this.findByUid(node.uid);
	                this._progress(parentNode, false);
	            }
	            if (action == "add") {
	                this._appendItems(e.index, items, parentNode);
	            } else if (action == "remove") {
	                this.remove(this.findByUid(items[0].uid));
	            } else if (action == "itemchange") {
	                this._updateItems(items);
	            } else if (action == "itemloaded") {
	                this._refreshChildren(node, parentNode);
	            } else {
	                this._refreshRoot(items);
	            }

	            if (action != "remove") {
	                for (var k = 0; k < items.length; k++) {

	                    if (!loadOnDemand || items[k].expanded) {
	                        var tempItem = items[k];
	                        if (this._hasChildItems(tempItem)) {
	                                tempItem.load();
	                        }
	                    }
	                }
	            }

	            this.trigger(DATABOUND, { node: node ? parentNode : undefined });
	        },

	        _error: function(e) {
	            var node = e.node && this.findByUid(e.node.uid);
	            var retryHtml = this.templates.retry({ messages: this.options.messages });

	            if (node) {
	                this._progress(node, false);
	                this._expanded(node, false);
	                itemIcon(node).addClass("k-i-refresh");
	                e.node.loaded(false);
	            } else {
	                this._progress(false);
	                this.element.html(retryHtml);
	            }
	        },

	        _retryRequest: function(e) {
	            e.preventDefault();

	            this.dataSource.fetch();
	        },

	         items: function() {
	            return this.element.find(".k-item > span:first-child");
	        },

	        setDataSource: function(dataSource) {
	            var options = this.options;

	            options.dataSource = dataSource;

	            this._dataSource();

	            if (this.options.autoBind) {
	                this._progress(true);
	                this.dataSource.fetch();
	            }
	        },

	        _bindDataSource: function() {
	            this._refreshHandler = proxy(this.refresh, this);
	            this._errorHandler = proxy(this._error, this);

	            this.dataSource.bind(CHANGE, this._refreshHandler);
	            this.dataSource.bind(ERROR, this._errorHandler);
	        },

	        _unbindDataSource: function() {
	            var dataSource = this.dataSource;

	            if (dataSource) {
	                dataSource.unbind(CHANGE, this._refreshHandler);
	                dataSource.unbind(ERROR, this._errorHandler);
	            }
	        },

	        // generates accessor function for a given field name, honoring the data*Field arrays
	        _fieldAccessor: function(fieldName) {
	            var fieldBindings = this.options[bindings[fieldName]] || [],
	                count = fieldBindings.length,
	                result = "(function(item) {";

	            if (count === 0) {
	                result += "return item['" + fieldName + "'];";
	            } else {
	                result += "var levels = [" +
	                            $.map(fieldBindings, function(x) {
	                                return "function(d){ return " + kendo.expr(x) + "}";
	                            }).join(",") + "];";
	                result += "if(item.level){return levels[Math.min(item.level(), " + count + "-1)](item);}else";
	                result += "{return levels["+ count + "-1](item)}";
	            }

	            result += "})";

	            return result;
	        },

	        _dataSource: function() {
	            var that = this,
	                options = that.options,
	                dataSource = options.dataSource;

	            if (!dataSource) {
	                return;
	            }

	            dataSource = isArray(dataSource) ? { data: dataSource } : dataSource;

	            that._unbindDataSource();

	            if (!dataSource.fields) {
	                dataSource.fields = [
	                    { field: "text" },
	                    { field: "url" },
	                    { field: "spriteCssClass" },
	                    { field: "imageUrl" }
	                ];
	            }

	            that.dataSource = HierarchicalDataSource.create(dataSource);

	            that._bindDataSource();
	        },

	        _appendItems: function(index, items, parentNode) {
	            var that = this, children, wrapper;

	              if (parentNode.hasClass("k-panelbar")) {
	                  children = parentNode.children("li");
	                  wrapper = parentNode;
	              } else {
	                  wrapper = parentNode.children(".k-group");
	                  if (!wrapper.length) {
	                      wrapper =  that._addGroupElement(parentNode);
	                  }

	                  children = wrapper.children("li");
	              }

	             var  groupData = {
	                firstLevel: parentNode.hasClass("k-panelbar"),
	                expanded: true,
	                length: children.length
	             };

	             var itemsHtml = $.map(items, function(value, idx) {
	                    if (typeof value === "string") {
	                        return $(value);
	                    } else {
	                        return $(that.renderItem({
	                            group: groupData,
	                            item: extend(value, { index: idx })
	                        }));
	                    }
	            });

	              if (typeof index == UNDEFINED) {
	                   index = children.length;
	              }

	              for (var i = 0; i < itemsHtml.length; i++) {
	                  if (children.length === 0 || index === 0) {
	                      wrapper.append(itemsHtml[i]);
	                  } else {
	                       itemsHtml[i].insertAfter(children[index - 1]);
	                  }
	               }

	            that._angularCompileElements(itemsHtml, items);
	              if (that.dataItem(parentNode)) {
	                  that.dataItem(parentNode).hasChildren = true;
	                  that.updateArrow(parentNode);
	              }
	        },

	        _updateItems: function (items, field) {
	            var that = this;
	            var i, node, nodeWrapper, item;
	            var context = { panelBar: that.options, item: item, group: {} };
	            var render = field != "expanded";

	            if (field == "selected") {
	                if(items[0][field]){
	                    var currentNode = that.findByUid(items[0].uid);

	                    if (!currentNode.hasClass(DISABLEDCLASS)) {
	                        that.select(currentNode, true);
	                    }
	                }else{
	                    that.clearSelection();
	                }
	            } else {
	                var elements = $.map(items, function(item) {
	                    return that.findByUid(item.uid);
	                });

	                if (render) {
	                    that.angular("cleanup", function() { return { elements: elements }; });
	                }

	                for (i = 0; i < items.length; i++) {
	                    context.item = item = items[i];
	                    context.panelBar = that;
	                    nodeWrapper = elements[i];
	                    node = nodeWrapper.parent();
	                    if (render) {
	                        context.group = {
	                            firstLevel: node.hasClass("k-panelbar"),
	                            expanded: nodeWrapper.parent().hasClass(ACTIVECLASS),
	                            length: nodeWrapper.children().length
	                        };

	                        nodeWrapper.children(".k-link").remove();
	                        nodeWrapper.prepend(that.templates.itemWrapper(extend(context,
	                            {
	                                arrow: item.hasChildren || item.content || item.contentUrl ? that.templates.arrow : that.templates.empty
	                            },
	                            rendering)));
	                    }

	                    if (field == "expanded") {
	                        that._toggleItem(nodeWrapper, !item[field], item[field] ? "true": true);
	                    } else if (field == "enabled") {
	                        that.enable(nodeWrapper, item[field]);
	                         if (!item[field]) {
	                            if (item.selected) {
	                                item.set("selected", false);
	                            }
	                         }
	                    }

	                    if (nodeWrapper.length) {
	                        this.trigger("itemChange", { item: nodeWrapper, data: item, ns: ui });
	                    }
	                }

	                if (render) {
	                    that.angular("compile", function(){
	                        return {
	                            elements: elements,
	                            data: $.map(items, function(item) {
	                                return [{ dataItem: item }];
	                            })
	                        };
	                    });
	                }
	            }
	        },

	        _toggleDisabled: function(element, enable) {
	            element = this.element.find(element);
	            element
	                .toggleClass(defaultState, enable)
	                .toggleClass(DISABLEDCLASS, !enable)
	                .attr(ARIA_DISABLED, !enable);
	        },

	       dataItem: function(item) {
	            var uid = $(item).closest(ITEM).attr(kendo.attr("uid")),
	                dataSource = this.dataSource;

	            return dataSource && dataSource.getByUid(uid);
	       },

	       select: function (element, skipChange) {
	           var that = this;

	            if (element === undefined) {
	                return that.element.find(selectableItems).parent();
	            }

	            element = that.element.find(element);

	            if (!element.length) {
	                this._updateSelected(element);
	            } else {
	                element
	                    .each(function () {
	                        var item = $(this),
	                            link = item.children(LINKSELECTOR);

	                        if (item.hasClass(DISABLEDCLASS)) {
	                            return that;
	                        }

	                        that._updateSelected(link, skipChange);
	                    });
	            }

	            return that;
	        },

	        clearSelection: function() {
	            this.select($());
	        },

	        enable: function (element, state) {
	            this._toggleDisabled(element, state !== false);

	            return this;
	        },

	        disable: function (element) {
	            this._toggleDisabled(element, false);

	            return this;
	        },

	        append: function (item, referenceItem) {
	            referenceItem = this.element.find(referenceItem);

	            var inserted = this._insert(item, referenceItem, referenceItem.length ? referenceItem.find(GROUPS) : null);

	            each(inserted.items, function () {
	                inserted.group.append(this);
	                updateFirstLast(this);
	            });

	            this.updateArrow(referenceItem);
	            updateFirstLast(inserted.group.find(".k-first, .k-last"));
	            inserted.group.height("auto");

	            return this;
	        },

	        insertBefore: function (item, referenceItem) {
	            referenceItem = this.element.find(referenceItem);

	            var inserted = this._insert(item, referenceItem, referenceItem.parent());

	            each(inserted.items, function () {
	                referenceItem.before(this);
	                updateFirstLast(this);
	            });

	            updateFirstLast(referenceItem);
	            inserted.group.height("auto");

	            return this;
	        },

	        insertAfter: function (item, referenceItem) {
	            referenceItem = this.element.find(referenceItem);

	            var inserted = this._insert(item, referenceItem, referenceItem.parent());

	            each(inserted.items, function () {
	                referenceItem.after(this);
	                updateFirstLast(this);
	            });

	            updateFirstLast(referenceItem);
	            inserted.group.height("auto");

	            return this;
	        },

	        remove: function (element) {
	            element = this.element.find(element);

	            var that = this,
	                parent = element.parentsUntil(that.element, ITEM),
	                group = element.parent("ul");

	            element.remove();

	            if (group && !group.hasClass("k-panelbar") && !group.children(ITEM).length) {
	                group.remove();
	            }

	            if (parent.length) {
	                parent = parent.eq(0);

	                that.updateArrow(parent);
	                updateFirstLast(parent);
	            }

	            return that;
	        },

	        reload: function (element) {
	            var that = this;
	            element = that.element.find(element);

	            element.each(function () {
	                var item = $(this);

	                that._ajaxRequest(item, item.children("." + CONTENT), !item.is(VISIBLE));
	            });
	        },

	        _first: function() {
	            return this.element.children(ACTIVEITEMSELECTOR).first();
	        },

	        _last: function() {
	            var item = this.element.children(ACTIVEITEMSELECTOR).last(),
	                group = item.children(VISIBLEGROUP);

	            if (group[0]) {
	                return group.children(ACTIVEITEMSELECTOR).last();
	            }
	            return item;
	        },

	        _current: function(candidate) {
	            var that = this,
	                focused = that._focused,
	                id = that._itemId;

	            if (candidate === undefined) {
	                return focused;
	            }

	            that.element.removeAttr("aria-activedescendant");

	            if (focused && focused.length) {
	                if (focused[0].id === id) {
	                    focused.removeAttr("id");
	                }

	                focused
	                    .children(LINKSELECTOR)
	                    .removeClass(FOCUSEDCLASS);
	            }

	            if ($(candidate).length) {
	                id = candidate[0].id || id;

	                candidate.attr("id", id)
	                         .children(LINKSELECTOR)
	                         .addClass(FOCUSEDCLASS);

	                that.element.attr("aria-activedescendant", id);
	            }

	            that._focused = candidate;
	        },

	        _keydown: function(e) {
	            var that = this,
	                key = e.keyCode,
	                current = that._current();

	            if (e.target != e.currentTarget) {
	                return;
	            }

	            if (key == keys.DOWN || key == keys.RIGHT) {
	                that._current(that._nextItem(current));
	                e.preventDefault();
	            } else if (key == keys.UP || key == keys.LEFT) {
	                that._current(that._prevItem(current));
	                e.preventDefault();
	            } else if (key == keys.ENTER || key == keys.SPACEBAR) {
	                that._click(current.children(LINKSELECTOR));
	                e.preventDefault();
	            } else if (key == keys.HOME) {
	                that._current(that._first());
	                e.preventDefault();
	            } else if (key == keys.END) {
	                that._current(that._last());
	                e.preventDefault();
	            }
	        },

	        _nextItem: function(item) {
	            if (!item) {
	                return this._first();
	            }

	            var group = item.children(VISIBLEGROUP),
	                next = item.nextAll(":visible").first();

	            if (group[0]) {
	                next = group.children("." + FIRST);
	            }

	            if (!next[0]) {
	                next = item.parent(VISIBLEGROUP).parent(ITEM).next();
	            }

	            if (!next[0]) {
	                next = this._first();
	            }

	            if (next.hasClass(DISABLEDCLASS)) {
	                next = this._nextItem(next);
	            }

	            return next;
	        },

	        _prevItem: function(item) {
	            if (!item) {
	                return this._last();
	            }

	            var prev = item.prevAll(":visible").first(),
	                result;

	            if (!prev[0]) {
	                prev = item.parent(VISIBLEGROUP).parent(ITEM);
	                if (!prev[0]) {
	                    prev = this._last();
	                }
	            } else {
	                result = prev;
	                while (result[0]) {
	                    result = result.children(VISIBLEGROUP).children("." + LAST);
	                    if (result[0]) {
	                        prev = result;
	                    }
	                }
	            }

	            if (prev.hasClass(DISABLEDCLASS)) {
	                prev = this._prevItem(prev);
	            }

	            return prev;
	        },

	        _insert: function (item, referenceItem, parent) {
	            var that = this,
	                items,
	                plain = $.isPlainObject(item),
	                isReferenceItem = referenceItem && referenceItem[0],
	                groupData;

	            if (!isReferenceItem) {
	                parent = that.element;
	            }

	            groupData = {
	                firstLevel: parent.hasClass("k-panelbar"),
	                expanded: $(referenceItem).hasClass(ACTIVECLASS),
	                length: parent.children().length
	            };

	            if (isReferenceItem && !parent.length) {
	                parent = $(that.renderGroup({ group: groupData, options: that.options })).appendTo(referenceItem);
	            }

	            if (plain || $.isArray(item) || item instanceof HierarchicalDataSource) { // is JSON or HierarchicalDataSource
	                if (item instanceof HierarchicalDataSource) {
	                   item = item.data();
	                }

	                items = $.map(plain ? [item] : item, function(value, idx) {
	                    if (typeof value === "string") {
	                        return $(value);
	                    } else {
	                        return $(that.renderItem({
	                            group: groupData,
	                            item: extend(value, { index: idx })
	                        }));
	                    }
	                });
	                if (isReferenceItem) {
	                    var dataItem = that.dataItem(referenceItem);
	                    if (dataItem) {
	                        dataItem.hasChildren = true;
	                    }
	                    referenceItem.attr(ARIA_EXPANDED, false);
	                }
	            } else {
	                if (typeof item == "string" && item.charAt(0) != "<") {
	                    items = that.element.find(item);
	                } else {
	                    items = $(item);
	                }
	                that._updateItemsClasses(items);
	            }

	            if (!item.length){
	                item = [item];
	            }

	            that._angularCompileElements(items, item);
	            return { items: items, group: parent };
	        },

	        _toggleHover: function(e) {
	            var target = $(e.currentTarget);

	            if (!target.parents("li." + DISABLEDCLASS).length) {
	                target.toggleClass("k-state-hover", e.type == MOUSEENTER);
	            }
	        },

	        _updateClasses: function() {
	            var that = this,
	                panels, items;

	            panels = that.element
	                         .find("li > ul")
	                         .not(function () { return $(this).parentsUntil(".k-panelbar", "div").length; })
	                         .addClass("k-group k-panel")
	                         .attr("role", "group");

	            panels.parent()
	                  .attr(ARIA_EXPANDED, false)
	                  .not("." + ACTIVECLASS)
	                  .children("ul")
	                  .attr(ARIA_HIDDEN, true)
	                  .hide();

	            items = that.element.add(panels).children();

	            that._updateItemsClasses(items);
	            that.updateArrow(items);
	            updateFirstLast(items);
	        },

	        _updateItemsClasses: function(items) {
	            var length = items.length,
	                idx = 0;

	            for(; idx < length; idx++) {
	                this._updateItemClasses(items[idx], idx);
	            }
	        },

	        _updateItemClasses: function(item, index) {
	            var selected = this._selected,
	                contentUrls = this.options.contentUrls,
	                url = contentUrls && contentUrls[index],
	                root = this.element[0],
	                wrapElement, link;

	            item = $(item).addClass("k-item").attr("role", "menuitem");

	            if (kendo.support.browser.msie) {  // IE10 doesn't apply list-style: none on invisible items otherwise.
	                item.css("list-style-position", "inside")
	                    .css("list-style-position", "");
	            }

	            item
	                .children(IMG)
	                .addClass(IMAGE);

	            link = item
	                    .children("a")
	                    .addClass(LINK);

	            if (link[0]) {
	                link.attr("href", url); //url can be undefined

	                link.children(IMG)
	                    .addClass(IMAGE);
	            }

	            item
	                .filter(":not([disabled]):not([class*=k-state])")
	                .addClass("k-state-default");

	            item
	                .filter("li[disabled]")
	                .addClass("k-state-disabled")
	                .attr(ARIA_DISABLED, true)
	                .removeAttr("disabled");

	            item
	                .children("div")
	                .addClass(CONTENT)
	                .attr("role", "region")
	                .attr(ARIA_HIDDEN, true)
	                .hide()
	                .parent()
	                .attr(ARIA_EXPANDED, false);

	            link = item.children(SELECTEDSELECTOR);
	            if (link[0]) {
	                if (selected) {
	                    selected.removeAttr(ARIA_SELECTED)
	                            .children(SELECTEDSELECTOR)
	                            .removeClass(SELECTEDCLASS);
	                }

	                link.addClass(SELECTEDCLASS);
	                this._selected = item.attr(ARIA_SELECTED, true);
	            }

	            if (!item.children(LINKSELECTOR)[0]) {
	                wrapElement = "<span class='" + LINK + "'/>";
	                if (contentUrls && contentUrls[index] && item[0].parentNode == root) {
	                    wrapElement = '<a class="k-link k-header" href="' + contentUrls[index] + '"/>';
	                }

	                item
	                    .contents()      // exclude groups, real links, templates and empty text nodes
	                    .filter(function() { return (!this.nodeName.match(excludedNodesRegExp) && !(this.nodeType == 3 && !$.trim(this.nodeValue))); })
	                    .wrapAll(wrapElement);
	            }

	            if (item.parent(".k-panelbar")[0]) {
	                item
	                    .children(LINKSELECTOR)
	                    .addClass("k-header");
	            }
	        },

	        _click: function (target) {
	            var that = this,
	                element = that.element,
	                prevent, contents, href, isAnchor;

	            if (target.parents("li." + DISABLEDCLASS).length) {
	                return;
	            }

	            if (target.closest(".k-widget")[0] != element[0]) {
	                return;
	            }

	            var link = target.closest(LINKSELECTOR),
	                item = link.closest(ITEM);

	            that._updateSelected(link);

	            var wrapper = item.children(".k-group,.k-content");
	            var dataItem = this.dataItem(item);

	            if (!wrapper.length && ((that.options.loadOnDemand && dataItem && dataItem.hasChildren) ||
	             this._hasChildItems(item) || item.content || item.contentUrl)) {
	                wrapper =  that._addGroupElement(item);
	            }

	            contents = item.find(GROUPS).add(item.find(CONTENTS));
	            href = link.attr(HREF);
	            isAnchor = href && (href.charAt(href.length - 1) == "#" || href.indexOf("#" + that.element[0].id + "-") != -1);
	            prevent = !!(isAnchor || contents.length);

	            if (contents.data("animating")) {
	                return prevent;
	            }

	            if (that._triggerEvent(SELECT, item)) {
	                prevent = true;
	            }

	            if (prevent === false) {
	                return;
	            }

	            if (that.options.expandMode == SINGLE) {
	                if (that._collapseAllExpanded(item)) {
	                    return prevent;
	                }
	            }

	            if (contents.length) {
	                var visibility = contents.is(VISIBLE);

	                if (!that._triggerEvent(!visibility ? EXPAND : COLLAPSE, item)) {
	                    prevent = that._toggleItem(item, visibility);
	                }
	            }

	            return prevent;
	        },
	        _hasChildItems: function (item) {
	            return (item.items && item.items.length > 0) || item.hasChildren;
	        },

	        _toggleItem: function (element, isVisible, expanded) {
	            var that = this,
	                childGroup = element.find(GROUPS),
	                link = element.find(LINKSELECTOR),
	                url = link.attr(HREF),
	                prevent, content,
	                dataItem = that.dataItem(element);

	            var loaded = dataItem && dataItem.loaded();

	            if (dataItem && !expanded) {
	                dataItem.set("expanded", !isVisible);
	                prevent = dataItem.hasChildren || !!dataItem.content || !!dataItem.contentUrl;
	                return prevent;
	            }

	             if (dataItem && (!expanded || expanded === "true") &&  !loaded && !dataItem.content && !dataItem.contentUrl) {
	                 if (that.options.loadOnDemand) {
	                     this._progress(element, true);
	                 }

	                 element.children(".k-group,.k-content").remove();
	                 prevent = dataItem.hasChildren;

	                 dataItem.load();
	             } else {
	                   if (childGroup.length) {
	                        this._toggleGroup(childGroup, isVisible);
	                        prevent = true;
	                   } else {
	                        content = element.children("."  + CONTENT);

	                        if (content.length) {
	                            prevent = true;

	                            if (!content.is(EMPTY) || url === undefined) {
	                                that._toggleGroup(content, isVisible);
	                            } else {
	                                that._ajaxRequest(element, content, isVisible);
	                            }
	                        }
	                    }
	             }

	            return prevent;
	        },

	        _toggleGroup: function (element, visibility) {
	            var that = this,
	                animationSettings = that.options.animation,
	                animation = animationSettings.expand,
	                hasCollapseAnimation = animationSettings.collapse && "effects" in animationSettings.collapse,
	                collapse = extend({}, animationSettings.expand, animationSettings.collapse);

	            if (!hasCollapseAnimation) {
	                collapse = extend(collapse, {reverse: true});
	            }

	            if (element.is(VISIBLE) != visibility) {
	                that._animating = false;
	                return;
	            }

	            element.parent()
	                .attr(ARIA_EXPANDED, !visibility)
	                .attr(ARIA_HIDDEN, visibility)
	                .toggleClass(ACTIVECLASS, !visibility)
	                .find("> .k-link > .k-panelbar-collapse,> .k-link > .k-panelbar-expand")
	                    .toggleClass("k-i-arrow-n", !visibility)
	                    .toggleClass("k-panelbar-collapse", !visibility)
	                    .toggleClass("k-i-arrow-s", visibility)
	                    .toggleClass("k-panelbar-expand", visibility);
	            if (visibility) {
	                animation = extend(collapse, { hide: true });

	                animation.complete = function() {
	                    that._animationCallback();
	                };
	            } else {
	                animation = extend( { complete: function (element) {
	                        that._triggerEvent(ACTIVATE, element.closest(ITEM));
	                        that._animationCallback();
	                    } }, animation );
	            }

	            element
	                .kendoStop(true, true)
	                .kendoAnimate( animation );
	        },

	        _animationCallback: function() {
	            var that = this;
	            that.trigger("complete");
	            that._animating = false;
	        },

	        _addGroupElement: function(element) {
	            var group = $('<ul role="group" aria-hidden="true" class="k-group k-panel" style="display:none"></ul>');

	            element.append(group);
	            return group;
	        },

	        _collapseAllExpanded: function (item) {
	            var that = this, children, stopExpand = false;

	            var groups = item.find(GROUPS).add(item.find(CONTENTS));

	            if (groups.is(VISIBLE)) {
	                stopExpand = true;
	            }

	            if (!(groups.is(VISIBLE) || groups.length === 0)) {
	                children = item.siblings();
	                children.find(GROUPS).add(children.find(CONTENTS))
	                        .filter(function () { return $(this).is(VISIBLE); })
	                        .each(function (index, content) {
	                            content = $(content);

	                            stopExpand = that._triggerEvent(COLLAPSE, content.closest(ITEM));
	                            if (!stopExpand) {
	                                that._toggleGroup(content, true);
	                            }
	                        });

	                 that.one("complete", function() {
	                    setTimeout(function() {
	                        children.each(function (index, child) {
	                            var dataItem = that.dataItem(child);

	                            if(dataItem){
	                                dataItem.set("expanded", false);
	                            }
	                        });
	                    });
	                });
	            }

	            return stopExpand;
	        },

	        _ajaxRequest: function (element, contentElement, isVisible) {

	            var that = this,
	                statusIcon = element.find(".k-panelbar-collapse, .k-panelbar-expand"),
	                link = element.find(LINKSELECTOR),
	                loadingIconTimeout = setTimeout(function () {
	                    statusIcon.addClass("k-i-loading");
	                }, 100),
	                data = {},
	                url = link.attr(HREF);

	            $.ajax({
	                type: "GET",
	                cache: false,
	                url: url,
	                dataType: "html",
	                data: data,

	                error: function (xhr, status) {
	                    statusIcon.removeClass("k-i-loading");
	                    if (that.trigger(ERROR, { xhr: xhr, status: status })) {
	                        this.complete();
	                    }
	                },

	                complete: function () {
	                    clearTimeout(loadingIconTimeout);
	                    statusIcon.removeClass("k-i-loading");
	                },

	                success: function (data) {
	                    function getElements(){
	                        return { elements: contentElement.get() };
	                    }
	                    try {
	                        that.angular("cleanup", getElements);
	                        contentElement.html(data);
	                        that.angular("compile", getElements);
	                    } catch (e) {
	                        var console = window.console;

	                        if (console && console.error) {
	                            console.error(e.name + ": " + e.message + " in " + url);
	                        }
	                        this.error(this.xhr, "error");
	                    }

	                    that._toggleGroup(contentElement, isVisible);

	                    that.trigger(CONTENTLOAD, { item: element[0], contentElement: contentElement[0] });
	                }
	            });
	        },

	        _triggerEvent: function (eventName, element) {
	            var that = this;

	            return that.trigger(eventName, { item: element[0] });
	        },

	        _updateSelected: function(link, skipChange) {
	            var that = this,
	                element = that.element,
	                item = link.parent(ITEM),
	                selected = that._selected,
	                dataItem = that.dataItem(item);

	            if (selected) {
	                selected.removeAttr(ARIA_SELECTED);
	            }

	            that._selected = item.attr(ARIA_SELECTED, true);

	            element.find(selectableItems).removeClass(SELECTEDCLASS);
	            element.find("> ." + HIGHLIGHTCLASS + ", .k-panel > ." + HIGHLIGHTCLASS).removeClass(HIGHLIGHTCLASS);

	            link.addClass(SELECTEDCLASS);
	            link.parentsUntil(element, ITEM).filter(":has(.k-header)").addClass(HIGHLIGHTCLASS);
	            that._current(item[0] ? item : null);
	            if(dataItem){
	                 dataItem.set("selected", true);
	            }

	            if(!skipChange){
	                that.trigger(CHANGE);
	            }
	        },

	        _animations: function(options) {
	            if (options && ("animation" in options) && !options.animation) {
	                options.animation = { expand: { effects: {} }, collapse: { hide: true, effects: {} } };
	            }
	        },

	        renderItem: function (options) {
	            var that = this;
	                options = extend({ panelBar: that, group: {} }, options);

	            var empty = that.templates.empty,
	                item = options.item;

	            return that.templates.item(extend(options, {
	                itemWrapper: that.templates.itemWrapper,
	                renderContent: that.renderContent,
	                arrow: that._hasChildItems(item) || item.content || item.contentUrl ? that.templates.arrow : empty,
	                subGroup: !options.loadOnDemand || item.expanded ? that.renderGroup : empty
	            }, rendering));
	        },

	        renderGroup: function(options) {
	            var that = this;
	            var templates = that.templates || options.panelBar.templates;

	            return templates.group(extend({
	                renderItems: function(options) {
	                    var html = "",
	                        i = 0,
	                        items = options.items,
	                        len = items ? items.length : 0,
	                        group = extend({ length: len }, options.group);

	                    for (; i < len; i++) {
	                        html += options.panelBar.renderItem(extend(options, {
	                            group: group,
	                            item: extend({ index: i }, items[i])
	                        }));
	                    }

	                    return html;
	                }
	            }, options, rendering));
	        },

	        renderContent: function(options) {
	            return options.panelBar.templates.content(extend(options, rendering));
	        }
	    });

	kendo.ui.plugin(PanelBar);

	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(422));


/***/ })

/******/ });

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(501);


/***/ }),

/***/ 421:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(0);

/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 501:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(421) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "progressbar",
	    name: "ProgressBar",
	    category: "web",
	    description: "The ProgressBar offers rich functionality for displaying and tracking progress",
	    depends: [ "core" ]
	};

	(function ($, undefined) {
	    var kendo = window.kendo,
	        ui = kendo.ui,
	        Widget = ui.Widget,
	        HORIZONTAL = "horizontal",
	        VERTICAL = "vertical",
	        DEFAULTMIN = 0,
	        DEFAULTMAX = 100,
	        DEFAULTVALUE = 0,
	        DEFAULTCHUNKCOUNT = 5,
	        KPROGRESSBAR = "k-progressbar",
	        KPROGRESSBARREVERSE = "k-progressbar-reverse",
	        KPROGRESSBARINDETERMINATE = "k-progressbar-indeterminate",
	        KPROGRESSBARCOMPLETE = "k-complete",
	        KPROGRESSWRAPPER = "k-state-selected",
	        KPROGRESSSTATUS = "k-progress-status",
	        KCOMPLETEDCHUNK = "k-state-selected",
	        KUPCOMINGCHUNK = "k-state-default",
	        KSTATEDISABLED = "k-state-disabled",
	        PROGRESSTYPE = {
	            VALUE: "value",
	            PERCENT: "percent",
	            CHUNK: "chunk"
	        },
	        CHANGE = "change",
	        COMPLETE = "complete",
	        BOOLEAN = "boolean",
	        math = Math,
	        extend = $.extend,
	        proxy = $.proxy,
	        HUNDREDPERCENT = 100,
	        DEFAULTANIMATIONDURATION = 400,
	        PRECISION = 3,
	        templates = {
	            progressStatus: "<span class='k-progress-status-wrap'><span class='k-progress-status'></span></span>"
	        };

	    var ProgressBar = Widget.extend({
	        init: function(element, options) {
	            var that = this;

	            Widget.fn.init.call(this, element, options);

	            options = that.options;

	            that._progressProperty = (options.orientation === HORIZONTAL) ? "width" : "height";

	            that._fields();

	            options.value = that._validateValue(options.value);

	            that._validateType(options.type);

	            that._wrapper();

	            that._progressAnimation();

	            if ((options.value !== options.min) && (options.value !== false)) {
	               that._updateProgress();
	            }
	        },

	        setOptions: function(options) {
	            var that = this;

	            Widget.fn.setOptions.call(that, options);

	            if (options.hasOwnProperty("reverse")) {
	                that.wrapper.toggleClass("k-progressbar-reverse", options.reverse);
	            }

	            if (options.hasOwnProperty("enable")) {
	                that.enable(options.enable);
	            }

	            that._progressAnimation();

	            that._validateValue();

	            that._updateProgress();
	        },

	        events: [
	            CHANGE,
	            COMPLETE
	        ],

	        options: {
	            name: "ProgressBar",
	            orientation: HORIZONTAL,
	            reverse: false,
	            min: DEFAULTMIN,
	            max: DEFAULTMAX,
	            value: DEFAULTVALUE,
	            enable: true,
	            type: PROGRESSTYPE.VALUE,
	            chunkCount: DEFAULTCHUNKCOUNT,
	            showStatus: true,
	            animation: { }
	        },

	        _fields: function() {
	            var that = this;

	            that._isStarted = false;

	            that.progressWrapper = that.progressStatus = $();
	        },

	        _validateType: function(currentType) {
	            var isValid = false;

	            $.each(PROGRESSTYPE, function(k, type) {
	                if (type === currentType) {
	                    isValid = true;
	                    return false;
	                }
	            });

	            if (!isValid) {
	                throw new Error(kendo.format("Invalid ProgressBar type '{0}'", currentType));
	            }
	        },

	        _wrapper: function() {
	            var that = this;
	            var container = that.wrapper = that.element;
	            var options = that.options;
	            var orientation = options.orientation;
	            var initialStatusValue;

	            container.addClass("k-widget " + KPROGRESSBAR);

	            container.addClass(KPROGRESSBAR + "-" + ((orientation === HORIZONTAL) ? HORIZONTAL : VERTICAL));

	            if(options.enable === false) {
	                container.addClass(KSTATEDISABLED);
	            }

	            if (options.reverse) {
	                container.addClass(KPROGRESSBARREVERSE);
	            }

	            if (options.value === false) {
	                container.addClass(KPROGRESSBARINDETERMINATE);
	            }

	            if (options.type === PROGRESSTYPE.CHUNK) {
	                that._addChunkProgressWrapper();
	            } else {
	                if (options.showStatus){
	                    that.progressStatus = that.wrapper.prepend(templates.progressStatus)
	                                              .find("." + KPROGRESSSTATUS);

	                    initialStatusValue = (options.value !== false) ? options.value : options.min;

	                    if (options.type === PROGRESSTYPE.VALUE) {
	                        that.progressStatus.text(initialStatusValue);
	                    } else {
	                        that.progressStatus.text(that._calculatePercentage(initialStatusValue).toFixed() + "%");
	                    }
	                }
	            }
	        },

	        value: function(value) {
	            return this._value(value);
	        },

	        _value: function(value){
	            var that = this;
	            var options = that.options;
	            var validated;

	            if (value === undefined) {
	                return options.value;
	            } else {
	                if (typeof value !== BOOLEAN) {
	                    value = that._roundValue(value);

	                    if(!isNaN(value)) {
	                        validated = that._validateValue(value);

	                        if (validated !== options.value) {
	                            that.wrapper.removeClass(KPROGRESSBARINDETERMINATE);

	                            options.value = validated;

	                            that._isStarted = true;

	                            that._updateProgress();
	                        }
	                    }
	                } else if (!value) {
	                    that.wrapper.addClass(KPROGRESSBARINDETERMINATE);
	                    options.value = false;
	                }
	            }
	        },

	        _roundValue: function(value) {
	            value = parseFloat(value);

	            var power = math.pow(10, PRECISION);

	            return math.floor(value * power) / power;
	        },

	        _validateValue: function(value) {
	            var that = this;
	            var options = that.options;

	            if (value !== false) {
	                if (value <= options.min || value === true) {
	                    return options.min;
	                } else if (value >= options.max) {
	                    return options.max;
	                }
	            } else if (value === false) {
	                return false;
	            }

	            if(isNaN(that._roundValue(value))) {
	                return options.min;
	            }

	            return value;
	        },

	        _updateProgress: function() {
	            var that = this;
	            var options = that.options;
	            var percentage = that._calculatePercentage();

	            if (options.type === PROGRESSTYPE.CHUNK) {
	                that._updateChunks(percentage);
	                that._onProgressUpdateAlways(options.value);
	            } else {
	                that._updateProgressWrapper(percentage);
	            }
	        },

	        _updateChunks: function(percentage) {
	            var that = this;
	            var options = that.options;
	            var chunkCount = options.chunkCount;
	            var percentagesPerChunk =  parseInt((HUNDREDPERCENT / chunkCount) * 100, 10) / 100;
	            var percentageParsed = parseInt(percentage * 100, 10) / 100;
	            var completedChunksCount = math.floor(percentageParsed / percentagesPerChunk);
	            var completedChunks;

	            if((options.orientation === HORIZONTAL && !(options.reverse)) ||
	               (options.orientation === VERTICAL && options.reverse)) {
	                completedChunks = that.wrapper.find("li.k-item:lt(" + completedChunksCount + ")");
	            } else {
	                completedChunks = that.wrapper.find("li.k-item:gt(-" + (completedChunksCount + 1) + ")");
	            }

	            that.wrapper.find("." + KCOMPLETEDCHUNK)
	                        .removeClass(KCOMPLETEDCHUNK)
	                        .addClass(KUPCOMINGCHUNK);

	            completedChunks.removeClass(KUPCOMINGCHUNK)
	                           .addClass(KCOMPLETEDCHUNK);
	        },

	        _updateProgressWrapper: function(percentage) {
	            var that = this;
	            var options = that.options;
	            var progressWrapper = that.wrapper.find("." + KPROGRESSWRAPPER);
	            var animationDuration = that._isStarted ? that._animation.duration : 0;
	            var animationCssOptions = { };

	            if (progressWrapper.length === 0) {
	                that._addRegularProgressWrapper();
	            }

	            animationCssOptions[that._progressProperty] = percentage + "%";
	            that.progressWrapper.animate(animationCssOptions, {
	                duration: animationDuration,
	                start: proxy(that._onProgressAnimateStart, that),
	                progress: proxy(that._onProgressAnimate, that),
	                complete: proxy(that._onProgressAnimateComplete, that, options.value),
	                always: proxy(that._onProgressUpdateAlways, that, options.value)
	            });
	        },

	        _onProgressAnimateStart: function() {
	            this.progressWrapper.show();
	        },

	        _onProgressAnimate: function(e) {
	            var that = this;
	            var options = that.options;
	            var progressInPercent = parseFloat(e.elem.style[that._progressProperty], 10);
	            var progressStatusWrapSize;

	            if (options.showStatus) {
	                progressStatusWrapSize = 10000 / parseFloat(that.progressWrapper[0].style[that._progressProperty]);

	                that.progressWrapper.find(".k-progress-status-wrap").css(that._progressProperty, progressStatusWrapSize + "%");
	            }

	            if (options.type !== PROGRESSTYPE.CHUNK && progressInPercent <= 98) {
	                that.progressWrapper.removeClass(KPROGRESSBARCOMPLETE);
	            }
	        },

	        _onProgressAnimateComplete: function(currentValue) {
	            var that = this;
	            var options = that.options;
	            var progressWrapperSize = parseFloat(that.progressWrapper[0].style[that._progressProperty]);
	            var progressValue;

	            if (options.type !== PROGRESSTYPE.CHUNK && progressWrapperSize > 98) {
	                that.progressWrapper.addClass(KPROGRESSBARCOMPLETE);
	            }

	            if (options.showStatus) {
	                if (options.type === PROGRESSTYPE.VALUE) {
	                    progressValue = currentValue;
	                } else if (options.type == PROGRESSTYPE.PERCENT) {
	                    progressValue = that._calculatePercentage(currentValue).toFixed() + "%";
	                } else {
	                    progressValue = math.floor(that._calculatePercentage(currentValue)) + "%";
	                }
	                that.progressStatus.text(progressValue);
	            }

	            if (currentValue === options.min) {
	                that.progressWrapper.hide();
	            }
	        },

	        _onProgressUpdateAlways: function(currentValue) {
	            var that = this;
	            var options = that.options;

	            if (that._isStarted) {
	                that.trigger(CHANGE, { value: currentValue });
	            }

	            if (currentValue === options.max && that._isStarted) {
	                that.trigger(COMPLETE, { value: options.max });
	            }
	        },

	        enable: function(enable) {
	            var that = this;
	            var options = that.options;

	            options.enable = typeof(enable) === "undefined" ? true : enable;
	            that.wrapper.toggleClass(KSTATEDISABLED, !options.enable);
	        },

	        destroy: function() {
	            var that = this;

	            Widget.fn.destroy.call(that);
	        },

	        _addChunkProgressWrapper: function () {
	            var that = this;
	            var options = that.options;
	            var container = that.wrapper;
	            var chunkSize = HUNDREDPERCENT / options.chunkCount;
	            var html = "";

	            if (options.chunkCount <= 1) {
	                options.chunkCount = 1;
	            }

	            html += "<ul class='k-reset'>";
	            for (var i = options.chunkCount - 1; i >= 0; i--) {
	                html += "<li class='k-item k-state-default'></li>";
	            }
	            html += "</ul>";

	            container.append(html).find(".k-item").css(that._progressProperty, chunkSize + "%")
	                     .first().addClass("k-first")
	                     .end()
	                     .last().addClass("k-last");

	            that._normalizeChunkSize();
	        },

	        _normalizeChunkSize: function() {
	            var that = this;
	            var options = that.options;
	            var lastChunk = that.wrapper.find(".k-item:last");
	            var currentSize = parseFloat(lastChunk[0].style[that._progressProperty]);
	            var difference = HUNDREDPERCENT - (options.chunkCount * currentSize);

	            if (difference > 0) {
	                lastChunk.css(that._progressProperty, (currentSize + difference) + "%");
	            }
	        },

	        _addRegularProgressWrapper: function() {
	            var that = this;

	            that.progressWrapper = $("<div class='" + KPROGRESSWRAPPER + "'></div>").appendTo(that.wrapper);

	            if (that.options.showStatus) {
	                that.progressWrapper.append(templates.progressStatus);

	                that.progressStatus = that.wrapper.find("." + KPROGRESSSTATUS);
	            }
	        },

	        _calculateChunkSize: function() {
	            var that = this;
	            var chunkCount = that.options.chunkCount;
	            var chunkContainer = that.wrapper.find("ul.k-reset");

	            return (parseInt(chunkContainer.css(that._progressProperty), 10) - (chunkCount - 1)) / chunkCount;
	        },

	        _calculatePercentage: function(currentValue) {
	            var that = this;
	            var options = that.options;
	            var value = (currentValue !== undefined) ? currentValue : options.value;
	            var min = options.min;
	            var max = options.max;
	            that._onePercent = math.abs((max - min) / 100);

	            return math.abs((value - min) / that._onePercent);
	        },

	        _progressAnimation: function() {
	            var that = this;
	            var options = that.options;
	            var animation = options.animation;

	            if (animation === false) {
	                that._animation = { duration: 0 };
	            } else {
	                that._animation = extend({
	                    duration: DEFAULTANIMATIONDURATION
	                }, options.animation);
	            }
	        }
	    });

	    kendo.ui.plugin(ProgressBar);
	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(422));


/***/ })

/******/ });

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(503);


/***/ }),

/***/ 421:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(0);

/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 503:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(421) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "responsive-panel",
	    name: "Responsive Panel",
	    category: "web",
	    description: "The Responsive Panel widget allows a panel of content to be hidden on mobile devices, available through a toggle button.",
	    depends: [ "core" ]
	};

	(function ($, undefined) {
	    var proxy = $.proxy;
	    var NS = ".kendoResponsivePanel";
	    var OPEN = "open";
	    var CLOSE = "close";
	    var ACTIVATE_EVENTS = "click" + NS +" touchstart" + NS;
	    var Widget = kendo.ui.Widget;
	    var ResponsivePanel = Widget.extend({
	        init: function(element, options) {
	            Widget.fn.init.call(this, element, options);

	            this._guid = "_" + kendo.guid();

	            this._toggleHandler = proxy(this._toggleButtonClick, this);
	            this._closeHandler = proxy(this._close, this);

	            $(document.documentElement).on(ACTIVATE_EVENTS, this.options.toggleButton, this._toggleHandler);

	            this._registerBreakpoint();

	            this.element
	                .addClass("k-rpanel k-rpanel-" + this.options.orientation + " " + this._guid);

	            this._resizeHandler = proxy(this.resize, this, true);
	            $(window).on("resize" + NS, this._resizeHandler);
	        },
	        _mediaQuery:
	            "@media (max-width: #= breakpoint-1 #px) {" +
	                ".#= guid #.k-rpanel-animate.k-rpanel-left," +
	                ".#= guid #.k-rpanel-animate.k-rpanel-right {" +
	                    "-webkit-transition: -webkit-transform .2s ease-out;" +
	                    "-ms-transition: -ms-transform .2s ease-out;" +
	                    "transition: transform .2s ease-out;" +
	                "} " +
	                ".#= guid #.k-rpanel-top {" +
	                    "overflow: hidden;" +
	                "}" +
	                ".#= guid #.k-rpanel-animate.k-rpanel-top {" +
	                    "-webkit-transition: max-height .2s linear;" +
	                    "-ms-transition: max-height .2s linear;" +
	                    "transition: max-height .2s linear;" +
	                "}" +
	            "} " +
	            "@media (min-width: #= breakpoint #px) {" +
	                "#= toggleButton # { display: none; } " +
	                ".#= guid #.k-rpanel-left { float: left; } " +
	                ".#= guid #.k-rpanel-right { float: right; } " +
	                ".#= guid #.k-rpanel-left, .#= guid #.k-rpanel-right {" +
	                    "position: relative;" +
	                    "-webkit-transform: translateX(0);" +
	                    "-ms-transform: translateX(0);" +
	                    "transform: translateX(0);" +
	                    "-webkit-transform: translateX(0) translateZ(0);" +
	                    "-ms-transform: translateX(0) translateZ(0);" +
	                    "transform: translateX(0) translateZ(0);" +
	                "} " +
	                ".k-ie9 .#= guid #.k-rpanel-left { left: 0; } " +
	                ".#= guid #.k-rpanel-top { max-height: none; }" +
	            "}",
	        _registerBreakpoint: function() {
	            var options = this.options;

	            this._registerStyle(kendo.template(this._mediaQuery)({
	                breakpoint: options.breakpoint,
	                toggleButton: options.toggleButton,
	                guid: this._guid
	            }));
	        },
	        _registerStyle: function(cssText) {
	            var head = $("head,body")[0];
	            var style = document.createElement('style');

	            head.appendChild(style);

	            if (style.styleSheet){
	                style.styleSheet.cssText = cssText;
	            } else {
	                style.appendChild(document.createTextNode(cssText));
	            }
	        },
	        options: {
	            name: "ResponsivePanel",
	            orientation: "left",
	            toggleButton: ".k-rpanel-toggle",
	            breakpoint: 640,
	            autoClose: true
	        },
	        events: [
	            OPEN,
	            CLOSE
	        ],
	        _resize: function() {
	            this.element.removeClass("k-rpanel-animate k-rpanel-expanded");

	            $(document.documentElement).off(ACTIVATE_EVENTS, this._closeHandler);
	        },
	        _toggleButtonClick: function(e) {
	            e.preventDefault();

	            if (this.element.hasClass("k-rpanel-expanded")) {
	                this.close();
	            } else {
	                this.open();
	            }
	        },
	        open: function() {
	            if (!this.trigger(OPEN)) {
	                this.element.addClass("k-rpanel-animate k-rpanel-expanded");

	                if (this.options.autoClose) {
	                    $(document.documentElement).on(ACTIVATE_EVENTS, this._closeHandler);
	                }
	            }
	        },
	        close: function() {
	            if (!this.trigger(CLOSE)) {
	                this.element.addClass("k-rpanel-animate").removeClass("k-rpanel-expanded");

	                $(document.documentElement).off(ACTIVATE_EVENTS, this._closeHandler);
	            }
	        },
	        _close: function(e) {
	            var prevented = e.isDefaultPrevented();
	            var container = $(e.target).closest(this.options.toggleButton + ",.k-rpanel");

	            if (!container.length && !prevented) {
	                this.close();
	            }
	        },
	        destroy: function() {
	            Widget.fn.destroy.call(this);

	            $(window).off("resize" + NS, this._resizeHandler);
	            $(document.documentElement).off(ACTIVATE_EVENTS, this._closeHandler);
	        }
	    });

	    kendo.ui.plugin(ResponsivePanel);
	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(422));


/***/ })

/******/ });

/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(507);


/***/ }),

/***/ 420:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(3);

/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 461:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(6);

/***/ }),

/***/ 507:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(jQuery) {/* jshint eqnull: true */
	(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(461) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "sortable",
	    name: "Sortable",
	    category: "framework",
	    depends: [ "draganddrop" ]
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        Widget = kendo.ui.Widget,
	        outerWidth = kendo._outerWidth,
	        outerHeight = kendo._outerHeight,

	        START = "start",
	        BEFORE_MOVE = "beforeMove",
	        MOVE = "move",
	        END = "end",
	        CHANGE = "change",
	        CANCEL = "cancel",

	        ACTION_SORT = "sort",
	        ACTION_REMOVE = "remove",
	        ACTION_RECEIVE = "receive",

	        DEFAULT_FILTER = ">*",
	        MISSING_INDEX = -1;

	    function containsOrEqualTo(parent, child) {
	        try {
	            return $.contains(parent, child) || parent == child;
	        } catch (e) {
	            return false;
	        }
	    }

	    function defaultHint(element) {
	        return element.clone();
	    }

	    function defaultPlaceholder(element) {
	        return element.clone().removeAttr("id").css("visibility", "hidden");
	    }

	    var Sortable = Widget.extend({
	        init: function(element, options) {
	            var that = this;

	            Widget.fn.init.call(that, element, options);

	            if(!that.options.placeholder) {
	                that.options.placeholder = defaultPlaceholder;
	            }

	            if(!that.options.hint) {
	                that.options.hint = defaultHint;
	            }

	            that.draggable = that._createDraggable();
	        },

	        events: [
	            START,
	            BEFORE_MOVE,
	            MOVE,
	            END,
	            CHANGE,
	            CANCEL
	        ],

	        options: {
	            name: "Sortable",
	            hint: null,
	            placeholder: null,
	            filter: DEFAULT_FILTER,
	            holdToDrag: false,
	            disabled: null,
	            container: null,
	            connectWith: null,
	            handler: null,
	            cursorOffset: null,
	            axis: null,
	            ignore: null,
	            autoScroll: false,
	            cursor: "auto",
	            moveOnDragEnter: false
	        },

	        destroy: function() {
	            this.draggable.destroy();
	            Widget.fn.destroy.call(this);
	        },

	        _createDraggable: function() {
	            var that = this,
	                element = that.element,
	                options = that.options;

	            return new kendo.ui.Draggable(element, {
	                filter: options.filter,
	                hint: kendo.isFunction(options.hint) ? options.hint : $(options.hint),
	                holdToDrag: options.holdToDrag,
	                container: options.container ? $(options.container) : null,
	                cursorOffset: options.cursorOffset,
	                axis: options.axis,
	                ignore: options.ignore,
	                autoScroll: options.autoScroll,
	                dragstart: $.proxy(that._dragstart, that),
	                dragcancel: $.proxy(that._dragcancel, that),
	                drag: $.proxy(that._drag, that),
	                dragend: $.proxy(that._dragend, that)
	            });
	        },

	        _dragstart: function(e) {
	            var draggedElement = this.draggedElement = e.currentTarget,
	                disabled = this.options.disabled,
	                handler = this.options.handler,
	                _placeholder = this.options.placeholder,
	                placeholder = this.placeholder = kendo.isFunction(_placeholder) ? $(_placeholder.call(this, draggedElement)) : $(_placeholder);

	            if(disabled && draggedElement.is(disabled)) {
	                e.preventDefault();
	            } else if(handler && !$(e.initialTarget).is(handler)) {
	                e.preventDefault();
	            } else {

	                if(this.trigger(START, { item: draggedElement, draggableEvent: e })) {
	                    e.preventDefault();
	                } else {
	                    draggedElement.css("display", "none");
	                    draggedElement.before(placeholder);

	                    this._setCursor();
	                }

	            }
	        },

	        _dragcancel: function() {
	            this._cancel();
	            this.trigger(CANCEL, { item: this.draggedElement });

	            this._resetCursor();
	        },

	        _drag: function(e) {
	            var draggedElement = this.draggedElement,
	                target = this._findTarget(e),
	                targetCenter,
	                cursorOffset = { left: e.x.location, top: e.y.location },
	                offsetDelta,
	                axisDelta = { x: e.x.delta, y: e.y.delta },
	                direction,
	                sibling,
	                getSibling,
	                axis = this.options.axis,
	                moveOnDragEnter= this.options.moveOnDragEnter,
	                eventData = { item: draggedElement, list: this, draggableEvent: e };

	            if(axis === "x" || axis === "y") {
	                this._movementByAxis(axis, cursorOffset, axisDelta[axis], eventData);
	                return;
	            }

	            if(target) {
	                targetCenter = this._getElementCenter(target.element);

	                offsetDelta = {
	                    left: Math.round(cursorOffset.left - targetCenter.left),
	                    top: Math.round(cursorOffset.top - targetCenter.top)
	                };

	                $.extend(eventData, { target: target.element });

	                if(target.appendToBottom) {
	                    this._movePlaceholder(target, null, eventData);
	                    return;
	                }

	                if(target.appendAfterHidden) {
	                    this._movePlaceholder(target, "next", eventData);
	                }

	                if(this._isFloating(target.element)) { //horizontal
	                    if((axisDelta.x < 0 && moveOnDragEnter) || (!moveOnDragEnter && offsetDelta.left < 0)) {
	                        direction = "prev";
	                    } else if((axisDelta.x > 0 && moveOnDragEnter) || (!moveOnDragEnter &&  offsetDelta.left > 0)) {
	                        direction = "next";
	                    }
	                } else { //vertical
	                    if((axisDelta.y < 0  && moveOnDragEnter) || (!moveOnDragEnter &&  offsetDelta.top < 0)) {
	                        direction = "prev";
	                    } else if((axisDelta.y > 0  && moveOnDragEnter) || (!moveOnDragEnter &&  offsetDelta.top > 0)) {
	                        direction = "next";
	                    }
	                }

	                if(direction) {
	                    getSibling = (direction === "prev") ? jQuery.fn.prev : jQuery.fn.next;

	                    sibling = getSibling.call(target.element);

	                    //find the prev/next visible sibling
	                    while(sibling.length && !sibling.is(":visible")) {
	                        sibling = getSibling.call(sibling);
	                    }

	                    if(sibling[0] != this.placeholder[0]) {
	                        this._movePlaceholder(target, direction, eventData);
	                    }
	                }
	            }
	        },

	        _dragend: function(e) {
	            var placeholder = this.placeholder,
	                draggedElement = this.draggedElement,
	                draggedIndex = this.indexOf(draggedElement),
	                placeholderIndex = this.indexOf(placeholder),
	                connectWith = this.options.connectWith,
	                connectedList,
	                isDefaultPrevented,
	                eventData,
	                connectedListEventData;

	            this._resetCursor();

	            eventData = {
	                action: ACTION_SORT,
	                item: draggedElement,
	                oldIndex: draggedIndex,
	                newIndex: placeholderIndex,
	                draggableEvent: e
	            };

	            if(placeholderIndex >= 0) {
	                isDefaultPrevented = this.trigger(END, eventData);
	            } else {
	                connectedList = placeholder.parents(connectWith).getKendoSortable();

	                eventData.action = ACTION_REMOVE;
	                connectedListEventData = $.extend({}, eventData, {
	                    action: ACTION_RECEIVE,
	                    oldIndex: MISSING_INDEX,
	                    newIndex: connectedList.indexOf(placeholder)
	                });

	                isDefaultPrevented = !(!this.trigger(END, eventData) && !connectedList.trigger(END, connectedListEventData));
	            }

	            if(isDefaultPrevented || placeholderIndex === draggedIndex) {
	                this._cancel();
	                return;
	            }

	            placeholder.replaceWith(draggedElement);

	            draggedElement.show();
	            this.draggable.dropped = true;

	            eventData = {
	                action: this.indexOf(draggedElement) != MISSING_INDEX ? ACTION_SORT : ACTION_REMOVE,
	                item: draggedElement,
	                oldIndex: draggedIndex,
	                newIndex: this.indexOf(draggedElement),
	                draggableEvent: e
	            };

	            this.trigger(CHANGE, eventData);

	            if(connectedList) {
	                connectedListEventData = $.extend({}, eventData, {
	                    action: ACTION_RECEIVE,
	                    oldIndex: MISSING_INDEX,
	                    newIndex: connectedList.indexOf(draggedElement)
	                });

	                connectedList.trigger(CHANGE, connectedListEventData);
	            }

	        },

	        _findTarget: function(e) {
	            var element = this._findElementUnderCursor(e),
	                items,
	                connectWith = this.options.connectWith,
	                node;

	            if($.contains(this.element[0], element)) { //the element is part of the sortable container
	                items = this.items();
	                node = items.filter(element)[0] || items.has(element)[0];

	                return node ? { element: $(node), sortable: this } : null;
	            } else if (this.element[0] == element && this._isEmpty()) {
	                return { element: this.element, sortable: this, appendToBottom: true };
	            } else if (this.element[0] == element && this._isLastHidden()) {
	                node = this.items().eq(0);
	                return { element: node , sortable: this, appendAfterHidden: true };
	            } else if (connectWith) { //connected lists are present
	                return this._searchConnectedTargets(element, e);
	            }
	        },

	        _findElementUnderCursor: function(e) {
	            var elementUnderCursor = kendo.elementUnderCursor(e),
	                draggable = e.sender;

	            if(containsOrEqualTo(draggable.hint[0], elementUnderCursor)) {
	                draggable.hint.hide();
	                elementUnderCursor = kendo.elementUnderCursor(e);
	                // IE8 does not return the element in iframe from first attempt
	                if (!elementUnderCursor) {
	                    elementUnderCursor = kendo.elementUnderCursor(e);
	                }
	                draggable.hint.show();
	            }

	            return elementUnderCursor;
	        },

	        _searchConnectedTargets: function(element, e) {
	            var connected = $(this.options.connectWith),
	                sortableInstance,
	                items,
	                node;

	            for (var i = 0; i < connected.length; i++) {
	                sortableInstance = connected.eq(i).getKendoSortable();

	                if($.contains(connected[i], element)) {
	                    if(sortableInstance) {
	                        items = sortableInstance.items();
	                        node = items.filter(element)[0] || items.has(element)[0];

	                        if(node) {
	                            sortableInstance.placeholder = this.placeholder;
	                            return { element: $(node), sortable: sortableInstance };
	                        } else {
	                            return null;
	                        }
	                    }
	                } else if(connected[i] == element) {
	                    if(sortableInstance && sortableInstance._isEmpty()) {
	                        return { element: connected.eq(i), sortable: sortableInstance, appendToBottom: true };
	                    } else if (this._isCursorAfterLast(sortableInstance, e)) {
	                        node = sortableInstance.items().last();
	                        return { element: node, sortable: sortableInstance };
	                    }
	                }
	            }

	        },

	        _isCursorAfterLast: function(sortable, e) {
	            var lastItem = sortable.items().last(),
	                cursorOffset = { left: e.x.location, top: e.y.location },
	                lastItemOffset,
	                delta;

	            lastItemOffset = kendo.getOffset(lastItem);
	            lastItemOffset.top += outerHeight(lastItem);
	            lastItemOffset.left += outerWidth(lastItem);

	            if(this._isFloating(lastItem)) { //horizontal
	                delta = lastItemOffset.left - cursorOffset.left;
	            } else { //vertical
	                delta = lastItemOffset.top - cursorOffset.top;
	            }

	            return delta < 0 ? true : false;
	        },

	        _movementByAxis: function(axis, cursorOffset, delta, eventData) {
	            var cursorPosition = (axis === "x") ? cursorOffset.left : cursorOffset.top,
	                target = (delta < 0) ? this.placeholder.prev() : this.placeholder.next(),
	                targetCenter;

	            if (target.length && !target.is(":visible")) {
	                target = (delta <0) ? target.prev() : target.next();
	            }

	            $.extend(eventData, { target: target });
	            targetCenter = this._getElementCenter(target);

	            if (targetCenter) {
	                targetCenter = (axis === "x") ? targetCenter.left : targetCenter.top;
	            }

	            if (target.length && delta < 0 && cursorPosition - targetCenter < 0) { //prev
	                this._movePlaceholder({ element: target, sortable: this }, "prev", eventData);
	            } else if (target.length && delta > 0 && cursorPosition - targetCenter > 0) { //next
	                this._movePlaceholder({ element: target, sortable: this }, "next", eventData);
	            }
	        },

	        _movePlaceholder: function(target, direction, eventData) {
	            var placeholder = this.placeholder;

	            if (!target.sortable.trigger(BEFORE_MOVE, eventData)) {

	                if (!direction) {
	                    target.element.append(placeholder);
	                } else if (direction === "prev") {
	                    target.element.before(placeholder);
	                } else if (direction === "next") {
	                    target.element.after(placeholder);
	                }

	                target.sortable.trigger(MOVE, eventData);
	            }
	        },

	        _setCursor: function() {
	            var cursor = this.options.cursor,
	                body;

	            if(cursor && cursor !== "auto") {
	                body = $(document.body);

	                this._originalCursorType = body.css("cursor");
	                body.css({ "cursor": cursor });

	                if(!this._cursorStylesheet) {
	                    this._cursorStylesheet = $("<style>* { cursor: " + cursor + " !important; }</style>");
	                }

	                this._cursorStylesheet.appendTo(body);
	            }
	        },

	        _resetCursor: function() {
	            if(this._originalCursorType) {
	                $(document.body).css("cursor", this._originalCursorType);
	                this._originalCursorType = null;

	                this._cursorStylesheet.remove();
	            }
	        },

	        _getElementCenter: function(element) {
	            var center = element.length ? kendo.getOffset(element) : null;
	            if(center) {
	                center.top += outerHeight(element) / 2;
	                center.left += outerWidth(element) / 2;
	            }

	            return center;
	        },

	        _isFloating: function(item) {
	            return (/left|right/).test(item.css("float")) || (/inline|table-cell/).test(item.css("display"));
	        },

	        _cancel: function() {
	            this.draggedElement.show();
	            this.placeholder.remove();
	        },

	        _items: function() {
	            var filter = this.options.filter,
	                items;

	            if(filter) {
	                items = this.element.find(filter);
	            } else {
	                items = this.element.children();
	            }

	            return items;
	        },

	        indexOf: function(element) {
	            var items = this._items(),
	                placeholder = this.placeholder,
	                draggedElement = this.draggedElement;

	            if(placeholder && element[0] == placeholder[0]) {
	                return items.not(draggedElement).index(element);
	            } else {
	                return items.not(placeholder).index(element);
	            }
	        },

	        items: function() {
	            var placeholder = this.placeholder,
	                items = this._items();

	            if(placeholder) {
	                items = items.not(placeholder);
	            }

	            return items;
	        },

	        _isEmpty: function() {
	            return !this.items().length;
	        },

	        _isLastHidden: function() {
	            return this.items().length === 1 && this.items().is(":hidden");
	        }

	    });

	    kendo.ui.plugin(Sortable);
	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(422));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(420)))

/***/ })

/******/ });

/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(508);


/***/ }),

/***/ 420:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(3);

/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 508:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(jQuery) {(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(509) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "splitter",
	    name: "Splitter",
	    category: "web",
	    description: "The Splitter widget provides an easy way to create a dynamic layout of resizable and collapsible panes.",
	    depends: [ "resizable" ]
	};

	(function ($, undefined) {
	    var kendo = window.kendo,
	        ui = kendo.ui,
	        keys = kendo.keys,
	        extend = $.extend,
	        proxy = $.proxy,
	        Widget = ui.Widget,
	        pxUnitsRegex = /^\d+(\.\d+)?px$/i,
	        percentageUnitsRegex = /^\d+(\.\d+)?%$/i,
	        NS = ".kendoSplitter",
	        EXPAND = "expand",
	        COLLAPSE = "collapse",
	        CONTENTLOAD = "contentLoad",
	        ERROR = "error",
	        RESIZE = "resize",
	        LAYOUTCHANGE = "layoutChange",
	        HORIZONTAL = "horizontal",
	        VERTICAL = "vertical",
	        MOUSEENTER = "mouseenter",
	        CLICK = "click",
	        PANE = "pane",
	        MOUSELEAVE = "mouseleave",
	        FOCUSED = "k-state-focused",
	        KPANE = "k-" + PANE,
	        PANECLASS = "." + KPANE;

	    function isPercentageSize(size) {
	        return percentageUnitsRegex.test(size);
	    }

	    function isPixelSize(size) {
	        return pxUnitsRegex.test(size) || /^\d+$/.test(size);
	    }

	    function isFluid(size) {
	        return !isPercentageSize(size) && !isPixelSize(size);
	    }

	    function calculateSize(size, total) {
	        var output = parseInt(size, 10);

	        if (isPercentageSize(size)) {
	            output = Math.floor(output * total / 100);
	        }

	        return output;
	    }

	    function panePropertyAccessor(propertyName, triggersResize) {
	        return function(pane, value) {
	            var paneConfig = this.element.find(pane).data(PANE);

	            if (arguments.length == 1) {
	                return paneConfig[propertyName];
	            }

	            paneConfig[propertyName] = value;

	            if (triggersResize) {
	                var splitter = this.element.data("kendo" + this.options.name);
	                splitter.resize(true);
	            }
	        };
	    }

	    var Splitter = Widget.extend({
	        init: function(element, options) {
	            var that = this,
	                isHorizontal;

	            Widget.fn.init.call(that, element, options);

	            that.wrapper = that.element;

	            isHorizontal = that.options.orientation.toLowerCase() != VERTICAL;
	            that.orientation = isHorizontal ? HORIZONTAL : VERTICAL;
	            that._dimension = isHorizontal ? "width" : "height";
	            that._keys = {
	                decrease: isHorizontal ? keys.LEFT : keys.UP,
	                increase: isHorizontal ? keys.RIGHT : keys.DOWN
	            };

	            that._resizeStep = 10;

	            that._marker = kendo.guid().substring(0, 8);

	            that._initPanes();

	            that.resizing = new PaneResizing(that);

	            that.element.triggerHandler("init" + NS);
	        },
	        events: [
	            EXPAND,
	            COLLAPSE,
	            CONTENTLOAD,
	            ERROR,
	            RESIZE,
	            LAYOUTCHANGE
	        ],

	        _addOverlays: function() {
	            this._panes().append("<div class='k-splitter-overlay k-overlay' />");
	        },

	        _removeOverlays: function() {
	            this._panes().children(".k-splitter-overlay").remove();
	        },

	        _attachEvents: function() {
	            var that = this,
	                orientation = that.options.orientation;

	            // do not use delegated events to increase performance of nested elements
	            that.element
	                .children(".k-splitbar-draggable-" + orientation)
	                    .on("keydown" + NS, proxy(that._keydown, that))
	                    .on("mousedown" + NS, function(e) { e.currentTarget.focus(); })
	                    .on("focus" + NS, function(e) { $(e.currentTarget).addClass(FOCUSED);  })
	                    .on("blur" + NS, function(e) { $(e.currentTarget).removeClass(FOCUSED);
	                        if (that.resizing) {
	                            that.resizing.end();
	                        }
	                    })
	                    .on(MOUSEENTER + NS, function() { $(this).addClass("k-splitbar-" + that.orientation + "-hover"); })
	                    .on(MOUSELEAVE + NS, function() { $(this).removeClass("k-splitbar-" + that.orientation + "-hover"); })
	                    .on("mousedown" + NS, proxy(that._addOverlays, that))
	                .end()
	                .children(".k-splitbar")
	                    .on("dblclick" + NS, proxy(that._togglePane, that))
	                    .children(".k-collapse-next, .k-collapse-prev").on(CLICK + NS, that._arrowClick(COLLAPSE)).end()
	                    .children(".k-expand-next, .k-expand-prev").on(CLICK + NS, that._arrowClick(EXPAND)).end()
	                .end();

	            $(window).on("resize" + NS + that._marker, proxy(that.resize, that, false));
	            $(document).on("mouseup" + NS + that._marker, proxy(that._removeOverlays, that));
	        },

	        _detachEvents: function() {
	            var that = this;

	            that.element
	                .children(".k-splitbar-draggable-" + that.orientation).off(NS).end()
	                .children(".k-splitbar").off("dblclick" + NS)
	                    .children(".k-collapse-next, .k-collapse-prev, .k-expand-next, .k-expand-prev").off(NS);

	            $(window).off(NS + that._marker);
	            $(document).off(NS + that._marker);
	        },

	        options: {
	            name: "Splitter",
	            orientation: HORIZONTAL,
	            panes: []
	        },

	        destroy: function() {
	            Widget.fn.destroy.call(this);

	            this._detachEvents();

	            if (this.resizing) {
	                this.resizing.destroy();
	            }

	            kendo.destroy(this.element);

	            this.wrapper = this.element = null;
	        },

	        _keydown: function(e) {
	            var that = this,
	                key = e.keyCode,
	                resizing = that.resizing,
	                target = $(e.currentTarget),
	                navigationKeys = that._keys,
	                increase = key === navigationKeys.increase,
	                decrease = key === navigationKeys.decrease,
	                pane;

	            if (increase || decrease) {
	                if (e.ctrlKey) {
	                    pane = target[decrease ? "next" : "prev"]();

	                    if (resizing && resizing.isResizing()) {
	                        resizing.end();
	                    }

	                    if (!pane[that._dimension]()) {
	                        that._triggerAction(EXPAND, pane);
	                    } else {
	                        that._triggerAction(COLLAPSE, target[decrease ? "prev" : "next"]());
	                    }
	                } else if (resizing) {
	                    resizing.move((decrease ? -1 : 1) * that._resizeStep, target);
	                }
	                e.preventDefault();
	            } else if (key === keys.ENTER && resizing) {
	                resizing.end();
	                e.preventDefault();
	            }
	        },

	        _initPanes: function() {
	            var panesConfig = this.options.panes || [];
	            var that = this;

	            this.element
	                .addClass("k-widget").addClass("k-splitter")
	                .children()
	                    .each(function(i, pane) {
	                        if (pane.nodeName.toLowerCase() != "script") {
	                            that._initPane(pane, panesConfig[i]);
	                        }
	                    });

	            this.resize();
	        },

	        _initPane: function(pane, config) {
	            pane = $(pane)
	                .attr("role", "group")
	                .addClass(KPANE);

	            pane.data(PANE, config ? config : {})
	                .toggleClass("k-scrollable", config ? config.scrollable !== false : true);

	            this.ajaxRequest(pane);
	        },

	        ajaxRequest: function(pane, url, data) {
	            var that = this,
	                paneConfig;

	            pane = that.element.find(pane);
	            paneConfig = pane.data(PANE);

	            url = url || paneConfig.contentUrl;

	            if (url) {
	                pane.append("<span class='k-icon k-i-loading k-pane-loading' />");

	                if (kendo.isLocalUrl(url)) {
	                    jQuery.ajax({
	                        url: url,
	                        data: data || {},
	                        type: "GET",
	                        dataType: "html",
	                        success: function (data) {
	                            that.angular("cleanup", function(){ return { elements: pane.get() }; });
	                            pane.html(data);
	                            that.angular("compile", function(){ return { elements: pane.get() }; });

	                            that.trigger(CONTENTLOAD, { pane: pane[0] });
	                        },
	                        error: function (xhr, status) {
	                            that.trigger(ERROR, {
	                                pane: pane[0],
	                                status: status,
	                                xhr: xhr
	                            });
	                        }
	                    });
	                } else {
	                    pane.removeClass("k-scrollable")
	                        .html("<iframe src='" + url + "' frameborder='0' class='k-content-frame'>" +
	                                "This page requires frames in order to show content" +
	                              "</iframe>");
	                }
	            }
	        },

	        _triggerAction: function(type, pane) {
	            if (!this.trigger(type, { pane: pane[0] })) {
	                this[type](pane[0]);
	            }
	        },

	        _togglePane: function(e) {
	            var that = this,
	                target = $(e.target),
	                arrow;

	            if (target.closest(".k-splitter")[0] != that.element[0]) {
	                return;
	            }

	            arrow = target.children(".k-icon:not(.k-resize-handle)");

	            if (arrow.length !== 1) {
	                return;
	            }

	            if (arrow.is(".k-collapse-prev")) {
	                that._triggerAction(COLLAPSE, target.prev());
	            } else if (arrow.is(".k-collapse-next")) {
	                that._triggerAction(COLLAPSE, target.next());
	            } else if (arrow.is(".k-expand-prev")) {
	                that._triggerAction(EXPAND, target.prev());
	            } else if (arrow.is(".k-expand-next")) {
	                that._triggerAction(EXPAND, target.next());
	            }
	        },
	        _arrowClick: function (arrowType) {
	            var that = this;

	            return function(e) {
	                var target = $(e.target),
	                    pane;

	                if (target.closest(".k-splitter")[0] != that.element[0]) {
	                    return;
	                }

	                if (target.is(".k-" + arrowType + "-prev")) {
	                    pane = target.parent().prev();
	                } else {
	                    pane = target.parent().next();
	                }
	                that._triggerAction(arrowType, pane);
	            };
	        },
	        _updateSplitBar: function(splitbar, previousPane, nextPane) {
	            var catIconIf = function(iconType, condition) {
	                   return condition ? "<div class='k-icon " + iconType + "' />" : "";
	                },
	                orientation = this.orientation,
	                draggable = (previousPane.resizable !== false) && (nextPane.resizable !== false),
	                prevCollapsible = previousPane.collapsible,
	                prevCollapsed = previousPane.collapsed,
	                nextCollapsible = nextPane.collapsible,
	                nextCollapsed = nextPane.collapsed;

	            splitbar.addClass("k-splitbar k-state-default k-splitbar-" + orientation)
	                    .attr("role", "separator")
	                    .attr("aria-expanded", !(prevCollapsed || nextCollapsed))
	                    .removeClass("k-splitbar-" + orientation + "-hover")
	                    .toggleClass("k-splitbar-draggable-" + orientation,
	                        draggable && !prevCollapsed && !nextCollapsed)
	                    .toggleClass("k-splitbar-static-" + orientation,
	                        !draggable && !prevCollapsible && !nextCollapsible)
	                    .html(
	                        catIconIf("k-collapse-prev k-i-arrow-60-up", prevCollapsible && !prevCollapsed && !nextCollapsed && orientation == VERTICAL) +
	                        catIconIf("k-collapse-prev k-i-arrow-60-left", prevCollapsible && !prevCollapsed && !nextCollapsed && orientation == HORIZONTAL) +
	                        catIconIf("k-expand-prev k-i-arrow-60-down", prevCollapsible && prevCollapsed && !nextCollapsed && orientation == VERTICAL) +
	                        catIconIf("k-expand-prev k-i-arrow-60-right", prevCollapsible && prevCollapsed && !nextCollapsed && orientation == HORIZONTAL) +
	                        catIconIf("k-resize-handle k-i-hbar", draggable && orientation == VERTICAL) +
	                        catIconIf("k-resize-handle k-i-vbar", draggable && orientation == HORIZONTAL) +
	                        catIconIf("k-collapse-next k-i-arrow-60-down", nextCollapsible && !nextCollapsed && !prevCollapsed && orientation == VERTICAL) +
	                        catIconIf("k-collapse-next k-i-arrow-60-right", nextCollapsible && !nextCollapsed && !prevCollapsed && orientation == HORIZONTAL) +
	                        catIconIf("k-expand-next k-i-arrow-60-up", nextCollapsible && nextCollapsed && !prevCollapsed && orientation == VERTICAL) +
	                        catIconIf("k-expand-next k-i-arrow-60-left", nextCollapsible && nextCollapsed && !prevCollapsed && orientation == HORIZONTAL)
	                    );

	            if (!draggable && !prevCollapsible && !nextCollapsible) {
	                splitbar.removeAttr("tabindex");
	            }
	        },
	        _updateSplitBars: function() {
	            var that = this;

	            this.element.children(".k-splitbar").each(function() {
	                var splitbar = $(this),
	                    previousPane = splitbar.prevAll(PANECLASS).first().data(PANE),
	                    nextPane = splitbar.nextAll(PANECLASS).first().data(PANE);

	                if (!nextPane) {
	                    return;
	                }

	                that._updateSplitBar(splitbar, previousPane, nextPane);
	            });
	        },
	        _removeSplitBars: function() {
	            this.element.children(".k-splitbar").remove();
	        },
	        _panes: function() {
	            if (!this.element) {
	                return $();
	            }
	            return this.element.children(PANECLASS);
	        },

	        _resize: function() {
	            var that = this,
	                element = that.element,
	                panes = element.children(PANECLASS),
	                isHorizontal = that.orientation == HORIZONTAL,
	                splitBars = element.children(".k-splitbar"),
	                splitBarsCount = splitBars.length,
	                sizingProperty = isHorizontal ? "width" : "height",
	                totalSize = element[sizingProperty]();

	            that.wrapper.addClass("k-splitter-resizing");

	            if (splitBarsCount === 0) {
	                splitBarsCount = panes.length - 1;
	                panes.slice(0, splitBarsCount)
	                     .after("<div tabindex='0' class='k-splitbar' data-marker='" + that._marker + "' />");

	                that._updateSplitBars();
	                splitBars = element.children(".k-splitbar");
	            } else {
	                that._updateSplitBars();
	            }

	            // discard splitbar sizes from total size
	            splitBars.each(function() {
	                totalSize -= this[isHorizontal ? "offsetWidth" : "offsetHeight"];
	            });

	            var sizedPanesWidth = 0,
	                sizedPanesCount = 0,
	                freeSizedPanes = $();

	            panes.css({ position: "absolute", top: 0 })
	                [sizingProperty](function() {
	                    var element = $(this),
	                        config = element.data(PANE) || {}, size;

	                    element.removeClass("k-state-collapsed");
	                    if (config.collapsed) {
	                        size = config.collapsedSize ? calculateSize(config.collapsedSize, totalSize) : 0;
	                        element.css("overflow", "hidden").addClass("k-state-collapsed");
	                    } else if (isFluid(config.size)) {
	                        freeSizedPanes = freeSizedPanes.add(this);
	                        return;
	                    } else { // sized in px/%, not collapsed
	                        size = calculateSize(config.size, totalSize);
	                    }

	                    sizedPanesCount++;
	                    sizedPanesWidth += size;

	                    return size;
	                });

	            totalSize -= sizedPanesWidth;

	            var freeSizePanesCount = freeSizedPanes.length,
	                freeSizePaneWidth = Math.floor(totalSize / freeSizePanesCount);

	            freeSizedPanes
	                .slice(0, freeSizePanesCount - 1)
	                    .css(sizingProperty, freeSizePaneWidth)
	                .end()
	                .eq(freeSizePanesCount - 1)
	                    .css(sizingProperty, totalSize - (freeSizePanesCount - 1) * freeSizePaneWidth);

	            // arrange panes
	            var sum = 0,
	                alternateSizingProperty = isHorizontal ? "height" : "width",
	                positioningProperty = isHorizontal ? "left" : "top",
	                sizingDomProperty = isHorizontal ? "offsetWidth" : "offsetHeight";

	            if (freeSizePanesCount === 0) {
	                var lastNonCollapsedPane = panes.filter(function() {
	                    return !(($(this).data(PANE) || {}).collapsed);
	                }).last();

	                lastNonCollapsedPane[sizingProperty](totalSize + lastNonCollapsedPane[0][sizingDomProperty]);
	            }

	            element.children()
	                .css(alternateSizingProperty, element[alternateSizingProperty]())
	                .each(function (i, child) {
	                    if (child.tagName.toLowerCase() != "script") {
	                        child.style[positioningProperty] = Math.floor(sum) + "px";
	                        sum += child[sizingDomProperty];
	                    }
	                });

	            that._detachEvents();
	            that._attachEvents();

	            that.wrapper.removeClass("k-splitter-resizing");

	            kendo.resize(panes);
	            that.trigger(LAYOUTCHANGE);
	        },

	        toggle: function(pane, expand) {
	            var that = this,
	                paneConfig;

	            pane = that.element.find(pane);
	            paneConfig = pane.data(PANE);

	            if (!expand && !paneConfig.collapsible) {
	                return;
	            }

	            if (arguments.length == 1) {
	                expand = paneConfig.collapsed === undefined ? false : paneConfig.collapsed;
	            }

	            paneConfig.collapsed = !expand;

	            if (paneConfig.collapsed) {
	                pane.css("overflow", "hidden");
	            } else {
	                pane.css("overflow", "");
	            }

	            that.resize(true);
	        },

	        collapse: function(pane) {
	            this.toggle(pane, false);
	        },

	        expand: function(pane) {
	            this.toggle(pane, true);
	        },

	        _addPane: function(config, idx, paneElement) {
	            var that = this;

	            if (paneElement.length) {
	                that.options.panes.splice(idx, 0, config);
	                that._initPane(paneElement, config);

	                that._removeSplitBars();

	                that.resize(true);
	            }

	            return paneElement;
	        },

	        append: function(config) {
	            config = config || {};

	            var that = this,
	                paneElement = $("<div />").appendTo(that.element);

	            return that._addPane(config, that.options.panes.length, paneElement);
	        },

	        insertBefore: function(config, referencePane) {
	            referencePane = $(referencePane);
	            config = config || {};

	            var that = this,
	                idx = that.wrapper.children(".k-pane").index(referencePane),
	                paneElement = $("<div />").insertBefore($(referencePane));

	            return that._addPane(config, idx, paneElement);
	        },

	        insertAfter: function(config, referencePane) {
	            referencePane = $(referencePane);
	            config = config || {};

	            var that = this,
	                idx = that.wrapper.children(".k-pane").index(referencePane),
	                paneElement = $("<div />").insertAfter($(referencePane));

	            return that._addPane(config, idx + 1, paneElement);
	        },

	        remove: function(pane) {
	            pane = $(pane);

	            var that = this;

	            if (pane.length) {
	                kendo.destroy(pane);
	                pane.each(function(idx, element){
	                    that.options.panes.splice(that.wrapper.children(".k-pane").index(element), 1);
	                    $(element).remove();
	                });

	                that._removeSplitBars();

	                if (that.options.panes.length) {
	                    that.resize(true);
	                }
	            }

	            return that;
	        },

	        size: panePropertyAccessor("size", true),

	        min: panePropertyAccessor("min"),

	        max: panePropertyAccessor("max")
	    });

	    ui.plugin(Splitter);

	    var verticalDefaults = {
	            sizingProperty: "height",
	            sizingDomProperty: "offsetHeight",
	            alternateSizingProperty: "width",
	            positioningProperty: "top",
	            mousePositioningProperty: "pageY"
	        };

	    var horizontalDefaults = {
	            sizingProperty: "width",
	            sizingDomProperty: "offsetWidth",
	            alternateSizingProperty: "height",
	            positioningProperty: "left",
	            mousePositioningProperty: "pageX"
	        };

	    function PaneResizing(splitter) {
	        var that = this,
	            orientation = splitter.orientation;

	        that.owner = splitter;
	        that._element = splitter.element;
	        that.orientation = orientation;

	        extend(that, orientation === HORIZONTAL ? horizontalDefaults : verticalDefaults);

	        that._resizable = new kendo.ui.Resizable(splitter.element, {
	            orientation: orientation,
	            handle: ".k-splitbar-draggable-" + orientation + "[data-marker=" + splitter._marker + "]",
	            hint: proxy(that._createHint, that),
	            start: proxy(that._start, that),
	            max: proxy(that._max, that),
	            min: proxy(that._min, that),
	            invalidClass:"k-restricted-size-" + orientation,
	            resizeend: proxy(that._stop, that)
	        });
	    }

	    PaneResizing.prototype = {
	        press: function(target) {
	            this._resizable.press(target);
	        },

	        move: function(delta, target) {
	            if (!this.pressed) {
	                this.press(target);
	                this.pressed = true;
	            }

	            if (!this._resizable.target) {
	                this._resizable.press(target);
	            }

	            this._resizable.move(delta);
	        },

	        end: function() {
	            this._resizable.end();
	            this.pressed = false;
	        },

	        destroy: function() {
	            this._resizable.destroy();
	            this._resizable = this._element = this.owner = null;
	        },

	        isResizing: function() {
	            return this._resizable.resizing;
	        },

	        _createHint: function(handle) {
	            var that = this;
	            return $("<div class='k-ghost-splitbar k-ghost-splitbar-" + that.orientation + " k-state-default' />")
	                        .css(that.alternateSizingProperty, handle[that.alternateSizingProperty]());
	        },

	        _start: function(e) {
	            var that = this,
	                splitbar = $(e.currentTarget),
	                previousPane = splitbar.prev(),
	                nextPane = splitbar.next(),
	                previousPaneConfig = previousPane.data(PANE),
	                nextPaneConfig = nextPane.data(PANE),
	                prevBoundary = parseInt(previousPane[0].style[that.positioningProperty], 10),
	                nextBoundary = parseInt(nextPane[0].style[that.positioningProperty], 10) + nextPane[0][that.sizingDomProperty] - splitbar[0][that.sizingDomProperty],
	                totalSize = parseInt(that._element.css(that.sizingProperty), 10),
	                toPx = function (value) {
	                    var val = parseInt(value, 10);
	                    return (isPixelSize(value) ? val : (totalSize * val) / 100) || 0;
	                },
	                prevMinSize = toPx(previousPaneConfig.min),
	                prevMaxSize = toPx(previousPaneConfig.max) || nextBoundary - prevBoundary,
	                nextMinSize = toPx(nextPaneConfig.min),
	                nextMaxSize = toPx(nextPaneConfig.max) || nextBoundary - prevBoundary;

	            that.previousPane = previousPane;
	            that.nextPane = nextPane;
	            that._maxPosition = Math.min(nextBoundary - nextMinSize, prevBoundary + prevMaxSize);
	            that._minPosition = Math.max(prevBoundary + prevMinSize, nextBoundary - nextMaxSize);
	        },
	        _max: function() {
	              return this._maxPosition;
	        },
	        _min: function() {
	            return this._minPosition;
	        },
	        _stop: function(e) {
	            var that = this,
	                splitbar = $(e.currentTarget),
	                owner = that.owner;

	            owner._panes().children(".k-splitter-overlay").remove();

	            if (e.keyCode !== kendo.keys.ESC) {
	                var ghostPosition = e.position,
	                    previousPane = splitbar.prev(),
	                    nextPane = splitbar.next(),
	                    previousPaneConfig = previousPane.data(PANE),
	                    nextPaneConfig = nextPane.data(PANE),
	                    previousPaneNewSize = ghostPosition - parseInt(previousPane[0].style[that.positioningProperty], 10),
	                    nextPaneNewSize = parseInt(nextPane[0].style[that.positioningProperty], 10) + nextPane[0][that.sizingDomProperty] - ghostPosition - splitbar[0][that.sizingDomProperty],
	                    fluidPanesCount = that._element.children(PANECLASS).filter(function() { return isFluid($(this).data(PANE).size); }).length;

	                if (!isFluid(previousPaneConfig.size) || fluidPanesCount > 1) {
	                    if (isFluid(previousPaneConfig.size)) {
	                        fluidPanesCount--;
	                    }

	                    previousPaneConfig.size = previousPaneNewSize + "px";
	                }

	                if (!isFluid(nextPaneConfig.size) || fluidPanesCount > 1) {
	                    nextPaneConfig.size = nextPaneNewSize + "px";
	                }

	                owner.resize(true);
	            }

	            return false;
	        }
	    };

	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(422));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(420)))

/***/ }),

/***/ 509:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(32);

/***/ })

/******/ });

/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(510);


/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 427:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(4);

/***/ }),

/***/ 510:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(427) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "tabstrip",
	    name: "TabStrip",
	    category: "web",
	    description: "The TabStrip widget displays a collection of tabs with associated tab content.",
	    depends: [ "data" ]
	};

	(function ($, undefined) {
	    var kendo = window.kendo,
	        ui = kendo.ui,
	        keys = kendo.keys,
	        map = $.map,
	        each = $.each,
	        trim = $.trim,
	        extend = $.extend,
	        isFunction = kendo.isFunction,
	        template = kendo.template,
	        outerWidth = kendo._outerWidth,
	        outerHeight = kendo._outerHeight,
	        Widget = ui.Widget,
	        excludedNodesRegExp = /^(a|div)$/i,
	        NS = ".kendoTabStrip",
	        IMG = "img",
	        HREF = "href",
	        PREV = "prev",
	        SHOW = "show",
	        LINK = "k-link",
	        LAST = "k-last",
	        CLICK = "click",
	        ERROR = "error",
	        EMPTY = ":empty",
	        IMAGE = "k-image",
	        FIRST = "k-first",
	        SELECT = "select",
	        ACTIVATE = "activate",
	        CONTENT = "k-content",
	        CONTENTURL = "contentUrl",
	        MOUSEENTER = "mouseenter",
	        MOUSELEAVE = "mouseleave",
	        CONTENTLOAD = "contentLoad",
	        DISABLEDSTATE = "k-state-disabled",
	        DEFAULTSTATE = "k-state-default",
	        ACTIVESTATE = "k-state-active",
	        FOCUSEDSTATE = "k-state-focused",
	        HOVERSTATE = "k-state-hover",
	        TABONTOP = "k-tab-on-top",
	        NAVIGATABLEITEMS = ".k-item:not(." + DISABLEDSTATE + ")",
	        HOVERABLEITEMS = ".k-tabstrip-items > " + NAVIGATABLEITEMS + ":not(." + ACTIVESTATE + ")",

	        templates = {
	            content: template(
	                "<div class='k-content'#= contentAttributes(data) # role='tabpanel'>#= content(item) #</div>"
	            ),
	            itemWrapper: template(
	                "<#= tag(item) # class='k-link'#= contentUrl(item) ##= textAttributes(item) #>" +
	                    "#= image(item) ##= sprite(item) ##= text(item) #" +
	                "</#= tag(item) #>"
	            ),
	            item: template(
	                "<li class='#= wrapperCssClass(group, item) #' role='tab' #=item.active ? \"aria-selected='true'\" : ''#>" +
	                    "#= itemWrapper(data) #" +
	                "</li>"
	            ),
	            image: template("<img class='k-image' alt='' src='#= imageUrl #' />"),
	            sprite: template("<span class='k-sprite #= spriteCssClass #'></span>"),
	            empty: template("")
	        },

	        rendering = {
	            wrapperCssClass: function (group, item) {
	                var result = "k-item",
	                    index = item.index;

	                if (item.enabled === false) {
	                    result += " k-state-disabled";
	                } else {
	                    result += " k-state-default";
	                }

	                if (index === 0) {
	                    result += " k-first";
	                }

	                if (index == group.length-1) {
	                    result += " k-last";
	                }

	                return result;
	            },
	            textAttributes: function(item) {
	                return item.url ? " href='" + item.url + "'" : "";
	            },
	            text: function(item) {
	                return item.encoded === false ? item.text : kendo.htmlEncode(item.text);
	            },
	            tag: function(item) {
	                return item.url ? "a" : "span";
	            },
	            contentAttributes: function(content) {
	                return content.active !== true ? " style='display:none' aria-hidden='true' aria-expanded='false'" : "";
	            },
	            content: function(item) {
	                return item.content ? item.content : item.contentUrl ? "" : "&nbsp;";
	            },
	            contentUrl: function(item) {
	                return item.contentUrl ? kendo.attr("content-url") + '="' + item.contentUrl + '"' : "";
	            }
	        };

	    function updateTabClasses (tabs) {
	        tabs.children(IMG)
	            .addClass(IMAGE);

	        tabs.children("a")
	            .addClass(LINK)
	            .children(IMG)
	            .addClass(IMAGE);

	        tabs.filter(":not([disabled]):not([class*=k-state-disabled])")
	            .addClass(DEFAULTSTATE);

	        tabs.filter("li[disabled]")
	            .addClass(DISABLEDSTATE)
	            .removeAttr("disabled");

	        tabs.filter(":not([class*=k-state])")
	            .children("a")
	            .filter(":focus")
	            .parent()
	            .addClass(ACTIVESTATE + " " + TABONTOP);

	        tabs.attr("role", "tab");
	        tabs.filter("." + ACTIVESTATE)
	            .attr("aria-selected", true);


	        tabs.each(function() {
	            var item = $(this);

	            if (!item.children("." + LINK).length) {
	                item
	                    .contents()      // exclude groups, real links, templates and empty text nodes
	                    .filter(function() { return (!this.nodeName.match(excludedNodesRegExp) && !(this.nodeType == 3 && !trim(this.nodeValue))); })
	                    .wrapAll("<span UNSELECTABLE='on' class='" + LINK + "'/>");
	            }
	        });

	    }

	    function updateFirstLast (tabGroup) {
	        var tabs = tabGroup.children(".k-item");

	        tabs.filter(".k-first:not(:first-child)").removeClass(FIRST);
	        tabs.filter(".k-last:not(:last-child)").removeClass(LAST);
	        tabs.filter(":first-child").addClass(FIRST);
	        tabs.filter(":last-child").addClass(LAST);
	    }

	    function scrollButtonHtml(buttonClass, iconClass) {
	        return "<span class='k-button k-button-icon k-bare k-tabstrip-" + buttonClass + "' unselectable='on'><span class='k-icon " + iconClass + "'></span></span>";
	    }

	    var TabStrip = Widget.extend({
	        init: function(element, options) {
	            var that = this, value;

	            Widget.fn.init.call(that, element, options);

	            that._animations(that.options);

	            options = that.options;

	            that._contentUrls = options.contentUrls || [];

	            that._wrapper();

	            that._isRtl = kendo.support.isRtl(that.wrapper);

	            that._tabindex();

	            that._updateClasses();

	            that._dataSource();

	            if (options.dataSource) {
	                that.dataSource.fetch();
	            }

	            that._tabPosition();

	            that._scrollable();

	            if (that._contentUrls.length) {
	                that.wrapper.find(".k-tabstrip-items > .k-item")
	                    .each(function(index, item) {
	                        var url = that._contentUrls[index];

	                        if (typeof url === 'string') {
	                            $(item).find(">." + LINK).data(CONTENTURL, url);
	                        }
	                    });
	            } else {
	                that._contentUrls.length = that.tabGroup.find("li.k-item").length;
	            }

	            that.wrapper
	                .on(MOUSEENTER + NS + " " + MOUSELEAVE + NS, HOVERABLEITEMS, that._toggleHover)
	                .on("focus" + NS, $.proxy(that._active, that))
	                .on("blur" + NS, function() { that._current(null); });

	            that._keyDownProxy = $.proxy(that._keydown, that);

	            if (options.navigatable) {
	                that.wrapper.on("keydown" + NS, that._keyDownProxy);
	            }

	            if (that.options.value) {
	                value = that.options.value;
	            }

	            that.wrapper.children(".k-tabstrip-items")
	                .on(CLICK + NS, ".k-state-disabled .k-link", false)
	                .on(CLICK + NS, " > " + NAVIGATABLEITEMS, function (e) {
	                    var wr = that.wrapper[0];
	                    if (wr !== document.activeElement) {
	                        var msie = kendo.support.browser.msie;
	                        if (msie) {
	                            try {
	                                // does not scroll to the active element
	                                wr.setActive();
	                            } catch (j) {
	                                wr.focus();
	                            }
	                        } else {
	                            wr.focus();
	                        }
	                    }

	                    if (that._click($(e.currentTarget))) {
	                        e.preventDefault();
	                    }
	                });

	            var selectedItems = that.tabGroup.children("li." + ACTIVESTATE),
	                content = that.contentHolder(selectedItems.index());

	            if (selectedItems[0] && content.length > 0 && content[0].childNodes.length === 0) {
	                that.activateTab(selectedItems.eq(0));
	            }

	            that.element.attr("role", "tablist");

	            if (that.element[0].id) {
	                that._ariaId = that.element[0].id + "_ts_active";
	            }
	            that.value(value);
	            kendo.notify(that);
	        },

	        _active: function () {
	            var item = this.tabGroup.children().filter("." + ACTIVESTATE);

	            item = item[0] ? item : this._endItem("first");
	            if (item[0]) {
	                this._current(item);
	            }
	        },

	        _endItem: function(action) {
	            return this.tabGroup.children(NAVIGATABLEITEMS)[action]();
	        },

	        _item: function(item, action) {
	            var endItem;
	            if (action === PREV) {
	                endItem = "last";
	            } else {
	                endItem = "first";
	            }

	            if (!item) {
	                return this._endItem(endItem);
	            }

	            item = item[action]();

	            if (!item[0]) {
	                item = this._endItem(endItem);
	            }

	            if (item.hasClass(DISABLEDSTATE)) {
	                item = this._item(item, action);
	            }

	            return item;
	        },

	        _current: function (candidate) {
	            var that = this,
	                focused = that._focused,
	                id = that._ariaId;

	            if (candidate === undefined) {
	                return focused;
	            }

	            if (focused) {
	                if (focused[0].id === id) {
	                    focused.removeAttr("id");
	                }
	                focused.removeClass(FOCUSEDSTATE);
	            }

	            if (candidate) {
	                if (!candidate.hasClass(ACTIVESTATE)) {
	                    candidate.addClass(FOCUSEDSTATE);
	                }

	                that.element.removeAttr("aria-activedescendant");

	                id = candidate[0].id || id;

	                if (id) {
	                    candidate.attr("id", id);
	                    that.element.attr("aria-activedescendant", id);
	                }
	            }

	            that._focused = candidate;
	        },

	        _keydown: function(e) {
	            var that = this,
	                key = e.keyCode,
	                current = that._current(),
	                rtl = that._isRtl,
	                action;

	            if (e.target != e.currentTarget) {
	                return;
	            }

	            if (key == keys.DOWN || key == keys.RIGHT) {
	                action = rtl ? PREV : "next";
	            } else if (key == keys.UP || key == keys.LEFT) {
	                action = rtl ? "next" : PREV;
	            } else if (key == keys.ENTER || key == keys.SPACEBAR) {
	                that._click(current);
	                e.preventDefault();
	            } else if (key == keys.HOME) {
	                that._click(that._endItem("first"));
	                e.preventDefault();
	                return;
	            } else if (key == keys.END) {
	                that._click(that._endItem("last"));
	                e.preventDefault();
	                return;
	            }

	            if (action) {
	                that._click(that._item(current, action));
	                e.preventDefault();
	            }
	        },

	        _dataSource: function() {
	            var that = this;

	            if (that.dataSource && that._refreshHandler) {
	                that.dataSource.unbind("change", that._refreshHandler);
	            } else {
	                that._refreshHandler = $.proxy(that.refresh, that);
	            }

	            that.dataSource = kendo.data.DataSource.create(that.options.dataSource)
	                                .bind("change", that._refreshHandler);
	        },

	        setDataSource: function(dataSource) {
	            var that = this;

	            that.options.dataSource = dataSource;
	            that._dataSource();
	            that.dataSource.fetch();
	        },

	        _animations: function(options) {
	            if (options && ("animation" in options) && !options.animation) {
	                options.animation = { open: { effects: {} }, close: { effects: {} } }; // No animation
	            }
	        },

	        refresh: function(e) {
	            var that = this,
	                options = that.options,
	                text = kendo.getter(options.dataTextField),
	                content = kendo.getter(options.dataContentField),
	                contentUrl = kendo.getter(options.dataContentUrlField),
	                image = kendo.getter(options.dataImageUrlField),
	                url = kendo.getter(options.dataUrlField),
	                sprite = kendo.getter(options.dataSpriteCssClass),
	                idx,
	                tabs = [],
	                tab,
	                action,
	                view = that.dataSource.view(),
	                length;


	            e = e || {};
	            action = e.action;

	            if (action) {
	               view = e.items;
	            }

	            for (idx = 0, length = view.length; idx < length; idx ++) {
	                tab = {
	                    text: text(view[idx])
	                };

	                if (options.dataContentField) {
	                    tab.content = content(view[idx]);
	                }

	                if (options.dataContentUrlField) {
	                    tab.contentUrl = contentUrl(view[idx]);
	                }

	                if (options.dataUrlField) {
	                    tab.url = url(view[idx]);
	                }

	                if (options.dataImageUrlField) {
	                    tab.imageUrl = image(view[idx]);
	                }

	                if (options.dataSpriteCssClass) {
	                    tab.spriteCssClass = sprite(view[idx]);
	                }

	                tabs[idx] = tab;
	            }

	            if (e.action == "add") {
	                if (e.index < that.tabGroup.children().length) {
	                    that.insertBefore(tabs, that.tabGroup.children().eq(e.index));
	                } else {
	                    that.append(tabs);
	                }
	            } else if (e.action == "remove") {
	                for (idx = 0; idx < view.length; idx++) {
	                   that.remove(e.index);
	                }
	            } else if (e.action == "itemchange") {
	                idx = that.dataSource.view().indexOf(view[0]);
	                if (e.field === options.dataTextField) {
	                    that.tabGroup.children().eq(idx).find(".k-link").text(view[0].get(e.field));
	                }

	                if (e.field === options.dataUrlField) {
	                    that._contentUrls[idx] = view[0].get(e.field);
	                }
	            } else {
	                that.trigger("dataBinding");
	                that.remove("li");
	                that._contentUrls = [];
	                that.append(tabs);
	                that.trigger("dataBound");
	            }
	        },

	        value: function(value) {
	            var that = this;

	            if (value !== undefined) {
	                if (value != that.value()) {
	                   that.tabGroup.children().each(function() {
	                        if ($.trim($(this).text()) == value) {
	                            that.select(this);
	                        }
	                   });
	                }
	            } else {
	                return that.select().text();
	            }
	        },

	        items: function() {
	            return this.tabGroup[0].children;
	        },

	        setOptions: function(options) {
	            var that = this,
	                animation = that.options.animation;

	            that._animations(options);

	            if (options.contentUrls) {
	                that._contentUrls = options.contentUrls;
	            }

	            options.animation = extend(true, animation, options.animation);

	            if (options.navigatable) {
	                that.wrapper.on("keydown" + NS,  that._keyDownProxy);
	            } else {
	                that.wrapper.off("keydown" + NS,  that._keyDownProxy);
	            }

	            Widget.fn.setOptions.call(that, options);
	        },

	        events: [
	            SELECT,
	            ACTIVATE,
	            SHOW,
	            ERROR,
	            CONTENTLOAD,
	            "change",
	            "dataBinding",
	            "dataBound"
	        ],

	        options: {
	            name: "TabStrip",
	            dataTextField: "",
	            dataContentField: "",
	            dataImageUrlField: "",
	            dataUrlField: "",
	            dataSpriteCssClass: "",
	            dataContentUrlField: "",
	            tabPosition: "top",
	            animation: {
	                open: {
	                    effects: "expand:vertical fadeIn",
	                    duration: 200
	                },
	                close: { // if close animation effects are defined, they will be used instead of open.reverse
	                    duration: 200
	                }
	            },
	            collapsible: false,
	            navigatable: true,
	            contentUrls: false,
	            scrollable: {
	                distance: 200
	            }
	        },

	        destroy: function() {
	            var that = this,
	            scrollWrap = that.scrollWrap;

	            Widget.fn.destroy.call(that);

	            if (that._refreshHandler) {
	                that.dataSource.unbind("change", that._refreshHandler);
	            }

	            that.wrapper.off(NS);
	            that.wrapper.children(".k-tabstrip-items").off(NS);

	            if (that._scrollableModeActive) {
	                that._scrollPrevButton.off().remove();
	                that._scrollNextButton.off().remove();
	            }

	            kendo.destroy(that.wrapper);
	            scrollWrap.children(".k-tabstrip").unwrap();
	        },

	        select: function (element) {
	            var that = this;

	            if (arguments.length === 0) {
	                return that.tabGroup.children("li." + ACTIVESTATE);
	            }

	            if (!isNaN(element)) {
	                element = that.tabGroup.children().get(element);
	            }

	            element = that.tabGroup.find(element);
	            $(element).each(function (index, item) {
	                item = $(item);
	                if (!item.hasClass(ACTIVESTATE) && !that.trigger(SELECT, { item: item[0], contentElement: that.contentHolder(item.index())[0] })) {
	                    that.activateTab(item);
	                }
	            });

	            return that;
	        },

	        enable: function (element, state) {
	            this._toggleDisabled(element, state !== false);

	            return this;
	        },

	        disable: function (element) {
	            this._toggleDisabled(element, false);

	            return this;
	        },

	          reload: function (element) {
	            element = this.tabGroup.find(element);
	            var that = this;
	            var contentUrls = that._contentUrls;

	            element.each(function () {
	                var item = $(this),
	                    contentUrl = item.find("." + LINK).data(CONTENTURL) || contentUrls[item.index()],
	                    content = that.contentHolder(item.index());

	                if (contentUrl) {
	                    that.ajaxRequest(item, content, null, contentUrl);
	                }
	            });

	            return that;
	        },

	        append: function (tab) {
	            var that = this,
	                inserted = that._create(tab);

	            each(inserted.tabs, function (idx) {
	                var contents = inserted.contents[idx];
	                that.tabGroup.append(this);
	                if (that.options.tabPosition == "bottom") {
	                    that.tabGroup.before(contents);
	                } else if (that._scrollableModeActive) {
	                    that._scrollPrevButton.before(contents);
	                } else {
	                    that.wrapper.append(contents);
	                }
	                that.angular("compile", function(){ return { elements: [ contents ] }; });
	            });

	            updateFirstLast(that.tabGroup);
	            that._updateContentElements();
	            that.resize(true);

	            return that;
	        },

	        _appendUrlItem: function(url) {
	            this._contentUrls.push(url);
	        },

	        _moveUrlItem: function(from, to) {
	            this._contentUrls.splice(to, 0, this._contentUrls.splice(from, 1)[0]);
	        },

	        _removeUrlItem: function(index) {
	            this._contentUrls.splice(index, 1);
	        },

	        insertBefore: function (tab, referenceTab) {
	            if ($(tab).is($(referenceTab))) {
	                referenceTab = this.tabGroup.find(referenceTab).next();
	            } else {
	                referenceTab = this.tabGroup.find(referenceTab);
	            }

	            var that = this,
	                inserted = that._create(tab),
	                referenceContent = that.element.find("#" + referenceTab.attr("aria-controls"));

	            each(inserted.tabs, function (idx) {
	                var contents = inserted.contents[idx];
	                var fromIndex = inserted.newTabsCreated ? that._contentUrls.length - (inserted.tabs.length - idx) : $(contents).index() - 1;

	                referenceTab.before(this);
	                referenceContent.before(contents);

	                that._moveUrlItem(fromIndex, $(this).index());
	                that.angular("compile", function(){ return { elements: [ contents ] }; });
	            });

	            updateFirstLast(that.tabGroup);
	            that._updateContentElements(inserted.newTabsCreated);
	            that.resize(true);

	            return that;
	        },

	        insertAfter: function (tab, referenceTab) {
	            if ($(tab).is($(referenceTab))) {
	                referenceTab = this.tabGroup.find(referenceTab).prev();
	            } else {
	                referenceTab = this.tabGroup.find(referenceTab);
	            }

	            var that = this,
	                inserted = that._create(tab),
	                referenceContent = that.element.find("#" + referenceTab.attr("aria-controls"));

	            each(inserted.tabs, function (idx) {
	                var contents = inserted.contents[idx];
	                var fromIndex = inserted.newTabsCreated ? that._contentUrls.length - (inserted.tabs.length - idx) : $(contents).index() - 1;

	                referenceTab.after(this);
	                referenceContent.after(contents);

	                that._moveUrlItem(fromIndex, $(this).index());
	                that.angular("compile", function(){ return { elements: [ contents ] }; });
	            });

	            updateFirstLast(that.tabGroup);
	            that._updateContentElements(inserted.newTabsCreated);
	            that.resize(true);

	            return that;
	        },

	        remove: function (elements) {
	            var that = this;
	            var type = typeof elements;
	            var contents;

	            if (type === "string") {
	                elements = that.tabGroup.find(elements);
	            } else if (type === "number") {
	                elements = that.tabGroup.children().eq(elements);
	            }

	            contents = elements.map(function () {
	                var idx = $(this).index();
	                var content = that.contentElement(idx);

	                kendo.destroy(content);
	                that._removeUrlItem(idx);

	                return content;
	            });

	            elements.remove();
	            contents.empty();
	            contents.remove();

	            that._updateContentElements();
	            that.resize(true);

	            return that;
	        },

	        _create: function (tab) {
	            var that = this,
	            tabs,
	            contents,
	            content,
	            newTabsCreated = false;

	            tab = tab instanceof kendo.data.ObservableArray ? tab.toJSON() : tab;

	            if ($.isPlainObject(tab) || $.isArray(tab)) {
	                tab = $.isArray(tab) ? tab : [tab];
	                newTabsCreated = true;

	                tabs = map(tab, function (value, idx) {
	                            that._appendUrlItem(tab[idx].contentUrl || null);

	                            return $(TabStrip.renderItem({
	                                group: that.tabGroup,
	                                item: extend(value, { index: idx })
	                            }));
	                        });

	                contents = map( tab, function (value, idx) {
	                            if (typeof value.content == "string" || value.contentUrl) {
	                                return $(TabStrip.renderContent({
	                                    item: extend(value, { index: idx })
	                                }));
	                            }
	                        });
	            } else {
	                if (typeof tab == "string" && tab[0] != "<") {
	                    tabs = that.element.find(tab);
	                } else {
	                    tabs = $(tab);
	                }
	                contents = $();
	                tabs.each(function () {
	                    if (/k-tabstrip-items/.test(this.parentNode.className)) {
	                        var element = that.element.find("#" + this.getAttribute("aria-controls"));
	                        content = element;
	                    } else {
	                        content = $("<div class='" + CONTENT + "'/>");
	                    }

	                    contents = contents.add(content);
	                });

	                updateTabClasses(tabs);
	            }

	            return { tabs: tabs, contents: contents, newTabsCreated: newTabsCreated };
	        },

	        _toggleDisabled: function(element, enable) {
	            element = this.tabGroup.find(element);
	            element.each(function () {
	                $(this)
	                    .toggleClass(DEFAULTSTATE, enable)
	                    .toggleClass(DISABLEDSTATE, !enable);
	            });
	        },

	        _updateClasses: function() {
	            var that = this,
	                tabs, activeItem, activeTab;

	            that.wrapper.addClass("k-widget k-header k-tabstrip");

	            that.tabGroup = that.wrapper.children("ul").addClass("k-tabstrip-items k-reset");

	            if (!that.tabGroup[0]) {
	                that.tabGroup = $("<ul class='k-tabstrip-items k-reset'/>").appendTo(that.wrapper);
	            }

	            tabs = that.tabGroup.find("li").addClass("k-item");

	            if (tabs.length) {
	                activeItem = tabs.filter("." + ACTIVESTATE).index();
	                activeTab = activeItem >= 0 ? activeItem : undefined;

	                that.tabGroup // Remove empty text nodes
	                    .contents()
	                    .filter(function () { return (this.nodeType == 3 && !trim(this.nodeValue)); })
	                    .remove();
	            }

	            if (activeItem >= 0) {
	                tabs.eq(activeItem).addClass(TABONTOP);
	            }

	            that.contentElements = that.wrapper.children("div");

	            that.contentElements
	                .addClass(CONTENT)
	                .eq(activeTab)
	                .addClass(ACTIVESTATE)
	                .css({ display: "block" });

	            if (tabs.length) {
	                updateTabClasses(tabs);

	                updateFirstLast(that.tabGroup);
	                that._updateContentElements(true);
	            }
	        },

	        _elementId: function(element, idx) {
	            var elementId = element.attr("id");
	            var wrapperId = this.element.attr("id");

	            if (!elementId || elementId.indexOf(wrapperId + "-") > -1) {
	                var tabStripID = (wrapperId || kendo.guid()) + "-";

	                return tabStripID + (idx + 1);
	            }

	            return elementId;
	        },

	        _updateContentElements: function(isInitialUpdate) {
	            var that = this,
	                contentUrls = that._contentUrls,
	                items = that.tabGroup.children(".k-item"),
	                contentElements = that.wrapper.children("div"),
	                _elementId = that._elementId.bind(that);

	            if (contentElements.length && (items.length > contentElements.length)) {
	                contentElements.each(function(idx) {
	                    var id = _elementId($(this), idx);
	                    var item = items.filter("[aria-controls=" + (this.id || 0) + "]")[0];

	                    if (!item && isInitialUpdate) {
	                         item = items[idx];
	                    }

	                    if (item) {
	                        item.setAttribute("aria-controls", id);
	                    }

	                    this.setAttribute("id", id);
	                });
	            } else {
	                items.each(function(idx) {
	                    var currentContent = contentElements.eq(idx);
	                    var id = _elementId(currentContent, idx);

	                    this.setAttribute("aria-controls", id);

	                    if (!currentContent.length && contentUrls[idx]) {
	                        $("<div class='" + CONTENT + "'/>").appendTo(that.wrapper).attr("id", id);
	                    } else {
	                        currentContent.attr("id", id);

	                        if (!$(this).children(".k-loading")[0] && !contentUrls[idx]) {
	                            $("<span class='k-loading k-complete'/>").prependTo(this);
	                        }
	                    }
	                    currentContent.attr("role", "tabpanel");
	                    currentContent.filter(":not(." + ACTIVESTATE + ")").attr("aria-hidden", true).attr("aria-expanded", false);
	                    currentContent.filter("." + ACTIVESTATE).attr("aria-expanded", true);
	                });
	            }

	            that.contentElements = that.contentAnimators = that.wrapper.children("div"); // refresh the contents

	            that.tabsHeight = outerHeight(that.tabGroup) +
	                              parseInt(that.wrapper.css("border-top-width"), 10) +
	                              parseInt(that.wrapper.css("border-bottom-width"), 10);

	            if (kendo.kineticScrollNeeded && kendo.mobile.ui.Scroller) {
	                kendo.touchScroller(that.contentElements);
	                that.contentElements = that.contentElements.children(".km-scroll-container");
	            }
	        },

	        _wrapper: function() {
	            var that = this;

	            if (that.element.is("ul")) {
	                that.wrapper = that.element.wrapAll("<div />").parent();
	            } else {
	                that.wrapper = that.element;
	            }

	            that.scrollWrap = that.wrapper.parent(".k-tabstrip-wrapper");

	            if (!that.scrollWrap[0]) {
	                that.scrollWrap = that.wrapper.wrapAll("<div class='k-tabstrip-wrapper' />").parent();
	            }
	        },

	        _tabPosition: function() {
	            var that = this,
	                tabPosition = that.options.tabPosition;

	            that.wrapper.addClass("k-floatwrap k-tabstrip-" + tabPosition);

	            if (tabPosition == "bottom") {
	                that.tabGroup.appendTo(that.wrapper);
	            }

	            that.resize(true);
	        },

	        _setContentElementsDimensions: function () {
	            var that = this,
	                tabPosition = that.options.tabPosition;

	            if (tabPosition == "left" || tabPosition == "right") {
	                var contentDivs = that.wrapper.children(".k-content"),
	                    activeDiv = contentDivs.filter(":visible"),
	                    marginStyleProperty = "margin-" + tabPosition,
	                    tabGroup = that.tabGroup,
	                    margin = outerWidth(tabGroup);

	                var minHeight = Math.ceil(tabGroup.height()) -
	                    parseInt(activeDiv.css("padding-top"), 10) -
	                    parseInt(activeDiv.css("padding-bottom"), 10) -
	                    parseInt(activeDiv.css("border-top-width"), 10) -
	                    parseInt(activeDiv.css("border-bottom-width"), 10);

	                setTimeout(function () {
	                    contentDivs.css(marginStyleProperty, margin).css("min-height", minHeight);
	                });
	            }
	        },

	        _resize: function() {
	            this._setContentElementsDimensions();
	            this._scrollable();
	        },

	        _sizeScrollWrap: function (element) {
	            if (element.is(":visible")) {
	                var tabPosition = this.options.tabPosition;
	                var h = Math.floor(outerHeight(element, true)) + (tabPosition === "left" || tabPosition === "right" ? 2 : this.tabsHeight);

	                this.scrollWrap.css("height", h).css("height");
	            }
	        },

	        _toggleHover: function(e) {
	            $(e.currentTarget).toggleClass(HOVERSTATE, e.type == MOUSEENTER);
	        },

	        _click: function (item) {
	            var that = this,
	                link = item.find("." + LINK),
	                href = link.attr(HREF),
	                collapse = that.options.collapsible,
	                index = item.index(),
	                contentHolder = that.contentHolder(index),
	                prevent, isAnchor;

	            if (item.closest(".k-widget")[0] != that.wrapper[0]) {
	                return;
	            }

	            if (item.is("." + DISABLEDSTATE + (!collapse ? ",." + ACTIVESTATE : ""))) {
	                return true;
	            }

	            isAnchor = link.data(CONTENTURL) || that._contentUrls[index] || (href && (href.charAt(href.length - 1) == "#" || href.indexOf("#" + that.element[0].id + "-") != -1));
	            prevent = !href || isAnchor;

	            if (that.tabGroup.children("[data-animating]").length) {
	                return prevent;
	            }

	            if (that.trigger(SELECT, { item: item[0], contentElement: contentHolder[0] })) {
	                return true;
	            }

	            if (prevent === false) {
	                return;
	            }

	            if (collapse && item.is("." + ACTIVESTATE)) {
	                that.deactivateTab(item);
	                return true;
	            }

	            if (that.activateTab(item)) {
	                prevent = true;
	            }

	            return prevent;
	        },

	        _scrollable: function() {
	            var that = this,
	                options = that.options,
	                wrapperOffsetWidth,
	                tabGroupScrollWidth,
	                scrollPrevButton,
	                scrollNextButton;

	            if (that._scrollableAllowed()) {

	                that.wrapper.addClass("k-tabstrip-scrollable");

	                wrapperOffsetWidth = that.wrapper[0].offsetWidth;
	                tabGroupScrollWidth = that.tabGroup[0].scrollWidth;

	                if (tabGroupScrollWidth > wrapperOffsetWidth && !that._scrollableModeActive) {
	                    that._nowScrollingTabs = false;
	                    that._isRtl = kendo.support.isRtl(that.element);
	                    var mouseDown = kendo.support.mobileOS ? "touchstart" : "mousedown";
	                    var mouseUp = kendo.support.mobileOS ? "touchend" : "mouseup";

	                    that.wrapper.append(scrollButtonHtml("prev", "k-i-arrow-60-left") + scrollButtonHtml("next", "k-i-arrow-60-right"));

	                    scrollPrevButton = that._scrollPrevButton = that.wrapper.children(".k-tabstrip-prev");
	                    scrollNextButton = that._scrollNextButton = that.wrapper.children(".k-tabstrip-next");

	                    that.tabGroup.css({ marginLeft: outerWidth(scrollPrevButton) + 9, marginRight: outerWidth(scrollNextButton) + 12 });

	                    scrollPrevButton.on(mouseDown + NS, function () {
	                        that._nowScrollingTabs = true;
	                        that._scrollTabsByDelta(options.scrollable.distance * (that._isRtl ? 1 : -1));
	                    });

	                    scrollNextButton.on(mouseDown + NS, function () {
	                        that._nowScrollingTabs = true;
	                        that._scrollTabsByDelta(options.scrollable.distance * (that._isRtl ? -1 : 1));
	                    });

	                    scrollPrevButton.add(scrollNextButton).on(mouseUp + NS, function () {
	                        that._nowScrollingTabs = false;
	                    });

	                    that._scrollableModeActive = true;

	                    that._toggleScrollButtons();
	                } else if (that._scrollableModeActive && tabGroupScrollWidth <= wrapperOffsetWidth) {
	                    that._scrollableModeActive = false;

	                    that.wrapper.removeClass("k-tabstrip-scrollable");

	                    that._scrollPrevButton.off().remove();
	                    that._scrollNextButton.off().remove();
	                    that.tabGroup.css({ marginLeft: "", marginRight: "" });
	                } else if (!that._scrollableModeActive) {
	                    that.wrapper.removeClass("k-tabstrip-scrollable");
	                } else {
	                    that._toggleScrollButtons();
	                }
	            }
	        },

	        _scrollableAllowed: function() {
	            var options = this.options;
	            return options.scrollable && !isNaN(options.scrollable.distance) && (options.tabPosition == "top" || options.tabPosition == "bottom");
	        },

	        _scrollTabsToItem: function (item) {
	            var that = this,
	                tabGroup = that.tabGroup,
	                currentScrollOffset = tabGroup.scrollLeft(),
	                itemWidth = outerWidth(item),
	                itemOffset = that._isRtl ? item.position().left : item.position().left - tabGroup.children().first().position().left,
	                tabGroupWidth = tabGroup[0].offsetWidth,
	                tabGroupPadding = Math.ceil(parseFloat(tabGroup.css("padding-left"))),
	                itemPosition;

	            if (that._isRtl) {
	                if (itemOffset < 0) {
	                    itemPosition = currentScrollOffset + itemOffset - (tabGroupWidth - currentScrollOffset) - tabGroupPadding;
	                } else if (itemOffset + itemWidth > tabGroupWidth) {
	                    itemPosition = currentScrollOffset + itemOffset - itemWidth + tabGroupPadding * 2;
	                }
	            } else {
	                if (currentScrollOffset + tabGroupWidth < itemOffset + itemWidth) {
	                    itemPosition = itemOffset + itemWidth - tabGroupWidth + tabGroupPadding * 2;
	                } else if (currentScrollOffset > itemOffset) {
	                    itemPosition = itemOffset - tabGroupPadding;
	                }
	            }

	            tabGroup.finish().animate({ "scrollLeft": itemPosition }, "fast", "linear", function () {
	                that._toggleScrollButtons();
	            });
	        },

	        _scrollTabsByDelta: function (delta) {
	            var that = this;
	            var tabGroup = that.tabGroup;
	            var scrLeft = tabGroup.scrollLeft();

	            tabGroup.finish().animate({ "scrollLeft": scrLeft + delta }, "fast", "linear", function () {
	                if (that._nowScrollingTabs) {
	                    that._scrollTabsByDelta(delta);
	                } else {
	                    that._toggleScrollButtons();
	                }
	            });
	        },

	        _toggleScrollButtons: function () {
	            var that = this,
	                ul = that.tabGroup,
	                scrollLeft = ul.scrollLeft();

	            that._scrollPrevButton.toggle(that._isRtl ? scrollLeft < ul[0].scrollWidth - ul[0].offsetWidth - 1 : scrollLeft !== 0);
	            that._scrollNextButton.toggle(that._isRtl ? scrollLeft !== 0 : scrollLeft < ul[0].scrollWidth - ul[0].offsetWidth - 1);
	        },

	        deactivateTab: function (item) {
	            var that = this,
	                animationSettings = that.options.animation,
	                animation = animationSettings.open,
	                close = extend({}, animationSettings.close),
	                hasCloseAnimation = close && "effects" in close;
	            item = that.tabGroup.find(item);

	            close = extend( hasCloseAnimation ? close : extend({ reverse: true }, animation), { hide: true });

	            if (kendo.size(animation.effects)) {
	                item.kendoAddClass(DEFAULTSTATE, { duration: animation.duration });
	                item.kendoRemoveClass(ACTIVESTATE, { duration: animation.duration });
	            } else {
	                item.addClass(DEFAULTSTATE);
	                item.removeClass(ACTIVESTATE);
	            }

	            item.removeAttr("aria-selected");

	            that.contentAnimators
	                    .filter("." + ACTIVESTATE)
	                    .kendoStop(true, true)
	                    .kendoAnimate( close )
	                    .removeClass(ACTIVESTATE)
	                    .attr("aria-hidden", true);
	        },

	        activateTab: function (item) {
	            if (this.tabGroup.children("[data-animating]").length) { return; }

	            item = this.tabGroup.find(item);

	            var that = this,
	                animationSettings = that.options.animation,
	                animation = animationSettings.open,
	                close = extend({}, animationSettings.close),
	                hasCloseAnimation = close && "effects" in close,
	                neighbours = item.parent().children(),
	                oldTab = neighbours.filter("." + ACTIVESTATE),
	                itemIndex = neighbours.index(item);

	            close = extend( hasCloseAnimation ? close : extend({ reverse: true }, animation), { hide: true });
	            // deactivate previously active tab
	            if (kendo.size(animation.effects)) {
	                oldTab.kendoRemoveClass(ACTIVESTATE, { duration: close.duration });
	                item.kendoRemoveClass(HOVERSTATE, { duration: close.duration });
	            } else {
	                oldTab.removeClass(ACTIVESTATE);
	                item.removeClass(HOVERSTATE);
	            }

	            // handle content elements
	            var contentAnimators = that.contentAnimators;

	            if (that.inRequest) {
	                that.xhr.abort();
	                that.inRequest = false;
	            }

	            if (contentAnimators.length === 0) {
	                that.tabGroup.find("." + TABONTOP).removeClass(TABONTOP);
	                item.addClass(TABONTOP) // change these directly to bring the tab on top.
	                    .css("z-index");

	                item.addClass(ACTIVESTATE);
	                that._current(item);

	                that.trigger("change");

	                if (that._scrollableModeActive) {
	                    that._scrollTabsToItem(item);
	                }

	                return false;
	            }

	            var visibleContents = contentAnimators.filter("." + ACTIVESTATE),
	                contentHolder = that.contentHolder(itemIndex),
	                contentElement = contentHolder.closest(".k-content");

	            that.tabsHeight = outerHeight(that.tabGroup) +
	                              parseInt(that.wrapper.css("border-top-width"), 10) +
	                              parseInt(that.wrapper.css("border-bottom-width"), 10);

	            that._sizeScrollWrap(visibleContents);

	            if (contentHolder.length === 0) {
	                visibleContents
	                    .removeClass( ACTIVESTATE )
	                    .attr("aria-hidden", true)
	                    .kendoStop(true, true)
	                    .kendoAnimate( close );
	                return false;
	            }

	            item.attr("data-animating", true);

	          var isAjaxContent = (item.children("." + LINK).data(CONTENTURL) || that._contentUrls[itemIndex] || false) && contentHolder.is(EMPTY),
	                showContentElement = function () {
	                    that.tabGroup.find("." + TABONTOP).removeClass(TABONTOP);
	                    item.addClass(TABONTOP) // change these directly to bring the tab on top.
	                        .css("z-index");

	                    if (kendo.size(animation.effects)) {
	                        oldTab.kendoAddClass(DEFAULTSTATE, { duration: animation.duration });
	                        item.kendoAddClass(ACTIVESTATE, { duration: animation.duration });
	                    } else {
	                        oldTab.addClass(DEFAULTSTATE);
	                        item.addClass(ACTIVESTATE);
	                    }
	                    oldTab.removeAttr("aria-selected");
	                    item.attr("aria-selected", true);

	                    that._current(item);

	                    that._sizeScrollWrap(contentElement);

	                    contentElement
	                        .addClass(ACTIVESTATE)
	                        .removeAttr("aria-hidden")
	                        .kendoStop(true, true)
	                        .attr("aria-expanded", true)
	                        .kendoAnimate( extend({ init: function () {
	                            that.trigger(SHOW, { item: item[0], contentElement: contentHolder[0] });
	                            kendo.resize(contentHolder);
	                        } }, animation, {
	                            complete: function () {
	                                item.removeAttr("data-animating");

	                                that.trigger(ACTIVATE, { item: item[0], contentElement: contentHolder[0] });
	                                kendo.resize(contentHolder);

	                                that.scrollWrap.css("height", "").css("height");
	                            }
	                        } ) );
	                },
	                showContent = function() {
	                    if (!isAjaxContent) {
	                        showContentElement();
	                        that.trigger("change");
	                    } else {
	                        item.removeAttr("data-animating");
	                        that.ajaxRequest(item, contentHolder, function () {
	                            item.attr("data-animating", true);
	                            showContentElement();
	                            that.trigger("change");
	                        });
	                    }

	                    if (that._scrollableModeActive) {
	                        that._scrollTabsToItem(item);
	                    }

	                };

	            visibleContents
	                    .removeClass(ACTIVESTATE);

	            visibleContents.attr("aria-hidden", true);
	            visibleContents.attr("aria-expanded", false);

	            if (visibleContents.length) {
	                visibleContents
	                    .kendoStop(true, true)
	                    .kendoAnimate(extend( {
	                        complete: showContent
	                   }, close ));
	            } else {
	                showContent();
	            }

	            return true;
	        },

	        contentElement: function (itemIndex) {
	            if (isNaN(itemIndex - 0)) {
	                return undefined;
	            }

	            var contentElements = this.contentElements && this.contentElements[0] && !kendo.kineticScrollNeeded ? this.contentElements : this.contentAnimators;
	            var id = $(this.tabGroup.children()[itemIndex]).attr("aria-controls");

	            if (contentElements) {
	                for (var i = 0, len = contentElements.length; i < len; i++) {
	                    if (contentElements.eq(i).closest(".k-content")[0].id == id) {
	                        return contentElements[i];
	                    }
	                }
	            }

	            return undefined;
	        },

	        contentHolder: function (itemIndex) {
	            var contentElement = $(this.contentElement(itemIndex)),
	                scrollContainer = contentElement.children(".km-scroll-container");

	            return kendo.support.touch && scrollContainer[0] ? scrollContainer : contentElement;
	        },

	        ajaxRequest: function (element, content, complete, url) {
	            element = this.tabGroup.find(element);

	            var that = this,
	                xhr = $.ajaxSettings.xhr,
	                link = element.find("." + LINK),
	                data = {},
	                halfWidth = element.width() / 2,
	                fakeProgress = false,
	                statusIcon = element.find(".k-loading").removeClass("k-complete");

	            if (!statusIcon[0]) {
	                statusIcon = $("<span class='k-loading'/>").prependTo(element);
	            }

	            var endState = halfWidth * 2 - statusIcon.width();

	            var oldProgressAnimation = function() {
	                statusIcon.animate({ marginLeft: (parseInt(statusIcon.css("marginLeft"), 10) || 0) < halfWidth ? endState : 0 }, 500, oldProgressAnimation);
	            };

	            if (kendo.support.browser.msie && kendo.support.browser.version < 10) {
	                setTimeout(oldProgressAnimation, 40);
	            }

	             url = url || link.data(CONTENTURL) || that._contentUrls[element.index()] || link.attr(HREF);
	            that.inRequest = true;

	            var ajaxOptions = {
	                type: "GET",
	                cache: false,
	                url: url,
	                dataType: "html",
	                data: data,
	                xhr: function() {
	                    var current = this,
	                        request = xhr(),
	                        event = current.progressUpload ? "progressUpload" : current.progress ? "progress" : false;

	                    if (request) {
	                        $.each([ request, request.upload ], function () {
	                            if (this.addEventListener) {
	                                this.addEventListener("progress", function(evt) {
	                                    if (event) {
	                                        current[event](evt);
	                                    }
	                                }, false);
	                            }
	                        });
	                    }

	                    current.noProgress = !(window.XMLHttpRequest && ('upload' in new XMLHttpRequest()));
	                    return request;
	                },

	                progress: function(evt) {
	                    if (evt.lengthComputable) {
	                        var percent = parseInt((evt.loaded / evt.total * 100), 10) + "%";
	                        statusIcon
	                            .stop(true)
	                            .addClass("k-progress")
	                            .css({
	                                "width": percent,
	                                "marginLeft": 0
	                            });
	                    }
	                },

	                error: function (xhr, status) {
	                    if (that.trigger("error", { xhr: xhr, status: status })) {
	                        this.complete();
	                    }
	                },

	                stopProgress: function () {
	                    clearInterval(fakeProgress);
	                    statusIcon
	                        .stop(true)
	                        .addClass("k-progress")
	                        [0].style.cssText = "";
	                },

	                complete: function (xhr) {
	                    that.inRequest = false;
	                    if (this.noProgress) {
	                        setTimeout(this.stopProgress, 500);
	                    } else {
	                        this.stopProgress();
	                    }

	                    if (xhr.statusText == "abort") {
	                        statusIcon.remove();
	                    }
	                },

	                success: function (data) {
	                    statusIcon.addClass("k-complete");
	                    try {
	                        var current = this,
	                            loaded = 10;

	                        if (current.noProgress) {
	                            statusIcon.width(loaded+"%");
	                            fakeProgress = setInterval(function () {
	                                current.progress({ lengthComputable: true, loaded: Math.min(loaded, 100), total: 100 });
	                                loaded += 10;
	                            }, 40);
	                        }

	                        that.angular("cleanup", function () { return { elements: content.get() }; });
	                        kendo.destroy(content);
	                        content.html(data);
	                    } catch (e) {
	                        var console = window.console;

	                        if (console && console.error) {
	                            console.error(e.name + ": " + e.message + " in " + url);
	                        }
	                        this.error(this.xhr, "error");
	                    }

	                    if (complete) {
	                        complete.call(that, content);
	                    }

	                    that.angular("compile", function(){ return { elements: content.get() }; });

	                    that.trigger(CONTENTLOAD, { item: element[0], contentElement: content[0] });
	                }
	            };

	            if (typeof url === "object") {
	                ajaxOptions = $.extend(true, {}, ajaxOptions, url);

	                if (isFunction(ajaxOptions.url)) {
	                    ajaxOptions.url = ajaxOptions.url();
	                }
	            }

	            that.xhr = $.ajax(ajaxOptions);
	        }
	    });

	    // client-side rendering
	    extend(TabStrip, {
	        renderItem: function (options) {
	            options = extend({ tabStrip: {}, group: {} }, options);

	            var empty = templates.empty,
	                item = options.item;

	            return templates.item(extend(options, {
	                image: item.imageUrl ? templates.image : empty,
	                sprite: item.spriteCssClass ? templates.sprite : empty,
	                itemWrapper: templates.itemWrapper
	            }, rendering));
	        },

	        renderContent: function (options) {
	            return templates.content(extend(options, rendering));
	        }
	    });

	    kendo.ui.plugin(TabStrip);

	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(422));


/***/ })

/******/ });

/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(512);


/***/ }),

/***/ 420:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(3);

/***/ }),

/***/ 421:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(0);

/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 433:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(1);

/***/ }),

/***/ 435:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(5);

/***/ }),

/***/ 512:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(jQuery) {(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(421), __webpack_require__(435), __webpack_require__(433) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "toolbar",
	    name: "ToolBar",
	    category: "web",
	    description: "The ToolBar widget displays one or more command buttons divided into groups.",
	    depends: [ "core" ]
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        Class = kendo.Class,
	        Widget = kendo.ui.Widget,
	        proxy = $.proxy,
	        isFunction = kendo.isFunction,
	        keys = kendo.keys,
	        outerWidth = kendo._outerWidth,

	        TOOLBAR = "k-toolbar",
	        BUTTON = "k-button",
	        OVERFLOW_BUTTON = "k-overflow-button",
	        TOGGLE_BUTTON = "k-toggle-button",
	        BUTTON_GROUP = "k-button-group",
	        SPLIT_BUTTON = "k-split-button",
	        SEPARATOR = "k-separator",
	        POPUP = "k-popup",

	        RESIZABLE_TOOLBAR = "k-toolbar-resizable",
	        STATE_ACTIVE = "k-state-active",
	        STATE_DISABLED = "k-state-disabled",
	        STATE_HIDDEN = "k-state-hidden",
	        GROUP_START = "k-group-start",
	        GROUP_END = "k-group-end",
	        PRIMARY = "k-primary",

	        ICON = "k-icon",
	        ICON_PREFIX = "k-i-",
	        BUTTON_ICON = "k-button-icon",
	        BUTTON_ICON_TEXT = "k-button-icontext",

	        LIST_CONTAINER = "k-list-container k-split-container",
	        SPLIT_BUTTON_ARROW = "k-split-button-arrow",

	        OVERFLOW_ANCHOR = "k-overflow-anchor",
	        OVERFLOW_CONTAINER = "k-overflow-container",
	        FIRST_TOOLBAR_VISIBLE = "k-toolbar-first-visible",
	        LAST_TOOLBAR_VISIBLE = "k-toolbar-last-visible",

	        CLICK = "click",
	        TOGGLE = "toggle",
	        OPEN = "open",
	        CLOSE = "close",
	        OVERFLOW_OPEN = "overflowOpen",
	        OVERFLOW_CLOSE = "overflowClose",

	        OVERFLOW_NEVER = "never",
	        OVERFLOW_AUTO = "auto",
	        OVERFLOW_ALWAYS = "always",
	        OVERFLOW_HIDDEN = "k-overflow-hidden",

	        KENDO_UID_ATTR = kendo.attr("uid");

	        kendo.toolbar = {};

	        var components = {
	            overflowAnchor: '<div tabindex="0" class="k-overflow-anchor"></div>',
	            overflowContainer: '<ul class="k-overflow-container k-list-container"></ul>'
	        };

	        kendo.toolbar.registerComponent = function(name, toolbar, overflow) {
	            components[name] = {
	                toolbar: toolbar,
	                overflow: overflow
	            };
	        };

	        var Item = kendo.Class.extend({
	            addOverflowAttr: function() {
	                this.element.attr(kendo.attr("overflow"), this.options.overflow || OVERFLOW_AUTO);
	            },

	            addUidAttr: function() {
	                this.element.attr(KENDO_UID_ATTR, this.options.uid);
	            },

	            addIdAttr: function() {
	                if (this.options.id) {
	                    this.element.attr("id", this.options.id);
	                }
	            },

	            addOverflowIdAttr: function() {
	                if (this.options.id) {
	                    this.element.attr("id", this.options.id + "_overflow");
	                }
	            },

	            attributes: function() {
	                if (this.options.attributes) {
	                    this.element.attr(this.options.attributes);
	                }
	            },

	            show: function() {
	                this.element.removeClass(STATE_HIDDEN).show();
	                this.options.hidden = false;
	            },

	            hide: function() {
	                this.element.addClass(STATE_HIDDEN).hide();
	                this.options.hidden = true;
	            },

	            remove: function() {
	                this.element.remove();
	            },

	            enable: function(isEnabled) {
	                if (isEnabled === undefined) {
	                    isEnabled = true;
	                }
	                this.element.toggleClass(STATE_DISABLED, !isEnabled);
	                this.options.enable = isEnabled;
	            },

	            twin: function() {
	                var uid = this.element.attr(KENDO_UID_ATTR);
	                if (this.overflow) {
	                    return this.toolbar
	                            .element
	                            .find("[" + KENDO_UID_ATTR + "='" + uid + "']")
	                            .data(this.options.type);
	                } else if (this.toolbar.options.resizable) {
	                    return this.toolbar
	                            .popup.element
	                            .find("[" + KENDO_UID_ATTR + "='" + uid + "']")
	                            .data(this.options.type);
	                }
	            }
	        });

	        kendo.toolbar.Item = Item;

	        var Button = Item.extend({
	            init: function(options, toolbar) {
	                var element = options.useButtonTag ? $('<button tabindex="0"></button>') : $('<a href tabindex="0"></a>');

	                this.element = element;
	                this.options = options;
	                this.toolbar = toolbar;

	                this.attributes();

	                if (options.primary) {
	                    element.addClass(PRIMARY);
	                }

	                if (options.togglable) {
	                    element.addClass(TOGGLE_BUTTON);
	                    this.toggle(options.selected);
	                }

	                if (options.url !== undefined && !options.useButtonTag) {
	                    element.attr("href", options.url);
	                    if (options.mobile) {
	                        element.attr(kendo.attr("role"), "button");
	                    }
	                }

	                if (options.group) {
	                    element.attr(kendo.attr("group"), options.group);
	                    this.group = this.toolbar.addToGroup(this, options.group);
	                }

	                if (!options.togglable && options.click && isFunction(options.click)) {
	                    this.clickHandler = options.click;
	                }

	                if (options.togglable && options.toggle && isFunction(options.toggle)) {
	                    this.toggleHandler = options.toggle;
	                }
	            },

	            toggle: function(state, propagate) {
	                state = !!state;

	                if (this.group && state) {
	                    this.group.select(this);
	                } else if (!this.group) {
	                    this.select(state);
	                }

	                if (propagate && this.twin()) {
	                    this.twin().toggle(state);
	                }
	            },

	            getParentGroup: function() {
	                if (this.options.isChild) {
	                    return this.element.closest("." + BUTTON_GROUP).data("buttonGroup");
	                }
	            },

	            _addGraphics: function() {
	                var element = this.element,
	                    icon = this.options.icon,
	                    spriteCssClass = this.options.spriteCssClass,
	                    imageUrl = this.options.imageUrl,
	                    isEmpty, span, img;

	                if (spriteCssClass || imageUrl || icon) {
	                    isEmpty = true;

	                    element.contents().filter(function() {
	                        return (!$(this).hasClass("k-sprite") && !$(this).hasClass(ICON) && !$(this).hasClass("k-image"));
	                    }).each(function(idx, el){
	                        if (el.nodeType == 1 || el.nodeType == 3 && $.trim(el.nodeValue).length > 0) {
	                            isEmpty = false;
	                        }
	                    });

	                    if (isEmpty) {
	                        element.addClass(BUTTON_ICON);
	                    } else {
	                        element.addClass(BUTTON_ICON_TEXT);
	                    }
	                }
	                if (icon) {
	                    span = element.children("span." + ICON).first();
	                    if (!span[0]) {
	                        span = $('<span class="' + ICON + '"></span>').prependTo(element);
	                    }
	                    span.addClass(ICON_PREFIX + icon);
	                } else if (spriteCssClass) {
	                    span = element.children("span.k-sprite").first();
	                    if (!span[0]) {
	                        span = $('<span class="k-sprite ' + ICON + '"></span>').prependTo(element);
	                    }
	                    span.addClass(spriteCssClass);
	                } else if (imageUrl) {
	                    img = element.children("img.k-image").first();
	                    if (!img[0]) {
	                        img = $('<img alt="icon" class="k-image" />').prependTo(element);
	                    }
	                    img.attr("src", imageUrl);
	                }
	            }
	        });

	        kendo.toolbar.Button = Button;

	        var ToolBarButton = Button.extend({
	            init: function(options, toolbar) {
	                Button.fn.init.call(this, options, toolbar);

	                var element = this.element;

	                element.addClass(BUTTON);

	                this.addIdAttr();

	                if (options.align) {
	                    element.addClass("k-align-" + options.align);
	                }

	                if (options.showText != "overflow" && options.text) {
	                    if (options.mobile) {
	                        element.html('<span class="km-text">' + options.text + "</span>");
	                    } else {
	                        element.html(options.text);
	                    }
	                }

	                options.hasIcon = (options.showIcon != "overflow") && (options.icon || options.spriteCssClass || options.imageUrl);
	                if (options.hasIcon) {
	                    this._addGraphics();
	                }

	                this.addUidAttr();
	                this.addOverflowAttr();
	                this.enable(options.enable);

	                if (options.hidden) {
	                    this.hide();
	                }

	                this.element.data({
	                    type: "button",
	                    button: this
	                });
	            },

	            select: function(selected) {
	                if (selected === undefined) {
	                    selected = false;
	                }

	                this.element.toggleClass(STATE_ACTIVE, selected);
	                this.options.selected = selected;
	            }
	        });

	        kendo.toolbar.ToolBarButton = ToolBarButton;

	        var OverflowButton = Button.extend({
	            init: function(options, toolbar) {
	                this.overflow = true;

	                Button.fn.init.call(this, options, toolbar);

	                var element = this.element;

	                if (options.showText != "toolbar" && options.text) {
	                    if (options.mobile) {
	                        element.html('<span class="km-text">' + options.text + "</span>");
	                    } else {
	                        element.html('<span class="k-text">' + options.text + "</span>");
	                    }
	                }

	                options.hasIcon = (options.showIcon != "toolbar") && (options.icon || options.spriteCssClass || options.imageUrl);
	                if (options.hasIcon) {
	                    this._addGraphics();
	                }

	                if (!options.isChild) {
	                    this._wrap();
	                }

	                this.addOverflowIdAttr();
	                this.attributes();
	                this.addUidAttr();
	                this.addOverflowAttr();
	                this.enable(options.enable);

	                element.addClass(OVERFLOW_BUTTON + " " + BUTTON);

	                if (options.hidden) {
	                    this.hide();
	                }

	                if (options.togglable){
	                    this.toggle(options.selected);
	                }

	                this.element.data({
	                    type: "button",
	                    button: this
	                });
	            },

	            _wrap: function() {
	                this.element = this.element.wrap("<li></li>").parent();
	            },

	            overflowHidden: function() {
	                this.element.addClass(OVERFLOW_HIDDEN);
	            },

	            select: function(selected) {
	                if (selected === undefined) {
	                    selected = false;
	                }

	                if (this.options.isChild) {
	                    this.element.toggleClass(STATE_ACTIVE, selected);
	                } else {
	                    this.element.find(".k-button").toggleClass(STATE_ACTIVE, selected);
	                }
	                this.options.selected = selected;
	            }
	        });

	        kendo.toolbar.OverflowButton = OverflowButton;
	        kendo.toolbar.registerComponent("button", ToolBarButton, OverflowButton);

	        var ButtonGroup = Item.extend({
	            createButtons: function(buttonConstructor) {
	                var options = this.options;
	                var items = options.buttons || [];
	                var item;

	                for (var i = 0; i < items.length; i++) {
	                    if (!items[i].uid) {
	                        items[i].uid = kendo.guid();
	                    }
	                    item = new buttonConstructor($.extend({ mobile: options.mobile, isChild: true, type: "button" }, items[i]), this.toolbar);
	                    item.element.appendTo(this.element);
	                }
	            },

	            refresh: function() {
	                this.element.children().filter(":not('." + STATE_HIDDEN + "'):first").addClass(GROUP_START);
	                this.element.children().filter(":not('." + STATE_HIDDEN + "'):last").addClass(GROUP_END);
	            }
	        });

	        kendo.toolbar.ButtonGroup = ButtonGroup;

	        var ToolBarButtonGroup = ButtonGroup.extend({
	            init: function(options, toolbar) {
	                var element = this.element = $('<div></div>');
	                this.options = options;
	                this.toolbar = toolbar;

	                this.addIdAttr();

	                if (options.align) {
	                    element.addClass("k-align-" + options.align);
	                }

	                this.createButtons(ToolBarButton);
	                this.attributes();
	                this.addUidAttr();
	                this.addOverflowAttr();
	                this.refresh();

	                element.addClass(BUTTON_GROUP);

	                this.element.data({
	                    type: "buttonGroup",
	                    buttonGroup: this
	                });
	            }
	        });

	        kendo.toolbar.ToolBarButtonGroup = ToolBarButtonGroup;

	        var OverflowButtonGroup = ButtonGroup.extend({
	            init: function(options, toolbar) {
	                var element = this.element = $('<li></li>');
	                this.options = options;
	                this.toolbar = toolbar;
	                this.overflow = true;

	                this.addOverflowIdAttr();

	                this.createButtons(OverflowButton);
	                this.attributes();
	                this.addUidAttr();
	                this.addOverflowAttr();
	                this.refresh();

	                element.addClass((options.mobile ? "" : BUTTON_GROUP) + " k-overflow-group");

	                this.element.data({
	                    type: "buttonGroup",
	                    buttonGroup: this
	                });
	            },

	            overflowHidden: function() {
	                this.element.addClass(OVERFLOW_HIDDEN);
	            }
	        });

	        kendo.toolbar.OverflowButtonGroup = OverflowButtonGroup;
	        kendo.toolbar.registerComponent("buttonGroup", ToolBarButtonGroup, OverflowButtonGroup);

	        var ToolBarSplitButton = Item.extend({
	            init: function(options, toolbar) {
	                var element = this.element = $('<div class="' + SPLIT_BUTTON + '" tabindex="0"></div>');

	                this.options = options;
	                this.toolbar = toolbar;

	                this.mainButton = new ToolBarButton($.extend({}, options, { hidden: false }), toolbar);
	                this.arrowButton = $('<a class="' + BUTTON + " " + SPLIT_BUTTON_ARROW + '"><span class="' + (options.mobile ? "km-icon km-arrowdown" : "k-icon k-i-arrow-60-down") + '"></span></a>');
	                this.popupElement = $('<ul class="' + LIST_CONTAINER + '"></ul>');

	                this.mainButton.element
	                    .removeAttr("href tabindex")
	                    .appendTo(element);

	                this.arrowButton.appendTo(element);
	                this.popupElement.appendTo(element);

	                if (options.align) {
	                    element.addClass("k-align-" + options.align);
	                }

	                if (!options.id) {
	                    options.id = options.uid;
	                }

	                element.attr("id", options.id + "_wrapper");

	                this.addOverflowAttr();
	                this.addUidAttr();

	                this.createMenuButtons();
	                this.createPopup();
	                this._navigatable();

	                this.mainButton.main = true;

	                this.enable(options.enable);

	                if (options.hidden) {
	                    this.hide();
	                }

	                element.data({
	                    type: "splitButton",
	                    splitButton: this,
	                    kendoPopup: this.popup
	                });
	            },

	            _navigatable: function() {
	                var that = this;

	                that.popupElement.on("keydown", "." + BUTTON, function(e) {
	                    var li = $(e.target).parent();

	                    e.preventDefault();

	                    if (e.keyCode === keys.ESC || e.keyCode === keys.TAB || (e.altKey && e.keyCode === keys.UP)) {
	                        that.toggle();
	                        that.focus();
	                    } else if (e.keyCode === keys.DOWN) {
	                        findFocusableSibling(li, "next").focus();
	                    } else if (e.keyCode === keys.UP) {
	                        findFocusableSibling(li, "prev").focus();
	                    } else if (e.keyCode === keys.SPACEBAR || e.keyCode === keys.ENTER) {
	                        that.toolbar.userEvents.trigger("tap", { target: $(e.target) });
	                    }
	                });
	            },

	            createMenuButtons: function() {
	                var options = this.options;
	                var items = options.menuButtons;
	                var item;

	                for (var i = 0; i < items.length; i++) {
	                    item = new ToolBarButton($.extend({ mobile: options.mobile, type: "button", click: options.click }, items[i]), this.toolbar);
	                    item.element.wrap("<li></li>").parent().appendTo(this.popupElement);
	                }
	            },

	            createPopup: function() {
	                var options = this.options;
	                var element = this.element;

	                this.popupElement
	                        .attr("id", options.id + "_optionlist")
	                        .attr(KENDO_UID_ATTR, options.rootUid);

	                if (options.mobile) {
	                    this.popupElement = actionSheetWrap(this.popupElement);
	                }

	                this.popup = this.popupElement.kendoPopup({
	                    appendTo: options.mobile ? $(options.mobile).children(".km-pane") : null,
	                    anchor: element,
	                    isRtl: this.toolbar._isRtl,
	                    copyAnchorStyles: false,
	                    animation: options.animation,
	                    open: adjustPopupWidth,
	                    activate: function() {
	                        this.element.find(":kendoFocusable").first().focus();
	                    },
	                    close: function() {
	                        element.focus();
	                    }
	                }).data("kendoPopup");

	                this.popup.element.on(CLICK, "a.k-button", preventClick);
	            },

	            remove: function() {
	                this.popup.element.off(CLICK, "a.k-button");
	                this.popup.destroy();
	                this.element.remove();
	            },

	            toggle: function() {
	                this.popup.toggle();
	            },

	            enable: function(isEnabled) {
	                if (isEnabled === undefined) {
	                    isEnabled = true;
	                }
	                this.mainButton.enable(isEnabled);
	                this.options.enable = isEnabled;
	            },

	            focus: function() {
	                this.element.focus();
	            },

	            hide: function() {
	                if (this.popup) {
	                    this.popup.close();
	                }

	                this.element.addClass(STATE_HIDDEN).hide();
	                this.options.hidden = true;
	            },

	            show: function() {
	                this.element.removeClass(STATE_HIDDEN).hide();
	                this.options.hidden = false;
	            }
	        });

	        kendo.toolbar.ToolBarSplitButton = ToolBarSplitButton;

	        var OverflowSplitButton = Item.extend({
	            init: function(options, toolbar) {
	                var element = this.element = $('<li class="' + SPLIT_BUTTON + '"></li>'),
	                    items = options.menuButtons,
	                    item;

	                this.options = options;
	                this.toolbar = toolbar;
	                this.overflow = true;

	                this.mainButton = new OverflowButton($.extend({ isChild: true }, options));
	                this.mainButton.element.appendTo(element);
	                for (var i = 0; i < items.length; i++) {
	                    item = new OverflowButton($.extend({ mobile: options.mobile, isChild: true }, items[i]), this.toolbar);
	                    item.element.appendTo(element);
	                }

	                this.addUidAttr();
	                this.addOverflowAttr();

	                this.mainButton.main = true;

	                element.data({
	                    type: "splitButton",
	                    splitButton: this
	                });
	            },

	            overflowHidden: function() {
	                this.element.addClass(OVERFLOW_HIDDEN);
	            }
	        });

	        kendo.toolbar.OverflowSplitButton = OverflowSplitButton;
	        kendo.toolbar.registerComponent("splitButton", ToolBarSplitButton, OverflowSplitButton);

	        var ToolBarSeparator = Item.extend({
	            init: function(options, toolbar) {
	                var element = this.element = $('<div>&nbsp;</div>');

	                this.element = element;
	                this.options = options;
	                this.toolbar = toolbar;

	                this.attributes();
	                this.addIdAttr();
	                this.addUidAttr();
	                this.addOverflowAttr();

	                element.addClass(SEPARATOR);

	                element.data({
	                    type: "separator",
	                    separator: this
	                });
	            }
	        });

	        var OverflowSeparator = Item.extend({
	            init: function(options, toolbar) {
	                var element = this.element = $('<li>&nbsp;</li>');

	                this.element = element;
	                this.options = options;
	                this.toolbar = toolbar;
	                this.overflow = true;

	                this.attributes();
	                this.addUidAttr();
	                this.addOverflowIdAttr();

	                element.addClass(SEPARATOR);

	                element.data({
	                    type: "separator",
	                    separator: this
	                });
	            },

	            overflowHidden: function() {
	                this.element.addClass(OVERFLOW_HIDDEN);
	            }
	        });

	        kendo.toolbar.registerComponent("separator", ToolBarSeparator, OverflowSeparator);

	        var TemplateItem = Item.extend({
	            init: function(template, options, toolbar) {
	                var element = isFunction(template) ? template(options) : template;

	                if (!(element instanceof jQuery)) {
	                    element = $("<div></div>").html(element);
	                } else {
	                    element = element.wrap("<div></div>").parent();
	                }

	                this.element = element;
	                this.options = options;
	                this.options.type = "template";
	                this.toolbar = toolbar;

	                this.attributes();
	                this.addUidAttr();
	                this.addIdAttr();
	                this.addOverflowAttr();

	                element.data({
	                    type: "template",
	                    template: this
	                });
	            }
	        });

	        kendo.toolbar.TemplateItem = TemplateItem;

	        var OverflowTemplateItem = Item.extend({
	            init: function(template, options, toolbar) {
	                var element = isFunction(template) ? $(template(options)) : $(template);

	                if (!(element instanceof jQuery)) {
	                    element = $("<li></li>").html(element);
	                } else {
	                    element = element.wrap("<li></li>").parent();
	                }

	                this.element = element;
	                this.options = options;
	                this.options.type = "template";
	                this.toolbar = toolbar;
	                this.overflow = true;

	                this.attributes();
	                this.addUidAttr();
	                this.addOverflowIdAttr();
	                this.addOverflowAttr();

	                element.data({
	                    type: "template",
	                    template: this
	                });
	            },

	            overflowHidden: function() {
	                this.element.addClass(OVERFLOW_HIDDEN);
	            }
	        });

	        kendo.toolbar.OverflowTemplateItem = OverflowTemplateItem;

	        function adjustPopupWidth() {
	            var anchor = this.options.anchor,
	                computedWidth = outerWidth(anchor),
	                width;

	            kendo.wrap(this.element).addClass("k-split-wrapper");

	            if (this.element.css("box-sizing") !== "border-box") {
	                width = computedWidth - (outerWidth(this.element) - this.element.width());
	            } else {
	                width = computedWidth;
	            }

	            this.element.css({
	                fontFamily: anchor.css("font-family"),
	                "min-width": width
	            });
	        }

	        function toggleActive(e) {
	            if (!e.target.is(".k-toggle-button")) {
	                e.target.toggleClass(STATE_ACTIVE, e.type == "press");
	            }
	        }

	        function actionSheetWrap(element) {
	            element = $(element);

	            return element.hasClass("km-actionsheet") ? element.closest(".km-popup-wrapper") : element.addClass("km-widget km-actionsheet")
	                             .wrap('<div class="km-actionsheet-wrapper km-actionsheet-tablet km-widget km-popup"></div>').parent()
	                             .wrap('<div class="km-popup-wrapper k-popup"></div>').parent();
	        }

	        function preventClick(e) {
	            e.preventDefault();
	        }

	        function findFocusableSibling (element, dir) {
	            var getSibling = dir === "next" ? $.fn.next : $.fn.prev;
	            var getter = dir === "next" ? $.fn.first : $.fn.last;
	            var candidate = getSibling.call(element);

	            if (candidate.is(":kendoFocusable") || !candidate.length) {
	                return candidate;
	            }

	            if (candidate.find(":kendoFocusable").length) {
	                return getter.call(candidate.find(":kendoFocusable"));
	            }

	            return findFocusableSibling(candidate, dir);
	        }

	        var Group = Class.extend({
	            init: function(name) {
	                this.name = name;
	                this.buttons = [];
	            },

	            add: function(button) {
	                this.buttons[this.buttons.length] = button;
	            },

	            remove: function(button) {
	                var index = $.inArray(button, this.buttons);
	                this.buttons.splice(index, 1);
	            },

	            select: function(button) {
	                var tmp;
	                for (var i = 0; i < this.buttons.length; i ++) {
	                    tmp = this.buttons[i];

	                    tmp.select(false);
	                }

	                button.select(true);
	                if (button.twin()) {
	                    button.twin().select(true);
	                }
	            }
	        });

	        var ToolBar = Widget.extend({
	            init: function(element, options) {
	                var that = this;

	                Widget.fn.init.call(that, element, options);

	                options = that.options;
	                element = that.wrapper = that.element;

	                element.addClass(TOOLBAR + " k-widget");

	                this.uid = kendo.guid();
	                this._isRtl = kendo.support.isRtl(element);
	                this._groups = {};
	                element.attr(KENDO_UID_ATTR, this.uid);

	                that.isMobile = (typeof options.mobile === "boolean") ? options.mobile : that.element.closest(".km-root")[0];
	                that.animation = that.isMobile ? { open: { effects: "fade" } } : {};

	                if (that.isMobile) {
	                    element.addClass("km-widget");
	                    ICON = "km-icon";
	                    ICON_PREFIX = "km-";
	                    BUTTON = "km-button";
	                    BUTTON_GROUP = "km-buttongroup km-widget";
	                    STATE_ACTIVE = "km-state-active";
	                    STATE_DISABLED = "km-state-disabled";
	                }

	                if(options.resizable) {
	                    that._renderOverflow();
	                    element.addClass(RESIZABLE_TOOLBAR);

	                    that.overflowUserEvents = new kendo.UserEvents(that.element, {
	                        threshold: 5,
	                        allowSelection: true,
	                        filter: "." + OVERFLOW_ANCHOR,
	                        tap: proxy(that._toggleOverflow, that)
	                    });

	                    that._resizeHandler = kendo.onResize(function() {
	                        that.resize();
	                    });
	                } else {
	                    that.popup = { element: $([]) };
	                }

	                if(options.items && options.items.length) {
	                    for (var i = 0; i < options.items.length; i++) {
	                        that.add(options.items[i]);
	                    }
	                }

	                that.userEvents = new kendo.UserEvents(document, {
	                    threshold: 5,
	                    allowSelection: true,
	                    filter:
	                        "[" + KENDO_UID_ATTR + "=" + this.uid + "] a." + BUTTON + ", " +
	                        "[" + KENDO_UID_ATTR + "=" + this.uid + "] ." + OVERFLOW_BUTTON,
	                    tap: proxy(that._buttonClick, that),
	                    press: toggleActive,
	                    release: toggleActive
	                });

	                that.element.on(CLICK, "a.k-button", preventClick);
	                that._navigatable();

	                if (options.resizable) {
	                    that.popup.element.on(CLICK, + "a.k-button", preventClick);
	                }

	                if (options.resizable) {
	                    this._toggleOverflowAnchor();
	                }

	                kendo.notify(that);
	            },

	            events: [
	                CLICK,
	                TOGGLE,
	                OPEN,
	                CLOSE,
	                OVERFLOW_OPEN,
	                OVERFLOW_CLOSE
	            ],

	            options: {
	                name: "ToolBar",
	                items: [],
	                resizable: true,
	                mobile: null
	            },

	            addToGroup: function(button, groupName) {
	                var group;

	                if (!this._groups[groupName]) {
	                    group = this._groups[groupName] = new Group();
	                } else {
	                    group = this._groups[groupName];
	                }

	                group.add(button);
	                return group;
	            },

	            destroy: function() {
	                var that = this;

	                that.element.find("." + SPLIT_BUTTON).each(function(idx, element) {
	                    $(element).data("kendoPopup").destroy();
	                });

	                that.element.off(CLICK, "a.k-button");

	                that.userEvents.destroy();

	                if (that.options.resizable) {
	                    kendo.unbindResize(that._resizeHandler);
	                    that.overflowUserEvents.destroy();
	                    that.popup.element.off(CLICK, "a.k-button");
	                    that.popup.destroy();
	                }

	                Widget.fn.destroy.call(that);
	            },

	            add: function(options) {
	                var component = components[options.type],
	                    template = options.template,
	                    tool, that = this,
	                    itemClasses = that.isMobile ? "" : "k-item k-state-default",
	                    overflowTemplate = options.overflowTemplate,
	                    overflowTool;

	                $.extend(options, {
	                    uid: kendo.guid(),
	                    animation: that.animation,
	                    mobile: that.isMobile,
	                    rootUid: that.uid
	                });

	                if (options.menuButtons) {
	                    for (var i = 0; i < options.menuButtons.length; i++) {
	                        $.extend(options.menuButtons[i], {
	                            uid: kendo.guid()
	                        });
	                    }
	                }

	                if (template && !overflowTemplate) {
	                    options.overflow = OVERFLOW_NEVER;
	                } else if (!options.overflow) {
	                    options.overflow = OVERFLOW_AUTO;
	                }

	                //add the command in the overflow popup
	                if (options.overflow !== OVERFLOW_NEVER && that.options.resizable) {
	                    if (overflowTemplate) { //template command
	                         overflowTool = new OverflowTemplateItem(overflowTemplate, options, that);
	                    } else if (component) { //build-in command
	                        overflowTool = new component.overflow(options, that);
	                        overflowTool.element.addClass(itemClasses);
	                    }

	                    if (overflowTool) {
	                        if (options.overflow === OVERFLOW_AUTO) {
	                            overflowTool.overflowHidden();
	                        }

	                        overflowTool.element.appendTo(that.popup.container);
	                        that.angular("compile", function(){
	                            return { elements: overflowTool.element.get() };
	                        });
	                    }
	                }

	                //add the command in the toolbar container
	                if (options.overflow !== OVERFLOW_ALWAYS) {
	                    if (template) { //template command
	                        tool = new TemplateItem(template, options, that);
	                    } else if (component) { //build-in command
	                        tool = new component.toolbar(options, that);
	                    }

	                    if (tool) {
	                        if (that.options.resizable) {
	                            tool.element.appendTo(that.element).css("visibility", "hidden");
	                            that._shrink(that.element.innerWidth());
	                            tool.element.css("visibility", "visible");
	                        } else {
	                            tool.element.appendTo(that.element);
	                        }

	                        that.angular("compile", function(){
	                            return { elements: tool.element.get() };
	                        });
	                    }
	                }
	            },

	            _getItem: function(candidate) {
	                var element,
	                    toolbarItem,
	                    overflowItem,
	                    isResizable = this.options.resizable,
	                    type;

	                //find toolbar item

	                element = this.element.find(candidate);
	                if (!element.length) {
	                    element = $(".k-split-container[data-uid=" + this.uid + "]").find(candidate);
	                }

	                type = element.length ? element.data("type") : "";
	                toolbarItem = element.data(type);

	                if (toolbarItem) {
	                    if (toolbarItem.main) {
	                        element = element.parent("." + SPLIT_BUTTON);
	                        type = "splitButton";
	                        toolbarItem = element.data(type);
	                    }

	                    if (isResizable) {
	                        overflowItem = toolbarItem.twin();
	                    }
	                } else if (isResizable) { //find overflow item
	                    element = this.popup.element.find(candidate);
	                    type = element.length ? element.data("type") : "";
	                    overflowItem = element.data(type);

	                    if (overflowItem && overflowItem.main) {
	                        element = element.parent("." + SPLIT_BUTTON);
	                        type = "splitButton";
	                        overflowItem = element.data(type);
	                    }
	                }

	                return {
	                    type: type,
	                    toolbar: toolbarItem,
	                    overflow: overflowItem
	                };
	            },

	            remove: function(candidate) {
	                var item = this._getItem(candidate);

	                if (item.toolbar) { item.toolbar.remove(); }
	                if (item.overflow) { item.overflow.remove(); }

	                this.resize(true);
	            },

	            hide: function(candidate) {
	                var item = this._getItem(candidate);

	                if (item.toolbar) {
	                    if (item.toolbar.options.type === "button" && item.toolbar.options.isChild) {
	                        item.toolbar.hide();
	                        item.toolbar.getParentGroup().refresh();
	                    } else if(!item.toolbar.options.hidden) {
	                        item.toolbar.hide();
	                    }
	                }

	                if (item.overflow) {
	                    if (item.overflow.options.type === "button" && item.overflow.options.isChild) {
	                        item.overflow.hide();
	                        item.overflow.getParentGroup().refresh();
	                    } else if(!item.overflow.options.hidden) {
	                        item.overflow.hide();
	                    }
	                }

	                this.resize(true);
	            },

	            show: function(candidate) {
	                var item = this._getItem(candidate);

	                if (item.toolbar) {
	                    if (item.toolbar.options.type === "button" && item.toolbar.options.isChild) {
	                        item.toolbar.show();
	                        item.toolbar.getParentGroup().refresh();
	                    } else if(item.toolbar.options.hidden) {
	                        item.toolbar.show();
	                    }
	                }

	                if (item.overflow) {
	                    if (item.overflow.options.type === "button" && item.overflow.options.isChild) {
	                        item.toolbar.show();
	                        item.overflow.getParentGroup().refresh();
	                    } else if(item.overflow.options.hidden) {
	                        item.overflow.show();
	                    }
	                }

	                this.resize(true);
	            },

	            enable: function(element, enable) {
	                var item = this._getItem(element);

	                if (typeof enable == "undefined") {
	                    enable = true;
	                }

	                if (item.toolbar) { item.toolbar.enable(enable); }
	                if (item.overflow) { item.overflow.enable(enable); }
	            },

	            getSelectedFromGroup: function(groupName) {
	                return this.element.find("." + TOGGLE_BUTTON + "[data-group='" + groupName + "']").filter("." + STATE_ACTIVE);
	            },

	            toggle: function(button, checked) {
	                var element = $(button),
	                    item = element.data("button");

	                if (item.options.togglable) {
	                    if (checked === undefined) {
	                        checked = true;
	                    }
	                    item.toggle(checked, true);
	                }
	            },

	            _renderOverflow: function() {
	                var that = this,
	                    overflowContainer = components.overflowContainer,
	                    isRtl = that._isRtl,
	                    horizontalDirection = isRtl ? "left" : "right";

	                that.overflowAnchor = $(components.overflowAnchor).addClass(BUTTON);

	                that.element.append(that.overflowAnchor);

	                if (that.isMobile) {
	                    that.overflowAnchor.append('<span class="km-icon km-more"></span>');
	                    overflowContainer = actionSheetWrap(overflowContainer);
	                } else {
	                    that.overflowAnchor.append('<span class="k-icon k-i-arrow-60-down"></span>');
	                }

	                that.popup = new kendo.ui.Popup(overflowContainer, {
	                    origin: "bottom " + horizontalDirection,
	                    position: "top " + horizontalDirection,
	                    anchor: that.overflowAnchor,
	                    isRtl: isRtl,
	                    animation: that.animation,
	                    appendTo: that.isMobile ? $(that.isMobile).children(".km-pane") : null,
	                    copyAnchorStyles: false,
	                    open: function (e) {
	                        var wrapper = kendo.wrap(that.popup.element)
	                            .addClass("k-overflow-wrapper");

	                        if (!that.isMobile) {
	                            wrapper.css("margin-left", (isRtl ? -1 : 1) * ((outerWidth(wrapper) - wrapper.width()) / 2 + 1));
	                        } else {
	                            that.popup.container.css("max-height", (parseFloat($(".km-content:visible").innerHeight()) - 15) + "px");
	                        }

	                        if (that.trigger(OVERFLOW_OPEN)) {
	                            e.preventDefault();
	                        }
	                    },
	                    activate: function() {
	                        this.element.find(":kendoFocusable").first().focus();
	                    },
	                    close: function (e) {
	                        if (that.trigger(OVERFLOW_CLOSE)) {
	                            e.preventDefault();
	                        }

	                        this.element.focus();
	                    }
	                });

	                that.popup.element.on("keydown", "." + BUTTON, function(e) {
	                    var target = $(e.target),
	                        li = target.parent(),
	                        isComplexTool = li.is("." + BUTTON_GROUP) || li.is("." + SPLIT_BUTTON),
	                        element;

	                    e.preventDefault();

	                    if (e.keyCode === keys.ESC || e.keyCode === keys.TAB || (e.altKey && e.keyCode === keys.UP)) {
	                        that._toggleOverflow();
	                        that.overflowAnchor.focus();
	                    } else if (e.keyCode === keys.DOWN) {
	                        element = !isComplexTool || (isComplexTool && target.is(":last-child")) ? li : target;
	                        findFocusableSibling(element, "next").focus();
	                    } else if (e.keyCode === keys.UP) {
	                        element = !isComplexTool || (isComplexTool && target.is(":first-child")) ? li : target;
	                        findFocusableSibling(element, "prev").focus();
	                    } else if (e.keyCode === keys.SPACEBAR || e.keyCode === keys.ENTER) {
	                        that.userEvents.trigger("tap", { target: $(e.target) });
	                    }
	                });

	                if (that.isMobile) {
	                    that.popup.container = that.popup.element.find("." + OVERFLOW_CONTAINER);
	                } else {
	                    that.popup.container = that.popup.element;
	                }

	                that.popup.container.attr(KENDO_UID_ATTR, this.uid);
	            },

	            _toggleOverflowAnchor: function() {
	                var hasVisibleChildren = false;

	                if (this.options.mobile) {
	                    hasVisibleChildren = this.popup.element.find("." + OVERFLOW_CONTAINER).children(":not(." + OVERFLOW_HIDDEN + ", ." + POPUP + ")").length > 0;
	                } else {
	                    hasVisibleChildren = this.popup.element.children(":not(." + OVERFLOW_HIDDEN + ", ." + POPUP + ")").length > 0;
	                }

	                if (hasVisibleChildren) {
	                    this.overflowAnchor.css({
	                        visibility: "visible",
	                        width: ""
	                    });
	                } else {
	                    this.overflowAnchor.css({
	                        visibility: "hidden",
	                        width: "1px"
	                    });
	                }
	            },

	            _buttonClick: function(e) {
	                var that = this, popup,
	                    target, item, splitContainer,
	                    isSplitButtonArrow = e.target.closest("." + SPLIT_BUTTON_ARROW).length,
	                    handler, eventData, urlTarget;

	                e.preventDefault();

	                if (isSplitButtonArrow) {
	                    that._toggle(e);
	                    return;
	                }

	                target = $(e.target).closest("." + BUTTON, that.element);

	                if (target.hasClass(OVERFLOW_ANCHOR)) {
	                    return;
	                }

	                item = target.data("button");

	                if (!item && that.popup) {
	                    target = $(e.target).closest("." + OVERFLOW_BUTTON, that.popup.container);
	                    item = target.parent("li").data("button");
	                }

	                if (!item || !item.options.enable) {
	                    return;
	                }

	                if (item.options.togglable) {
	                    handler = isFunction(item.toggleHandler) ? item.toggleHandler : null;

	                    item.toggle(!item.options.selected, true);
	                    eventData = { target: target, group: item.options.group, checked: item.options.selected, id: item.options.id };

	                    if (handler) { handler.call(that, eventData); }
	                    that.trigger(TOGGLE, eventData);
	                } else {
	                    handler = isFunction(item.clickHandler) ? item.clickHandler : null;
	                    eventData = { sender: that, target: target, id: item.options.id };

	                    if (handler) { handler.call(that, eventData); }
	                    that.trigger(CLICK, eventData);
	                }

	                if (item.options.url) {
	                    if (item.options.attributes && item.options.attributes.target) {
	                        urlTarget = item.options.attributes.target;
	                    }
	                    window.open(item.options.url, urlTarget || "_self");
	                }

	                if (target.hasClass(OVERFLOW_BUTTON)) {
	                    that.popup.close();
	                }

	                splitContainer = target.closest(".k-split-container");
	                if (splitContainer[0]) {
	                    popup = splitContainer.data("kendoPopup");
	                    (popup ? popup : splitContainer.parents(".km-popup-wrapper").data("kendoPopup")).close();
	                }
	            },

	            _navigatable: function() {
	                var that = this;

	                that.element
	                    .attr("tabindex", 0)
	                    .focus(function() {
	                        var element = $(this).find(":kendoFocusable:first");
	                        if (element.length === 0) {
	                            return;
	                        }

	                        if (element.is("." + OVERFLOW_ANCHOR)) {
	                            element = findFocusableSibling(element, "next");
	                        }

	                        element[0].focus();
	                    })
	                    .on("keydown", proxy(that._keydown, that));
	            },

	            _keydown: function(e) {
	                var target = $(e.target),
	                    keyCode = e.keyCode,
	                    items = this.element.children(":not(.k-separator):visible");

	                if (keyCode === keys.TAB) {
	                    var element = target.parentsUntil(this.element).last(),
	                        lastHasFocus = false,
	                        firstHasFocus = false;

	                    if (!element.length) {
	                        element = target;
	                    }

	                    if (element.is("." + OVERFLOW_ANCHOR)) {
	                        if (e.shiftKey) {
	                            e.preventDefault();
	                        }

	                        if (items.last().is(":kendoFocusable")) {
	                            items.last().focus();
	                        } else {
	                            items.last().find(":kendoFocusable").last().focus();
	                        }
	                    }

	                    if (!e.shiftKey && items.index(element) === items.length - 1) {
	                        if (element.is("." + BUTTON_GROUP)) {
	                            lastHasFocus = target.is(":last-child");
	                        } else {
	                            lastHasFocus = true;
	                        }
	                    }

	                    var isFirstTool = items.index(element) === items.not(".k-overflow-anchor").first().index();
	                    if (e.shiftKey && isFirstTool) {
	                        if (element.is("." + BUTTON_GROUP)) {
	                            firstHasFocus = target.is(":first-child");
	                        } else {
	                            firstHasFocus = true;
	                        }
	                    }

	                    if (lastHasFocus && this.overflowAnchor && this.overflowAnchor.css("visibility") !== "hidden") {
	                        e.preventDefault();
	                        this.overflowAnchor.focus();
	                    }

	                    if (firstHasFocus) {
	                        e.preventDefault();
	                        var prevFocusable = this._getPrevFocusable(this.wrapper);
	                        if (prevFocusable) {
	                            prevFocusable.focus();
	                        }
	                    }
	                }

	                if (e.altKey && keyCode === keys.DOWN) {
	                    var splitButton = $(document.activeElement).data("splitButton");
	                    var isOverflowAnchor = $(document.activeElement).is("." + OVERFLOW_ANCHOR);

	                    if (splitButton) {
	                        splitButton.toggle();
	                    } else if (isOverflowAnchor) {
	                        this._toggleOverflow();
	                    }

	                    return;
	                }

	                if ((keyCode === keys.SPACEBAR || keyCode === keys.ENTER) && !target.is("input, checkbox")) {

	                    e.preventDefault(); //prevent pspacebar to scroll the page down

	                    if (target.is("." + SPLIT_BUTTON)) {
	                        target = target.children().first();
	                    }
	                    this.userEvents.trigger("tap", { target: target });

	                    return;
	                }
	            },

	            _getPrevFocusable: function(element) {
	                if (element.is("html")) {
	                    return element;
	                }

	                var elementToFocus, prevElement,
	                    prevElements = element.prevAll();
	                prevElements.each(function(){
	                    prevElement = $(this);
	                    if (prevElement.is(":kendoFocusable")) {
	                        elementToFocus = prevElement;
	                        return false;
	                    } else if (prevElement.find(":kendoFocusable").length > 0) {
	                        elementToFocus = prevElement.find(":kendoFocusable").last();
	                        return false;
	                    }
	                });
	                if (elementToFocus) {
	                    return elementToFocus;
	                } else {
	                    return this._getPrevFocusable(element.parent());
	                }
	            },

	            _toggle: function(e) {
	                var splitButton = $(e.target).closest("." + SPLIT_BUTTON).data("splitButton"),
	                    isDefaultPrevented;

	                e.preventDefault();

	                if (!splitButton.options.enable) {
	                    return;
	                }

	                if (splitButton.popup.element.is(":visible")) {
	                    isDefaultPrevented = this.trigger(CLOSE, { target: splitButton.element });
	                } else {
	                    isDefaultPrevented = this.trigger(OPEN, { target: splitButton.element });
	                }

	                if (!isDefaultPrevented) {
	                    splitButton.toggle();
	                }
	            },

	            _toggleOverflow: function() {
	                this.popup.toggle();
	            },

	            _resize: function(e) {
	                var containerWidth = e.width;

	                if (!this.options.resizable) {
	                    return;
	                }

	                this.popup.close();

	                this._shrink(containerWidth);
	                this._stretch(containerWidth);

	                this._markVisibles();

	                this._toggleOverflowAnchor();
	            },

	            _childrenWidth: function() {
	                var childrenWidth = 0;

	                this.element.children(":visible:not('." + STATE_HIDDEN + "')").each(function() {
	                    childrenWidth += outerWidth($(this), true);
	                });

	                return Math.ceil(childrenWidth);
	            },

	            _shrink: function(containerWidth) {
	                var commandElement,
	                    visibleCommands;

	                if (containerWidth < this._childrenWidth()) {
	                    visibleCommands = this.element.children(":visible:not([data-overflow='never'], ." + OVERFLOW_ANCHOR + ")");

	                    for (var i = visibleCommands.length - 1; i >= 0; i--) {
	                        commandElement = visibleCommands.eq(i);
	                        if (containerWidth > this._childrenWidth()) {
	                            break;
	                        } else {
	                            this._hideItem(commandElement);
	                        }
	                    }
	                }
	            },

	            _stretch: function(containerWidth) {
	                var commandElement,
	                    hiddenCommands;

	                if (containerWidth > this._childrenWidth()) {
	                    hiddenCommands = this.element.children(":hidden:not('." + STATE_HIDDEN + "')");

	                    for (var i = 0; i < hiddenCommands.length ; i++) {
	                        commandElement = hiddenCommands.eq(i);
	                        if (containerWidth < this._childrenWidth() || !this._showItem(commandElement, containerWidth)) {
	                            break;
	                        }
	                    }
	                }
	            },

	            _hideItem: function(item) {
	                item.hide();
	                if (this.popup) {
	                    this.popup.container
	                        .find(">li[data-uid='" + item.data("uid") + "']")
	                        .removeClass(OVERFLOW_HIDDEN);
	                }
	            },

	            _showItem: function(item, containerWidth) {
	                if (item.length && containerWidth > this._childrenWidth() + outerWidth(item, true)) {
	                    item.show();
	                    if (this.popup) {
	                        this.popup.container
	                            .find(">li[data-uid='" + item.data("uid") + "']")
	                            .addClass(OVERFLOW_HIDDEN);
	                    }

	                    return true;
	                }

	                return false;
	            },

	            _markVisibles: function() {
	                var overflowItems = this.popup.container.children(),
	                    toolbarItems = this.element.children(":not(.k-overflow-anchor)"),
	                    visibleOverflowItems = overflowItems.filter(":not(.k-overflow-hidden)"),
	                    visibleToolbarItems = toolbarItems.filter(":visible");

	                overflowItems.add(toolbarItems).removeClass(FIRST_TOOLBAR_VISIBLE + " " + LAST_TOOLBAR_VISIBLE);
	                visibleOverflowItems.first().add(visibleToolbarItems.first()).addClass(FIRST_TOOLBAR_VISIBLE);
	                visibleOverflowItems.last().add(visibleToolbarItems.last()).addClass(LAST_TOOLBAR_VISIBLE);
	            }

	        });

	    kendo.ui.plugin(ToolBar);
	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(422));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(420)))

/***/ })

/******/ });

/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(513);


/***/ }),

/***/ 420:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(3);

/***/ }),

/***/ 421:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(0);

/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 433:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(1);

/***/ }),

/***/ 513:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(jQuery) {(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(421), __webpack_require__(433) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "tooltip",
	    name: "Tooltip",
	    category: "web",
	    description: "The Tooltip widget displays a popup hint for a given html element.",
	    depends: [ "core", "popup" ],
	    features: [ {
	        id: "tooltip-fx",
	        name: "Animation",
	        description: "Support for animation",
	        depends: [ "fx" ]
	    } ]
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        Widget = kendo.ui.Widget,
	        Popup = kendo.ui.Popup,
	        isFunction = kendo.isFunction,
	        isPlainObject = $.isPlainObject,
	        extend = $.extend,
	        proxy = $.proxy,
	        DOCUMENT = $(document),
	        isLocalUrl = kendo.isLocalUrl,
	        ARIAIDSUFFIX = "_tt_active",
	        DESCRIBEDBY = "aria-describedby",
	        SHOW = "show",
	        HIDE = "hide",
	        ERROR = "error",
	        CONTENTLOAD = "contentLoad",
	        REQUESTSTART = "requestStart",
	        KCONTENTFRAME = "k-content-frame",
	        TEMPLATE = '<div role="tooltip" class="k-widget k-tooltip#if (!autoHide) {# k-tooltip-closable#}#">#if (!autoHide) {# <div class="k-tooltip-button"><a href="\\#" class="k-icon k-i-close" title="Close"></a></div> #}#' +
	                '<div class="k-tooltip-content"></div>' +
	                '#if (callout){ #<div class="k-callout k-callout-#=dir#"></div>#}#' +
	            '</div>',
	        IFRAMETEMPLATE = kendo.template(
	        "<iframe frameborder='0' class='" + KCONTENTFRAME + "' " +
	                "src='#= content.url #'>" +
	                    "This page requires frames in order to show content" +
	        "</iframe>"),
	        NS = ".kendoTooltip",
	        POSITIONS = {
	            bottom: {
	                origin: "bottom center",
	                position: "top center"
	            },
	            top: {
	                origin: "top center",
	                position: "bottom center"
	            },
	            left: {
	                origin: "center left",
	                position: "center right",
	                collision: "fit flip"
	            },
	            right: {
	                origin: "center right",
	                position: "center left",
	                collision: "fit flip"
	            },
	            center: {
	                position: "center center",
	                origin: "center center"
	            }
	        },
	        REVERSE = {
	            "top": "bottom",
	            "bottom": "top",
	            "left": "right",
	            "right": "left",
	            "center": "center"
	        },
	        DIRCLASSES = {
	            bottom: "n",
	            top: "s",
	            left: "e",
	            right: "w",
	            center: "n"
	        },
	        DIMENSIONS = {
	            "horizontal": { offset: "top", size: "outerHeight" },
	            "vertical": { offset: "left", size: "outerWidth" }
	        },
	        DEFAULTCONTENT = function(e) {
	            return e.target.data(kendo.ns + "title");
	        };

	    function restoreTitle(element) {
	        while(element.length) {
	            restoreTitleAttributeForElement(element);
	            element = element.parent();
	        }
	    }

	    function restoreTitleAttributeForElement(element) {
	        var title = element.data(kendo.ns + "title");
	        if (title) {
	            element.attr("title", title);
	            element.removeData(kendo.ns + "title");
	        }
	    }

	    function saveTitleAttributeForElement(element) {
	        var title = element.attr("title");
	        if (title) {
	            element.data(kendo.ns + "title", title);
	            element.attr("title", "");
	        }
	    }

	    function saveTitleAttributes(element) {
	        while(element.length && !element.is("body")) {
	            saveTitleAttributeForElement(element);
	            element = element.parent();
	        }
	    }

	    var Tooltip = Widget.extend({
	        init: function(element, options) {
	            var that = this,
	                axis;

	            Widget.fn.init.call(that, element, options);

	            axis = that.options.position.match(/left|right/) ? "horizontal" : "vertical";

	            that.dimensions = DIMENSIONS[axis];

	            that._documentKeyDownHandler = proxy(that._documentKeyDown, that);

	            that.element
	                .on(that.options.showOn + NS, that.options.filter, proxy(that._showOn, that))
	                .on("mouseenter" + NS, that.options.filter, proxy(that._mouseenter, that));

	            if (this.options.autoHide) {
	                that.element.on("mouseleave" + NS, that.options.filter, proxy(that._mouseleave, that));
	            }
	        },

	        options: {
	            name: "Tooltip",
	            filter: "",
	            content: DEFAULTCONTENT,
	            showAfter: 100,
	            callout: true,
	            position: "bottom",
	            showOn: "mouseenter",
	            autoHide: true,
	            width: null,
	            height: null,
	            animation: {
	                open: {
	                    effects: "fade:in",
	                    duration: 0
	                },
	                close: {
	                    effects: "fade:out",
	                    duration: 40,
	                    hide: true
	                }
	            }
	        },

	        events: [ SHOW, HIDE, CONTENTLOAD, ERROR, REQUESTSTART ],

	        _mouseenter: function(e) {
	            saveTitleAttributes($(e.currentTarget));
	        },

	        _showOn: function(e) {
	            var that = this;

	            var currentTarget = $(e.currentTarget);
	            if (that.options.showOn && that.options.showOn.match(/click|focus/)) {
	                that._show(currentTarget);
	            } else {
	                clearTimeout(that.timeout);

	                that.timeout = setTimeout(function() {
	                    that._show(currentTarget);
	                }, that.options.showAfter);
	            }
	        },

	        _appendContent: function(target) {
	            var that = this,
	                contentOptions = that.options.content,
	                element = that.content,
	                showIframe = that.options.iframe,
	                iframe;

	            if (isPlainObject(contentOptions) && contentOptions.url) {
	                if (!("iframe" in that.options)) {
	                    showIframe = !isLocalUrl(contentOptions.url);
	                }

	                that.trigger(REQUESTSTART, { options: contentOptions, target: target });

	                if (!showIframe) {
	                    element.empty();
	                    kendo.ui.progress(element, true);

	                    // perform AJAX request
	                    that._ajaxRequest(contentOptions);
	                } else {
	                    element.hide();

	                    iframe = element.find("." + KCONTENTFRAME)[0];

	                    if (iframe) {
	                        // refresh existing iframe
	                        iframe.src = contentOptions.url || iframe.src;
	                    } else {
	                        element.html(IFRAMETEMPLATE({ content: contentOptions }));
	                    }

	                    element.find("." + KCONTENTFRAME)
	                        .off("load" + NS)
	                        .on("load" + NS, function(){
	                            that.trigger(CONTENTLOAD);
	                            element.show();
	                        });
	                }
	            } else if (contentOptions && isFunction(contentOptions)) {
	                contentOptions = contentOptions({ sender: this, target: target });
	                element.html(contentOptions || "");
	            } else {
	                element.html(contentOptions);
	            }

	            that.angular("compile", function(){
	                return { elements: element };
	            });
	        },

	        _ajaxRequest: function(options) {
	            var that = this;

	            jQuery.ajax(extend({
	                type: "GET",
	                dataType: "html",
	                cache: false,
	                error: function (xhr, status) {
	                    kendo.ui.progress(that.content, false);

	                    that.trigger(ERROR, { status: status, xhr: xhr });
	                },
	                success: proxy(function (data) {
	                    kendo.ui.progress(that.content, false);

	                    that.content.html(data);

	                    that.trigger(CONTENTLOAD);
	                }, that)
	            }, options));
	        },

	        _documentKeyDown: function(e) {
	            if (e.keyCode === kendo.keys.ESC) {
	                this.hide();
	            }
	        },

	        refresh: function() {
	            var that = this,
	                popup = that.popup;

	            if (popup && popup.options.anchor) {
	                that._appendContent(popup.options.anchor);
	            }
	        },

	        hide: function() {
	            if (this.popup) {
	                this.popup.close();
	            }
	        },

	        show: function(target) {
	            target = target || this.element;

	            saveTitleAttributes(target);
	            this._show(target);
	        },

	        _show: function(target) {
	            var that = this,
	                current = that.target();

	            if (!that.popup) {
	                that._initPopup();
	            }

	            if (current && current[0] != target[0]) {
	                that.popup.close();
	                that.popup.element.kendoStop(true, true);// animation can be too long to hide the element before it is shown again
	            }

	            if (!current || current[0] != target[0]) {
	                that._appendContent(target);
	                that.popup.options.anchor = target;
	            }

	            that.popup.one("deactivate", function() {
	                restoreTitle(target);
	                target.removeAttr(DESCRIBEDBY);

	                this.element
	                    .removeAttr("id")
	                    .attr("aria-hidden", true);

	                DOCUMENT.off("keydown" + NS, that._documentKeyDownHandler);
	            });

	            that.popup.open();
	        },

	        _initPopup: function() {
	            var that = this,
	                options = that.options,
	                wrapper = $(kendo.template(TEMPLATE)({
	                    callout: options.callout && options.position !== "center",
	                    dir: DIRCLASSES[options.position],
	                    autoHide: options.autoHide
	                }));

	            that.popup = new Popup(wrapper, extend({
	                activate: function() {
	                    var anchor = this.options.anchor,
	                        ariaId = anchor[0].id || that.element[0].id;

	                    if (ariaId) {
	                        anchor.attr(DESCRIBEDBY, ariaId + ARIAIDSUFFIX);
	                        this.element.attr("id", ariaId + ARIAIDSUFFIX);
	                    }

	                    if (options.callout) {
	                        that._positionCallout();
	                    }

	                    this.element.removeAttr("aria-hidden");

	                    DOCUMENT.on("keydown" + NS, that._documentKeyDownHandler);

	                    that.trigger(SHOW);
	                },
	                close: function() {
	                    that.trigger(HIDE);
	                },
	                copyAnchorStyles: false,
	                animation: options.animation
	            }, POSITIONS[options.position]));

	            wrapper.css({
	                width: options.width,
	                height: options.height
	            });

	            that.content = wrapper.find(".k-tooltip-content");
	            that.arrow = wrapper.find(".k-callout");

	            if (options.autoHide) {
	                wrapper.on("mouseleave" + NS, proxy(that._mouseleave, that));
	            } else {
	                wrapper.on("click" + NS, ".k-tooltip-button", proxy(that._closeButtonClick, that));
	            }
	        },

	        _closeButtonClick: function(e) {
	            e.preventDefault();
	            this.hide();
	        },

	        _mouseleave: function(e) {
	            if (this.popup) {
	                var element = $(e.currentTarget),
	                    offset = element.offset(),
	                    pageX = e.pageX,
	                    pageY = e.pageY;

	                offset.right = offset.left + kendo._outerWidth(element);
	                offset.bottom = offset.top + kendo._outerHeight(element);

	                if (pageX > offset.left && pageX < offset.right && pageY > offset.top && pageY < offset.bottom) {
	                    return;
	                }

	                this.popup.close();
	            } else {
	                restoreTitle($(e.currentTarget));
	            }
	            clearTimeout(this.timeout);
	        },

	        _positionCallout: function() {
	            var that = this,
	                position = that.options.position,
	                dimensions = that.dimensions,
	                offset = dimensions.offset,
	                popup = that.popup,
	                anchor = popup.options.anchor,
	                anchorOffset = $(anchor).offset(),
	                arrowBorder = parseInt(that.arrow.css("border-top-width"), 10),
	                elementOffset = $(popup.element).offset(),
	                cssClass = DIRCLASSES[popup.flipped ? REVERSE[position] : position],
	                offsetAmount = anchorOffset[offset] - elementOffset[offset] + ($(anchor)[dimensions.size]() / 2) - arrowBorder;

	           that.arrow
	               .removeClass("k-callout-n k-callout-s k-callout-w k-callout-e")
	               .addClass("k-callout-" + cssClass)
	               .css(offset, offsetAmount);
	        },

	        target: function() {
	            if (this.popup) {
	                return this.popup.options.anchor;
	            }
	            return null;
	        },

	        destroy: function() {
	            var popup = this.popup;

	            if (popup) {
	                popup.element.off(NS);
	                popup.destroy();
	            }

	            clearTimeout(this.timeout);

	            this.element.off(NS);

	            DOCUMENT.off("keydown" + NS, this._documentKeyDownHandler);

	            Widget.fn.destroy.call(this);
	        }
	    });

	    kendo.ui.plugin(Tooltip);
	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(422));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(420)))

/***/ })

/******/ });

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(514);


/***/ }),

/***/ 421:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(0);

/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 435:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(5);

/***/ }),

/***/ 514:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(421), __webpack_require__(435) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "touch",
	    name: "Touch",
	    category: "mobile",
	    description: "The kendo Touch widget provides a cross-platform compatible API for handling user-initiated touch events, multi-touch gestures and event sequences (drag, swipe, etc.). ",
	    depends: [ "core", "userevents" ]
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        Widget = kendo.ui.Widget,
	        proxy = $.proxy,
	        abs = Math.abs,
	        MAX_DOUBLE_TAP_DISTANCE = 20;

	    var Touch = Widget.extend({
	        init: function(element, options) {
	            var that = this;

	            Widget.fn.init.call(that, element, options);
	            options = that.options;

	            element = that.element;
	            that.wrapper = element;

	            function eventProxy(name) {
	                return function(e) {
	                    that._triggerTouch(name, e);
	                };
	            }

	            function gestureEventProxy(name) {
	                return function(e) {
	                    that.trigger(name, { touches: e.touches, distance: e.distance, center: e.center, event: e.event });
	                };
	            }

	            that.events = new kendo.UserEvents(element, {
	                filter: options.filter,
	                surface: options.surface,
	                minHold: options.minHold,
	                multiTouch: options.multiTouch,
	                allowSelection: true,
	                fastTap: options.fastTap,
	                press: eventProxy("touchstart"),
	                hold: eventProxy("hold"),
	                tap: proxy(that, "_tap"),
	                gesturestart: gestureEventProxy("gesturestart"),
	                gesturechange: gestureEventProxy("gesturechange"),
	                gestureend: gestureEventProxy("gestureend")
	            });

	            if (options.enableSwipe) {
	                that.events.bind("start", proxy(that, "_swipestart"));
	                that.events.bind("move", proxy(that, "_swipemove"));
	            } else {
	                that.events.bind("start", proxy(that, "_dragstart"));
	                that.events.bind("move", eventProxy("drag"));
	                that.events.bind("end", eventProxy("dragend"));
	            }

	            kendo.notify(that);
	        },

	        events: [
	            "touchstart",
	            "dragstart",
	            "drag",
	            "dragend",
	            "tap",
	            "doubletap",
	            "hold",
	            "swipe",
	            "gesturestart",
	            "gesturechange",
	            "gestureend"
	        ],

	        options: {
	            name: "Touch",
	            surface: null,
	            global: false,
	            fastTap: false,
	            filter: null,
	            multiTouch: false,
	            enableSwipe: false,
	            minXDelta: 30,
	            maxYDelta: 20,
	            maxDuration: 1000,
	            minHold: 800,
	            doubleTapTimeout: 800
	        },

	        cancel: function() {
	            this.events.cancel();
	        },

	        destroy: function() {
	            this.events.destroy();
	        },

	        _triggerTouch: function(type, e) {
	            if (this.trigger(type, { touch: e.touch, event: e.event })) {
	                e.preventDefault();
	            }
	        },

	        _tap: function(e) {
	            var that = this,
	                lastTap = that.lastTap,
	                touch = e.touch;

	            if (lastTap &&
	                (touch.endTime - lastTap.endTime < that.options.doubleTapTimeout) &&
	                kendo.touchDelta(touch, lastTap).distance < MAX_DOUBLE_TAP_DISTANCE
	                ) {

	               that._triggerTouch("doubletap", e);
	               that.lastTap = null;
	            } else {
	                that._triggerTouch("tap", e);
	                that.lastTap = touch;
	            }
	        },

	        _dragstart: function(e) {
	            this._triggerTouch("dragstart", e);
	        },

	        _swipestart: function(e) {
	            if (abs(e.x.velocity) * 2 >= abs(e.y.velocity)) {
	                e.sender.capture();
	            }
	        },

	        _swipemove: function(e) {
	            var that = this,
	                options = that.options,
	                touch = e.touch,
	                duration = e.event.timeStamp - touch.startTime,
	                direction = touch.x.initialDelta > 0 ? "right" : "left";

	            if (
	                abs(touch.x.initialDelta) >= options.minXDelta &&
	                abs(touch.y.initialDelta) < options.maxYDelta &&
	                duration < options.maxDuration
	                )
	            {
	                that.trigger("swipe", {
	                    direction: direction,
	                    touch: e.touch
	                });

	                touch.cancel();
	            }
	        }
	    });

	    kendo.ui.plugin(Touch);
	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(422));


/***/ })

/******/ });

/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(515);


/***/ }),

/***/ 421:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(0);

/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 424:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(9);

/***/ }),

/***/ 425:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(8);

/***/ }),

/***/ 427:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(4);

/***/ }),

/***/ 433:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(1);

/***/ }),

/***/ 434:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(34);

/***/ }),

/***/ 435:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(5);

/***/ }),

/***/ 436:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(23);

/***/ }),

/***/ 440:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(25);

/***/ }),

/***/ 441:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(26);

/***/ }),

/***/ 447:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(24);

/***/ }),

/***/ 449:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(15);

/***/ }),

/***/ 450:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(35);

/***/ }),

/***/ 455:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(31);

/***/ }),

/***/ 456:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(36);

/***/ }),

/***/ 457:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(14);

/***/ }),

/***/ 461:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(6);

/***/ }),

/***/ 462:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(17);

/***/ }),

/***/ 464:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(27);

/***/ }),

/***/ 468:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(30);

/***/ }),

/***/ 469:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(16);

/***/ }),

/***/ 471:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(10);

/***/ }),

/***/ 472:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(33);

/***/ }),

/***/ 477:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(11);

/***/ }),

/***/ 479:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(28);

/***/ }),

/***/ 484:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(29);

/***/ }),

/***/ 487:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(7);

/***/ }),

/***/ 494:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(37);

/***/ }),

/***/ 509:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(32);

/***/ }),

/***/ 515:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	        __webpack_require__(421),
	        __webpack_require__(472),
	        __webpack_require__(516),
	        __webpack_require__(494),
	        __webpack_require__(487),
	        __webpack_require__(440),
	        __webpack_require__(441),
	        __webpack_require__(427),
	        __webpack_require__(517),
	        __webpack_require__(457),
	        __webpack_require__(456),
	        __webpack_require__(435),
	        __webpack_require__(461),
	        __webpack_require__(425),
	        __webpack_require__(509),
	        __webpack_require__(518),
	        __webpack_require__(462),
	        __webpack_require__(436),
	        __webpack_require__(519),
	        __webpack_require__(433),
	        __webpack_require__(520),
	        __webpack_require__(521),
	        __webpack_require__(522),
	        __webpack_require__(424),
	        __webpack_require__(447),
	        __webpack_require__(523),
	        __webpack_require__(449),
	        __webpack_require__(524),
	        __webpack_require__(525),
	        __webpack_require__(526),
	        __webpack_require__(527),
	        __webpack_require__(528),
	        __webpack_require__(529),
	        __webpack_require__(530),
	        __webpack_require__(455),
	        __webpack_require__(531),
	        __webpack_require__(532),
	        __webpack_require__(464),
	        __webpack_require__(533),
	        __webpack_require__(534),
	        __webpack_require__(535),
	        __webpack_require__(536),
	        __webpack_require__(450),
	        __webpack_require__(537),
	        __webpack_require__(434),
	        __webpack_require__(538),
	        __webpack_require__(539),
	        __webpack_require__(540),
	        __webpack_require__(541),
	        __webpack_require__(468),
	        __webpack_require__(484),
	        __webpack_require__(425),
	        __webpack_require__(469),
	        __webpack_require__(477),
	        __webpack_require__(542),
	        __webpack_require__(543),
	        __webpack_require__(544),
	        __webpack_require__(471),
	        __webpack_require__(545),
	        __webpack_require__(546),
	        __webpack_require__(479),
	        __webpack_require__(547),
	        __webpack_require__(548),
	        __webpack_require__(549),
	        __webpack_require__(550),
	        __webpack_require__(551),
	        __webpack_require__(552),
	        __webpack_require__(553),
	        __webpack_require__(554)
	    ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){
	    "bundle all";
	    return window.kendo;
	}, __webpack_require__(422));


/***/ }),

/***/ 516:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(105);

/***/ }),

/***/ 517:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(73);

/***/ }),

/***/ 518:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(100);

/***/ }),

/***/ 519:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(96);

/***/ }),

/***/ 520:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(95);

/***/ }),

/***/ 521:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(104);

/***/ }),

/***/ 522:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(103);

/***/ }),

/***/ 523:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(74);

/***/ }),

/***/ 524:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(69);

/***/ }),

/***/ 525:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(77);

/***/ }),

/***/ 526:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(72);

/***/ }),

/***/ 527:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(94);

/***/ }),

/***/ 528:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(71);

/***/ }),

/***/ 529:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(79);

/***/ }),

/***/ 530:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(78);

/***/ }),

/***/ 531:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(80);

/***/ }),

/***/ 532:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(81);

/***/ }),

/***/ 533:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(97);

/***/ }),

/***/ 534:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(98);

/***/ }),

/***/ 535:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(99);

/***/ }),

/***/ 536:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(102);

/***/ }),

/***/ 537:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(75);

/***/ }),

/***/ 538:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(101);

/***/ }),

/***/ 539:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(76);

/***/ }),

/***/ 540:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(108);

/***/ }),

/***/ 541:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(107);

/***/ }),

/***/ 542:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(88);

/***/ }),

/***/ 543:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(86);

/***/ }),

/***/ 544:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(91);

/***/ }),

/***/ 545:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(83);

/***/ }),

/***/ 546:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(82);

/***/ }),

/***/ 547:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(84);

/***/ }),

/***/ 548:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(85);

/***/ }),

/***/ 549:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(87);

/***/ }),

/***/ 550:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(89);

/***/ }),

/***/ 551:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(90);

/***/ }),

/***/ 552:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(92);

/***/ }),

/***/ 553:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(93);

/***/ }),

/***/ 554:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(68);

/***/ })

/******/ });

/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(558);


/***/ }),

/***/ 420:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(3);

/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 427:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(4);

/***/ }),

/***/ 558:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(jQuery) {(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(427) ], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	var __meta__ = { // jshint ignore:line
	    id: "virtuallist",
	    name: "VirtualList",
	    category: "framework",
	    depends: [ "data" ],
	    hidden: true
	};

	(function($, undefined) {
	    var kendo = window.kendo,
	        ui = kendo.ui,
	        Widget = ui.Widget,
	        DataBoundWidget = ui.DataBoundWidget,
	        proxy = $.proxy,

	        WRAPPER = "k-virtual-wrap",
	        VIRTUALLIST = "k-virtual-list",
	        CONTENT = "k-virtual-content",
	        LIST = "k-list",
	        HEADER = "k-group-header",
	        VIRTUALITEM = "k-virtual-item",
	        ITEM = "k-item",
	        HEIGHTCONTAINER = "k-height-container",
	        GROUPITEM = "k-group",

	        SELECTED = "k-state-selected",
	        FOCUSED = "k-state-focused",
	        HOVER = "k-state-hover",
	        CHANGE = "change",
	        CLICK = "click",
	        LISTBOUND = "listBound",
	        ITEMCHANGE = "itemChange",

	        ACTIVATE = "activate",
	        DEACTIVATE = "deactivate",

	        VIRTUAL_LIST_NS = ".VirtualList";

	    function lastFrom(array) {
	        return array[array.length - 1];
	    }

	    function toArray(value) {
	        return value instanceof Array ? value : [value];
	    }

	    function isPrimitive(dataItem) {
	        return typeof dataItem === "string" || typeof dataItem === "number" || typeof dataItem === "boolean";
	    }

	    function getItemCount(screenHeight, listScreens, itemHeight) {
	        return Math.ceil(screenHeight * listScreens / itemHeight);
	    }

	    function appendChild(parent, className, tagName) {
	        var element = document.createElement(tagName || "div");
	        if (className) {
	            element.className = className;
	        }
	        parent.appendChild(element);

	        return element;
	    }

	    function getDefaultItemHeight() {
	        var mockList = $('<div class="k-popup"><ul class="k-list"><li class="k-item"><li></ul></div>'),
	            lineHeight;
	        mockList.css({
	            position: "absolute",
	            left: "-200000px",
	            visibility: "hidden"
	        });
	        mockList.appendTo(document.body);
	        lineHeight = parseFloat(kendo.getComputedStyles(mockList.find(".k-item")[0], ["line-height"])["line-height"]);
	        mockList.remove();

	        return lineHeight;
	    }

	    function bufferSizes(screenHeight, listScreens, opposite) { //in pixels
	        return {
	            down: screenHeight * opposite,
	            up: screenHeight * (listScreens - 1 - opposite)
	        };
	    }

	    function listValidator(options, screenHeight) {
	        var downThreshold = (options.listScreens - 1 - options.threshold) * screenHeight;
	        var upThreshold = options.threshold * screenHeight;

	        return function(list, scrollTop, lastScrollTop) {
	            if (scrollTop > lastScrollTop) {
	                return scrollTop - list.top < downThreshold;
	            } else {
	                return list.top === 0 || scrollTop - list.top > upThreshold;
	            }
	        };
	    }

	    function scrollCallback(element, callback) {
	        return function(force) {
	            return callback(element.scrollTop, force);
	        };
	    }

	    function syncList(reorder) {
	        return function(list, force) {
	            reorder(list.items, list.index, force);
	            return list;
	        };
	    }

	    function position(element, y) {
	        if (kendo.support.browser.msie && kendo.support.browser.version < 10) {
	            element.style.top = y + "px";
	        } else {
	            element.style.webkitTransform = 'translateY(' + y + "px)";
	            element.style.transform = 'translateY(' + y + "px)";
	        }
	    }

	    function map2(callback, templates) {
	        return function(arr1, arr2) {
	            for (var i = 0, len = arr1.length; i < len; i++) {
	                callback(arr1[i], arr2[i], templates);
	                if (arr2[i].item) {
	                    this.trigger(ITEMCHANGE, { item: $(arr1[i]), data: arr2[i].item, ns: kendo.ui });
	                }
	            }
	        };
	    }

	    function reshift(items, diff) {
	        var range;

	        if (diff > 0) { // down
	            range = items.splice(0, diff);
	            items.push.apply(items, range);
	        } else { // up
	            range = items.splice(diff, -diff);
	            items.unshift.apply(items, range);
	        }

	        return range;
	    }

	    function render(element, data, templates) {
	        var itemTemplate = templates.template;

	        element = $(element);

	        if (!data.item) {
	            itemTemplate = templates.placeholderTemplate;
	        }

	        this.angular("cleanup", function() {
	            return { elements: [ element ]};
	        });

	        element
	            .attr("data-uid", data.item ? data.item.uid : "")
	            .attr("data-offset-index", data.index)
	            .html(itemTemplate(data.item || {}));

	        element.toggleClass(FOCUSED, data.current);
	        element.toggleClass(SELECTED, data.selected);
	        element.toggleClass("k-first", data.newGroup);
	        element.toggleClass("k-loading-item", !data.item);

	        if (data.index !== 0 && data.newGroup) {
	            $("<div class=" + GROUPITEM + "></div>")
	                .appendTo(element)
	                .html(templates.groupTemplate(data.group));
	        }

	        if (data.top !== undefined) {
	            position(element[0], data.top);
	        }

	        this.angular("compile", function() {
	            return { elements: [ element ], data: [ { dataItem: data.item, group: data.group, newGroup: data.newGroup } ]};
	        });
	    }

	    function mapChangedItems(selected, itemsToMatch) {
	        var itemsLength = itemsToMatch.length;
	        var selectedLength = selected.length;
	        var dataItem;
	        var found;
	        var i, j;

	        var changed = [];
	        var unchanged = [];

	        if (selectedLength) {
	            for (i = 0; i < selectedLength; i++) {
	                dataItem = selected[i];
	                found = false;

	                for (j = 0; j < itemsLength; j++) {
	                    if (dataItem === itemsToMatch[j]) {
	                        found = true;
	                        changed.push({ index: i, item: dataItem });
	                        break;
	                    }
	                }

	                if (!found) {
	                    unchanged.push(dataItem);
	                }
	            }
	        }

	        return {
	            changed: changed,
	            unchanged: unchanged
	        };
	    }

	    function isActivePromise(promise) {
	        return promise && promise.state() !== "resolved";
	    }

	    var VirtualList = DataBoundWidget.extend({
	        init: function(element, options) {
	            var that = this;

	            that.bound(false);
	            that._fetching = false;

	            Widget.fn.init.call(that, element, options);

	            if (!that.options.itemHeight) {
	                that.options.itemHeight = getDefaultItemHeight();
	            }

	            options = that.options;

	            that.element.addClass(LIST + " " + VIRTUALLIST).attr("role", "listbox");
	            that.content = that.element.wrap("<div unselectable='on' class='" + CONTENT + "'></div>").parent();
	            that.wrapper = that.content.wrap("<div class='" + WRAPPER + "'></div>").parent();
	            that.header = that.content.before("<div class='" + HEADER + "'></div>").prev();

	            that.element.on("mouseenter" + VIRTUAL_LIST_NS, "li:not(.k-loading-item)", function() { $(this).addClass(HOVER); })
	                        .on("mouseleave" + VIRTUAL_LIST_NS, "li", function() { $(this).removeClass(HOVER); });

	            that._values = toArray(that.options.value);
	            that._selectedDataItems = [];
	            that._selectedIndexes = [];
	            that._rangesList = {};
	            that._promisesList = [];
	            that._optionID = kendo.guid();

	            that._templates();

	            that.setDataSource(options.dataSource);

	            that.content.on("scroll" + VIRTUAL_LIST_NS, kendo.throttle(function() {
	                that._renderItems();
	                that._triggerListBound();
	            }, options.delay));

	            that._selectable();
	        },

	        options: {
	            name: "VirtualList",
	            autoBind: true,
	            delay: 100,
	            height: null,
	            listScreens: 4,
	            threshold: 0.5,
	            itemHeight: null,
	            oppositeBuffer: 1,
	            type: "flat",
	            selectable: false,
	            value: [],
	            dataValueField: null,
	            template: "#:data#",
	            placeholderTemplate: "loading...",
	            groupTemplate: "#:data#",
	            fixedGroupTemplate: "fixed header template",
	            mapValueTo: "index",
	            valueMapper: null
	        },

	        events: [
	            CHANGE,
	            CLICK,
	            LISTBOUND,
	            ITEMCHANGE,
	            ACTIVATE,
	            DEACTIVATE
	        ],

	        setOptions: function(options) {
	            Widget.fn.setOptions.call(this, options);

	            if (this._selectProxy && this.options.selectable === false) {
	                this.element.off(CLICK, "." + VIRTUALITEM, this._selectProxy);
	            } else if (!this._selectProxy && this.options.selectable) {
	                this._selectable();
	            }

	            this._templates();
	            this.refresh();
	        },

	        items: function() {
	            return $(this._items);
	        },

	        destroy: function() {
	            this.wrapper.off(VIRTUAL_LIST_NS);
	            this.dataSource.unbind(CHANGE, this._refreshHandler);
	            Widget.fn.destroy.call(this);
	        },

	        setDataSource: function(source) {
	            var that = this;
	            var dataSource = source || {};
	            var value;

	            dataSource = $.isArray(dataSource) ? {data: dataSource} : dataSource;
	            dataSource = kendo.data.DataSource.create(dataSource);

	            if (that.dataSource) {
	                that.dataSource.unbind(CHANGE, that._refreshHandler);

	                that._clean();
	                that.bound(false);

	                that._deferValueSet = true;
	                value = that.value();

	                that.value([]);
	                that.mute(function() {
	                    that.value(value);
	                });
	            } else {
	                that._refreshHandler = $.proxy(that.refresh, that);
	            }

	            that.dataSource = dataSource.bind(CHANGE, that._refreshHandler);

	            that.setDSFilter(dataSource.filter());

	            if (dataSource.view().length !== 0) {
	                that.refresh();
	            } else if (that.options.autoBind) {
	                dataSource.fetch();
	            }
	        },

	        skip: function() {
	            return this.dataSource.currentRangeStart();
	        },

	        _triggerListBound: function () {
	            var that = this;
	            var skip = that.skip();

	            if (that.bound() && !that._selectingValue && that._skip !== skip) {
	                that._skip = skip;
	                that.trigger(LISTBOUND);
	            }
	        },

	        _getValues: function(dataItems) {
	            var getter = this._valueGetter;

	            return $.map(dataItems, function(dataItem) {
	                return getter(dataItem);
	            });
	        },

	        refresh: function(e) {
	            var that = this;
	            var action = e && e.action;
	            var isItemChange = action === "itemchange";
	            var filtered = this.isFiltered();
	            var result;

	            if (that._mute) { return; }

	            that._deferValueSet = false;

	            if (!that._fetching) {
	                if (filtered) {
	                    that.focus(0);
	                }

	                that._createList();
	                if (!action && that._values.length && !filtered && !that.options.skipUpdateOnBind) {
	                    that._selectingValue = true;
	                    that.value(that._values, true).done(function() {
	                        that.bound(true);
	                        that._selectingValue = false;
	                        that._triggerListBound();
	                    });
	                } else {
	                    that.bound(true);
	                    that._triggerListBound();
	                }
	            } else {
	                if (that._renderItems) {
	                    that._renderItems(true);
	                }

	                that._triggerListBound();
	            }

	            if (isItemChange || action === "remove") {
	                result = mapChangedItems(that._selectedDataItems, e.items);
	                if (result.changed.length) {
	                    if (isItemChange) {
	                        that.trigger("selectedItemChange", {
	                            items: result.changed
	                        });
	                    } else {
	                        that.value(that._getValues(result.unchanged));
	                    }
	                }
	            }

	            that._fetching = false;
	        },

	        removeAt: function(position) {
	            this._selectedIndexes.splice(position, 1);
	            this._values.splice(position, 1);

	            return {
	                position: position,
	                dataItem: this._selectedDataItems.splice(position, 1)[0]
	            };
	        },

	        setValue: function(value) {
	            this._values = toArray(value);
	        },

	        value: function(value, _forcePrefetch) {
	            var that = this;

	            if (value === undefined) {
	                return that._values.slice();
	            }

	            if (value === null) {
	                value = [];
	            }

	            value = toArray(value);

	            if (!that._valueDeferred || that._valueDeferred.state() === "resolved") {
	                that._valueDeferred = $.Deferred();
	            }

	            var shouldClear = that.options.selectable === "multiple" && that.select().length && value.length;

	            if (shouldClear || !value.length) {
	                that.select(-1);
	            }

	            that._values = value;

	            if ((that.bound() && !that._mute && !that._deferValueSet) || _forcePrefetch) {
	                that._prefetchByValue(value);
	            }

	            return that._valueDeferred;
	        },

	        _prefetchByValue: function(value) {
	            var that = this,
	                dataView = that._dataView,
	                valueGetter = that._valueGetter,
	                mapValueTo = that.options.mapValueTo,
	                item, match = false,
	                forSelection = [];

	            //try to find the items in the loaded data
	            for (var i = 0; i < value.length; i++) {
	                for (var idx = 0; idx < dataView.length; idx++) {
	                    item = dataView[idx].item;
	                    if (item) {
	                        match = isPrimitive(item) ? value[i] === item : value[i] === valueGetter(item);

	                        if (match) {
	                            forSelection.push(dataView[idx].index);
	                        }
	                    }
	                }
	            }

	            if (forSelection.length === value.length) {
	                that._values = [];
	                that.select(forSelection);
	                return;
	            }

	            //prefetch the items
	            if (typeof that.options.valueMapper === "function") {
	                that.options.valueMapper({
	                    value: (this.options.selectable === "multiple") ? value : value[0],
	                    success: function(response) {
	                        if (mapValueTo === "index") {
	                            that.mapValueToIndex(response);
	                        } else if (mapValueTo === "dataItem") {
	                            that.mapValueToDataItem(response);
	                        }
	                    }
	                });
	            } else {
	                that.select([-1]);
	            }
	        },

	        mapValueToIndex: function(indexes) {
	            if (indexes === undefined || indexes === -1 || indexes === null) {
	                indexes = [];
	            } else {
	                indexes = toArray(indexes);
	            }

	            if (!indexes.length) {
	                indexes = [-1];
	            } else {
	                var removed = this._deselect([]).removed;
	                if (removed.length) {
	                    this._triggerChange(removed, []);
	                }
	            }

	            this.select(indexes);
	        },

	        mapValueToDataItem: function(dataItems) {
	            var removed, added;

	            if (dataItems === undefined || dataItems === null) {
	                dataItems = [];
	            } else {
	                dataItems = toArray(dataItems);
	            }

	            if (!dataItems.length) {
	                this.select([-1]);
	            } else {
	                removed = $.map(this._selectedDataItems, function(item, index) {
	                    return { index: index, dataItem: item };
	                });

	                added = $.map(dataItems, function(item, index) {
	                    return { index: index, dataItem: item };
	                });

	                this._selectedDataItems = dataItems;

	                this._selectedIndexes = [];

	                for (var i = 0; i < this._selectedDataItems.length; i++) {
	                    this._selectedIndexes.push(undefined);
	                }

	                this._triggerChange(removed, added);

	                if (this._valueDeferred) {
	                    this._valueDeferred.resolve();
	                }
	            }
	        },

	        deferredRange: function(index) {
	            var dataSource = this.dataSource;
	            var take = this.itemCount;
	            var ranges = this._rangesList;
	            var result = $.Deferred();
	            var defs = [];

	            var low = Math.floor(index / take) * take;
	            var high = Math.ceil(index / take) * take;

	            var pages = high === low ? [ high ] : [ low, high ];

	            $.each(pages, function(_, skip) {
	                var end = skip + take;
	                var existingRange = ranges[skip];
	                var deferred;

	                if (!existingRange || (existingRange.end !== end)) {
	                    deferred = $.Deferred();
	                    ranges[skip] = { end: end, deferred: deferred };

	                    dataSource._multiplePrefetch(skip, take, function() {
	                        deferred.resolve();
	                    });
	                } else {
	                    deferred = existingRange.deferred;
	                }

	                defs.push(deferred);
	            });

	            $.when.apply($, defs).then(function() {
	                result.resolve();
	            });

	            return result;
	        },

	        prefetch: function(indexes) {
	            var that = this,
	                take = this.itemCount,
	                isEmptyList = !that._promisesList.length;

	            if (!isActivePromise(that._activeDeferred)) {
	                that._activeDeferred = $.Deferred();
	                that._promisesList = [];
	            }

	            $.each(indexes, function(_, index) {
	                that._promisesList.push(that.deferredRange(that._getSkip(index, take)));
	            });

	            if (isEmptyList) {
	                $.when.apply($, that._promisesList).done(function() {
	                    that._promisesList = [];
	                    that._activeDeferred.resolve();
	                });
	            }

	            return that._activeDeferred;
	        },

	        _findDataItem: function(view, index) {
	            var group;

	            //find in grouped view
	            if (this.options.type === "group") {
	                for (var i = 0; i < view.length; i++) {
	                    group = view[i].items;
	                    if (group.length <= index) {
	                        index = index - group.length;
	                    } else {
	                        return group[index];
	                    }
	                }
	            }

	            //find in flat view
	            return view[index];
	        },

	        _getRange: function(skip, take) {
	            return this.dataSource._findRange(skip, Math.min(skip + take, this.dataSource.total()));
	        },

	        dataItemByIndex: function(index) {
	            var take = this.itemCount;
	            var skip = this._getSkip(index, take);
	            var view = this._getRange(skip, take);

	            return this._findDataItem(view, [index - skip]);
	        },

	        selectedDataItems: function() {
	            return this._selectedDataItems.slice();
	        },

	        scrollWith: function(value) {
	            this.content.scrollTop(this.content.scrollTop() + value);
	        },

	        scrollTo: function(y) {
	            this.content.scrollTop(y); //works only if the element is visible
	        },

	        scrollToIndex: function(index) {
	            this.scrollTo(index * this.options.itemHeight);
	        },

	        focus: function(candidate) {
	            var element,
	                index,
	                data,
	                current,
	                itemHeight = this.options.itemHeight,
	                id = this._optionID,
	                triggerEvent = true;

	            if (candidate === undefined) {
	                current = this.element.find("." + FOCUSED);
	                return current.length ? current : null;
	            }

	            if (typeof candidate === "function") {
	                data = this.dataSource.flatView();
	                for (var idx = 0; idx < data.length; idx++) {
	                    if (candidate(data[idx])) {
	                        candidate = idx;
	                        break;
	                    }
	                }
	            }

	            if (candidate instanceof Array) {
	                candidate = lastFrom(candidate);
	            }

	            if (isNaN(candidate)) {
	                element = $(candidate);
	                index = parseInt($(element).attr("data-offset-index"), 10);
	            } else {
	                index = candidate;
	                element = this._getElementByIndex(index);
	            }

	            if (index === -1) {
	                this.element.find("." + FOCUSED).removeClass(FOCUSED);
	                this._focusedIndex = undefined;
	                return;
	            }

	            if (element.length) { /*focus rendered item*/
	                if (element.hasClass(FOCUSED)) {
	                    triggerEvent = false;
	                }
	                if (this._focusedIndex !== undefined) {
	                    current = this._getElementByIndex(this._focusedIndex);
	                    current
	                        .removeClass(FOCUSED)
	                        .removeAttr("id");

	                    if (triggerEvent) {
	                        this.trigger(DEACTIVATE);
	                    }
	                }

	                this._focusedIndex = index;

	                element
	                    .addClass(FOCUSED)
	                    .attr("id", id);

	                var position = this._getElementLocation(index);

	                if (position === "top") {
	                    this.scrollTo(index * itemHeight);
	                } else if (position === "bottom") {
	                    this.scrollTo((index * itemHeight + itemHeight) - this._screenHeight);
	                } else if (position === "outScreen") {
	                    this.scrollTo(index * itemHeight);
	                }

	                if (triggerEvent) {
	                    this.trigger(ACTIVATE);
	                }
	            } else { /*focus non rendered item*/
	                this._focusedIndex = index;
	                this.items().removeClass(FOCUSED);
	                this.scrollToIndex(index);
	            }
	        },

	        focusIndex: function() {
	            return this._focusedIndex;
	        },

	        focusFirst: function() {
	            this.scrollTo(0);
	            this.focus(0);
	        },

	        focusLast: function() {
	            var lastIndex = this.dataSource.total();
	            this.scrollTo(this.heightContainer.offsetHeight);
	            this.focus(lastIndex);
	        },

	        focusPrev: function() {
	            var index = this._focusedIndex;
	            var current;

	            if (!isNaN(index) && index > 0) {
	                index -= 1;
	                this.focus(index);

	                current = this.focus();
	                if (current && current.hasClass("k-loading-item")) {
	                    index += 1;
	                    this.focus(index);
	                }

	                return index;
	            } else {
	                index = this.dataSource.total() - 1;
	                this.focus(index);
	                return index;
	            }
	        },

	        focusNext: function() {
	            var index = this._focusedIndex;
	            var lastIndex = this.dataSource.total() - 1;
	            var current;

	            if (!isNaN(index) && index < lastIndex) {
	                index += 1;
	                this.focus(index);

	                current = this.focus();
	                if (current && current.hasClass("k-loading-item")) {
	                    index -= 1;
	                    this.focus(index);
	                }

	                return index;
	            } else {
	                index = 0;
	                this.focus(index);
	                return index;
	            }
	        },

	        _triggerChange: function(removed, added) {
	            removed = removed || [];
	            added = added || [];

	            if (removed.length || added.length) {
	                this.trigger(CHANGE, {
	                    removed: removed,
	                    added: added
	                });
	            }
	        },

	        select: function(candidate) {
	            var that = this,
	                indices,
	                singleSelection = that.options.selectable !== "multiple",
	                prefetchStarted = isActivePromise(that._activeDeferred),
	                filtered = this.isFiltered(),
	                isAlreadySelected,
	                deferred,
	                result,
	                removed = [];

	            if (candidate === undefined) {
	                return that._selectedIndexes.slice();
	            }

	            if (!that._selectDeferred || that._selectDeferred.state() === "resolved") {
	                that._selectDeferred = $.Deferred();
	            }

	            indices = that._getIndecies(candidate);
	            isAlreadySelected = singleSelection && !filtered && lastFrom(indices) === lastFrom(this._selectedIndexes);
	            removed = that._deselectCurrentValues(indices);

	            if (removed.length || !indices.length || isAlreadySelected) {
	                that._triggerChange(removed);

	                if (that._valueDeferred) {
	                    that._valueDeferred.resolve();
	                }

	                return that._selectDeferred.resolve().promise();
	            }

	            if (indices.length === 1 && indices[0] === -1) {
	                indices = [];
	            }

	            result = that._deselect(indices);
	            removed = result.removed;
	            indices = result.indices;

	            if (singleSelection) {
	                prefetchStarted = false;
	                if (indices.length) {
	                    indices = [lastFrom(indices)];
	                }
	            }

	            var done = function() {
	                var added = that._select(indices);

	                that.focus(indices);
	                that._triggerChange(removed, added);

	                if (that._valueDeferred) {
	                    that._valueDeferred.resolve();
	                }

	                that._selectDeferred.resolve();
	            };

	            deferred = that.prefetch(indices);

	            if (!prefetchStarted) {
	                if (deferred) {
	                    deferred.done(done);
	                } else {
	                    done();
	                }
	            }

	            return that._selectDeferred.promise();
	        },

	        bound: function(bound) {
	            if (bound === undefined) {
	                return this._listCreated;
	            }

	            this._listCreated = bound;
	        },

	        mute: function(callback) {
	            this._mute = true;
	            proxy(callback(), this);
	            this._mute = false;
	        },

	        setDSFilter: function(filter) {
	            this._lastDSFilter = $.extend({}, filter);
	        },

	        isFiltered: function() {
	            if (!this._lastDSFilter) {
	                this.setDSFilter(this.dataSource.filter());
	            }

	            return !kendo.data.Query.compareFilters(this.dataSource.filter(), this._lastDSFilter);
	        },

	        skipUpdate: $.noop,

	        _getElementByIndex: function(index) {
	            return this.items().filter(function(idx, element) {
	                return index === parseInt($(element).attr("data-offset-index"), 10);
	            });
	        },

	        _getElementByDataItem: function(dataItem) {
	            var dataView = this._dataView,
	            valueGetter = this._valueGetter,
	                element, match;

	            for (var i = 0; i < dataView.length; i++) {
	                match = dataView[i].item && isPrimitive(dataView[i].item) ? dataView[i].item === dataItem : valueGetter(dataView[i].item) === valueGetter(dataItem);
	                if (match) {
	                    element = dataView[i];
	                    break;
	                }
	            }

	            return element ? this._getElementByIndex(element.index) : $();
	        },

	        _clean: function() {
	            this.result = undefined;
	            this._lastScrollTop = undefined;
	            this._skip = undefined;
	            $(this.heightContainer).remove();
	            this.heightContainer = undefined;
	            this.element.empty();
	        },

	        _height: function() {
	            var hasData = !!this.dataSource.view().length,
	                height = this.options.height,
	                itemHeight = this.options.itemHeight,
	                total = this.dataSource.total();

	            if (!hasData) {
	                height = 0;
	            } else if (height/itemHeight > total) {
	                height = total * itemHeight;
	            }

	            return height;
	        },

	        setScreenHeight: function() {
	            var height = this._height();

	            this.content.height(height);
	            this._screenHeight = height;
	        },

	        screenHeight: function() {
	            return this._screenHeight;
	        },

	        _getElementLocation: function(index) {
	            var scrollTop = this.content.scrollTop(),
	                screenHeight = this._screenHeight,
	                itemHeight = this.options.itemHeight,
	                yPosition = index * itemHeight,
	                yDownPostion = yPosition + itemHeight,
	                screenEnd = scrollTop + screenHeight,
	                position;

	            if (yPosition === (scrollTop - itemHeight) || (yDownPostion > scrollTop && yPosition < scrollTop)) {
	                position = "top";
	            } else if (yPosition === screenEnd || (yPosition < screenEnd && screenEnd < yDownPostion)) {
	                position = "bottom";
	            } else if ((yPosition >= scrollTop) && (yPosition <= scrollTop + (screenHeight - itemHeight))) {
	                position = "inScreen";
	            } else {
	                position = "outScreen";
	            }

	            return position;
	        },

	        _templates: function() {
	            var options = this.options;
	            var templates = {
	                template: options.template,
	                placeholderTemplate: options.placeholderTemplate,
	                groupTemplate: options.groupTemplate,
	                fixedGroupTemplate: options.fixedGroupTemplate
	            };

	            for (var key in templates) {
	                if (typeof templates[key] !== "function") {
	                    templates[key] = kendo.template(templates[key] || "");
	                }
	            }

	            this.templates = templates;
	        },

	        _generateItems: function(element, count) {
	            var items = [],
	                item,
	                itemHeight = this.options.itemHeight + "px";

	            while(count-- > 0) {
	                item = document.createElement("li");
	                item.tabIndex = -1;
	                item.className = VIRTUALITEM + " " + ITEM;
	                item.setAttribute("role", "option");
	                item.style.height = itemHeight;
	                item.style.minHeight = itemHeight;
	                element.appendChild(item);

	                items.push(item);
	            }

	            return items;
	        },

	        _saveInitialRanges: function() {
	            var ranges = this.dataSource._ranges;
	            var deferred = $.Deferred();
	            deferred.resolve();

	            this._rangesList = {};
	            for (var i = 0; i < ranges.length; i++) {
	                this._rangesList[ranges[i].start] = { end: ranges[i].end, deferred: deferred };
	            }
	        },

	        _createList: function() {
	            var that = this,
	                content = that.content.get(0),
	                options = that.options,
	                dataSource = that.dataSource;

	            if (that.bound()) {
	                that._clean();
	            }

	            that._saveInitialRanges();
	            that._buildValueGetter();
	            that.setScreenHeight();
	            that.itemCount = getItemCount(that._screenHeight, options.listScreens, options.itemHeight);

	            if (that.itemCount > dataSource.total()) {
	                that.itemCount = dataSource.total();
	            }

	            that._items = that._generateItems(that.element[0], that.itemCount);

	            that._setHeight(options.itemHeight * dataSource.total());
	            that.options.type = (dataSource.group() || []).length ? "group" : "flat";

	            if (that.options.type === "flat") {
	                that.header.hide();
	            } else {
	                that.header.show();
	            }

	            that.getter = that._getter(function() {
	                that._renderItems(true);
	            });

	            that._onScroll = function(scrollTop, force) {
	                var getList = that._listItems(that.getter);
	                return that._fixedHeader(scrollTop, getList(scrollTop, force));
	            };

	            that._renderItems = that._whenChanged(
	                scrollCallback(content, that._onScroll),
	                syncList(that._reorderList(that._items, $.proxy(render, that)))
	            );

	            that._renderItems();
	            that._calculateGroupPadding(that._screenHeight);
	        },

	        _setHeight: function(height) {
	            var currentHeight,
	                heightContainer = this.heightContainer;

	            if (!heightContainer) {
	                heightContainer = this.heightContainer = appendChild(this.content[0], HEIGHTCONTAINER);
	            } else {
	                currentHeight = heightContainer.offsetHeight;
	            }

	            if (height !== currentHeight) {
	                heightContainer.innerHTML = "";

	                while (height > 0) {
	                    var padHeight = Math.min(height, 250000); //IE workaround, should not create elements with height larger than 250000px
	                    appendChild(heightContainer).style.height = padHeight + "px";
	                    height -= padHeight;
	                }
	            }
	        },

	        _getter: function() {
	            var lastRequestedRange = null,
	                dataSource = this.dataSource,
	                lastRangeStart = dataSource.skip(),
	                type = this.options.type,
	                pageSize = this.itemCount,
	                flatGroups = {};

	            if (dataSource.pageSize() < pageSize) {
	                this.mute(function() {
	                    dataSource.pageSize(pageSize);
	                });
	            }

	            return function(index, rangeStart) {
	                var that = this;
	                if (!dataSource.inRange(rangeStart, pageSize)) {
	                    if (lastRequestedRange !== rangeStart) {
	                        lastRequestedRange = rangeStart;
	                        lastRangeStart = rangeStart;

	                        if (that._getterDeferred) {
	                            that._getterDeferred.reject();
	                        }

	                        that._getterDeferred = that.deferredRange(rangeStart);
	                        that._getterDeferred.then(function() {
	                            var firstItemIndex = that._indexConstraint(that.content[0].scrollTop);

	                            that._getterDeferred = null;

	                            if (rangeStart <= firstItemIndex && firstItemIndex <= (rangeStart + pageSize)) {
	                                that._fetching = true;
	                                dataSource.range(rangeStart, pageSize);
	                            }
	                        });
	                    }

	                    return null;
	                } else {
	                    if (lastRangeStart !== rangeStart) {
	                        this.mute(function() {
	                            dataSource.range(rangeStart, pageSize);
	                            lastRangeStart = rangeStart;
	                        });
	                    }

	                    var result;
	                    if (type === "group") { //grouped list
	                        if (!flatGroups[rangeStart]) {
	                            var flatGroup = flatGroups[rangeStart] = [];
	                            var groups = dataSource.view();
	                            for (var i = 0, len = groups.length; i < len; i++) {
	                                var group = groups[i];
	                                for (var j = 0, groupLength = group.items.length; j < groupLength; j++) {
	                                    flatGroup.push({ item: group.items[j], group: group.value });
	                                }
	                            }
	                        }

	                        result = flatGroups[rangeStart][index - rangeStart];
	                    } else { //flat list
	                        result = dataSource.view()[index - rangeStart];
	                    }

	                    return result;
	                }
	            };
	        },

	        _fixedHeader: function(scrollTop, list) {
	            var group = this.currentVisibleGroup,
	                itemHeight = this.options.itemHeight,
	                firstVisibleDataItemIndex = Math.floor((scrollTop - list.top) / itemHeight),
	                firstVisibleDataItem = list.items[firstVisibleDataItemIndex];

	            if (firstVisibleDataItem && firstVisibleDataItem.item) {
	                var firstVisibleGroup = firstVisibleDataItem.group;

	                if (firstVisibleGroup !== group) {
	                    this.header[0].innerHTML = firstVisibleGroup || "";
	                    this.currentVisibleGroup = firstVisibleGroup;
	                }
	            }

	            return list;
	        },

	        _itemMapper: function(item, index, value) {
	            var listType = this.options.type,
	                itemHeight = this.options.itemHeight,
	                currentIndex = this._focusedIndex,
	                selected = false,
	                current = false,
	                newGroup = false,
	                group = null,
	                match = false,
	                valueGetter = this._valueGetter;

	            if (listType === "group") {
	                if (item) {
	                    newGroup = index === 0 || (this._currentGroup && this._currentGroup !== item.group);
	                    this._currentGroup = item.group;
	                }

	                group = item ? item.group : null;
	                item = item ? item.item : null;
	            }

	            if (!this.isFiltered() && value.length && item) {
	                for (var i = 0; i < value.length; i++) {
	                    match = isPrimitive(item) ? value[i] === item : value[i] === valueGetter(item);
	                    if (match) {
	                        value.splice(i , 1);
	                        selected = true;
	                        break;
	                    }
	                }
	            }

	            if (currentIndex === index) {
	                current = true;
	            }

	            return {
	                item: item ? item : null,
	                group: group,
	                newGroup: newGroup,
	                selected: selected,
	                current: current,
	                index: index,
	                top: index * itemHeight
	            };
	        },

	        _range: function(index) {
	            var itemCount = this.itemCount,
	                value = this._values.slice(),
	                items = [],
	                item;

	            this._view = {};
	            this._currentGroup = null;

	            for (var i = index, length = index + itemCount; i < length; i++) {
	                item = this._itemMapper(this.getter(i, index), i, value);
	                items.push(item);
	                this._view[item.index] = item;
	            }

	            this._dataView = items;
	            return items;
	        },

	        _getDataItemsCollection: function(scrollTop, lastScrollTop) {
	            var items = this._range(this._listIndex(scrollTop, lastScrollTop));
	            return {
	                index: items.length ? items[0].index : 0,
	                top: items.length ? items[0].top : 0,
	                items: items
	            };
	        },

	        _listItems: function() {
	            var screenHeight = this._screenHeight,
	                options = this.options;

	            var theValidator = listValidator(options, screenHeight);

	            return $.proxy(function(value, force) {
	                var result = this.result,
	                    lastScrollTop = this._lastScrollTop;

	                if (force || !result || !theValidator(result, value, lastScrollTop)) {
	                    result = this._getDataItemsCollection(value, lastScrollTop);
	                }

	                this._lastScrollTop = value;
	                this.result = result;

	                return result;
	            }, this);
	        },

	        _whenChanged: function(getter, callback) {
	            var current;

	            return function(force) {
	                var theNew = getter(force);

	                if (theNew !== current) {
	                    current = theNew;
	                    callback(theNew, force);
	                }
	            };
	        },

	        _reorderList: function(list, reorder) {
	            var that = this;
	            var length = list.length;
	            var currentOffset = -Infinity;
	            reorder = $.proxy(map2(reorder, this.templates), this);

	            return function(list2, offset, force) {
	                var diff = offset - currentOffset;
	                var range, range2;

	                if (force || Math.abs(diff) >= length) { // full reorder
	                    range = list;
	                    range2 = list2;
	                } else { // partial reorder
	                    range = reshift(list, diff);
	                    range2 = diff > 0 ? list2.slice(-diff) : list2.slice(0, -diff);
	                }

	                reorder(range, range2, that.bound());

	                currentOffset = offset;
	            };
	        },

	        _bufferSizes: function() {
	            var options = this.options;

	            return bufferSizes(this._screenHeight, options.listScreens, options.oppositeBuffer);
	        },

	        _indexConstraint: function(position) {
	            var itemCount = this.itemCount,
	                itemHeight = this.options.itemHeight,
	                total = this.dataSource.total();

	            return Math.min(Math.max(total - itemCount, 0), Math.max(0, Math.floor(position / itemHeight )));
	        },

	        _listIndex: function(scrollTop, lastScrollTop) {
	            var buffers = this._bufferSizes(),
	                position;

	            position = scrollTop - ((scrollTop > lastScrollTop) ? buffers.down : buffers.up);

	            return this._indexConstraint(position);
	        },

	        _selectable: function() {
	            if (this.options.selectable) {
	                this._selectProxy = $.proxy(this, "_clickHandler");
	                this.element.on(CLICK + VIRTUAL_LIST_NS, "." + VIRTUALITEM, this._selectProxy);
	            }
	        },

	        getElementIndex: function(element) {
	            if (!(element instanceof jQuery)) {
	                return undefined;
	            }

	            return parseInt(element.attr("data-offset-index"), 10);
	        },

	        _getIndecies: function(candidate) {
	            var result = [], data;

	            if (typeof candidate === "function") {
	                data = this.dataSource.flatView();
	                for (var idx = 0; idx < data.length; idx++) {
	                    if (candidate(data[idx])) {
	                        result.push(idx);
	                        break;
	                    }
	                }
	            }

	            if (typeof candidate === "number") {
	                result.push(candidate);
	            }

	            var elementIndex = this.getElementIndex(candidate);
	            if (!isNaN(elementIndex)) {
	                result.push(elementIndex);
	            }

	            if (candidate instanceof Array) {
	                result = candidate;
	            }

	            return result;
	        },

	        _deselect: function(indices) {
	            var removed = [],
	                selectedIndex,
	                dataItem,
	                selectedIndexes = this._selectedIndexes,
	                selectedDataItems = this._selectedDataItems,
	                position = 0,
	                selectable = this.options.selectable,
	                removedindexesCounter = 0,
	                valueGetter = this._valueGetter,
	                item, match,
	                result = null;

	            indices = indices.slice();

	            if (selectable === true || !indices.length) { //deselect everything
	                for (var idx = 0; idx < selectedIndexes.length; idx++) {
	                    if (selectedIndexes[idx] !== undefined) {
	                        this._getElementByIndex(selectedIndexes[idx]).removeClass(SELECTED);
	                    } else if (selectedDataItems[idx]) {
	                        this._getElementByDataItem(selectedDataItems[idx]).removeClass(SELECTED);
	                    }

	                    removed.push({
	                        index: selectedIndexes[idx],
	                        position: idx,
	                        dataItem: selectedDataItems[idx]
	                    });
	                }

	                this._values = [];
	                this._selectedDataItems = [];
	                this._selectedIndexes = [];
	            } else if (selectable === "multiple") {
	                for (var i = 0; i < indices.length; i++) {
	                    result = null;
	                    position = $.inArray(indices[i], selectedIndexes);
	                    dataItem = this.dataItemByIndex(indices[i]);

	                    if (position === -1 && dataItem) {
	                        for (var j = 0; j < selectedDataItems.length; j++) {
	                            match = isPrimitive(dataItem) ? selectedDataItems[j] === dataItem : valueGetter(selectedDataItems[j]) === valueGetter(dataItem);
	                            if (match) {
	                                item = this._getElementByIndex(indices[i]);
	                                result = this._deselectSingleItem(item, j, indices[i], removedindexesCounter);
	                            }
	                        }
	                    } else {
	                        selectedIndex = selectedIndexes[position];

	                        if (selectedIndex !== undefined) {
	                            item = this._getElementByIndex(selectedIndex);
	                            result = this._deselectSingleItem(item, position, selectedIndex, removedindexesCounter);
	                        }
	                    }

	                    if (result) {
	                        indices.splice(i, 1);
	                        removed.push(result);

	                        removedindexesCounter++;
	                        i--;
	                    }
	                }
	            }

	            return {
	                indices: indices,
	                removed: removed
	            };
	        },

	        _deselectSingleItem: function(item, position, selectedIndex, removedindexesCounter) {
	            var dataItem;

	            if (!item.hasClass("k-state-selected")) {
	                return;
	            }

	            item.removeClass(SELECTED);
	            this._values.splice(position, 1);
	            this._selectedIndexes.splice(position, 1);
	            dataItem = this._selectedDataItems.splice(position, 1)[0];

	            return {
	                index: selectedIndex,
	                position: position + removedindexesCounter,
	                dataItem: dataItem
	            };
	        },

	        _deselectCurrentValues: function(indices) {
	            var children = this.element[0].children;
	            var value, index, position;
	            var values = this._values;
	            var removed = [];
	            var idx = 0;
	            var j;

	            if (this.options.selectable !== "multiple" || !this.isFiltered()) {
	                return [];
	            }

	            if (indices[0] === -1) {
	                $(children).removeClass("k-state-selected");
	                removed = $.map(this._selectedDataItems.slice(0), function(dataItem, idx) {
	                   return {
	                      dataItem: dataItem,
	                      position: idx
	                   };
	                });
	                this._selectedIndexes = [];
	                this._selectedDataItems = [];
	                this._values = [];
	                return removed;
	            }

	            for (; idx < indices.length; idx++) {
	                position = -1;
	                index = indices[idx];
	                value = this._valueGetter(this.dataItemByIndex(index));

	                for (j = 0; j < values.length; j++) {
	                    if (value == values[j]) {
	                        position = j;
	                        break;
	                    }
	                }

	                if (position > -1) {
	                    removed.push(this.removeAt(position));
	                    $(children[index]).removeClass("k-state-selected");
	                }
	            }

	            return removed;
	        },

	        _getSkip: function(index, take) {
	            var page = index < take ? 1 : Math.floor(index / take) + 1;

	            return (page - 1) * take;
	        },

	        _select: function(indexes) {
	            var that = this,
	                singleSelection = this.options.selectable !== "multiple",
	                dataSource = this.dataSource,
	                dataItem, oldSkip,
	                take = this.itemCount,
	                valueGetter = this._valueGetter,
	                added = [];

	            if (singleSelection) {
	                that._selectedIndexes = [];
	                that._selectedDataItems = [];
	                that._values = [];
	            }

	            oldSkip = dataSource.skip();

	            $.each(indexes, function(_, index) {
	                var skip = that._getSkip(index, take);

	                that.mute(function() {
	                    dataSource.range(skip, take); //switch the range to get the dataItem

	                    dataItem = that._findDataItem(dataSource.view(), [index - skip]);
	                    that._selectedIndexes.push(index);
	                    that._selectedDataItems.push(dataItem);
	                    that._values.push(isPrimitive(dataItem) ? dataItem : valueGetter(dataItem));

	                    added.push({
	                        index: index,
	                        dataItem: dataItem
	                    });

	                    that._getElementByIndex(index).addClass(SELECTED);

	                    dataSource.range(oldSkip, take); //switch back the range
	                });
	            });

	            return added;
	        },

	        _clickHandler: function(e) {
	            var item = $(e.currentTarget);

	            if (!e.isDefaultPrevented() && item.attr("data-uid")) {
	                this.trigger(CLICK, { item: item });
	            }
	        },

	        _buildValueGetter: function() {
	            this._valueGetter = kendo.getter(this.options.dataValueField);
	        },

	        _calculateGroupPadding: function(height) {
	            var firstItem = this.items().first(),
	                groupHeader = this.header,
	                padding = 0;

	            if (groupHeader[0] && groupHeader[0].style.display !== "none") {
	                if (height !== "auto") {
	                    padding = kendo.support.scrollbar();
	                }

	                padding += parseFloat(firstItem.css("border-right-width"), 10) + parseFloat(firstItem.children(".k-group").css("right"), 10);

	                groupHeader.css("padding-right", padding);
	            }
	        }

	    });

	    kendo.ui.VirtualList = VirtualList;
	    kendo.ui.plugin(VirtualList);

	})(window.kendo.jQuery);

	return window.kendo;

	}, __webpack_require__(422));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(420)))

/***/ })

/******/ });

/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ({

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(560);


/***/ }),

/***/ 422:
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),

/***/ 433:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(1);

/***/ }),

/***/ 461:
/***/ (function(module, exports) {

	module.exports = __webpack_require__(6);

/***/ }),

/***/ 560:
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function(f, define){
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [ __webpack_require__(461), __webpack_require__(433)], __WEBPACK_AMD_DEFINE_FACTORY__ = (f), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	})(function(){

	    var __meta__ = { // jshint ignore:line
	        id: "window",
	        name: "Window",
	        category: "web",
	        description: "The Window widget displays content in a modal or non-modal HTML window.",
	        depends: [ "draganddrop", "popup" ],
	        features: [ {
	            id: "window-fx",
	            name: "Animation",
	            description: "Support for animation",
	            depends: [ "fx" ]
	        } ]
	    };

	    (function($, undefined) {
	        var kendo = window.kendo,
	            Widget = kendo.ui.Widget,
	            TabKeyTrap = kendo.ui.Popup.TabKeyTrap,
	            Draggable = kendo.ui.Draggable,
	            isPlainObject = $.isPlainObject,
	            activeElement = kendo._activeElement,
	            outerWidth = kendo._outerWidth,
	            outerHeight = kendo._outerHeight,
	            proxy = $.proxy,
	            extend = $.extend,
	            each = $.each,
	            template = kendo.template,
	            BODY = "body",
	            templates,
	            NS = ".kendoWindow",
	            // classNames
	            KWINDOW = ".k-window",
	            KWINDOWTITLE = ".k-window-title",
	            KWINDOWTITLEBAR = KWINDOWTITLE + "bar",
	            KWINDOWCONTENT = ".k-window-content",
	            KWINDOWRESIZEHANDLES = ".k-resize-handle",
	            KOVERLAY = ".k-overlay",
	            KCONTENTFRAME = "k-content-frame",
	            LOADING = "k-i-loading",
	            KHOVERSTATE = "k-state-hover",
	            KFOCUSEDSTATE = "k-state-focused",
	            MAXIMIZEDSTATE = "k-window-maximized",
	            // constants
	            VISIBLE = ":visible",
	            HIDDEN = "hidden",
	            CURSOR = "cursor",
	            // events
	            OPEN = "open",
	            ACTIVATE = "activate",
	            DEACTIVATE = "deactivate",
	            CLOSE = "close",
	            REFRESH = "refresh",
	            MINIMIZE = "minimize",
	            MAXIMIZE = "maximize",
	            RESIZESTART = "resizeStart",
	            RESIZE = "resize",
	            RESIZEEND = "resizeEnd",
	            DRAGSTART = "dragstart",
	            DRAGEND = "dragend",
	            ERROR = "error",
	            OVERFLOW = "overflow",
	            ZINDEX = "zIndex",
	            MINIMIZE_MAXIMIZE = ".k-window-actions .k-i-window-minimize,.k-window-actions .k-i-window-maximize",
	            KPIN = ".k-i-pin",
	            KUNPIN = ".k-i-unpin",
	            PIN_UNPIN = KPIN + "," + KUNPIN,
	            TITLEBAR_BUTTONS = ".k-window-titlebar .k-window-action",
	            REFRESHICON = ".k-window-titlebar .k-i-refresh",
	            zero = /^0[a-z]*$/i,
	            isLocalUrl = kendo.isLocalUrl;

	        function defined(x) {
	            return (typeof x != "undefined");
	        }

	        function constrain(value, low, high) {
	            return Math.max(Math.min(parseInt(value, 10), high === Infinity ? high : parseInt(high, 10)), parseInt(low, 10));
	        }

	        function executableScript() {
	            return !this.type || this.type.toLowerCase().indexOf("script") >= 0;
	        }

	        var Window = Widget.extend({
	            init: function(element, options) {
	                var that = this,
	                    wrapper,
	                    offset = {},
	                    visibility, display, position,
	                    isVisible = false,
	                    content,
	                    windowContent,
	                    suppressActions = options && options.actions && !options.actions.length,
	                    id;

	                Widget.fn.init.call(that, element, options);
	                options = that.options;
	                position = options.position;
	                element = that.element;
	                content = options.content;

	                if (suppressActions) {
	                    options.actions = [];
	                }

	                that.appendTo = $(options.appendTo);

	                if (content && !isPlainObject(content)) {
	                    content = options.content = { url: content };
	                }

	                // remove script blocks to prevent double-execution
	                element.find("script").filter(executableScript).remove();

	                if (!element.parent().is(that.appendTo) && (position.top === undefined || position.left === undefined)) {
	                    if (element.is(VISIBLE)) {
	                        offset = element.offset();
	                        isVisible = true;
	                    } else {
	                        visibility = element.css("visibility");
	                        display = element.css("display");

	                        element.css({ visibility: HIDDEN, display: "" });
	                        offset = element.offset();
	                        element.css({ visibility: visibility, display: display });
	                    }

	                    if (position.top === undefined) {
	                        position.top = offset.top;
	                    }
	                    if (position.left === undefined) {
	                        position.left = offset.left;
	                    }
	                }

	                if (!defined(options.visible) || options.visible === null) {
	                    options.visible = element.is(VISIBLE);
	                }

	                wrapper = that.wrapper = element.closest(KWINDOW);

	                if (!element.is(".k-content") || !wrapper[0]) {
	                    element.addClass("k-window-content k-content");
	                    that._createWindow(element, options);
	                    wrapper = that.wrapper = element.closest(KWINDOW);

	                    that._dimensions();
	                }

	                that._position();

	                if (content) {
	                    that.refresh(content);
	                }

	                if (options.visible) {
	                    that.toFront();
	                }

	                windowContent = wrapper.children(KWINDOWCONTENT);
	                that._tabindex(windowContent);

	                if (options.visible && options.modal) {
	                    that._overlay(wrapper.is(VISIBLE)).css({ opacity: 0.5 });
	                }

	                wrapper
	                    .on("mouseenter" + NS, TITLEBAR_BUTTONS, proxy(that._buttonEnter, that))
	                    .on("mouseleave" + NS, TITLEBAR_BUTTONS, proxy(that._buttonLeave, that))
	                    .on("click" + NS, "> " + TITLEBAR_BUTTONS, proxy(that._windowActionHandler, that));

	                windowContent
	                    .on("keydown" + NS, proxy(that._keydown, that))
	                    .on("focus" + NS, proxy(that._focus, that))
	                    .on("blur" + NS, proxy(that._blur, that));

	                this._resizable();

	                this._draggable();

	                if (options.pinned) {
	                    that.pin();
	                }

	                id = element.attr("id");
	                if (id) {
	                    id = id + "_wnd_title";
	                    wrapper.children(KWINDOWTITLEBAR)
	                        .children(KWINDOWTITLE)
	                        .attr("id", id);

	                    windowContent
	                        .attr({
	                            "role": "dialog",
	                            "aria-labelledby": id
	                        });
	                }

	                wrapper.add(wrapper.children(".k-resize-handle," + KWINDOWTITLEBAR))
	                    .on("mousedown" + NS, proxy(that.toFront, that));

	                that.touchScroller = kendo.touchScroller(element);

	                that._resizeHandler = proxy(that._onDocumentResize, that);

	                that._marker = kendo.guid().substring(0, 8);

	                $(window).on("resize" + NS + that._marker, that._resizeHandler);

	                if (options.visible) {
	                    that.trigger(OPEN);
	                    that.trigger(ACTIVATE);
	                }

	                kendo.notify(that);

	                if(this.options.modal) {
	                    this._tabKeyTrap = new TabKeyTrap(wrapper);
	                    this._tabKeyTrap.trap();
	                    this._tabKeyTrap.shouldTrap = function () {
	                        return windowContent.data("isFront");
	                    };
	                }
	            },

	            _buttonEnter: function(e) {
	                $(e.currentTarget).addClass(KHOVERSTATE);
	            },

	            _buttonLeave: function(e) {
	                $(e.currentTarget).removeClass(KHOVERSTATE);
	            },

	            _focus: function() {
	                this.wrapper.addClass(KFOCUSEDSTATE);
	            },

	            _blur: function() {
	                this.wrapper.removeClass(KFOCUSEDSTATE);
	            },

	            _dimensions: function() {
	                var wrapper = this.wrapper;
	                var options = this.options;
	                var width = options.width;
	                var height = options.height;
	                var maxHeight = options.maxHeight;
	                var dimensions = ["minWidth","minHeight","maxWidth","maxHeight"];

	                this.title(options.title);

	                for (var i = 0; i < dimensions.length; i++) {
	                    var value = options[dimensions[i]] || "";
	                    if (value != Infinity) {
	                        wrapper.css(dimensions[i], value);
	                    }
	                }

	                if (maxHeight != Infinity) {
	                    this.element.css("maxHeight", maxHeight);
	                }

	                if (width) {
	                    if (width.toString().indexOf("%") > 0) {
	                        wrapper.width(width);
	                    } else {
	                        wrapper.width(constrain(width, options.minWidth, options.maxWidth));
	                    }
	                }
	                else {
	                    wrapper.width("");
	                }

	                if (height) {
	                    if (height.toString().indexOf("%") > 0) {
	                        wrapper.height(height);
	                    } else {
	                        wrapper.height(constrain(height, options.minHeight, options.maxHeight));
	                    }
	                }
	                else {
	                    wrapper.height("");
	                }

	                if (!options.visible) {
	                    wrapper.hide();
	                }
	            },

	            _position: function() {
	                var wrapper = this.wrapper,
	                    position = this.options.position;

	                if (position.top === 0) {
	                    position.top = position.top.toString();
	                }

	                if (position.left === 0) {
	                    position.left = position.left.toString();
	                }

	                wrapper.css({
	                    top: position.top || "",
	                    left: position.left || ""
	                });
	            },

	            _animationOptions: function(id) {
	                var animation = this.options.animation;
	                var basicAnimation = {
	                    open: { effects: {} },
	                    close: { hide: true, effects: {} }
	                };

	                return animation && animation[id] || basicAnimation[id];
	            },

	            _resize: function() {
	                kendo.resize(this.element.children());
	            },

	            _resizable: function() {
	                var resizable = this.options.resizable;
	                var wrapper = this.wrapper;

	                if (this.resizing) {
	                    wrapper
	                        .off("dblclick" + NS)
	                        .children(KWINDOWRESIZEHANDLES).remove();

	                    this.resizing.destroy();
	                    this.resizing = null;
	                }

	                if (resizable) {
	                    wrapper.on("dblclick" + NS, KWINDOWTITLEBAR, proxy(function(e) {
	                        if (!$(e.target).closest(".k-window-action").length) {
	                            this.toggleMaximization();
	                        }
	                    }, this));

	                    each("n e s w se sw ne nw".split(" "), function(index, handler) {
	                        wrapper.append(templates.resizeHandle(handler));
	                    });

	                    this.resizing = new WindowResizing(this);
	                }

	                wrapper = null;
	            },

	            _draggable: function() {
	                var draggable = this.options.draggable;

	                if (this.dragging) {
	                    this.dragging.destroy();
	                    this.dragging = null;
	                }
	                if (draggable) {
	                    this.dragging = new WindowDragging(this, draggable.dragHandle || KWINDOWTITLEBAR);
	                }
	            },

	            _actions: function() {
	                var options = this.options;
	                var actions = options.actions;
	                var pinned = options.pinned;
	                var titlebar = this.wrapper.children(KWINDOWTITLEBAR);
	                var container = titlebar.find(".k-window-actions");
	                var windowSpecificCommands = [ "maximize", "minimize" ];

	                actions = $.map(actions, function(action) {
	                    action = pinned && action.toLowerCase() === "pin" ? "unpin" : action;
	                    return { name: (windowSpecificCommands.indexOf(action.toLowerCase()) > - 1) ? "window-" + action : action };
	                });

	                container.html(kendo.render(templates.action, actions));
	            },

	            setOptions: function(options) {
	                Widget.fn.setOptions.call(this, options);
	                var scrollable = this.options.scrollable !== false;

	                this.restore();
	                this._dimensions();
	                this._position();
	                this._resizable();
	                this._draggable();
	                this._actions();
	                if (typeof options.modal !== "undefined") {
	                    var visible = this.options.visible !== false;

	                    this._overlay(options.modal && visible);
	                }

	                this.element.css(OVERFLOW, scrollable ? "" : "hidden");
	            },

	            events:[
	                OPEN,
	                ACTIVATE,
	                DEACTIVATE,
	                CLOSE,
	                MINIMIZE,
	                MAXIMIZE,
	                REFRESH,
	                RESIZESTART,
	                RESIZE,
	                RESIZEEND,
	                DRAGSTART,
	                DRAGEND,
	                ERROR
	            ],

	            options: {
	                name: "Window",
	                animation: {
	                    open: {
	                        effects: { zoom: { direction: "in" }, fade: { direction: "in" } },
	                        duration: 350
	                    },
	                    close: {
	                        effects: { zoom: { direction: "out", properties: { scale: 0.7 } }, fade: { direction: "out" } },
	                        duration: 350,
	                        hide: true
	                    }
	                },
	                title: "",
	                actions: ["Close"],
	                autoFocus: true,
	                modal: false,
	                resizable: true,
	                draggable: true,
	                minWidth: 90,
	                minHeight: 50,
	                maxWidth: Infinity,
	                maxHeight: Infinity,
	                pinned: false,
	                scrollable: true,
	                position: {},
	                content: null,
	                visible: null,
	                height: null,
	                width: null,
	                appendTo: "body",
	                isMaximized: false,
	                isMinimized: false
	            },

	            _closable: function() {
	                return $.inArray("close", $.map(this.options.actions, function(x) { return x.toLowerCase(); })) > -1;
	            },

	            _keydown: function(e) {
	                var that = this,
	                    options = that.options,
	                    keys = kendo.keys,
	                    keyCode = e.keyCode,
	                    wrapper = that.wrapper,
	                    offset, handled,
	                    distance = 10,
	                    isMaximized = that.options.isMaximized,
	                    newWidth, newHeight, w, h;
	                if (keyCode == keys.ESC && that._closable()) {
	                    that._close(false);
	                }
	                if (e.target != e.currentTarget || that._closing) {
	                    return;
	                }


	                if (options.draggable && !e.ctrlKey && !isMaximized) {
	                    offset = kendo.getOffset(wrapper);

	                    if (keyCode == keys.UP) {
	                        handled = wrapper.css("top", offset.top - distance);
	                    } else if (keyCode == keys.DOWN) {
	                        handled = wrapper.css("top", offset.top + distance);
	                    } else if (keyCode == keys.LEFT) {
	                        handled = wrapper.css("left", offset.left - distance);
	                    } else if (keyCode == keys.RIGHT) {
	                        handled = wrapper.css("left", offset.left + distance);
	                    }
	                }

	                if (options.resizable && e.ctrlKey && !isMaximized) {
	                    if (keyCode == keys.UP) {
	                        handled = true;
	                        newHeight = wrapper.height() - distance;
	                    } else if (keyCode == keys.DOWN) {
	                        handled = true;
	                        newHeight = wrapper.height() + distance;
	                    } if (keyCode == keys.LEFT) {
	                        handled = true;
	                        newWidth = wrapper.width() - distance;
	                    } else if (keyCode == keys.RIGHT) {
	                        handled = true;
	                        newWidth = wrapper.width() + distance;
	                    }

	                    if (handled) {
	                        w = constrain(newWidth, options.minWidth, options.maxWidth);
	                        h = constrain(newHeight, options.minHeight, options.maxHeight);

	                        if (!isNaN(w)) {
	                            wrapper.width(w);
	                            that.options.width = w + "px";
	                        }
	                        if (!isNaN(h)) {
	                            wrapper.height(h);
	                            that.options.height = h + "px";
	                        }

	                        that.resize();
	                    }
	                }

	                if (handled) {
	                    e.preventDefault();
	                }
	            },

	            _overlay: function (visible) {
	                var overlay = this.appendTo.children(KOVERLAY),
	                    wrapper = this.wrapper;

	                if (!overlay.length) {
	                    overlay = $("<div class='k-overlay' />");
	                }

	                overlay
	                    .insertBefore(wrapper[0])
	                    .toggle(visible)
	                    .css(ZINDEX, parseInt(wrapper.css(ZINDEX), 10) - 1);

	                return overlay;
	            },

	            _actionForIcon: function(icon) {
	                var iconClass = /\bk-i(-\w+)+\b/.exec(icon[0].className)[0];
	                return {
	                    "k-i-close": "_close",
	                    "k-i-window-maximize": "maximize",
	                    "k-i-window-minimize": "minimize",
	                    "k-i-window-restore": "restore",
	                    "k-i-refresh": "refresh",
	                    "k-i-pin": "pin",
	                    "k-i-unpin": "unpin"
	                }[iconClass];
	            },

	            _windowActionHandler: function (e) {
	                if (this._closing) {
	                    return;
	                }
	                var icon = $(e.target).closest(".k-window-action").find(".k-icon");
	                var action = this._actionForIcon(icon);

	                if (action) {
	                    e.preventDefault();
	                    this[action]();
	                    return false;
	                }
	            },

	            _modals: function() {
	                var that = this;

	                var zStack = $(KWINDOW).filter(function() {
	                    var dom = $(this);
	                    var object = that._object(dom);
	                    var options = object && object.options;

	                    return options && options.modal && options.visible && options.appendTo === that.options.appendTo && dom.is(VISIBLE);
	                }).sort(function(a, b){
	                    return +$(a).css("zIndex") - +$(b).css("zIndex");
	                });

	                that = null;

	                return zStack;
	            },

	            _object: function(element) {
	                var content = element.children(KWINDOWCONTENT);
	                var widget = kendo.widgetInstance(content);

	                if (widget) {
	                    return widget;
	                }

	                return undefined;
	            },

	            center: function () {
	                var that = this,
	                    position = that.options.position,
	                    wrapper = that.wrapper,
	                    documentWindow = $(window),
	                    scrollTop = 0,
	                    scrollLeft = 0,
	                    newTop, newLeft;

	                if (that.options.isMaximized) {
	                    return that;
	                }

	                if (!that.options.pinned) {
	                    scrollTop = documentWindow.scrollTop();
	                    scrollLeft = documentWindow.scrollLeft();
	                }

	                newLeft = scrollLeft + Math.max(0, (documentWindow.width() - wrapper.width()) / 2);
	                newTop = scrollTop + Math.max(0, (documentWindow.height() - wrapper.height() - parseInt(wrapper.css("paddingTop"), 10)) / 2);

	                wrapper.css({
	                    left: newLeft,
	                    top: newTop
	                });

	                position.top = newTop;
	                position.left = newLeft;

	                return that;
	            },

	            title: function (text) {
	                var that = this,
	                    wrapper = that.wrapper,
	                    options = that.options,
	                    titleBar = wrapper.children(KWINDOWTITLEBAR),
	                    title = titleBar.children(KWINDOWTITLE),
	                    titleBarHeight;

	                if (!arguments.length) {
	                    return title.html();
	                }

	                if (text === false) {
	                    wrapper.addClass("k-window-titleless");
	                    titleBar.remove();
	                } else {
	                    if (!titleBar.length) {
	                        wrapper.prepend(templates.titlebar(options));
	                        that._actions();
	                        titleBar = wrapper.children(KWINDOWTITLEBAR);
	                    } else {
	                        title.html(kendo.htmlEncode(text));
	                    }

	                    titleBarHeight = parseInt(outerHeight(titleBar), 10);

	                    wrapper.css("padding-top", titleBarHeight);
	                    titleBar.css("margin-top", -titleBarHeight);
	                }

	                that.options.title = text;

	                return that;
	            },

	            content: function (html, data) {
	                var content = this.wrapper.children(KWINDOWCONTENT),
	                    scrollContainer = content.children(".km-scroll-container");

	                content = scrollContainer[0] ? scrollContainer : content;

	                if (!defined(html)) {
	                    return content.html();
	                }

	                this.angular("cleanup", function(){
	                    return { elements: content.children() };
	                });

	                kendo.destroy(this.element.children());

	                content.empty().html(html);

	                this.angular("compile", function(){
	                    var a = [];
	                    for (var i = content.length; --i >= 0;) {
	                        a.push({ dataItem: data });
	                    }
	                    return {
	                        elements: content.children(),
	                        data: a
	                    };
	                });

	                return this;
	            },

	            open: function () {
	                var that = this,
	                    wrapper = that.wrapper,
	                    options = that.options,
	                    showOptions = this._animationOptions("open"),
	                    contentElement = wrapper.children(KWINDOWCONTENT),
	                    overlay, otherModalsVisible,
	                    doc = $(document);

	                if (!that.trigger(OPEN)) {
	                    if (that._closing) {
	                        wrapper.kendoStop(true, true);
	                    }

	                    that._closing = false;

	                    that.toFront();

	                    if (options.autoFocus) {
	                        that.element.focus();
	                    }

	                    options.visible = true;

	                    if (options.modal) {
	                        otherModalsVisible = !!that._modals().length;
	                        overlay = that._overlay(otherModalsVisible);

	                        overlay.kendoStop(true, true);

	                        if (showOptions.duration && kendo.effects.Fade && !otherModalsVisible) {
	                            var overlayFx = kendo.fx(overlay).fadeIn();
	                            overlayFx.duration(showOptions.duration || 0);
	                            overlayFx.endValue(0.5);
	                            overlayFx.play();
	                        } else {
	                            overlay.css("opacity", 0.5);
	                        }

	                        overlay.show();

	                        $(window).on("focus", function() {
	                            if (contentElement.data("isFront")) {
	                                that.element.focus();
	                            }
	                        });
	                    }

	                    if (!wrapper.is(VISIBLE)) {
	                        contentElement.css(OVERFLOW, HIDDEN);
	                        wrapper.show().kendoStop().kendoAnimate({
	                            effects: showOptions.effects,
	                            duration: showOptions.duration,
	                            complete: proxy(this._activate, this)
	                        });
	                    }
	                }

	                if (options.isMaximized) {
	                    that._documentScrollTop = doc.scrollTop();
	                    that._documentScrollLeft = doc.scrollLeft();
	                    $("html, body").css(OVERFLOW, HIDDEN);
	                }

	                return that;
	            },

	            _activate: function() {
	                var scrollable = this.options.scrollable !== false;

	                if (this.options.autoFocus) {
	                    this.element.focus();
	                }

	                this.element.css(OVERFLOW, scrollable ? "" : "hidden");
	                kendo.resize(this.element.children());
	                this.trigger(ACTIVATE);
	            },

	            _removeOverlay: function(suppressAnimation) {
	                var modals = this._modals();
	                var options = this.options;
	                var hideOverlay = options.modal && !modals.length;
	                var overlay = options.modal ? this._overlay(true) : $(undefined);
	                var hideOptions  = this._animationOptions("close");

	                if (hideOverlay) {
	                    if (!suppressAnimation && hideOptions.duration && kendo.effects.Fade) {
	                        var overlayFx = kendo.fx(overlay).fadeOut();
	                        overlayFx.duration(hideOptions.duration || 0);
	                        overlayFx.startValue(0.5);
	                        overlayFx.play();
	                    } else {
	                        this._overlay(false).remove();
	                    }
	                } else if (modals.length) {
	                    this._object(modals.last())._overlay(true);
	                }
	            },

	            _close: function(systemTriggered) {
	                var that = this,
	                    wrapper = that.wrapper,
	                    options = that.options,
	                    showOptions = this._animationOptions("open"),
	                    hideOptions  = this._animationOptions("close"),
	                    doc = $(document);

	                if (wrapper.is(VISIBLE) && !that.trigger(CLOSE, { userTriggered: !systemTriggered })) {
	                    if (that._closing) {
	                        return;
	                    }

	                    that._closing = true;
	                    options.visible = false;

	                    $(KWINDOW).each(function(i, element) {
	                        var contentElement = $(element).children(KWINDOWCONTENT);

	                        // Remove overlay set by toFront
	                        if (element != wrapper && contentElement.find("> ." + KCONTENTFRAME).length > 0) {
	                            contentElement.children(KOVERLAY).remove();
	                        }
	                    });

	                    this._removeOverlay();

	                    wrapper.kendoStop().kendoAnimate({
	                        effects: hideOptions.effects || showOptions.effects,
	                        reverse: hideOptions.reverse === true,
	                        duration: hideOptions.duration,
	                        complete: proxy(this._deactivate, this)
	                    });
	                }

	                if (that.options.isMaximized) {
	                    $("html, body").css(OVERFLOW, "");
	                    if (that._documentScrollTop && that._documentScrollTop > 0) {
	                        doc.scrollTop(that._documentScrollTop);
	                    }
	                    if (that._documentScrollLeft && that._documentScrollLeft > 0) {
	                        doc.scrollLeft(that._documentScrollLeft);
	                    }
	                }
	            },

	            _deactivate: function () {
	                var that = this;
	                that.wrapper.hide().css("opacity", "");
	                that.trigger(DEACTIVATE);
	                if (that.options.modal) {
	                    var lastModal = that._object(that._modals().last());
	                    if (lastModal) {
	                        lastModal.toFront();
	                    }
	                }
	            },

	            close: function () {
	                this._close(true);
	                return this;
	            },

	            _actionable: function(element) {
	                return $(element).is(TITLEBAR_BUTTONS + "," + TITLEBAR_BUTTONS + " .k-icon,:input,a");
	            },

	            _shouldFocus: function(target) {
	                var active = activeElement(),
	                    element = this.element;

	                return this.options.autoFocus &&
	                    !$(active).is(element) &&
	                    !this._actionable(target) &&
	                    (!element.find(active).length || !element.find(target).length);
	            },

	            toFront: function (e) {
	                var that = this,
	                    wrapper = that.wrapper,
	                    currentWindow = wrapper[0],
	                    zIndex = +wrapper.css(ZINDEX),
	                    originalZIndex = zIndex,
	                    target = (e && e.target) || null;

	                $(KWINDOW).each(function(i, element) {
	                    var windowObject = $(element),
	                        zIndexNew = windowObject.css(ZINDEX),
	                        contentElement = windowObject.children(KWINDOWCONTENT);

	                    if (!isNaN(zIndexNew)) {
	                        zIndex = Math.max(+zIndexNew, zIndex);
	                    }

	                    contentElement.data("isFront", element == currentWindow);
	                    // Add overlay to windows with iframes and lower z-index to prevent
	                    // trapping of events when resizing / dragging
	                    if (element != currentWindow && contentElement.find("> ." + KCONTENTFRAME).length > 0) {
	                        contentElement.append(templates.overlay);
	                    }
	                });

	                if (!wrapper[0].style.zIndex || originalZIndex < zIndex) {
	                    wrapper.css(ZINDEX, zIndex + 2);
	                }
	                that.element.find("> .k-overlay").remove();

	                if (that._shouldFocus(target)) {
	                    that.element.focus();

	                    var scrollTop = $(window).scrollTop(),
	                        windowTop = parseInt(wrapper.position().top, 10);

	                    if (!that.options.pinned && windowTop > 0 && windowTop < scrollTop) {
	                        if (scrollTop > 0) {
	                            $(window).scrollTop(windowTop);
	                        } else {
	                            wrapper.css("top", scrollTop);
	                        }
	                    }
	                }

	                wrapper = null;

	                return that;
	            },

	            toggleMaximization: function () {
	                if (this._closing) {
	                    return this;
	                }

	                return this[this.options.isMaximized ? "restore" : "maximize"]();
	            },

	            restore: function () {
	                var that = this;
	                var options = that.options;
	                var minHeight = options.minHeight;
	                var restoreOptions = that.restoreOptions;
	                var doc = $(document);

	                if (!options.isMaximized && !options.isMinimized) {
	                    return that;
	                }

	                if (minHeight && minHeight != Infinity) {
	                    that.wrapper.css("min-height", minHeight);
	                }

	                that.wrapper
	                    .css({
	                        position: options.pinned ? "fixed" : "absolute",
	                        left: restoreOptions.left,
	                        top: restoreOptions.top,
	                        width: restoreOptions.width,
	                        height: restoreOptions.height
	                    })
	                    .removeClass(MAXIMIZEDSTATE)
	                    .find(".k-window-content,.k-resize-handle").show().end()
	                    .find(".k-window-titlebar .k-i-window-restore").parent().remove().end().end()
	                    .find(MINIMIZE_MAXIMIZE).parent().show().end().end()
	                    .find(PIN_UNPIN).parent().show();

	                that.options.width = restoreOptions.width;
	                that.options.height = restoreOptions.height;

	                $("html, body").css(OVERFLOW, "");
	                if (this._documentScrollTop && this._documentScrollTop > 0) {
	                    doc.scrollTop(this._documentScrollTop);
	                }
	                if (this._documentScrollLeft && this._documentScrollLeft > 0) {
	                    doc.scrollLeft(this._documentScrollLeft);
	                }

	                options.isMaximized = options.isMinimized = false;

	                that.resize();

	                return that;
	            },

	            _sizingAction: function(actionId, callback) {
	                var that = this,
	                    wrapper = that.wrapper,
	                    style = wrapper[0].style,
	                    options = that.options;

	                if (options.isMaximized || options.isMinimized) {
	                    return that;
	                }

	                that.restoreOptions = {
	                    width: style.width,
	                    height: style.height
	                };

	                wrapper
	                    .children(KWINDOWRESIZEHANDLES).hide().end()
	                    .children(KWINDOWTITLEBAR).find(MINIMIZE_MAXIMIZE).parent().hide()
	                    .eq(0).before(templates.action({ name: "window-restore" }));

	                callback.call(that);

	                that.wrapper.children(KWINDOWTITLEBAR).find(PIN_UNPIN).parent().toggle(actionId !== "maximize");

	                that.trigger(actionId);

	                return that;
	            },

	            maximize: function() {
	                this._sizingAction("maximize", function() {
	                    var that = this,
	                        wrapper = that.wrapper,
	                        position = wrapper.position(),
	                        doc = $(document);

	                    extend(that.restoreOptions, {
	                        left: position.left,
	                        top: position.top
	                    });

	                    wrapper.css({
	                        left: 0,
	                        top: 0,
	                        position: "fixed"
	                    })
	                        .addClass(MAXIMIZEDSTATE);

	                    this._documentScrollTop = doc.scrollTop();
	                    this._documentScrollLeft = doc.scrollLeft();
	                    $("html, body").css(OVERFLOW, HIDDEN);

	                    that.options.isMaximized = true;

	                    that._onDocumentResize();
	                });

	                return this;
	            },

	            isMaximized: function() {
	                return this.options.isMaximized;
	            },

	            minimize: function() {
	                this._sizingAction("minimize", function() {
	                    var that = this;

	                    that.wrapper.css({
	                        height: "",
	                        minHeight: ""
	                    });

	                    that.element.hide();

	                    that.options.isMinimized = true;
	                });

	                return this;
	            },

	            isMinimized: function() {
	                return this.options.isMinimized;
	            },

	            pin: function() {
	                var that = this,
	                    win = $(window),
	                    wrapper = that.wrapper,
	                    top = parseInt(wrapper.css("top"), 10),
	                    left = parseInt(wrapper.css("left"), 10);

	                if (!that.options.isMaximized) {
	                    wrapper.css({position: "fixed", top: top - win.scrollTop(), left: left - win.scrollLeft()});
	                    wrapper.children(KWINDOWTITLEBAR).find(KPIN).addClass("k-i-unpin").removeClass("k-i-pin");

	                    that.options.pinned = true;
	                    that.options.draggable = false;
	                }
	            },

	            unpin: function() {
	                var that = this,
	                    win = $(window),
	                    wrapper = that.wrapper,
	                    top = parseInt(wrapper.css("top"), 10),
	                    left = parseInt(wrapper.css("left"), 10);

	                if (!that.options.isMaximized) {
	                    wrapper.css({position: "", top: top + win.scrollTop(), left: left + win.scrollLeft()});
	                    wrapper.children(KWINDOWTITLEBAR).find(KUNPIN).addClass("k-i-pin").removeClass("k-i-unpin");

	                    that.options.pinned = false;
	                    that.options.draggable = true;
	                }
	            },

	            _onDocumentResize: function () {
	                var that = this,
	                    wrapper = that.wrapper,
	                    wnd = $(window),
	                    zoomLevel = kendo.support.zoomLevel(),
	                    w, h;

	                if (!that.options.isMaximized) {
	                    return;
	                }

	                w = wnd.width() / zoomLevel;
	                h = wnd.height() / zoomLevel - parseInt(wrapper.css("padding-top"), 10);

	                wrapper.css({
	                    width: w,
	                    height: h
	                });
	                that.options.width = w;
	                that.options.height = h;

	                that.resize();
	            },

	            refresh: function (options) {
	                var that = this,
	                    initOptions = that.options,
	                    element = $(that.element),
	                    iframe,
	                    showIframe,
	                    url;

	                if (!isPlainObject(options)) {
	                    options = { url: options };
	                }

	                options = extend({}, initOptions.content, options);

	                showIframe = defined(initOptions.iframe) ? initOptions.iframe : options.iframe;

	                url = options.url;

	                if (url) {
	                    if (!defined(showIframe)) {
	                        showIframe = !isLocalUrl(url);
	                    }

	                    if (!showIframe) {
	                        // perform AJAX request
	                        that._ajaxRequest(options);
	                    } else {
	                        iframe = element.find("." + KCONTENTFRAME)[0];

	                        if (iframe) {
	                            // refresh existing iframe
	                            iframe.src = url || iframe.src;
	                        } else {
	                            // render new iframe
	                            element.html(templates.contentFrame(extend({}, initOptions, { content: options })));
	                        }

	                        element.find("." + KCONTENTFRAME)
	                            .unbind("load" + NS)
	                            .on("load" + NS, proxy(this._triggerRefresh, this));
	                    }
	                } else {
	                    if (options.template) {
	                        // refresh template
	                        that.content(template(options.template)({}));
	                    }

	                    that.trigger(REFRESH);
	                }

	                element.toggleClass("k-window-iframecontent", !!showIframe);

	                return that;
	            },

	            _triggerRefresh: function() {
	                this.trigger(REFRESH);
	            },

	            _ajaxComplete: function() {
	                clearTimeout(this._loadingIconTimeout);
	                this.wrapper.find(REFRESHICON).removeClass(LOADING);
	            },

	            _ajaxError: function (xhr, status) {
	                this.trigger(ERROR, { status: status, xhr: xhr });
	            },

	            _ajaxSuccess: function (contentTemplate) {
	                return function (data) {
	                    var html = data;
	                    if (contentTemplate) {
	                        html = template(contentTemplate)(data || {});
	                    }

	                    this.content(html, data);
	                    this.element.prop("scrollTop", 0);

	                    this.trigger(REFRESH);
	                };
	            },

	            _showLoading: function() {
	                this.wrapper.find(REFRESHICON).addClass(LOADING);
	            },

	            _ajaxRequest: function (options) {
	                this._loadingIconTimeout = setTimeout(proxy(this._showLoading, this), 100);

	                $.ajax(extend({
	                    type: "GET",
	                    dataType: "html",
	                    cache: false,
	                    error: proxy(this._ajaxError, this),
	                    complete: proxy(this._ajaxComplete, this),
	                    success: proxy(this._ajaxSuccess(options.template), this)
	                }, options));
	            },

	            _destroy: function() {
	                if (this.resizing) {
	                    this.resizing.destroy();
	                }

	                if (this.dragging) {
	                    this.dragging.destroy();
	                }

	                this.wrapper.off(NS)
	                    .children(KWINDOWCONTENT).off(NS).end()
	                    .find(".k-resize-handle,.k-window-titlebar").off(NS);

	                $(window).off("resize" + NS + this._marker);

	                clearTimeout(this._loadingIconTimeout);

	                Widget.fn.destroy.call(this);

	                this.unbind(undefined);

	                kendo.destroy(this.wrapper);

	                this._removeOverlay(true);
	            },

	            destroy: function() {
	                this._destroy();

	                this.wrapper.empty().remove();

	                this.wrapper = this.appendTo = this.element = $();
	            },

	            _createWindow: function() {
	                var contentHtml = this.element,
	                    options = this.options,
	                    iframeSrcAttributes,
	                    wrapper,
	                    isRtl = kendo.support.isRtl(contentHtml);

	                if (options.scrollable === false) {
	                    contentHtml.css("overflow", "hidden");
	                }

	                wrapper = $(templates.wrapper(options));

	                // Collect the src attributes of all iframes and then set them to empty string.
	                // This seems to fix this IE9 "feature": http://msdn.microsoft.com/en-us/library/gg622929%28v=VS.85%29.aspx?ppud=4
	                iframeSrcAttributes = contentHtml.find("iframe:not(.k-content)").map(function() {
	                    var src = this.getAttribute("src");
	                    this.src = "";
	                    return src;
	                });

	                // Make sure the wrapper is appended to the body only once. IE9+ will throw exceptions if you move iframes in DOM
	                wrapper
	                    .toggleClass("k-rtl", isRtl)
	                    .appendTo(this.appendTo)
	                    .append(contentHtml)
	                    .find("iframe:not(.k-content)").each(function(index) {
	                    // Restore the src attribute of the iframes when they are part of the live DOM tree
	                    this.src = iframeSrcAttributes[index];
	                });

	                wrapper.find(".k-window-title")
	                    .css(isRtl ? "left" : "right", outerWidth(wrapper.find(".k-window-actions")) + 10);

	                contentHtml.css("visibility", "").show();

	                contentHtml.find("[data-role=editor]").each(function() {
	                    var editor = $(this).data("kendoEditor");

	                    if (editor) {
	                        editor.refresh();
	                    }
	                });

	                wrapper = contentHtml = null;
	            }
	        });

	        templates = {
	            wrapper: template("<div class='k-widget k-window' />"),
	            action: template(
	                "<a role='button' href='\\#' class='k-button k-bare k-button-icon k-window-action' aria-label='#= name #'>" +
	                "<span class='k-icon k-i-#= name.toLowerCase() #'></span>" +
	                "</a>"
	            ),
	            titlebar: template(
	                "<div class='k-window-titlebar k-header'>&nbsp;" +
	                "<span class='k-window-title'>#: title #</span>" +
	                "<div class='k-window-actions' />" +
	                "</div>"
	            ),
	            overlay: "<div class='k-overlay' />",
	            contentFrame: template(
	                "<iframe frameborder='0' title='#= title #' class='" + KCONTENTFRAME + "' " +
	                "src='#= content.url #'>" +
	                "This page requires frames in order to show content" +
	                "</iframe>"
	            ),
	            resizeHandle: template("<div class='k-resize-handle k-resize-#= data #'></div>")
	        };


	        function WindowResizing(wnd) {
	            var that = this;
	            that.owner = wnd;
	            that._preventDragging = false;
	            that._draggable = new Draggable(wnd.wrapper, {
	                filter: ">" + KWINDOWRESIZEHANDLES,
	                group: wnd.wrapper.id + "-resizing",
	                dragstart: proxy(that.dragstart, that),
	                drag: proxy(that.drag, that),
	                dragend: proxy(that.dragend, that)
	            });

	            that._draggable.userEvents.bind("press", proxy(that.addOverlay, that));
	            that._draggable.userEvents.bind("release", proxy(that.removeOverlay, that));
	        }

	        function getPosition(elem) {
	            var result = {top: elem.offsetTop, left: elem.offsetLeft},
	                parent = elem.offsetParent;

	            while (parent) {
	                result.top += parent.offsetTop;
	                result.left += parent.offsetLeft;

	                var parentOverflowX = $(parent).css("overflowX");
	                var parentOverflowY = $(parent).css("overflowY");

	                if (parentOverflowY === "auto" || parentOverflowY === "scroll") {
	                    result.top -= parent.scrollTop;
	                }

	                if (parentOverflowX === "auto" || parentOverflowX === "scroll") {
	                    result.left -= parent.scrollLeft;
	                }

	                parent = parent.offsetParent;
	            }

	            return result;
			}

	        WindowResizing.prototype = {
	            addOverlay: function () {
	                this.owner.wrapper.append(templates.overlay);
	            },
	            removeOverlay: function () {
	                this.owner.wrapper.find(KOVERLAY).remove();
	            },
	            dragstart: function (e) {
	                var that = this;
	                var wnd = that.owner;
	                var wrapper = wnd.wrapper;

	                that._preventDragging = wnd.trigger(RESIZESTART);
	                if (that._preventDragging) {
	                    return;
	                }

	                that.elementPadding = parseInt(wrapper.css("padding-top"), 10);
	                that.initialPosition = kendo.getOffset(wrapper, "position");

	                that.resizeDirection = e.currentTarget.prop("className").replace("k-resize-handle k-resize-", "");

	                that.initialSize = {
	                    width: wrapper.width(),
	                    height: wrapper.height()
	                };

	                that.containerOffset = kendo.getOffset(wnd.appendTo, "position");

	                var offsetParent = wrapper.offsetParent();

	                if (offsetParent.is("html")) {
	                    that.containerOffset.top = that.containerOffset.left = 0;
	                } else {
	                    var marginTop = offsetParent.css("margin-top");
	                    var marginLeft = offsetParent.css("margin-left");
	                    var hasMargin = !zero.test(marginTop) || !zero.test(marginLeft);
	                    if (hasMargin) {
	                        var wrapperPosition = getPosition(wrapper[0]);
	                        var relativeElMarginLeft = wrapperPosition.left - that.containerOffset.left - that.initialPosition.left;
	                        var relativeElMarginTop = wrapperPosition.top - that.containerOffset.top - that.initialPosition.top;

	                        that._relativeElMarginLeft = relativeElMarginLeft > 1 ? relativeElMarginLeft : 0;
	                        that._relativeElMarginTop = relativeElMarginTop > 1 ? relativeElMarginTop : 0;

	                        that.initialPosition.left += that._relativeElMarginLeft;
	                        that.initialPosition.top += that._relativeElMarginTop;
	                    }
	                }

	                wrapper
	                    .children(KWINDOWRESIZEHANDLES).not(e.currentTarget).hide();

	                $(BODY).css(CURSOR, e.currentTarget.css(CURSOR));
	            },
	            drag: function (e) {
	                if (this._preventDragging) {
	                    return;
	                }
	                var that = this,
	                    wnd = that.owner,
	                    wrapper = wnd.wrapper,
	                    options = wnd.options,
	                    direction = that.resizeDirection,
	                    containerOffset = that.containerOffset,
	                    initialPosition = that.initialPosition,
	                    initialSize = that.initialSize,
	                    newWidth, newHeight,
	                    windowBottom, windowRight,
	                    x = Math.max(e.x.location, 0),
	                    y = Math.max(e.y.location, 0);

	                if (direction.indexOf("e") >= 0) {
	                    newWidth = x - initialPosition.left - containerOffset.left;

	                    wrapper.width(constrain(newWidth, options.minWidth, options.maxWidth));
	                } else if (direction.indexOf("w") >= 0) {
	                    windowRight = initialPosition.left + initialSize.width + containerOffset.left;
	                    newWidth = constrain(windowRight - x, options.minWidth, options.maxWidth);

	                    wrapper.css({
	                        left: windowRight - newWidth - containerOffset.left - (that._relativeElMarginLeft || 0),
	                        width: newWidth
	                    });
	                }

	                var newWindowTop = y;
	                if (wnd.options.pinned) {
	                    newWindowTop -= $(window).scrollTop();
	                }
	                if (direction.indexOf("s") >= 0) {
	                    newHeight = newWindowTop - initialPosition.top - that.elementPadding - containerOffset.top;

	                    wrapper.height(constrain(newHeight, options.minHeight, options.maxHeight));
	                } else if (direction.indexOf("n") >= 0) {
	                    windowBottom = initialPosition.top + initialSize.height + containerOffset.top;
	                    newHeight = constrain(windowBottom - newWindowTop, options.minHeight, options.maxHeight);

	                    wrapper.css({
	                        top: windowBottom - newHeight - containerOffset.top - (that._relativeElMarginTop || 0),
	                        height: newHeight
	                    });
	                }

	                if (newWidth) {
	                    wnd.options.width = newWidth + "px";
	                }
	                if (newHeight) {
	                    wnd.options.height = newHeight + "px";
	                }

	                wnd.resize();
	            },
	            dragend: function (e) {
	                if (this._preventDragging) {
	                    return;
	                }
	                var that = this,
	                    wnd = that.owner,
	                    wrapper = wnd.wrapper;

	                wrapper
	                    .children(KWINDOWRESIZEHANDLES).not(e.currentTarget).show();

	                $(BODY).css(CURSOR, "");

	                if (wnd.touchScroller) {
	                    wnd.touchScroller.reset();
	                }

	                if (e.keyCode == 27) {
	                    wrapper.css(that.initialPosition)
	                        .css(that.initialSize);
	                }

	                wnd.trigger(RESIZEEND);

	                return false;
	            },
	            destroy: function() {
	                if (this._draggable) {
	                    this._draggable.destroy();
	                }

	                this._draggable = this.owner = null;
	            }
	        };

	        function WindowDragging(wnd, dragHandle) {
	            var that = this;
	            that.owner = wnd;
	            that._preventDragging = false;
	            that._draggable = new Draggable(wnd.wrapper, {
	                filter: dragHandle,
	                group: wnd.wrapper.id + "-moving",
	                dragstart: proxy(that.dragstart, that),
	                drag: proxy(that.drag, that),
	                dragend: proxy(that.dragend, that),
	                dragcancel: proxy(that.dragcancel, that)
	            });

	            that._draggable.userEvents.stopPropagation = false;
	        }

	        WindowDragging.prototype = {
	            dragstart: function (e) {
	                var wnd = this.owner,
	                    element = wnd.element,
	                    actions = element.find(".k-window-actions"),
	                    containerOffset = kendo.getOffset(wnd.appendTo);

	                this._preventDragging = wnd.trigger(DRAGSTART) || !wnd.options.draggable;
	                if (this._preventDragging) {
	                    return;
	                }

	                wnd.initialWindowPosition = kendo.getOffset(wnd.wrapper, "position");

	                wnd.initialPointerPosition = {
	                    left: e.x.client,
	                    top: e.y.client
	                };

	                wnd.startPosition = {
	                    left: e.x.client - wnd.initialWindowPosition.left,
	                    top: e.y.client - wnd.initialWindowPosition.top
	                };

	                if (actions.length > 0) {
	                    wnd.minLeftPosition = outerWidth(actions) + parseInt(actions.css("right"), 10) - outerWidth(element);
	                } else {
	                    wnd.minLeftPosition =  20 - outerWidth(element); // at least 20px remain visible
	                }

	                wnd.minLeftPosition -= containerOffset.left;
	                wnd.minTopPosition = -containerOffset.top;

	                wnd.wrapper
	                    .append(templates.overlay)
	                    .children(KWINDOWRESIZEHANDLES).hide();

	                $(BODY).css(CURSOR, e.currentTarget.css(CURSOR));
	            },

	            drag: function (e) {
	                if (this._preventDragging) {
	                    return;
	                }
	                var wnd = this.owner;
	                var position = wnd.options.position;

	                position.top = Math.max(e.y.client - wnd.startPosition.top, wnd.minTopPosition);
	                position.left = Math.max(e.x.client - wnd.startPosition.left, wnd.minLeftPosition);

	                if (kendo.support.transforms) {
	                    $(wnd.wrapper).css(
	                        "transform", "translate(" +
	                        (e.x.client - wnd.initialPointerPosition.left) + "px, " +
	                        (e.y.client - wnd.initialPointerPosition.top) + "px)"
	                    );
	                } else {
	                    $(wnd.wrapper).css(position);
	                }

	            },

	            _finishDrag: function() {
	                var wnd = this.owner;

	                wnd.wrapper
	                    .children(KWINDOWRESIZEHANDLES).toggle(!wnd.options.isMinimized).end()
	                    .find(KOVERLAY).remove();

	                $(BODY).css(CURSOR, "");
	            },

	            dragcancel: function (e) {
	                if (this._preventDragging) {
	                    return;
	                }
	                this._finishDrag();

	                e.currentTarget.closest(KWINDOW).css(this.owner.initialWindowPosition);
	            },

	            dragend: function () {
	                if (this._preventDragging) {
	                    return;
	                }
	                $(this.owner.wrapper)
	                    .css(this.owner.options.position)
	                    .css("transform", "");

	                this._finishDrag();

	                this.owner.trigger(DRAGEND);

	                return false;
	            },
	            destroy: function() {
	                if (this._draggable) {
	                    this._draggable.destroy();
	                }

	                this._draggable = this.owner = null;
	            }
	        };

	        kendo.ui.plugin(Window);

	    })(window.kendo.jQuery);

	    return window.kendo;

	}, __webpack_require__(422));

/***/ })

/******/ });

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, module) {var __WEBPACK_AMD_DEFINE_RESULT__;/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.17.4';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Error message constants. */
  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
      FUNC_ERROR_TEXT = 'Expected a function';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG = 1,
      WRAP_BIND_KEY_FLAG = 2,
      WRAP_CURRY_BOUND_FLAG = 4,
      WRAP_CURRY_FLAG = 8,
      WRAP_CURRY_RIGHT_FLAG = 16,
      WRAP_PARTIAL_FLAG = 32,
      WRAP_PARTIAL_RIGHT_FLAG = 64,
      WRAP_ARY_FLAG = 128,
      WRAP_REARG_FLAG = 256,
      WRAP_FLIP_FLAG = 512;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** Used to associate wrap methods with their bit flags. */
  var wrapFlags = [
    ['ary', WRAP_ARY_FLAG],
    ['bind', WRAP_BIND_FLAG],
    ['bindKey', WRAP_BIND_KEY_FLAG],
    ['curry', WRAP_CURRY_FLAG],
    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
    ['flip', WRAP_FLIP_FLAG],
    ['partial', WRAP_PARTIAL_FLAG],
    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
    ['rearg', WRAP_REARG_FLAG]
  ];

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      domExcTag = '[object DOMException]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml = /[&<>"']/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      reLeadingDot = /^\./,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading and trailing whitespace. */
  var reTrim = /^\s+|\s+$/g,
      reTrimStart = /^\s+/,
      reTrimEnd = /\s+$/;

  /** Used to match wrap detail comments. */
  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match Latin Unicode letters (excluding mathematical operators). */
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]",
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:(?:1st|2nd|3rd|(?![123])\\dth)\\b)',
      rsOrdUpper = '\\d*(?:(?:1ST|2ND|3RD|(?![123])\\dTH)\\b)',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to match complex or compound words. */
  var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    rsUpper + '+' + rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
  cloneableTags[boolTag] = cloneableTags[dateTag] =
  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  cloneableTags[int32Tag] = cloneableTags[mapTag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[setTag] =
  cloneableTags[stringTag] = cloneableTags[symbolTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map Latin Unicode letters to basic Latin letters. */
  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
    '\u0134': 'J',  '\u0135': 'j',
    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
    '\u0174': 'W',  '\u0175': 'w',
    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
    '\u0132': 'IJ', '\u0133': 'ij',
    '\u0152': 'Oe', '\u0153': 'oe',
    '\u0149': "'n", '\u017f': 's'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  /* Node.js helper references. */
  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /*--------------------------------------------------------------------------*/

  /**
   * Adds the key-value `pair` to `map`.
   *
   * @private
   * @param {Object} map The map to modify.
   * @param {Array} pair The key-value pair to add.
   * @returns {Object} Returns `map`.
   */
  function addMapEntry(map, pair) {
    // Don't return `map.set` because it's not chainable in IE 11.
    map.set(pair[0], pair[1]);
    return map;
  }

  /**
   * Adds `value` to `set`.
   *
   * @private
   * @param {Object} set The set to modify.
   * @param {*} value The value to add.
   * @returns {Object} Returns `set`.
   */
  function addSetEntry(set, value) {
    // Don't return `set.add` because it's not chainable in IE 11.
    set.add(value);
    return set;
  }

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array == null ? 0 : array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize = baseProperty('length');

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value
      ? strictIndexOf(array, value, fromIndex)
      : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */
  function baseMean(array, iteratee) {
    var length = array == null ? 0 : array.length;
    return length ? (baseSum(array, iteratee) / length) : NAN;
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function(key) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        ++result;
      }
    }
    return result;
  }

  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter = basePropertyOf(deburredLetters);

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = [value, value];
    });
    return result;
  }

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictLastIndexOf(array, value, fromIndex) {
    var index = fromIndex + 1;
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return index;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    return hasUnicode(string)
      ? unicodeSize(string)
      : asciiSize(string);
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return hasUnicode(string)
      ? unicodeToArray(string)
      : asciiToArray(string);
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }

  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  var runInContext = (function runInContext(context) {
    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

    /** Built-in constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = context['__core-js_shared__'];

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto.toString;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? context.Buffer : undefined,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
        symIterator = Symbol ? Symbol.iterator : undefined,
        symToStringTag = Symbol ? Symbol.toStringTag : undefined;

    var defineProperty = (function() {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    /** Mocked built-ins. */
    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
        ctxNow = Date && Date.now !== root.Date.now && Date.now,
        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = overArg(Object.keys, Object),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = Date.now,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
      };
    }());

    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': lodash
      }
    };

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */
    function arraySample(array) {
      var length = array.length;
      return length ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function arraySampleSize(array, n) {
      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    }

    /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          length = paths.length,
          result = Array(length),
          skip = object == null;

      while (++index < length) {
        result[index] = skip ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn(value, baseAssignIn(result, value))
              : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, baseClone, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      var keysFunc = isFull
        ? (isFlat ? getAllKeysIn : getAllKeys)
        : (isFlat ? keysIn : keys);

      var props = isArr ? undefined : keysFunc(value);
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */
    function baseConforms(source) {
      var props = keys(source);
      return function(object) {
        return baseConformsTo(object, source, props);
      };
    }

    /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */
    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length],
            predicate = source[key],
            value = object[key];

        if ((value === undefined && !(key in object)) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee == null ? value : iteratee(value);

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined
              ? (current === current && !isSymbol(current))
              : comparator(current, computed)
            )) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = castPath(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? getRawTag(value)
        : objectToString(value);
    }

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
          ? new SetCache(othIndex && array)
          : undefined;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer:
      while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (!(seen
              ? cacheHas(seen, computed)
              : includes(result, computed, comparator)
            )) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache
                  ? cacheHas(cache, computed)
                  : includes(arrays[othIndex], computed, comparator))
                ) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      path = castPath(path, object);
      object = parent(object, path);
      var func = object == null ? object : object[toKey(last(path))];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }

    /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */
    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    }

    /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = objIsArr ? arrayTag : getTag(object),
          othTag = othIsArr ? arrayTag : getTag(other);

      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;

      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        if (isObject(srcValue)) {
          stack || (stack = new Stack);
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(object[key], srcValue, (key + ''), object, source, stack)
            : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = object[key],
          srcValue = source[key],
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          }
          else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          }
          else {
            newValue = [];
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {
            newValue = initCloneObject(srcValue);
          }
        }
        else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      var index = -1;
      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, paths) {
      return basePickBy(object, paths, function(value, path) {
        return hasIn(object, path);
      });
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, paths, predicate) {
      var index = -1,
          length = paths.length,
          result = {};

      while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else {
            baseUnset(array, index);
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }

    /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */
    function baseSample(collection) {
      return arraySample(values(collection));
    }

    /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function baseSampleSize(collection, n) {
      var array = values(collection);
      return shuffleSelf(array, baseClamp(n, 0, array.length));
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]),
            newValue = value;

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject(objValue)
              ? objValue
              : (isIndex(path[index + 1]) ? [] : {});
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array == null ? low : array.length;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) &&
              (retHighest ? (computed <= value) : (computed < value))) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      value = iteratee(value);

      var low = 0,
          high = array == null ? 0 : array.length,
          valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap(value, baseToString) + '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var length = arrays.length;
      if (length < 2) {
        return length ? baseUniq(arrays[0]) : [];
      }
      var index = -1,
          result = Array(length);

      while (++index < length) {
        var array = arrays[index],
            othIndex = -1;

        while (++othIndex < length) {
          if (othIndex != index) {
            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
          }
        }
      }
      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    }

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }

    /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    var castRest = baseRest;

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return (!start && end >= length) ? array : baseSlice(array, start, end);
    }

    /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */
    var clearTimeout = ctxClearTimeout || function(id) {
      return root.clearTimeout(id);
    };

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /**
     * Creates a clone of `map`.
     *
     * @private
     * @param {Object} map The map to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned map.
     */
    function cloneMap(map, isDeep, cloneFunc) {
      var array = isDeep ? cloneFunc(mapToArray(map), CLONE_DEEP_FLAG) : mapToArray(map);
      return arrayReduce(array, addMapEntry, new map.constructor);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of `set`.
     *
     * @private
     * @param {Object} set The set to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned set.
     */
    function cloneSet(set, isDeep, cloneFunc) {
      var array = isDeep ? cloneFunc(setToArray(set), CLONE_DEEP_FLAG) : setToArray(set);
      return arrayReduce(array, addSetEntry, new set.constructor);
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
            (valIsNull && othIsDefined && othIsReflexive) ||
            (!valIsDefined && othIsReflexive) ||
            !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
            (othIsNull && valIsDefined && valIsReflexive) ||
            (!othIsDefined && valIsReflexive) ||
            !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = hasUnicode(string)
          ? stringToArray(string)
          : undefined;

        var chr = strSymbols
          ? strSymbols[0]
          : string.charAt(0);

        var trailing = strSymbols
          ? castSlice(strSymbols, 1).join('')
          : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtor(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, undefined,
            args, holders, undefined, undefined, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = getIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return flatRest(function(funcs) {
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) &&
                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                !data[4].length && data[9] == 1
              ) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func))
              ? wrapper[funcName]()
              : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value)) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG,
          isBind = bitmask & WRAP_BIND_FLAG,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
          isFlip = bitmask & WRAP_FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
            args, newHolders, argPos, ary, arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */
    function createMathOperation(operator, defaultValue) {
      return function(value, other) {
        var result;
        if (value === undefined && other === undefined) {
          return defaultValue;
        }
        if (value !== undefined) {
          result = value;
        }
        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */
    function createOver(arrayFunc) {
      return flatRest(function(iteratees) {
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        return baseRest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return hasUnicode(chars)
        ? castSlice(stringToArray(result), 0, length).join('')
        : result.slice(0, length);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */
    function createRelationalOperation(operator) {
      return function(value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
      }
      var newData = [
        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
        newHoldersRight, argPos, ary, arity
      ];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
        if (precision) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs(keysFunc) {
      return function(object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);

      var newData = [
        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
        argPos, ary, arity
      ];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] === undefined
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsAssignIn(objValue, srcValue, key, object) {
      if (objValue === undefined ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }

    /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */
    function customOmitClone(value) {
      return isPlainObject(value) ? undefined : value;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(array);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest(func) {
      return setToString(overRest(func, undefined, flatten), func + '');
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag];

      try {
        value[symToStringTag] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag;
            case mapCtorString: return mapTag;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray(object) || isArguments(object));
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototype(object))
        : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {Function} cloneFunc The function to clone values.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, cloneFunc, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return cloneMap(object, isDeep, cloneFunc);

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return cloneSet(object, isDeep, cloneFunc);

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */
    function insertWrapDetails(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length &&
        (typeof value == 'number' || reIsUint.test(value)) &&
        (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike(object) && isIndex(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */
    var isMaskable = coreJsData ? isFunction : stubFalse;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

      var isCombo =
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = value;
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & WRAP_ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest(func, start, transform) {
      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = shortOut(baseSetData);

    /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    var setTimeout = ctxSetTimeout || function(func, wait) {
      return root.setTimeout(func, wait);
    };

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString = shortOut(baseSetToString);

    /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */
    function setWrapToString(wrapper, reference, bitmask) {
      var source = (reference + '');
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */
    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;

      size = size === undefined ? length : size;
      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];

        array[rand] = array[index];
        array[index] = value;
      }
      array.length = size;
      return array;
    }

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (reLeadingDot.test(string)) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, string) {
        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function(pair) {
        var value = '_.' + pair[0];
        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    function concat() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }

    /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */
    var difference = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = baseRest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = baseRest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = fromIndex < 0
          ? nativeMax(length + index, 0)
          : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs == null ? 0 : pairs.length,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return (array && array.length) ? array[0] : undefined;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 0, -1) : [];
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */
    var intersection = baseRest(function(arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = baseRest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = baseRest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      comparator = typeof comparator == 'function' ? comparator : undefined;
      if (comparator) {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array == null ? '' : nativeJoin.call(array, separator);
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return value === value
        ? strictLastIndexOf(array, value, index)
        : baseFindIndex(array, baseIsNaN, index, true);
    }

    /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */
    function nth(array, n) {
      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */
    var pull = baseRest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, getIteratee(iteratee, 2))
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, undefined, comparator)
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */
    var pullAt = flatRest(function(array, indexes) {
      var length = array == null ? 0 : array.length,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function(index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array == null ? array : nativeReverse.call(array);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */
    function sortedIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniq(array, getIteratee(iteratee, 2))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 1, length) : [];
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length) ? baseUniq(array) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */
    var without = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */
    var xor = baseRest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */
    var zip = baseRest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = baseRest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */
    var wrapperAt = flatRest(function(paths) {
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length ||
          !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        ++result[key];
      } else {
        baseAssignValue(result, key, 1);
      }
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(findLastIndex);

    /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = baseRest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      baseAssignValue(result, key, value);
    });

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(getIteratee(predicate, 3)));
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var func = isArray(collection) ? arraySample : baseSample;
      return func(collection);
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n, guard) {
      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
      return func(collection, n);
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
     */
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = ctxNow || function() {
      return root.Date.now();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = baseRest(function(func, thisArg, partials) {
      var bitmask = WRAP_BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = baseRest(function(object, key, partials) {
      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            result = wait - timeSinceLastCall;

        return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */
    var defer = baseRest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
    var delay = baseRest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrap(func, WRAP_FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Expose `MapCache`.
    memoize.Cache = MapCache;

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0: return !predicate.call(this);
          case 1: return !predicate.call(this, args[0]);
          case 2: return !predicate.call(this, args[0], args[1]);
          case 3: return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = castRest(function(func, transforms) {
      transforms = (transforms.length == 1 && isArray(transforms[0]))
        ? arrayMap(transforms[0], baseUnary(getIteratee()))
        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

      var funcsLength = transforms.length;
      return baseRest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = flatRest(function(func, indexes) {
      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? start : toInteger(start);
      return baseRest(func, start);
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start == null ? 0 : nativeMax(toInteger(start), 0);
      return baseRest(function(args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      return partial(castFunction(wrapper), value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */
    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    var gt = createRelationalOperation(baseGt);

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    var gte = createRelationalOperation(function(value, other) {
      return value >= other;
    });

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
        !propertyIsEnumerable.call(value, 'callee');
    };

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && baseGetTag(value) == boolTag);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) &&
          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == errorTag || tag == domExcTag ||
        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error(CORE_ERROR_TEXT);
      }
      return baseIsNative(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && baseGetTag(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
        funcToString.call(Ctor) == objectCtorString;
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && baseGetTag(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    var lt = createRelationalOperation(baseLt);

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    var lte = createRelationalOperation(function(value, other) {
      return value <= other;
    });

    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (symIterator && value[symIterator]) {
        return iteratorToArray(value[symIterator]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, '');
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */
    function toSafeInteger(value) {
      return value
        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
        : (value === 0 ? value : 0);
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign = createAssigner(function(object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn = createAssigner(function(object, source) {
      copyObject(source, keysIn(source), object);
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */
    var at = flatRest(baseAt);

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties == null ? result : baseAssign(result, properties);
    }

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults = baseRest(function(args) {
      args.push(undefined, customDefaultsAssignIn);
      return apply(assignInWith, undefined, args);
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */
    var defaultsDeep = baseRest(function(args) {
      args.push(undefined, customDefaultsMerge);
      return apply(mergeWith, undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }

    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
    function forIn(object, iteratee) {
      return object == null
        ? object
        : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */
    function forInRight(object, iteratee) {
      return object == null
        ? object
        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function(result, value, key) {
      result[value] = key;
    }, constant(identity));

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function(result, value, key) {
      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = baseRest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      return pickBy(object, negate(getIteratee(predicate)));
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = getIteratee(predicate);
      return basePickBy(object, props, function(value, path) {
        return predicate(value, path[0]);
      });
    }

    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      path = castPath(path, object);

      var index = -1,
          length = path.length;

      // Ensure the loop is entered when path is empty.
      if (!length) {
        length = 1;
        object = undefined;
      }
      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys);

    /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */
    var toPairsIn = createToPairs(keysIn);

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

      iteratee = getIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor : [];
        }
        else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        }
        else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toFinite(lower);
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined
        ? length
        : baseClamp(toInteger(position), 0, length);

      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }

    /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return (
        createPadding(nativeFloor(mid), chars) +
        string +
        createPadding(nativeCeil(mid), chars)
      );
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (string + createPadding(length - strLength, chars))
        : string;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (createPadding(length - strLength, chars) + string)
        : string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n, guard) {
      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }
      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (
            typeof separator == 'string' ||
            (separator != null && !isRegExp(separator))
          )) {
        separator = baseToString(separator);
        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return string.split(separator, limit);
    }

    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = position == null
        ? 0
        : baseClamp(toInteger(position), 0, string.length);

      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation
      // (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, customDefaultsAssignIn);

      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      var sourceURL = '//# sourceURL=' +
        ('sourceURL' in options
          ? options.sourceURL
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrim, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimEnd, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? castSlice(strSymbols, 0, end).join('')
        : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = baseRest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */
    var bindAll = flatRest(function(object, methodNames) {
      arrayEach(methodNames, function(key) {
        key = toKey(key);
        baseAssignValue(object, key, bind(object[key], object));
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs == null ? 0 : pairs.length,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return baseRest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */
    function defaultTo(value, defaultValue) {
      return (value == null || value !== value) ? defaultValue : value;
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */
    var method = baseRest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = baseRest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */
    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function(args) {
        return baseNth(args, n);
      });
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */
    function stubObject() {
      return {};
    }

    /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */
    function stubString() {
      return '';
    }

    /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */
    function stubTrue() {
      return true;
    }

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    }

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    var add = createMathOperation(function(augend, addend) {
      return augend + addend;
    }, 0);

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */
    var divide = createMathOperation(function(dividend, divisor) {
      return dividend / divisor;
    }, 1);

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseGt)
        : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
        : undefined;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return baseMean(array, identity);
    }

    /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */
    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee, 2));
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseLt)
        : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
        : undefined;
    }

    /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */
    var multiply = createMathOperation(function(multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    var subtract = createMathOperation(function(minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee, 2))
        : 0;
    }

    /*------------------------------------------------------------------------*/

    // Add methods that return wrapped values in chain sequences.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add methods to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add methods that return unwrapped values in chain sequences.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.conformsTo = conformsTo;
    lodash.deburr = deburr;
    lodash.defaultTo = defaultTo;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = (this.__filtered__ && !index)
          ? new LazyWrapper(this)
          : this.clone();

        if (result.__filtered__) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      return this.filter(negate(getIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function(value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    // Map minified method names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = (lodashFunc.name + ''),
            names = realNames[key] || (realNames[key] = []);

        names.push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];

    // Add methods to `LazyWrapper`.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chain sequence methods to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add lazy aliases.
    lodash.prototype.first = lodash.prototype.head;

    if (symIterator) {
      lodash.prototype[symIterator] = wrapperToIterator;
    }
    return lodash;
  });

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers, like r.js, check for condition patterns like:
  if (true) {
    // Expose Lodash on the global object to prevent errors when Lodash is
    // loaded by a script tag in the presence of an AMD loader.
    // See http://requirejs.org/docs/errors.html#mismatch for more details.
    // Use `_.noConflict` to remove Lodash from the global object.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
      return _;
    }.call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  }
  // Check for `exports` after `define` in case a build optimizer adds it.
  else if (freeModule) {
    // Export for Node.js.
    (freeModule.exports = _)._ = _;
    // Export for CommonJS support.
    freeExports._ = _;
  }
  else {
    // Export to the global object.
    root._ = _;
  }
}.call(this));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(39), __webpack_require__(116)(module)))

/***/ }),
/* 110 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

var disposed = false
var Component = __webpack_require__(38)(
  /* script */
  __webpack_require__(62),
  /* template */
  __webpack_require__(113),
  /* styles */
  null,
  /* scopeId */
  null,
  /* moduleIdentifier (server only) */
  null
)
Component.options.__file = "C:\\laravelSites\\ourschooladmin\\resources\\assets\\js\\components\\Example.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key.substr(0, 2) !== "__"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] Example.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-16441557", Component.options)
  } else {
    hotAPI.reload("data-v-16441557", Component.options)
  }
  module.hot.dispose(function (data) {
    disposed = true
  })
})()}

module.exports = Component.exports


/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

var disposed = false
var Component = __webpack_require__(38)(
  /* script */
  __webpack_require__(63),
  /* template */
  __webpack_require__(114),
  /* styles */
  null,
  /* scopeId */
  null,
  /* moduleIdentifier (server only) */
  null
)
Component.options.__file = "C:\\laravelSites\\ourschooladmin\\resources\\assets\\js\\components\\Grades.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key.substr(0, 2) !== "__"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] Grades.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-589bc9c2", Component.options)
  } else {
    hotAPI.reload("data-v-589bc9c2", Component.options)
  }
  module.hot.dispose(function (data) {
    disposed = true
  })
})()}

module.exports = Component.exports


/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _vm._m(0)
},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "container"
  }, [_c('div', {
    staticClass: "row"
  }, [_c('div', {
    staticClass: "col-md-8 col-md-offset-2"
  }, [_c('div', {
    staticClass: "panel panel-default"
  }, [_c('div', {
    staticClass: "panel-heading"
  }, [_vm._v("Example Component")]), _vm._v(" "), _c('div', {
    staticClass: "panel-body"
  }, [_vm._v("\n                    I'm an example test\n                ")])])])])])
}]}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-16441557", module.exports)
  }
}

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "row"
  }, [_c('div', {
    staticClass: "col-md-12"
  }, [_c('table', {
    staticClass: "table table-striped table-bordered table-hover",
    attrs: {
      "width": "100%",
      "id": "dataTables-example"
    }
  }, [_vm._m(0), _vm._v(" "), _c('tbody', _vm._l((_vm.grades), function(grade) {
    return _c('tr', [_c('td', [_vm._v(_vm._s(grade.grade))]), _vm._v(" "), _c('td', [_vm._v("Good")]), _vm._v(" "), _c('td', [_vm._v("Bad")])])
  }))])])])
},staticRenderFns: [function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('thead', [_c('tr', [_c('th', [_vm._v("Surname")]), _vm._v(" "), _c('th', [_vm._v("Name")]), _vm._v(" "), _c('th', [_vm._v("Username")])])])
}]}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-589bc9c2", module.exports)
  }
}

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * Vue.js v2.3.4
 * (c) 2014-2017 Evan You
 * Released under the MIT License.
 */


/*  */

// these helpers produces better vm code in JS engines due to their
// explicitness and function inlining
function isUndef (v) {
  return v === undefined || v === null
}

function isDef (v) {
  return v !== undefined && v !== null
}

function isTrue (v) {
  return v === true
}

function isFalse (v) {
  return v === false
}
/**
 * Check if value is primitive
 */
function isPrimitive (value) {
  return typeof value === 'string' || typeof value === 'number'
}

/**
 * Quick object check - this is primarily used to tell
 * Objects from primitive values when we know the value
 * is a JSON-compliant type.
 */
function isObject (obj) {
  return obj !== null && typeof obj === 'object'
}

var _toString = Object.prototype.toString;

/**
 * Strict object type check. Only returns true
 * for plain JavaScript objects.
 */
function isPlainObject (obj) {
  return _toString.call(obj) === '[object Object]'
}

function isRegExp (v) {
  return _toString.call(v) === '[object RegExp]'
}

/**
 * Convert a value to a string that is actually rendered.
 */
function toString (val) {
  return val == null
    ? ''
    : typeof val === 'object'
      ? JSON.stringify(val, null, 2)
      : String(val)
}

/**
 * Convert a input value to a number for persistence.
 * If the conversion fails, return original string.
 */
function toNumber (val) {
  var n = parseFloat(val);
  return isNaN(n) ? val : n
}

/**
 * Make a map and return a function for checking if a key
 * is in that map.
 */
function makeMap (
  str,
  expectsLowerCase
) {
  var map = Object.create(null);
  var list = str.split(',');
  for (var i = 0; i < list.length; i++) {
    map[list[i]] = true;
  }
  return expectsLowerCase
    ? function (val) { return map[val.toLowerCase()]; }
    : function (val) { return map[val]; }
}

/**
 * Check if a tag is a built-in tag.
 */
var isBuiltInTag = makeMap('slot,component', true);

/**
 * Remove an item from an array
 */
function remove (arr, item) {
  if (arr.length) {
    var index = arr.indexOf(item);
    if (index > -1) {
      return arr.splice(index, 1)
    }
  }
}

/**
 * Check whether the object has the property.
 */
var hasOwnProperty = Object.prototype.hasOwnProperty;
function hasOwn (obj, key) {
  return hasOwnProperty.call(obj, key)
}

/**
 * Create a cached version of a pure function.
 */
function cached (fn) {
  var cache = Object.create(null);
  return (function cachedFn (str) {
    var hit = cache[str];
    return hit || (cache[str] = fn(str))
  })
}

/**
 * Camelize a hyphen-delimited string.
 */
var camelizeRE = /-(\w)/g;
var camelize = cached(function (str) {
  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })
});

/**
 * Capitalize a string.
 */
var capitalize = cached(function (str) {
  return str.charAt(0).toUpperCase() + str.slice(1)
});

/**
 * Hyphenate a camelCase string.
 */
var hyphenateRE = /([^-])([A-Z])/g;
var hyphenate = cached(function (str) {
  return str
    .replace(hyphenateRE, '$1-$2')
    .replace(hyphenateRE, '$1-$2')
    .toLowerCase()
});

/**
 * Simple bind, faster than native
 */
function bind (fn, ctx) {
  function boundFn (a) {
    var l = arguments.length;
    return l
      ? l > 1
        ? fn.apply(ctx, arguments)
        : fn.call(ctx, a)
      : fn.call(ctx)
  }
  // record original fn length
  boundFn._length = fn.length;
  return boundFn
}

/**
 * Convert an Array-like object to a real Array.
 */
function toArray (list, start) {
  start = start || 0;
  var i = list.length - start;
  var ret = new Array(i);
  while (i--) {
    ret[i] = list[i + start];
  }
  return ret
}

/**
 * Mix properties into target object.
 */
function extend (to, _from) {
  for (var key in _from) {
    to[key] = _from[key];
  }
  return to
}

/**
 * Merge an Array of Objects into a single Object.
 */
function toObject (arr) {
  var res = {};
  for (var i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i]);
    }
  }
  return res
}

/**
 * Perform no operation.
 */
function noop () {}

/**
 * Always return false.
 */
var no = function () { return false; };

/**
 * Return same value
 */
var identity = function (_) { return _; };

/**
 * Generate a static keys string from compiler modules.
 */
function genStaticKeys (modules) {
  return modules.reduce(function (keys, m) {
    return keys.concat(m.staticKeys || [])
  }, []).join(',')
}

/**
 * Check if two values are loosely equal - that is,
 * if they are plain objects, do they have the same shape?
 */
function looseEqual (a, b) {
  var isObjectA = isObject(a);
  var isObjectB = isObject(b);
  if (isObjectA && isObjectB) {
    try {
      return JSON.stringify(a) === JSON.stringify(b)
    } catch (e) {
      // possible circular reference
      return a === b
    }
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b)
  } else {
    return false
  }
}

function looseIndexOf (arr, val) {
  for (var i = 0; i < arr.length; i++) {
    if (looseEqual(arr[i], val)) { return i }
  }
  return -1
}

/**
 * Ensure a function is called only once.
 */
function once (fn) {
  var called = false;
  return function () {
    if (!called) {
      called = true;
      fn.apply(this, arguments);
    }
  }
}

var SSR_ATTR = 'data-server-rendered';

var ASSET_TYPES = [
  'component',
  'directive',
  'filter'
];

var LIFECYCLE_HOOKS = [
  'beforeCreate',
  'created',
  'beforeMount',
  'mounted',
  'beforeUpdate',
  'updated',
  'beforeDestroy',
  'destroyed',
  'activated',
  'deactivated'
];

/*  */

var config = ({
  /**
   * Option merge strategies (used in core/util/options)
   */
  optionMergeStrategies: Object.create(null),

  /**
   * Whether to suppress warnings.
   */
  silent: false,

  /**
   * Show production mode tip message on boot?
   */
  productionTip: "development" !== 'production',

  /**
   * Whether to enable devtools
   */
  devtools: "development" !== 'production',

  /**
   * Whether to record perf
   */
  performance: false,

  /**
   * Error handler for watcher errors
   */
  errorHandler: null,

  /**
   * Ignore certain custom elements
   */
  ignoredElements: [],

  /**
   * Custom user key aliases for v-on
   */
  keyCodes: Object.create(null),

  /**
   * Check if a tag is reserved so that it cannot be registered as a
   * component. This is platform-dependent and may be overwritten.
   */
  isReservedTag: no,

  /**
   * Check if an attribute is reserved so that it cannot be used as a component
   * prop. This is platform-dependent and may be overwritten.
   */
  isReservedAttr: no,

  /**
   * Check if a tag is an unknown element.
   * Platform-dependent.
   */
  isUnknownElement: no,

  /**
   * Get the namespace of an element
   */
  getTagNamespace: noop,

  /**
   * Parse the real tag name for the specific platform.
   */
  parsePlatformTagName: identity,

  /**
   * Check if an attribute must be bound using property, e.g. value
   * Platform-dependent.
   */
  mustUseProp: no,

  /**
   * Exposed for legacy reasons
   */
  _lifecycleHooks: LIFECYCLE_HOOKS
});

/*  */

var emptyObject = Object.freeze({});

/**
 * Check if a string starts with $ or _
 */
function isReserved (str) {
  var c = (str + '').charCodeAt(0);
  return c === 0x24 || c === 0x5F
}

/**
 * Define a property.
 */
function def (obj, key, val, enumerable) {
  Object.defineProperty(obj, key, {
    value: val,
    enumerable: !!enumerable,
    writable: true,
    configurable: true
  });
}

/**
 * Parse simple path.
 */
var bailRE = /[^\w.$]/;
function parsePath (path) {
  if (bailRE.test(path)) {
    return
  }
  var segments = path.split('.');
  return function (obj) {
    for (var i = 0; i < segments.length; i++) {
      if (!obj) { return }
      obj = obj[segments[i]];
    }
    return obj
  }
}

/*  */

var warn = noop;
var tip = noop;
var formatComponentName = (null); // work around flow check

if (true) {
  var hasConsole = typeof console !== 'undefined';
  var classifyRE = /(?:^|[-_])(\w)/g;
  var classify = function (str) { return str
    .replace(classifyRE, function (c) { return c.toUpperCase(); })
    .replace(/[-_]/g, ''); };

  warn = function (msg, vm) {
    if (hasConsole && (!config.silent)) {
      console.error("[Vue warn]: " + msg + (
        vm ? generateComponentTrace(vm) : ''
      ));
    }
  };

  tip = function (msg, vm) {
    if (hasConsole && (!config.silent)) {
      console.warn("[Vue tip]: " + msg + (
        vm ? generateComponentTrace(vm) : ''
      ));
    }
  };

  formatComponentName = function (vm, includeFile) {
    if (vm.$root === vm) {
      return '<Root>'
    }
    var name = typeof vm === 'string'
      ? vm
      : typeof vm === 'function' && vm.options
        ? vm.options.name
        : vm._isVue
          ? vm.$options.name || vm.$options._componentTag
          : vm.name;

    var file = vm._isVue && vm.$options.__file;
    if (!name && file) {
      var match = file.match(/([^/\\]+)\.vue$/);
      name = match && match[1];
    }

    return (
      (name ? ("<" + (classify(name)) + ">") : "<Anonymous>") +
      (file && includeFile !== false ? (" at " + file) : '')
    )
  };

  var repeat = function (str, n) {
    var res = '';
    while (n) {
      if (n % 2 === 1) { res += str; }
      if (n > 1) { str += str; }
      n >>= 1;
    }
    return res
  };

  var generateComponentTrace = function (vm) {
    if (vm._isVue && vm.$parent) {
      var tree = [];
      var currentRecursiveSequence = 0;
      while (vm) {
        if (tree.length > 0) {
          var last = tree[tree.length - 1];
          if (last.constructor === vm.constructor) {
            currentRecursiveSequence++;
            vm = vm.$parent;
            continue
          } else if (currentRecursiveSequence > 0) {
            tree[tree.length - 1] = [last, currentRecursiveSequence];
            currentRecursiveSequence = 0;
          }
        }
        tree.push(vm);
        vm = vm.$parent;
      }
      return '\n\nfound in\n\n' + tree
        .map(function (vm, i) { return ("" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)
            ? ((formatComponentName(vm[0])) + "... (" + (vm[1]) + " recursive calls)")
            : formatComponentName(vm))); })
        .join('\n')
    } else {
      return ("\n\n(found in " + (formatComponentName(vm)) + ")")
    }
  };
}

/*  */

function handleError (err, vm, info) {
  if (config.errorHandler) {
    config.errorHandler.call(null, err, vm, info);
  } else {
    if (true) {
      warn(("Error in " + info + ": \"" + (err.toString()) + "\""), vm);
    }
    /* istanbul ignore else */
    if (inBrowser && typeof console !== 'undefined') {
      console.error(err);
    } else {
      throw err
    }
  }
}

/*  */
/* globals MutationObserver */

// can we use __proto__?
var hasProto = '__proto__' in {};

// Browser environment sniffing
var inBrowser = typeof window !== 'undefined';
var UA = inBrowser && window.navigator.userAgent.toLowerCase();
var isIE = UA && /msie|trident/.test(UA);
var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
var isEdge = UA && UA.indexOf('edge/') > 0;
var isAndroid = UA && UA.indexOf('android') > 0;
var isIOS = UA && /iphone|ipad|ipod|ios/.test(UA);
var isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge;

var supportsPassive = false;
if (inBrowser) {
  try {
    var opts = {};
    Object.defineProperty(opts, 'passive', ({
      get: function get () {
        /* istanbul ignore next */
        supportsPassive = true;
      }
    } )); // https://github.com/facebook/flow/issues/285
    window.addEventListener('test-passive', null, opts);
  } catch (e) {}
}

// this needs to be lazy-evaled because vue may be required before
// vue-server-renderer can set VUE_ENV
var _isServer;
var isServerRendering = function () {
  if (_isServer === undefined) {
    /* istanbul ignore if */
    if (!inBrowser && typeof global !== 'undefined') {
      // detect presence of vue-server-renderer and avoid
      // Webpack shimming the process
      _isServer = global['process'].env.VUE_ENV === 'server';
    } else {
      _isServer = false;
    }
  }
  return _isServer
};

// detect devtools
var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;

/* istanbul ignore next */
function isNative (Ctor) {
  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())
}

var hasSymbol =
  typeof Symbol !== 'undefined' && isNative(Symbol) &&
  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);

/**
 * Defer a task to execute it asynchronously.
 */
var nextTick = (function () {
  var callbacks = [];
  var pending = false;
  var timerFunc;

  function nextTickHandler () {
    pending = false;
    var copies = callbacks.slice(0);
    callbacks.length = 0;
    for (var i = 0; i < copies.length; i++) {
      copies[i]();
    }
  }

  // the nextTick behavior leverages the microtask queue, which can be accessed
  // via either native Promise.then or MutationObserver.
  // MutationObserver has wider support, however it is seriously bugged in
  // UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It
  // completely stops working after triggering a few times... so, if native
  // Promise is available, we will use it:
  /* istanbul ignore if */
  if (typeof Promise !== 'undefined' && isNative(Promise)) {
    var p = Promise.resolve();
    var logError = function (err) { console.error(err); };
    timerFunc = function () {
      p.then(nextTickHandler).catch(logError);
      // in problematic UIWebViews, Promise.then doesn't completely break, but
      // it can get stuck in a weird state where callbacks are pushed into the
      // microtask queue but the queue isn't being flushed, until the browser
      // needs to do some other work, e.g. handle a timer. Therefore we can
      // "force" the microtask queue to be flushed by adding an empty timer.
      if (isIOS) { setTimeout(noop); }
    };
  } else if (typeof MutationObserver !== 'undefined' && (
    isNative(MutationObserver) ||
    // PhantomJS and iOS 7.x
    MutationObserver.toString() === '[object MutationObserverConstructor]'
  )) {
    // use MutationObserver where native Promise is not available,
    // e.g. PhantomJS IE11, iOS7, Android 4.4
    var counter = 1;
    var observer = new MutationObserver(nextTickHandler);
    var textNode = document.createTextNode(String(counter));
    observer.observe(textNode, {
      characterData: true
    });
    timerFunc = function () {
      counter = (counter + 1) % 2;
      textNode.data = String(counter);
    };
  } else {
    // fallback to setTimeout
    /* istanbul ignore next */
    timerFunc = function () {
      setTimeout(nextTickHandler, 0);
    };
  }

  return function queueNextTick (cb, ctx) {
    var _resolve;
    callbacks.push(function () {
      if (cb) {
        try {
          cb.call(ctx);
        } catch (e) {
          handleError(e, ctx, 'nextTick');
        }
      } else if (_resolve) {
        _resolve(ctx);
      }
    });
    if (!pending) {
      pending = true;
      timerFunc();
    }
    if (!cb && typeof Promise !== 'undefined') {
      return new Promise(function (resolve, reject) {
        _resolve = resolve;
      })
    }
  }
})();

var _Set;
/* istanbul ignore if */
if (typeof Set !== 'undefined' && isNative(Set)) {
  // use native Set when available.
  _Set = Set;
} else {
  // a non-standard Set polyfill that only works with primitive keys.
  _Set = (function () {
    function Set () {
      this.set = Object.create(null);
    }
    Set.prototype.has = function has (key) {
      return this.set[key] === true
    };
    Set.prototype.add = function add (key) {
      this.set[key] = true;
    };
    Set.prototype.clear = function clear () {
      this.set = Object.create(null);
    };

    return Set;
  }());
}

/*  */


var uid = 0;

/**
 * A dep is an observable that can have multiple
 * directives subscribing to it.
 */
var Dep = function Dep () {
  this.id = uid++;
  this.subs = [];
};

Dep.prototype.addSub = function addSub (sub) {
  this.subs.push(sub);
};

Dep.prototype.removeSub = function removeSub (sub) {
  remove(this.subs, sub);
};

Dep.prototype.depend = function depend () {
  if (Dep.target) {
    Dep.target.addDep(this);
  }
};

Dep.prototype.notify = function notify () {
  // stabilize the subscriber list first
  var subs = this.subs.slice();
  for (var i = 0, l = subs.length; i < l; i++) {
    subs[i].update();
  }
};

// the current target watcher being evaluated.
// this is globally unique because there could be only one
// watcher being evaluated at any time.
Dep.target = null;
var targetStack = [];

function pushTarget (_target) {
  if (Dep.target) { targetStack.push(Dep.target); }
  Dep.target = _target;
}

function popTarget () {
  Dep.target = targetStack.pop();
}

/*
 * not type checking this file because flow doesn't play well with
 * dynamically accessing methods on Array prototype
 */

var arrayProto = Array.prototype;
var arrayMethods = Object.create(arrayProto);[
  'push',
  'pop',
  'shift',
  'unshift',
  'splice',
  'sort',
  'reverse'
]
.forEach(function (method) {
  // cache original method
  var original = arrayProto[method];
  def(arrayMethods, method, function mutator () {
    var arguments$1 = arguments;

    // avoid leaking arguments:
    // http://jsperf.com/closure-with-arguments
    var i = arguments.length;
    var args = new Array(i);
    while (i--) {
      args[i] = arguments$1[i];
    }
    var result = original.apply(this, args);
    var ob = this.__ob__;
    var inserted;
    switch (method) {
      case 'push':
        inserted = args;
        break
      case 'unshift':
        inserted = args;
        break
      case 'splice':
        inserted = args.slice(2);
        break
    }
    if (inserted) { ob.observeArray(inserted); }
    // notify change
    ob.dep.notify();
    return result
  });
});

/*  */

var arrayKeys = Object.getOwnPropertyNames(arrayMethods);

/**
 * By default, when a reactive property is set, the new value is
 * also converted to become reactive. However when passing down props,
 * we don't want to force conversion because the value may be a nested value
 * under a frozen data structure. Converting it would defeat the optimization.
 */
var observerState = {
  shouldConvert: true,
  isSettingProps: false
};

/**
 * Observer class that are attached to each observed
 * object. Once attached, the observer converts target
 * object's property keys into getter/setters that
 * collect dependencies and dispatches updates.
 */
var Observer = function Observer (value) {
  this.value = value;
  this.dep = new Dep();
  this.vmCount = 0;
  def(value, '__ob__', this);
  if (Array.isArray(value)) {
    var augment = hasProto
      ? protoAugment
      : copyAugment;
    augment(value, arrayMethods, arrayKeys);
    this.observeArray(value);
  } else {
    this.walk(value);
  }
};

/**
 * Walk through each property and convert them into
 * getter/setters. This method should only be called when
 * value type is Object.
 */
Observer.prototype.walk = function walk (obj) {
  var keys = Object.keys(obj);
  for (var i = 0; i < keys.length; i++) {
    defineReactive$$1(obj, keys[i], obj[keys[i]]);
  }
};

/**
 * Observe a list of Array items.
 */
Observer.prototype.observeArray = function observeArray (items) {
  for (var i = 0, l = items.length; i < l; i++) {
    observe(items[i]);
  }
};

// helpers

/**
 * Augment an target Object or Array by intercepting
 * the prototype chain using __proto__
 */
function protoAugment (target, src) {
  /* eslint-disable no-proto */
  target.__proto__ = src;
  /* eslint-enable no-proto */
}

/**
 * Augment an target Object or Array by defining
 * hidden properties.
 */
/* istanbul ignore next */
function copyAugment (target, src, keys) {
  for (var i = 0, l = keys.length; i < l; i++) {
    var key = keys[i];
    def(target, key, src[key]);
  }
}

/**
 * Attempt to create an observer instance for a value,
 * returns the new observer if successfully observed,
 * or the existing observer if the value already has one.
 */
function observe (value, asRootData) {
  if (!isObject(value)) {
    return
  }
  var ob;
  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {
    ob = value.__ob__;
  } else if (
    observerState.shouldConvert &&
    !isServerRendering() &&
    (Array.isArray(value) || isPlainObject(value)) &&
    Object.isExtensible(value) &&
    !value._isVue
  ) {
    ob = new Observer(value);
  }
  if (asRootData && ob) {
    ob.vmCount++;
  }
  return ob
}

/**
 * Define a reactive property on an Object.
 */
function defineReactive$$1 (
  obj,
  key,
  val,
  customSetter
) {
  var dep = new Dep();

  var property = Object.getOwnPropertyDescriptor(obj, key);
  if (property && property.configurable === false) {
    return
  }

  // cater for pre-defined getter/setters
  var getter = property && property.get;
  var setter = property && property.set;

  var childOb = observe(val);
  Object.defineProperty(obj, key, {
    enumerable: true,
    configurable: true,
    get: function reactiveGetter () {
      var value = getter ? getter.call(obj) : val;
      if (Dep.target) {
        dep.depend();
        if (childOb) {
          childOb.dep.depend();
        }
        if (Array.isArray(value)) {
          dependArray(value);
        }
      }
      return value
    },
    set: function reactiveSetter (newVal) {
      var value = getter ? getter.call(obj) : val;
      /* eslint-disable no-self-compare */
      if (newVal === value || (newVal !== newVal && value !== value)) {
        return
      }
      /* eslint-enable no-self-compare */
      if ("development" !== 'production' && customSetter) {
        customSetter();
      }
      if (setter) {
        setter.call(obj, newVal);
      } else {
        val = newVal;
      }
      childOb = observe(newVal);
      dep.notify();
    }
  });
}

/**
 * Set a property on an object. Adds the new property and
 * triggers change notification if the property doesn't
 * already exist.
 */
function set (target, key, val) {
  if (Array.isArray(target) && typeof key === 'number') {
    target.length = Math.max(target.length, key);
    target.splice(key, 1, val);
    return val
  }
  if (hasOwn(target, key)) {
    target[key] = val;
    return val
  }
  var ob = (target ).__ob__;
  if (target._isVue || (ob && ob.vmCount)) {
    "development" !== 'production' && warn(
      'Avoid adding reactive properties to a Vue instance or its root $data ' +
      'at runtime - declare it upfront in the data option.'
    );
    return val
  }
  if (!ob) {
    target[key] = val;
    return val
  }
  defineReactive$$1(ob.value, key, val);
  ob.dep.notify();
  return val
}

/**
 * Delete a property and trigger change if necessary.
 */
function del (target, key) {
  if (Array.isArray(target) && typeof key === 'number') {
    target.splice(key, 1);
    return
  }
  var ob = (target ).__ob__;
  if (target._isVue || (ob && ob.vmCount)) {
    "development" !== 'production' && warn(
      'Avoid deleting properties on a Vue instance or its root $data ' +
      '- just set it to null.'
    );
    return
  }
  if (!hasOwn(target, key)) {
    return
  }
  delete target[key];
  if (!ob) {
    return
  }
  ob.dep.notify();
}

/**
 * Collect dependencies on array elements when the array is touched, since
 * we cannot intercept array element access like property getters.
 */
function dependArray (value) {
  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {
    e = value[i];
    e && e.__ob__ && e.__ob__.dep.depend();
    if (Array.isArray(e)) {
      dependArray(e);
    }
  }
}

/*  */

/**
 * Option overwriting strategies are functions that handle
 * how to merge a parent option value and a child option
 * value into the final value.
 */
var strats = config.optionMergeStrategies;

/**
 * Options with restrictions
 */
if (true) {
  strats.el = strats.propsData = function (parent, child, vm, key) {
    if (!vm) {
      warn(
        "option \"" + key + "\" can only be used during instance " +
        'creation with the `new` keyword.'
      );
    }
    return defaultStrat(parent, child)
  };
}

/**
 * Helper that recursively merges two data objects together.
 */
function mergeData (to, from) {
  if (!from) { return to }
  var key, toVal, fromVal;
  var keys = Object.keys(from);
  for (var i = 0; i < keys.length; i++) {
    key = keys[i];
    toVal = to[key];
    fromVal = from[key];
    if (!hasOwn(to, key)) {
      set(to, key, fromVal);
    } else if (isPlainObject(toVal) && isPlainObject(fromVal)) {
      mergeData(toVal, fromVal);
    }
  }
  return to
}

/**
 * Data
 */
strats.data = function (
  parentVal,
  childVal,
  vm
) {
  if (!vm) {
    // in a Vue.extend merge, both should be functions
    if (!childVal) {
      return parentVal
    }
    if (typeof childVal !== 'function') {
      "development" !== 'production' && warn(
        'The "data" option should be a function ' +
        'that returns a per-instance value in component ' +
        'definitions.',
        vm
      );
      return parentVal
    }
    if (!parentVal) {
      return childVal
    }
    // when parentVal & childVal are both present,
    // we need to return a function that returns the
    // merged result of both functions... no need to
    // check if parentVal is a function here because
    // it has to be a function to pass previous merges.
    return function mergedDataFn () {
      return mergeData(
        childVal.call(this),
        parentVal.call(this)
      )
    }
  } else if (parentVal || childVal) {
    return function mergedInstanceDataFn () {
      // instance merge
      var instanceData = typeof childVal === 'function'
        ? childVal.call(vm)
        : childVal;
      var defaultData = typeof parentVal === 'function'
        ? parentVal.call(vm)
        : undefined;
      if (instanceData) {
        return mergeData(instanceData, defaultData)
      } else {
        return defaultData
      }
    }
  }
};

/**
 * Hooks and props are merged as arrays.
 */
function mergeHook (
  parentVal,
  childVal
) {
  return childVal
    ? parentVal
      ? parentVal.concat(childVal)
      : Array.isArray(childVal)
        ? childVal
        : [childVal]
    : parentVal
}

LIFECYCLE_HOOKS.forEach(function (hook) {
  strats[hook] = mergeHook;
});

/**
 * Assets
 *
 * When a vm is present (instance creation), we need to do
 * a three-way merge between constructor options, instance
 * options and parent options.
 */
function mergeAssets (parentVal, childVal) {
  var res = Object.create(parentVal || null);
  return childVal
    ? extend(res, childVal)
    : res
}

ASSET_TYPES.forEach(function (type) {
  strats[type + 's'] = mergeAssets;
});

/**
 * Watchers.
 *
 * Watchers hashes should not overwrite one
 * another, so we merge them as arrays.
 */
strats.watch = function (parentVal, childVal) {
  /* istanbul ignore if */
  if (!childVal) { return Object.create(parentVal || null) }
  if (!parentVal) { return childVal }
  var ret = {};
  extend(ret, parentVal);
  for (var key in childVal) {
    var parent = ret[key];
    var child = childVal[key];
    if (parent && !Array.isArray(parent)) {
      parent = [parent];
    }
    ret[key] = parent
      ? parent.concat(child)
      : [child];
  }
  return ret
};

/**
 * Other object hashes.
 */
strats.props =
strats.methods =
strats.computed = function (parentVal, childVal) {
  if (!childVal) { return Object.create(parentVal || null) }
  if (!parentVal) { return childVal }
  var ret = Object.create(null);
  extend(ret, parentVal);
  extend(ret, childVal);
  return ret
};

/**
 * Default strategy.
 */
var defaultStrat = function (parentVal, childVal) {
  return childVal === undefined
    ? parentVal
    : childVal
};

/**
 * Validate component names
 */
function checkComponents (options) {
  for (var key in options.components) {
    var lower = key.toLowerCase();
    if (isBuiltInTag(lower) || config.isReservedTag(lower)) {
      warn(
        'Do not use built-in or reserved HTML elements as component ' +
        'id: ' + key
      );
    }
  }
}

/**
 * Ensure all props option syntax are normalized into the
 * Object-based format.
 */
function normalizeProps (options) {
  var props = options.props;
  if (!props) { return }
  var res = {};
  var i, val, name;
  if (Array.isArray(props)) {
    i = props.length;
    while (i--) {
      val = props[i];
      if (typeof val === 'string') {
        name = camelize(val);
        res[name] = { type: null };
      } else if (true) {
        warn('props must be strings when using array syntax.');
      }
    }
  } else if (isPlainObject(props)) {
    for (var key in props) {
      val = props[key];
      name = camelize(key);
      res[name] = isPlainObject(val)
        ? val
        : { type: val };
    }
  }
  options.props = res;
}

/**
 * Normalize raw function directives into object format.
 */
function normalizeDirectives (options) {
  var dirs = options.directives;
  if (dirs) {
    for (var key in dirs) {
      var def = dirs[key];
      if (typeof def === 'function') {
        dirs[key] = { bind: def, update: def };
      }
    }
  }
}

/**
 * Merge two option objects into a new one.
 * Core utility used in both instantiation and inheritance.
 */
function mergeOptions (
  parent,
  child,
  vm
) {
  if (true) {
    checkComponents(child);
  }

  if (typeof child === 'function') {
    child = child.options;
  }

  normalizeProps(child);
  normalizeDirectives(child);
  var extendsFrom = child.extends;
  if (extendsFrom) {
    parent = mergeOptions(parent, extendsFrom, vm);
  }
  if (child.mixins) {
    for (var i = 0, l = child.mixins.length; i < l; i++) {
      parent = mergeOptions(parent, child.mixins[i], vm);
    }
  }
  var options = {};
  var key;
  for (key in parent) {
    mergeField(key);
  }
  for (key in child) {
    if (!hasOwn(parent, key)) {
      mergeField(key);
    }
  }
  function mergeField (key) {
    var strat = strats[key] || defaultStrat;
    options[key] = strat(parent[key], child[key], vm, key);
  }
  return options
}

/**
 * Resolve an asset.
 * This function is used because child instances need access
 * to assets defined in its ancestor chain.
 */
function resolveAsset (
  options,
  type,
  id,
  warnMissing
) {
  /* istanbul ignore if */
  if (typeof id !== 'string') {
    return
  }
  var assets = options[type];
  // check local registration variations first
  if (hasOwn(assets, id)) { return assets[id] }
  var camelizedId = camelize(id);
  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }
  var PascalCaseId = capitalize(camelizedId);
  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }
  // fallback to prototype chain
  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];
  if ("development" !== 'production' && warnMissing && !res) {
    warn(
      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,
      options
    );
  }
  return res
}

/*  */

function validateProp (
  key,
  propOptions,
  propsData,
  vm
) {
  var prop = propOptions[key];
  var absent = !hasOwn(propsData, key);
  var value = propsData[key];
  // handle boolean props
  if (isType(Boolean, prop.type)) {
    if (absent && !hasOwn(prop, 'default')) {
      value = false;
    } else if (!isType(String, prop.type) && (value === '' || value === hyphenate(key))) {
      value = true;
    }
  }
  // check default value
  if (value === undefined) {
    value = getPropDefaultValue(vm, prop, key);
    // since the default value is a fresh copy,
    // make sure to observe it.
    var prevShouldConvert = observerState.shouldConvert;
    observerState.shouldConvert = true;
    observe(value);
    observerState.shouldConvert = prevShouldConvert;
  }
  if (true) {
    assertProp(prop, key, value, vm, absent);
  }
  return value
}

/**
 * Get the default value of a prop.
 */
function getPropDefaultValue (vm, prop, key) {
  // no default, return undefined
  if (!hasOwn(prop, 'default')) {
    return undefined
  }
  var def = prop.default;
  // warn against non-factory defaults for Object & Array
  if ("development" !== 'production' && isObject(def)) {
    warn(
      'Invalid default value for prop "' + key + '": ' +
      'Props with type Object/Array must use a factory function ' +
      'to return the default value.',
      vm
    );
  }
  // the raw prop value was also undefined from previous render,
  // return previous default value to avoid unnecessary watcher trigger
  if (vm && vm.$options.propsData &&
    vm.$options.propsData[key] === undefined &&
    vm._props[key] !== undefined
  ) {
    return vm._props[key]
  }
  // call factory function for non-Function types
  // a value is Function if its prototype is function even across different execution context
  return typeof def === 'function' && getType(prop.type) !== 'Function'
    ? def.call(vm)
    : def
}

/**
 * Assert whether a prop is valid.
 */
function assertProp (
  prop,
  name,
  value,
  vm,
  absent
) {
  if (prop.required && absent) {
    warn(
      'Missing required prop: "' + name + '"',
      vm
    );
    return
  }
  if (value == null && !prop.required) {
    return
  }
  var type = prop.type;
  var valid = !type || type === true;
  var expectedTypes = [];
  if (type) {
    if (!Array.isArray(type)) {
      type = [type];
    }
    for (var i = 0; i < type.length && !valid; i++) {
      var assertedType = assertType(value, type[i]);
      expectedTypes.push(assertedType.expectedType || '');
      valid = assertedType.valid;
    }
  }
  if (!valid) {
    warn(
      'Invalid prop: type check failed for prop "' + name + '".' +
      ' Expected ' + expectedTypes.map(capitalize).join(', ') +
      ', got ' + Object.prototype.toString.call(value).slice(8, -1) + '.',
      vm
    );
    return
  }
  var validator = prop.validator;
  if (validator) {
    if (!validator(value)) {
      warn(
        'Invalid prop: custom validator check failed for prop "' + name + '".',
        vm
      );
    }
  }
}

var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;

function assertType (value, type) {
  var valid;
  var expectedType = getType(type);
  if (simpleCheckRE.test(expectedType)) {
    valid = typeof value === expectedType.toLowerCase();
  } else if (expectedType === 'Object') {
    valid = isPlainObject(value);
  } else if (expectedType === 'Array') {
    valid = Array.isArray(value);
  } else {
    valid = value instanceof type;
  }
  return {
    valid: valid,
    expectedType: expectedType
  }
}

/**
 * Use function string name to check built-in types,
 * because a simple equality check will fail when running
 * across different vms / iframes.
 */
function getType (fn) {
  var match = fn && fn.toString().match(/^\s*function (\w+)/);
  return match ? match[1] : ''
}

function isType (type, fn) {
  if (!Array.isArray(fn)) {
    return getType(fn) === getType(type)
  }
  for (var i = 0, len = fn.length; i < len; i++) {
    if (getType(fn[i]) === getType(type)) {
      return true
    }
  }
  /* istanbul ignore next */
  return false
}

/*  */

var mark;
var measure;

if (true) {
  var perf = inBrowser && window.performance;
  /* istanbul ignore if */
  if (
    perf &&
    perf.mark &&
    perf.measure &&
    perf.clearMarks &&
    perf.clearMeasures
  ) {
    mark = function (tag) { return perf.mark(tag); };
    measure = function (name, startTag, endTag) {
      perf.measure(name, startTag, endTag);
      perf.clearMarks(startTag);
      perf.clearMarks(endTag);
      perf.clearMeasures(name);
    };
  }
}

/* not type checking this file because flow doesn't play well with Proxy */

var initProxy;

if (true) {
  var allowedGlobals = makeMap(
    'Infinity,undefined,NaN,isFinite,isNaN,' +
    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +
    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +
    'require' // for Webpack/Browserify
  );

  var warnNonPresent = function (target, key) {
    warn(
      "Property or method \"" + key + "\" is not defined on the instance but " +
      "referenced during render. Make sure to declare reactive data " +
      "properties in the data option.",
      target
    );
  };

  var hasProxy =
    typeof Proxy !== 'undefined' &&
    Proxy.toString().match(/native code/);

  if (hasProxy) {
    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta');
    config.keyCodes = new Proxy(config.keyCodes, {
      set: function set (target, key, value) {
        if (isBuiltInModifier(key)) {
          warn(("Avoid overwriting built-in modifier in config.keyCodes: ." + key));
          return false
        } else {
          target[key] = value;
          return true
        }
      }
    });
  }

  var hasHandler = {
    has: function has (target, key) {
      var has = key in target;
      var isAllowed = allowedGlobals(key) || key.charAt(0) === '_';
      if (!has && !isAllowed) {
        warnNonPresent(target, key);
      }
      return has || !isAllowed
    }
  };

  var getHandler = {
    get: function get (target, key) {
      if (typeof key === 'string' && !(key in target)) {
        warnNonPresent(target, key);
      }
      return target[key]
    }
  };

  initProxy = function initProxy (vm) {
    if (hasProxy) {
      // determine which proxy handler to use
      var options = vm.$options;
      var handlers = options.render && options.render._withStripped
        ? getHandler
        : hasHandler;
      vm._renderProxy = new Proxy(vm, handlers);
    } else {
      vm._renderProxy = vm;
    }
  };
}

/*  */

var VNode = function VNode (
  tag,
  data,
  children,
  text,
  elm,
  context,
  componentOptions
) {
  this.tag = tag;
  this.data = data;
  this.children = children;
  this.text = text;
  this.elm = elm;
  this.ns = undefined;
  this.context = context;
  this.functionalContext = undefined;
  this.key = data && data.key;
  this.componentOptions = componentOptions;
  this.componentInstance = undefined;
  this.parent = undefined;
  this.raw = false;
  this.isStatic = false;
  this.isRootInsert = true;
  this.isComment = false;
  this.isCloned = false;
  this.isOnce = false;
};

var prototypeAccessors = { child: {} };

// DEPRECATED: alias for componentInstance for backwards compat.
/* istanbul ignore next */
prototypeAccessors.child.get = function () {
  return this.componentInstance
};

Object.defineProperties( VNode.prototype, prototypeAccessors );

var createEmptyVNode = function () {
  var node = new VNode();
  node.text = '';
  node.isComment = true;
  return node
};

function createTextVNode (val) {
  return new VNode(undefined, undefined, undefined, String(val))
}

// optimized shallow clone
// used for static nodes and slot nodes because they may be reused across
// multiple renders, cloning them avoids errors when DOM manipulations rely
// on their elm reference.
function cloneVNode (vnode) {
  var cloned = new VNode(
    vnode.tag,
    vnode.data,
    vnode.children,
    vnode.text,
    vnode.elm,
    vnode.context,
    vnode.componentOptions
  );
  cloned.ns = vnode.ns;
  cloned.isStatic = vnode.isStatic;
  cloned.key = vnode.key;
  cloned.isComment = vnode.isComment;
  cloned.isCloned = true;
  return cloned
}

function cloneVNodes (vnodes) {
  var len = vnodes.length;
  var res = new Array(len);
  for (var i = 0; i < len; i++) {
    res[i] = cloneVNode(vnodes[i]);
  }
  return res
}

/*  */

var normalizeEvent = cached(function (name) {
  var passive = name.charAt(0) === '&';
  name = passive ? name.slice(1) : name;
  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first
  name = once$$1 ? name.slice(1) : name;
  var capture = name.charAt(0) === '!';
  name = capture ? name.slice(1) : name;
  return {
    name: name,
    once: once$$1,
    capture: capture,
    passive: passive
  }
});

function createFnInvoker (fns) {
  function invoker () {
    var arguments$1 = arguments;

    var fns = invoker.fns;
    if (Array.isArray(fns)) {
      for (var i = 0; i < fns.length; i++) {
        fns[i].apply(null, arguments$1);
      }
    } else {
      // return handler return value for single handlers
      return fns.apply(null, arguments)
    }
  }
  invoker.fns = fns;
  return invoker
}

function updateListeners (
  on,
  oldOn,
  add,
  remove$$1,
  vm
) {
  var name, cur, old, event;
  for (name in on) {
    cur = on[name];
    old = oldOn[name];
    event = normalizeEvent(name);
    if (isUndef(cur)) {
      "development" !== 'production' && warn(
        "Invalid handler for event \"" + (event.name) + "\": got " + String(cur),
        vm
      );
    } else if (isUndef(old)) {
      if (isUndef(cur.fns)) {
        cur = on[name] = createFnInvoker(cur);
      }
      add(event.name, cur, event.once, event.capture, event.passive);
    } else if (cur !== old) {
      old.fns = cur;
      on[name] = old;
    }
  }
  for (name in oldOn) {
    if (isUndef(on[name])) {
      event = normalizeEvent(name);
      remove$$1(event.name, oldOn[name], event.capture);
    }
  }
}

/*  */

function mergeVNodeHook (def, hookKey, hook) {
  var invoker;
  var oldHook = def[hookKey];

  function wrappedHook () {
    hook.apply(this, arguments);
    // important: remove merged hook to ensure it's called only once
    // and prevent memory leak
    remove(invoker.fns, wrappedHook);
  }

  if (isUndef(oldHook)) {
    // no existing hook
    invoker = createFnInvoker([wrappedHook]);
  } else {
    /* istanbul ignore if */
    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {
      // already a merged invoker
      invoker = oldHook;
      invoker.fns.push(wrappedHook);
    } else {
      // existing plain hook
      invoker = createFnInvoker([oldHook, wrappedHook]);
    }
  }

  invoker.merged = true;
  def[hookKey] = invoker;
}

/*  */

function extractPropsFromVNodeData (
  data,
  Ctor,
  tag
) {
  // we are only extracting raw values here.
  // validation and default values are handled in the child
  // component itself.
  var propOptions = Ctor.options.props;
  if (isUndef(propOptions)) {
    return
  }
  var res = {};
  var attrs = data.attrs;
  var props = data.props;
  if (isDef(attrs) || isDef(props)) {
    for (var key in propOptions) {
      var altKey = hyphenate(key);
      if (true) {
        var keyInLowerCase = key.toLowerCase();
        if (
          key !== keyInLowerCase &&
          attrs && hasOwn(attrs, keyInLowerCase)
        ) {
          tip(
            "Prop \"" + keyInLowerCase + "\" is passed to component " +
            (formatComponentName(tag || Ctor)) + ", but the declared prop name is" +
            " \"" + key + "\". " +
            "Note that HTML attributes are case-insensitive and camelCased " +
            "props need to use their kebab-case equivalents when using in-DOM " +
            "templates. You should probably use \"" + altKey + "\" instead of \"" + key + "\"."
          );
        }
      }
      checkProp(res, props, key, altKey, true) ||
      checkProp(res, attrs, key, altKey, false);
    }
  }
  return res
}

function checkProp (
  res,
  hash,
  key,
  altKey,
  preserve
) {
  if (isDef(hash)) {
    if (hasOwn(hash, key)) {
      res[key] = hash[key];
      if (!preserve) {
        delete hash[key];
      }
      return true
    } else if (hasOwn(hash, altKey)) {
      res[key] = hash[altKey];
      if (!preserve) {
        delete hash[altKey];
      }
      return true
    }
  }
  return false
}

/*  */

// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:

// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.
function simpleNormalizeChildren (children) {
  for (var i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children)
    }
  }
  return children
}

// 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.
function normalizeChildren (children) {
  return isPrimitive(children)
    ? [createTextVNode(children)]
    : Array.isArray(children)
      ? normalizeArrayChildren(children)
      : undefined
}

function isTextNode (node) {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment)
}

function normalizeArrayChildren (children, nestedIndex) {
  var res = [];
  var i, c, last;
  for (i = 0; i < children.length; i++) {
    c = children[i];
    if (isUndef(c) || typeof c === 'boolean') { continue }
    last = res[res.length - 1];
    //  nested
    if (Array.isArray(c)) {
      res.push.apply(res, normalizeArrayChildren(c, ((nestedIndex || '') + "_" + i)));
    } else if (isPrimitive(c)) {
      if (isTextNode(last)) {
        // merge adjacent text nodes
        // this is necessary for SSR hydration because text nodes are
        // essentially merged when rendered to HTML strings
        (last).text += String(c);
      } else if (c !== '') {
        // convert primitive to vnode
        res.push(createTextVNode(c));
      }
    } else {
      if (isTextNode(c) && isTextNode(last)) {
        // merge adjacent text nodes
        res[res.length - 1] = createTextVNode(last.text + c.text);
      } else {
        // default key for nested array children (likely generated by v-for)
        if (isTrue(children._isVList) &&
          isDef(c.tag) &&
          isUndef(c.key) &&
          isDef(nestedIndex)) {
          c.key = "__vlist" + nestedIndex + "_" + i + "__";
        }
        res.push(c);
      }
    }
  }
  return res
}

/*  */

function ensureCtor (comp, base) {
  return isObject(comp)
    ? base.extend(comp)
    : comp
}

function resolveAsyncComponent (
  factory,
  baseCtor,
  context
) {
  if (isTrue(factory.error) && isDef(factory.errorComp)) {
    return factory.errorComp
  }

  if (isDef(factory.resolved)) {
    return factory.resolved
  }

  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
    return factory.loadingComp
  }

  if (isDef(factory.contexts)) {
    // already pending
    factory.contexts.push(context);
  } else {
    var contexts = factory.contexts = [context];
    var sync = true;

    var forceRender = function () {
      for (var i = 0, l = contexts.length; i < l; i++) {
        contexts[i].$forceUpdate();
      }
    };

    var resolve = once(function (res) {
      // cache resolved
      factory.resolved = ensureCtor(res, baseCtor);
      // invoke callbacks only if this is not a synchronous resolve
      // (async resolves are shimmed as synchronous during SSR)
      if (!sync) {
        forceRender();
      }
    });

    var reject = once(function (reason) {
      "development" !== 'production' && warn(
        "Failed to resolve async component: " + (String(factory)) +
        (reason ? ("\nReason: " + reason) : '')
      );
      if (isDef(factory.errorComp)) {
        factory.error = true;
        forceRender();
      }
    });

    var res = factory(resolve, reject);

    if (isObject(res)) {
      if (typeof res.then === 'function') {
        // () => Promise
        if (isUndef(factory.resolved)) {
          res.then(resolve, reject);
        }
      } else if (isDef(res.component) && typeof res.component.then === 'function') {
        res.component.then(resolve, reject);

        if (isDef(res.error)) {
          factory.errorComp = ensureCtor(res.error, baseCtor);
        }

        if (isDef(res.loading)) {
          factory.loadingComp = ensureCtor(res.loading, baseCtor);
          if (res.delay === 0) {
            factory.loading = true;
          } else {
            setTimeout(function () {
              if (isUndef(factory.resolved) && isUndef(factory.error)) {
                factory.loading = true;
                forceRender();
              }
            }, res.delay || 200);
          }
        }

        if (isDef(res.timeout)) {
          setTimeout(function () {
            if (isUndef(factory.resolved)) {
              reject(
                 true
                  ? ("timeout (" + (res.timeout) + "ms)")
                  : null
              );
            }
          }, res.timeout);
        }
      }
    }

    sync = false;
    // return in case resolved synchronously
    return factory.loading
      ? factory.loadingComp
      : factory.resolved
  }
}

/*  */

function getFirstComponentChild (children) {
  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      var c = children[i];
      if (isDef(c) && isDef(c.componentOptions)) {
        return c
      }
    }
  }
}

/*  */

/*  */

function initEvents (vm) {
  vm._events = Object.create(null);
  vm._hasHookEvent = false;
  // init parent attached events
  var listeners = vm.$options._parentListeners;
  if (listeners) {
    updateComponentListeners(vm, listeners);
  }
}

var target;

function add (event, fn, once$$1) {
  if (once$$1) {
    target.$once(event, fn);
  } else {
    target.$on(event, fn);
  }
}

function remove$1 (event, fn) {
  target.$off(event, fn);
}

function updateComponentListeners (
  vm,
  listeners,
  oldListeners
) {
  target = vm;
  updateListeners(listeners, oldListeners || {}, add, remove$1, vm);
}

function eventsMixin (Vue) {
  var hookRE = /^hook:/;
  Vue.prototype.$on = function (event, fn) {
    var this$1 = this;

    var vm = this;
    if (Array.isArray(event)) {
      for (var i = 0, l = event.length; i < l; i++) {
        this$1.$on(event[i], fn);
      }
    } else {
      (vm._events[event] || (vm._events[event] = [])).push(fn);
      // optimize hook:event cost by using a boolean flag marked at registration
      // instead of a hash lookup
      if (hookRE.test(event)) {
        vm._hasHookEvent = true;
      }
    }
    return vm
  };

  Vue.prototype.$once = function (event, fn) {
    var vm = this;
    function on () {
      vm.$off(event, on);
      fn.apply(vm, arguments);
    }
    on.fn = fn;
    vm.$on(event, on);
    return vm
  };

  Vue.prototype.$off = function (event, fn) {
    var this$1 = this;

    var vm = this;
    // all
    if (!arguments.length) {
      vm._events = Object.create(null);
      return vm
    }
    // array of events
    if (Array.isArray(event)) {
      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {
        this$1.$off(event[i$1], fn);
      }
      return vm
    }
    // specific event
    var cbs = vm._events[event];
    if (!cbs) {
      return vm
    }
    if (arguments.length === 1) {
      vm._events[event] = null;
      return vm
    }
    // specific handler
    var cb;
    var i = cbs.length;
    while (i--) {
      cb = cbs[i];
      if (cb === fn || cb.fn === fn) {
        cbs.splice(i, 1);
        break
      }
    }
    return vm
  };

  Vue.prototype.$emit = function (event) {
    var vm = this;
    if (true) {
      var lowerCaseEvent = event.toLowerCase();
      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {
        tip(
          "Event \"" + lowerCaseEvent + "\" is emitted in component " +
          (formatComponentName(vm)) + " but the handler is registered for \"" + event + "\". " +
          "Note that HTML attributes are case-insensitive and you cannot use " +
          "v-on to listen to camelCase events when using in-DOM templates. " +
          "You should probably use \"" + (hyphenate(event)) + "\" instead of \"" + event + "\"."
        );
      }
    }
    var cbs = vm._events[event];
    if (cbs) {
      cbs = cbs.length > 1 ? toArray(cbs) : cbs;
      var args = toArray(arguments, 1);
      for (var i = 0, l = cbs.length; i < l; i++) {
        cbs[i].apply(vm, args);
      }
    }
    return vm
  };
}

/*  */

/**
 * Runtime helper for resolving raw children VNodes into a slot object.
 */
function resolveSlots (
  children,
  context
) {
  var slots = {};
  if (!children) {
    return slots
  }
  var defaultSlot = [];
  for (var i = 0, l = children.length; i < l; i++) {
    var child = children[i];
    // named slots should only be respected if the vnode was rendered in the
    // same context.
    if ((child.context === context || child.functionalContext === context) &&
      child.data && child.data.slot != null
    ) {
      var name = child.data.slot;
      var slot = (slots[name] || (slots[name] = []));
      if (child.tag === 'template') {
        slot.push.apply(slot, child.children);
      } else {
        slot.push(child);
      }
    } else {
      defaultSlot.push(child);
    }
  }
  // ignore whitespace
  if (!defaultSlot.every(isWhitespace)) {
    slots.default = defaultSlot;
  }
  return slots
}

function isWhitespace (node) {
  return node.isComment || node.text === ' '
}

function resolveScopedSlots (
  fns, // see flow/vnode
  res
) {
  res = res || {};
  for (var i = 0; i < fns.length; i++) {
    if (Array.isArray(fns[i])) {
      resolveScopedSlots(fns[i], res);
    } else {
      res[fns[i].key] = fns[i].fn;
    }
  }
  return res
}

/*  */

var activeInstance = null;

function initLifecycle (vm) {
  var options = vm.$options;

  // locate first non-abstract parent
  var parent = options.parent;
  if (parent && !options.abstract) {
    while (parent.$options.abstract && parent.$parent) {
      parent = parent.$parent;
    }
    parent.$children.push(vm);
  }

  vm.$parent = parent;
  vm.$root = parent ? parent.$root : vm;

  vm.$children = [];
  vm.$refs = {};

  vm._watcher = null;
  vm._inactive = null;
  vm._directInactive = false;
  vm._isMounted = false;
  vm._isDestroyed = false;
  vm._isBeingDestroyed = false;
}

function lifecycleMixin (Vue) {
  Vue.prototype._update = function (vnode, hydrating) {
    var vm = this;
    if (vm._isMounted) {
      callHook(vm, 'beforeUpdate');
    }
    var prevEl = vm.$el;
    var prevVnode = vm._vnode;
    var prevActiveInstance = activeInstance;
    activeInstance = vm;
    vm._vnode = vnode;
    // Vue.prototype.__patch__ is injected in entry points
    // based on the rendering backend used.
    if (!prevVnode) {
      // initial render
      vm.$el = vm.__patch__(
        vm.$el, vnode, hydrating, false /* removeOnly */,
        vm.$options._parentElm,
        vm.$options._refElm
      );
    } else {
      // updates
      vm.$el = vm.__patch__(prevVnode, vnode);
    }
    activeInstance = prevActiveInstance;
    // update __vue__ reference
    if (prevEl) {
      prevEl.__vue__ = null;
    }
    if (vm.$el) {
      vm.$el.__vue__ = vm;
    }
    // if parent is an HOC, update its $el as well
    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
      vm.$parent.$el = vm.$el;
    }
    // updated hook is called by the scheduler to ensure that children are
    // updated in a parent's updated hook.
  };

  Vue.prototype.$forceUpdate = function () {
    var vm = this;
    if (vm._watcher) {
      vm._watcher.update();
    }
  };

  Vue.prototype.$destroy = function () {
    var vm = this;
    if (vm._isBeingDestroyed) {
      return
    }
    callHook(vm, 'beforeDestroy');
    vm._isBeingDestroyed = true;
    // remove self from parent
    var parent = vm.$parent;
    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
      remove(parent.$children, vm);
    }
    // teardown watchers
    if (vm._watcher) {
      vm._watcher.teardown();
    }
    var i = vm._watchers.length;
    while (i--) {
      vm._watchers[i].teardown();
    }
    // remove reference from data ob
    // frozen object may not have observer.
    if (vm._data.__ob__) {
      vm._data.__ob__.vmCount--;
    }
    // call the last hook...
    vm._isDestroyed = true;
    // invoke destroy hooks on current rendered tree
    vm.__patch__(vm._vnode, null);
    // fire destroyed hook
    callHook(vm, 'destroyed');
    // turn off all instance listeners.
    vm.$off();
    // remove __vue__ reference
    if (vm.$el) {
      vm.$el.__vue__ = null;
    }
    // remove reference to DOM nodes (prevents leak)
    vm.$options._parentElm = vm.$options._refElm = null;
  };
}

function mountComponent (
  vm,
  el,
  hydrating
) {
  vm.$el = el;
  if (!vm.$options.render) {
    vm.$options.render = createEmptyVNode;
    if (true) {
      /* istanbul ignore if */
      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||
        vm.$options.el || el) {
        warn(
          'You are using the runtime-only build of Vue where the template ' +
          'compiler is not available. Either pre-compile the templates into ' +
          'render functions, or use the compiler-included build.',
          vm
        );
      } else {
        warn(
          'Failed to mount component: template or render function not defined.',
          vm
        );
      }
    }
  }
  callHook(vm, 'beforeMount');

  var updateComponent;
  /* istanbul ignore if */
  if ("development" !== 'production' && config.performance && mark) {
    updateComponent = function () {
      var name = vm._name;
      var id = vm._uid;
      var startTag = "vue-perf-start:" + id;
      var endTag = "vue-perf-end:" + id;

      mark(startTag);
      var vnode = vm._render();
      mark(endTag);
      measure((name + " render"), startTag, endTag);

      mark(startTag);
      vm._update(vnode, hydrating);
      mark(endTag);
      measure((name + " patch"), startTag, endTag);
    };
  } else {
    updateComponent = function () {
      vm._update(vm._render(), hydrating);
    };
  }

  vm._watcher = new Watcher(vm, updateComponent, noop);
  hydrating = false;

  // manually mounted instance, call mounted on self
  // mounted is called for render-created child components in its inserted hook
  if (vm.$vnode == null) {
    vm._isMounted = true;
    callHook(vm, 'mounted');
  }
  return vm
}

function updateChildComponent (
  vm,
  propsData,
  listeners,
  parentVnode,
  renderChildren
) {
  // determine whether component has slot children
  // we need to do this before overwriting $options._renderChildren
  var hasChildren = !!(
    renderChildren ||               // has new static slots
    vm.$options._renderChildren ||  // has old static slots
    parentVnode.data.scopedSlots || // has new scoped slots
    vm.$scopedSlots !== emptyObject // has old scoped slots
  );

  vm.$options._parentVnode = parentVnode;
  vm.$vnode = parentVnode; // update vm's placeholder node without re-render
  if (vm._vnode) { // update child tree's parent
    vm._vnode.parent = parentVnode;
  }
  vm.$options._renderChildren = renderChildren;

  // update props
  if (propsData && vm.$options.props) {
    observerState.shouldConvert = false;
    if (true) {
      observerState.isSettingProps = true;
    }
    var props = vm._props;
    var propKeys = vm.$options._propKeys || [];
    for (var i = 0; i < propKeys.length; i++) {
      var key = propKeys[i];
      props[key] = validateProp(key, vm.$options.props, propsData, vm);
    }
    observerState.shouldConvert = true;
    if (true) {
      observerState.isSettingProps = false;
    }
    // keep a copy of raw propsData
    vm.$options.propsData = propsData;
  }
  // update listeners
  if (listeners) {
    var oldListeners = vm.$options._parentListeners;
    vm.$options._parentListeners = listeners;
    updateComponentListeners(vm, listeners, oldListeners);
  }
  // resolve slots + force update if has children
  if (hasChildren) {
    vm.$slots = resolveSlots(renderChildren, parentVnode.context);
    vm.$forceUpdate();
  }
}

function isInInactiveTree (vm) {
  while (vm && (vm = vm.$parent)) {
    if (vm._inactive) { return true }
  }
  return false
}

function activateChildComponent (vm, direct) {
  if (direct) {
    vm._directInactive = false;
    if (isInInactiveTree(vm)) {
      return
    }
  } else if (vm._directInactive) {
    return
  }
  if (vm._inactive || vm._inactive === null) {
    vm._inactive = false;
    for (var i = 0; i < vm.$children.length; i++) {
      activateChildComponent(vm.$children[i]);
    }
    callHook(vm, 'activated');
  }
}

function deactivateChildComponent (vm, direct) {
  if (direct) {
    vm._directInactive = true;
    if (isInInactiveTree(vm)) {
      return
    }
  }
  if (!vm._inactive) {
    vm._inactive = true;
    for (var i = 0; i < vm.$children.length; i++) {
      deactivateChildComponent(vm.$children[i]);
    }
    callHook(vm, 'deactivated');
  }
}

function callHook (vm, hook) {
  var handlers = vm.$options[hook];
  if (handlers) {
    for (var i = 0, j = handlers.length; i < j; i++) {
      try {
        handlers[i].call(vm);
      } catch (e) {
        handleError(e, vm, (hook + " hook"));
      }
    }
  }
  if (vm._hasHookEvent) {
    vm.$emit('hook:' + hook);
  }
}

/*  */


var MAX_UPDATE_COUNT = 100;

var queue = [];
var activatedChildren = [];
var has = {};
var circular = {};
var waiting = false;
var flushing = false;
var index = 0;

/**
 * Reset the scheduler's state.
 */
function resetSchedulerState () {
  index = queue.length = activatedChildren.length = 0;
  has = {};
  if (true) {
    circular = {};
  }
  waiting = flushing = false;
}

/**
 * Flush both queues and run the watchers.
 */
function flushSchedulerQueue () {
  flushing = true;
  var watcher, id;

  // Sort queue before flush.
  // This ensures that:
  // 1. Components are updated from parent to child. (because parent is always
  //    created before the child)
  // 2. A component's user watchers are run before its render watcher (because
  //    user watchers are created before the render watcher)
  // 3. If a component is destroyed during a parent component's watcher run,
  //    its watchers can be skipped.
  queue.sort(function (a, b) { return a.id - b.id; });

  // do not cache length because more watchers might be pushed
  // as we run existing watchers
  for (index = 0; index < queue.length; index++) {
    watcher = queue[index];
    id = watcher.id;
    has[id] = null;
    watcher.run();
    // in dev build, check and stop circular updates.
    if ("development" !== 'production' && has[id] != null) {
      circular[id] = (circular[id] || 0) + 1;
      if (circular[id] > MAX_UPDATE_COUNT) {
        warn(
          'You may have an infinite update loop ' + (
            watcher.user
              ? ("in watcher with expression \"" + (watcher.expression) + "\"")
              : "in a component render function."
          ),
          watcher.vm
        );
        break
      }
    }
  }

  // keep copies of post queues before resetting state
  var activatedQueue = activatedChildren.slice();
  var updatedQueue = queue.slice();

  resetSchedulerState();

  // call component updated and activated hooks
  callActivatedHooks(activatedQueue);
  callUpdateHooks(updatedQueue);

  // devtool hook
  /* istanbul ignore if */
  if (devtools && config.devtools) {
    devtools.emit('flush');
  }
}

function callUpdateHooks (queue) {
  var i = queue.length;
  while (i--) {
    var watcher = queue[i];
    var vm = watcher.vm;
    if (vm._watcher === watcher && vm._isMounted) {
      callHook(vm, 'updated');
    }
  }
}

/**
 * Queue a kept-alive component that was activated during patch.
 * The queue will be processed after the entire tree has been patched.
 */
function queueActivatedComponent (vm) {
  // setting _inactive to false here so that a render function can
  // rely on checking whether it's in an inactive tree (e.g. router-view)
  vm._inactive = false;
  activatedChildren.push(vm);
}

function callActivatedHooks (queue) {
  for (var i = 0; i < queue.length; i++) {
    queue[i]._inactive = true;
    activateChildComponent(queue[i], true /* true */);
  }
}

/**
 * Push a watcher into the watcher queue.
 * Jobs with duplicate IDs will be skipped unless it's
 * pushed when the queue is being flushed.
 */
function queueWatcher (watcher) {
  var id = watcher.id;
  if (has[id] == null) {
    has[id] = true;
    if (!flushing) {
      queue.push(watcher);
    } else {
      // if already flushing, splice the watcher based on its id
      // if already past its id, it will be run next immediately.
      var i = queue.length - 1;
      while (i > index && queue[i].id > watcher.id) {
        i--;
      }
      queue.splice(i + 1, 0, watcher);
    }
    // queue the flush
    if (!waiting) {
      waiting = true;
      nextTick(flushSchedulerQueue);
    }
  }
}

/*  */

var uid$2 = 0;

/**
 * A watcher parses an expression, collects dependencies,
 * and fires callback when the expression value changes.
 * This is used for both the $watch() api and directives.
 */
var Watcher = function Watcher (
  vm,
  expOrFn,
  cb,
  options
) {
  this.vm = vm;
  vm._watchers.push(this);
  // options
  if (options) {
    this.deep = !!options.deep;
    this.user = !!options.user;
    this.lazy = !!options.lazy;
    this.sync = !!options.sync;
  } else {
    this.deep = this.user = this.lazy = this.sync = false;
  }
  this.cb = cb;
  this.id = ++uid$2; // uid for batching
  this.active = true;
  this.dirty = this.lazy; // for lazy watchers
  this.deps = [];
  this.newDeps = [];
  this.depIds = new _Set();
  this.newDepIds = new _Set();
  this.expression =  true
    ? expOrFn.toString()
    : '';
  // parse expression for getter
  if (typeof expOrFn === 'function') {
    this.getter = expOrFn;
  } else {
    this.getter = parsePath(expOrFn);
    if (!this.getter) {
      this.getter = function () {};
      "development" !== 'production' && warn(
        "Failed watching path: \"" + expOrFn + "\" " +
        'Watcher only accepts simple dot-delimited paths. ' +
        'For full control, use a function instead.',
        vm
      );
    }
  }
  this.value = this.lazy
    ? undefined
    : this.get();
};

/**
 * Evaluate the getter, and re-collect dependencies.
 */
Watcher.prototype.get = function get () {
  pushTarget(this);
  var value;
  var vm = this.vm;
  if (this.user) {
    try {
      value = this.getter.call(vm, vm);
    } catch (e) {
      handleError(e, vm, ("getter for watcher \"" + (this.expression) + "\""));
    }
  } else {
    value = this.getter.call(vm, vm);
  }
  // "touch" every property so they are all tracked as
  // dependencies for deep watching
  if (this.deep) {
    traverse(value);
  }
  popTarget();
  this.cleanupDeps();
  return value
};

/**
 * Add a dependency to this directive.
 */
Watcher.prototype.addDep = function addDep (dep) {
  var id = dep.id;
  if (!this.newDepIds.has(id)) {
    this.newDepIds.add(id);
    this.newDeps.push(dep);
    if (!this.depIds.has(id)) {
      dep.addSub(this);
    }
  }
};

/**
 * Clean up for dependency collection.
 */
Watcher.prototype.cleanupDeps = function cleanupDeps () {
    var this$1 = this;

  var i = this.deps.length;
  while (i--) {
    var dep = this$1.deps[i];
    if (!this$1.newDepIds.has(dep.id)) {
      dep.removeSub(this$1);
    }
  }
  var tmp = this.depIds;
  this.depIds = this.newDepIds;
  this.newDepIds = tmp;
  this.newDepIds.clear();
  tmp = this.deps;
  this.deps = this.newDeps;
  this.newDeps = tmp;
  this.newDeps.length = 0;
};

/**
 * Subscriber interface.
 * Will be called when a dependency changes.
 */
Watcher.prototype.update = function update () {
  /* istanbul ignore else */
  if (this.lazy) {
    this.dirty = true;
  } else if (this.sync) {
    this.run();
  } else {
    queueWatcher(this);
  }
};

/**
 * Scheduler job interface.
 * Will be called by the scheduler.
 */
Watcher.prototype.run = function run () {
  if (this.active) {
    var value = this.get();
    if (
      value !== this.value ||
      // Deep watchers and watchers on Object/Arrays should fire even
      // when the value is the same, because the value may
      // have mutated.
      isObject(value) ||
      this.deep
    ) {
      // set new value
      var oldValue = this.value;
      this.value = value;
      if (this.user) {
        try {
          this.cb.call(this.vm, value, oldValue);
        } catch (e) {
          handleError(e, this.vm, ("callback for watcher \"" + (this.expression) + "\""));
        }
      } else {
        this.cb.call(this.vm, value, oldValue);
      }
    }
  }
};

/**
 * Evaluate the value of the watcher.
 * This only gets called for lazy watchers.
 */
Watcher.prototype.evaluate = function evaluate () {
  this.value = this.get();
  this.dirty = false;
};

/**
 * Depend on all deps collected by this watcher.
 */
Watcher.prototype.depend = function depend () {
    var this$1 = this;

  var i = this.deps.length;
  while (i--) {
    this$1.deps[i].depend();
  }
};

/**
 * Remove self from all dependencies' subscriber list.
 */
Watcher.prototype.teardown = function teardown () {
    var this$1 = this;

  if (this.active) {
    // remove self from vm's watcher list
    // this is a somewhat expensive operation so we skip it
    // if the vm is being destroyed.
    if (!this.vm._isBeingDestroyed) {
      remove(this.vm._watchers, this);
    }
    var i = this.deps.length;
    while (i--) {
      this$1.deps[i].removeSub(this$1);
    }
    this.active = false;
  }
};

/**
 * Recursively traverse an object to evoke all converted
 * getters, so that every nested property inside the object
 * is collected as a "deep" dependency.
 */
var seenObjects = new _Set();
function traverse (val) {
  seenObjects.clear();
  _traverse(val, seenObjects);
}

function _traverse (val, seen) {
  var i, keys;
  var isA = Array.isArray(val);
  if ((!isA && !isObject(val)) || !Object.isExtensible(val)) {
    return
  }
  if (val.__ob__) {
    var depId = val.__ob__.dep.id;
    if (seen.has(depId)) {
      return
    }
    seen.add(depId);
  }
  if (isA) {
    i = val.length;
    while (i--) { _traverse(val[i], seen); }
  } else {
    keys = Object.keys(val);
    i = keys.length;
    while (i--) { _traverse(val[keys[i]], seen); }
  }
}

/*  */

var sharedPropertyDefinition = {
  enumerable: true,
  configurable: true,
  get: noop,
  set: noop
};

function proxy (target, sourceKey, key) {
  sharedPropertyDefinition.get = function proxyGetter () {
    return this[sourceKey][key]
  };
  sharedPropertyDefinition.set = function proxySetter (val) {
    this[sourceKey][key] = val;
  };
  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function initState (vm) {
  vm._watchers = [];
  var opts = vm.$options;
  if (opts.props) { initProps(vm, opts.props); }
  if (opts.methods) { initMethods(vm, opts.methods); }
  if (opts.data) {
    initData(vm);
  } else {
    observe(vm._data = {}, true /* asRootData */);
  }
  if (opts.computed) { initComputed(vm, opts.computed); }
  if (opts.watch) { initWatch(vm, opts.watch); }
}

var isReservedProp = {
  key: 1,
  ref: 1,
  slot: 1
};

function initProps (vm, propsOptions) {
  var propsData = vm.$options.propsData || {};
  var props = vm._props = {};
  // cache prop keys so that future props updates can iterate using Array
  // instead of dynamic object key enumeration.
  var keys = vm.$options._propKeys = [];
  var isRoot = !vm.$parent;
  // root instance props should be converted
  observerState.shouldConvert = isRoot;
  var loop = function ( key ) {
    keys.push(key);
    var value = validateProp(key, propsOptions, propsData, vm);
    /* istanbul ignore else */
    if (true) {
      if (isReservedProp[key] || config.isReservedAttr(key)) {
        warn(
          ("\"" + key + "\" is a reserved attribute and cannot be used as component prop."),
          vm
        );
      }
      defineReactive$$1(props, key, value, function () {
        if (vm.$parent && !observerState.isSettingProps) {
          warn(
            "Avoid mutating a prop directly since the value will be " +
            "overwritten whenever the parent component re-renders. " +
            "Instead, use a data or computed property based on the prop's " +
            "value. Prop being mutated: \"" + key + "\"",
            vm
          );
        }
      });
    } else {
      defineReactive$$1(props, key, value);
    }
    // static props are already proxied on the component's prototype
    // during Vue.extend(). We only need to proxy props defined at
    // instantiation here.
    if (!(key in vm)) {
      proxy(vm, "_props", key);
    }
  };

  for (var key in propsOptions) loop( key );
  observerState.shouldConvert = true;
}

function initData (vm) {
  var data = vm.$options.data;
  data = vm._data = typeof data === 'function'
    ? getData(data, vm)
    : data || {};
  if (!isPlainObject(data)) {
    data = {};
    "development" !== 'production' && warn(
      'data functions should return an object:\n' +
      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',
      vm
    );
  }
  // proxy data on instance
  var keys = Object.keys(data);
  var props = vm.$options.props;
  var i = keys.length;
  while (i--) {
    if (props && hasOwn(props, keys[i])) {
      "development" !== 'production' && warn(
        "The data property \"" + (keys[i]) + "\" is already declared as a prop. " +
        "Use prop default value instead.",
        vm
      );
    } else if (!isReserved(keys[i])) {
      proxy(vm, "_data", keys[i]);
    }
  }
  // observe data
  observe(data, true /* asRootData */);
}

function getData (data, vm) {
  try {
    return data.call(vm)
  } catch (e) {
    handleError(e, vm, "data()");
    return {}
  }
}

var computedWatcherOptions = { lazy: true };

function initComputed (vm, computed) {
  var watchers = vm._computedWatchers = Object.create(null);

  for (var key in computed) {
    var userDef = computed[key];
    var getter = typeof userDef === 'function' ? userDef : userDef.get;
    if (true) {
      if (getter === undefined) {
        warn(
          ("No getter function has been defined for computed property \"" + key + "\"."),
          vm
        );
        getter = noop;
      }
    }
    // create internal watcher for the computed property.
    watchers[key] = new Watcher(vm, getter, noop, computedWatcherOptions);

    // component-defined computed properties are already defined on the
    // component prototype. We only need to define computed properties defined
    // at instantiation here.
    if (!(key in vm)) {
      defineComputed(vm, key, userDef);
    } else if (true) {
      if (key in vm.$data) {
        warn(("The computed property \"" + key + "\" is already defined in data."), vm);
      } else if (vm.$options.props && key in vm.$options.props) {
        warn(("The computed property \"" + key + "\" is already defined as a prop."), vm);
      }
    }
  }
}

function defineComputed (target, key, userDef) {
  if (typeof userDef === 'function') {
    sharedPropertyDefinition.get = createComputedGetter(key);
    sharedPropertyDefinition.set = noop;
  } else {
    sharedPropertyDefinition.get = userDef.get
      ? userDef.cache !== false
        ? createComputedGetter(key)
        : userDef.get
      : noop;
    sharedPropertyDefinition.set = userDef.set
      ? userDef.set
      : noop;
  }
  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function createComputedGetter (key) {
  return function computedGetter () {
    var watcher = this._computedWatchers && this._computedWatchers[key];
    if (watcher) {
      if (watcher.dirty) {
        watcher.evaluate();
      }
      if (Dep.target) {
        watcher.depend();
      }
      return watcher.value
    }
  }
}

function initMethods (vm, methods) {
  var props = vm.$options.props;
  for (var key in methods) {
    vm[key] = methods[key] == null ? noop : bind(methods[key], vm);
    if (true) {
      if (methods[key] == null) {
        warn(
          "method \"" + key + "\" has an undefined value in the component definition. " +
          "Did you reference the function correctly?",
          vm
        );
      }
      if (props && hasOwn(props, key)) {
        warn(
          ("method \"" + key + "\" has already been defined as a prop."),
          vm
        );
      }
    }
  }
}

function initWatch (vm, watch) {
  for (var key in watch) {
    var handler = watch[key];
    if (Array.isArray(handler)) {
      for (var i = 0; i < handler.length; i++) {
        createWatcher(vm, key, handler[i]);
      }
    } else {
      createWatcher(vm, key, handler);
    }
  }
}

function createWatcher (vm, key, handler) {
  var options;
  if (isPlainObject(handler)) {
    options = handler;
    handler = handler.handler;
  }
  if (typeof handler === 'string') {
    handler = vm[handler];
  }
  vm.$watch(key, handler, options);
}

function stateMixin (Vue) {
  // flow somehow has problems with directly declared definition object
  // when using Object.defineProperty, so we have to procedurally build up
  // the object here.
  var dataDef = {};
  dataDef.get = function () { return this._data };
  var propsDef = {};
  propsDef.get = function () { return this._props };
  if (true) {
    dataDef.set = function (newData) {
      warn(
        'Avoid replacing instance root $data. ' +
        'Use nested data properties instead.',
        this
      );
    };
    propsDef.set = function () {
      warn("$props is readonly.", this);
    };
  }
  Object.defineProperty(Vue.prototype, '$data', dataDef);
  Object.defineProperty(Vue.prototype, '$props', propsDef);

  Vue.prototype.$set = set;
  Vue.prototype.$delete = del;

  Vue.prototype.$watch = function (
    expOrFn,
    cb,
    options
  ) {
    var vm = this;
    options = options || {};
    options.user = true;
    var watcher = new Watcher(vm, expOrFn, cb, options);
    if (options.immediate) {
      cb.call(vm, watcher.value);
    }
    return function unwatchFn () {
      watcher.teardown();
    }
  };
}

/*  */

function initProvide (vm) {
  var provide = vm.$options.provide;
  if (provide) {
    vm._provided = typeof provide === 'function'
      ? provide.call(vm)
      : provide;
  }
}

function initInjections (vm) {
  var result = resolveInject(vm.$options.inject, vm);
  if (result) {
    Object.keys(result).forEach(function (key) {
      /* istanbul ignore else */
      if (true) {
        defineReactive$$1(vm, key, result[key], function () {
          warn(
            "Avoid mutating an injected value directly since the changes will be " +
            "overwritten whenever the provided component re-renders. " +
            "injection being mutated: \"" + key + "\"",
            vm
          );
        });
      } else {
        defineReactive$$1(vm, key, result[key]);
      }
    });
  }
}

function resolveInject (inject, vm) {
  if (inject) {
    // inject is :any because flow is not smart enough to figure out cached
    // isArray here
    var isArray = Array.isArray(inject);
    var result = Object.create(null);
    var keys = isArray
      ? inject
      : hasSymbol
        ? Reflect.ownKeys(inject)
        : Object.keys(inject);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      var provideKey = isArray ? key : inject[key];
      var source = vm;
      while (source) {
        if (source._provided && provideKey in source._provided) {
          result[key] = source._provided[provideKey];
          break
        }
        source = source.$parent;
      }
    }
    return result
  }
}

/*  */

function createFunctionalComponent (
  Ctor,
  propsData,
  data,
  context,
  children
) {
  var props = {};
  var propOptions = Ctor.options.props;
  if (isDef(propOptions)) {
    for (var key in propOptions) {
      props[key] = validateProp(key, propOptions, propsData || {});
    }
  } else {
    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }
    if (isDef(data.props)) { mergeProps(props, data.props); }
  }
  // ensure the createElement function in functional components
  // gets a unique context - this is necessary for correct named slot check
  var _context = Object.create(context);
  var h = function (a, b, c, d) { return createElement(_context, a, b, c, d, true); };
  var vnode = Ctor.options.render.call(null, h, {
    data: data,
    props: props,
    children: children,
    parent: context,
    listeners: data.on || {},
    injections: resolveInject(Ctor.options.inject, context),
    slots: function () { return resolveSlots(children, context); }
  });
  if (vnode instanceof VNode) {
    vnode.functionalContext = context;
    vnode.functionalOptions = Ctor.options;
    if (data.slot) {
      (vnode.data || (vnode.data = {})).slot = data.slot;
    }
  }
  return vnode
}

function mergeProps (to, from) {
  for (var key in from) {
    to[camelize(key)] = from[key];
  }
}

/*  */

// hooks to be invoked on component VNodes during patch
var componentVNodeHooks = {
  init: function init (
    vnode,
    hydrating,
    parentElm,
    refElm
  ) {
    if (!vnode.componentInstance || vnode.componentInstance._isDestroyed) {
      var child = vnode.componentInstance = createComponentInstanceForVnode(
        vnode,
        activeInstance,
        parentElm,
        refElm
      );
      child.$mount(hydrating ? vnode.elm : undefined, hydrating);
    } else if (vnode.data.keepAlive) {
      // kept-alive components, treat as a patch
      var mountedNode = vnode; // work around flow
      componentVNodeHooks.prepatch(mountedNode, mountedNode);
    }
  },

  prepatch: function prepatch (oldVnode, vnode) {
    var options = vnode.componentOptions;
    var child = vnode.componentInstance = oldVnode.componentInstance;
    updateChildComponent(
      child,
      options.propsData, // updated props
      options.listeners, // updated listeners
      vnode, // new parent vnode
      options.children // new children
    );
  },

  insert: function insert (vnode) {
    var context = vnode.context;
    var componentInstance = vnode.componentInstance;
    if (!componentInstance._isMounted) {
      componentInstance._isMounted = true;
      callHook(componentInstance, 'mounted');
    }
    if (vnode.data.keepAlive) {
      if (context._isMounted) {
        // vue-router#1212
        // During updates, a kept-alive component's child components may
        // change, so directly walking the tree here may call activated hooks
        // on incorrect children. Instead we push them into a queue which will
        // be processed after the whole patch process ended.
        queueActivatedComponent(componentInstance);
      } else {
        activateChildComponent(componentInstance, true /* direct */);
      }
    }
  },

  destroy: function destroy (vnode) {
    var componentInstance = vnode.componentInstance;
    if (!componentInstance._isDestroyed) {
      if (!vnode.data.keepAlive) {
        componentInstance.$destroy();
      } else {
        deactivateChildComponent(componentInstance, true /* direct */);
      }
    }
  }
};

var hooksToMerge = Object.keys(componentVNodeHooks);

function createComponent (
  Ctor,
  data,
  context,
  children,
  tag
) {
  if (isUndef(Ctor)) {
    return
  }

  var baseCtor = context.$options._base;

  // plain options object: turn it into a constructor
  if (isObject(Ctor)) {
    Ctor = baseCtor.extend(Ctor);
  }

  // if at this stage it's not a constructor or an async component factory,
  // reject.
  if (typeof Ctor !== 'function') {
    if (true) {
      warn(("Invalid Component definition: " + (String(Ctor))), context);
    }
    return
  }

  // async component
  if (isUndef(Ctor.cid)) {
    Ctor = resolveAsyncComponent(Ctor, baseCtor, context);
    if (Ctor === undefined) {
      // return nothing if this is indeed an async component
      // wait for the callback to trigger parent update.
      return
    }
  }

  // resolve constructor options in case global mixins are applied after
  // component constructor creation
  resolveConstructorOptions(Ctor);

  data = data || {};

  // transform component v-model data into props & events
  if (isDef(data.model)) {
    transformModel(Ctor.options, data);
  }

  // extract props
  var propsData = extractPropsFromVNodeData(data, Ctor, tag);

  // functional component
  if (isTrue(Ctor.options.functional)) {
    return createFunctionalComponent(Ctor, propsData, data, context, children)
  }

  // extract listeners, since these needs to be treated as
  // child component listeners instead of DOM listeners
  var listeners = data.on;
  // replace with listeners with .native modifier
  data.on = data.nativeOn;

  if (isTrue(Ctor.options.abstract)) {
    // abstract components do not keep anything
    // other than props & listeners
    data = {};
  }

  // merge component management hooks onto the placeholder node
  mergeHooks(data);

  // return a placeholder vnode
  var name = Ctor.options.name || tag;
  var vnode = new VNode(
    ("vue-component-" + (Ctor.cid) + (name ? ("-" + name) : '')),
    data, undefined, undefined, undefined, context,
    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children }
  );
  return vnode
}

function createComponentInstanceForVnode (
  vnode, // we know it's MountedComponentVNode but flow doesn't
  parent, // activeInstance in lifecycle state
  parentElm,
  refElm
) {
  var vnodeComponentOptions = vnode.componentOptions;
  var options = {
    _isComponent: true,
    parent: parent,
    propsData: vnodeComponentOptions.propsData,
    _componentTag: vnodeComponentOptions.tag,
    _parentVnode: vnode,
    _parentListeners: vnodeComponentOptions.listeners,
    _renderChildren: vnodeComponentOptions.children,
    _parentElm: parentElm || null,
    _refElm: refElm || null
  };
  // check inline-template render functions
  var inlineTemplate = vnode.data.inlineTemplate;
  if (isDef(inlineTemplate)) {
    options.render = inlineTemplate.render;
    options.staticRenderFns = inlineTemplate.staticRenderFns;
  }
  return new vnodeComponentOptions.Ctor(options)
}

function mergeHooks (data) {
  if (!data.hook) {
    data.hook = {};
  }
  for (var i = 0; i < hooksToMerge.length; i++) {
    var key = hooksToMerge[i];
    var fromParent = data.hook[key];
    var ours = componentVNodeHooks[key];
    data.hook[key] = fromParent ? mergeHook$1(ours, fromParent) : ours;
  }
}

function mergeHook$1 (one, two) {
  return function (a, b, c, d) {
    one(a, b, c, d);
    two(a, b, c, d);
  }
}

// transform component v-model info (value and callback) into
// prop and event handler respectively.
function transformModel (options, data) {
  var prop = (options.model && options.model.prop) || 'value';
  var event = (options.model && options.model.event) || 'input';(data.props || (data.props = {}))[prop] = data.model.value;
  var on = data.on || (data.on = {});
  if (isDef(on[event])) {
    on[event] = [data.model.callback].concat(on[event]);
  } else {
    on[event] = data.model.callback;
  }
}

/*  */

var SIMPLE_NORMALIZE = 1;
var ALWAYS_NORMALIZE = 2;

// wrapper function for providing a more flexible interface
// without getting yelled at by flow
function createElement (
  context,
  tag,
  data,
  children,
  normalizationType,
  alwaysNormalize
) {
  if (Array.isArray(data) || isPrimitive(data)) {
    normalizationType = children;
    children = data;
    data = undefined;
  }
  if (isTrue(alwaysNormalize)) {
    normalizationType = ALWAYS_NORMALIZE;
  }
  return _createElement(context, tag, data, children, normalizationType)
}

function _createElement (
  context,
  tag,
  data,
  children,
  normalizationType
) {
  if (isDef(data) && isDef((data).__ob__)) {
    "development" !== 'production' && warn(
      "Avoid using observed data object as vnode data: " + (JSON.stringify(data)) + "\n" +
      'Always create fresh vnode data objects in each render!',
      context
    );
    return createEmptyVNode()
  }
  if (!tag) {
    // in case of component :is set to falsy value
    return createEmptyVNode()
  }
  // support single function children as default scoped slot
  if (Array.isArray(children) &&
    typeof children[0] === 'function'
  ) {
    data = data || {};
    data.scopedSlots = { default: children[0] };
    children.length = 0;
  }
  if (normalizationType === ALWAYS_NORMALIZE) {
    children = normalizeChildren(children);
  } else if (normalizationType === SIMPLE_NORMALIZE) {
    children = simpleNormalizeChildren(children);
  }
  var vnode, ns;
  if (typeof tag === 'string') {
    var Ctor;
    ns = config.getTagNamespace(tag);
    if (config.isReservedTag(tag)) {
      // platform built-in elements
      vnode = new VNode(
        config.parsePlatformTagName(tag), data, children,
        undefined, undefined, context
      );
    } else if (isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {
      // component
      vnode = createComponent(Ctor, data, context, children, tag);
    } else {
      // unknown or unlisted namespaced elements
      // check at runtime because it may get assigned a namespace when its
      // parent normalizes children
      vnode = new VNode(
        tag, data, children,
        undefined, undefined, context
      );
    }
  } else {
    // direct component options / constructor
    vnode = createComponent(tag, data, context, children);
  }
  if (isDef(vnode)) {
    if (ns) { applyNS(vnode, ns); }
    return vnode
  } else {
    return createEmptyVNode()
  }
}

function applyNS (vnode, ns) {
  vnode.ns = ns;
  if (vnode.tag === 'foreignObject') {
    // use default namespace inside foreignObject
    return
  }
  if (isDef(vnode.children)) {
    for (var i = 0, l = vnode.children.length; i < l; i++) {
      var child = vnode.children[i];
      if (isDef(child.tag) && isUndef(child.ns)) {
        applyNS(child, ns);
      }
    }
  }
}

/*  */

/**
 * Runtime helper for rendering v-for lists.
 */
function renderList (
  val,
  render
) {
  var ret, i, l, keys, key;
  if (Array.isArray(val) || typeof val === 'string') {
    ret = new Array(val.length);
    for (i = 0, l = val.length; i < l; i++) {
      ret[i] = render(val[i], i);
    }
  } else if (typeof val === 'number') {
    ret = new Array(val);
    for (i = 0; i < val; i++) {
      ret[i] = render(i + 1, i);
    }
  } else if (isObject(val)) {
    keys = Object.keys(val);
    ret = new Array(keys.length);
    for (i = 0, l = keys.length; i < l; i++) {
      key = keys[i];
      ret[i] = render(val[key], key, i);
    }
  }
  if (isDef(ret)) {
    (ret)._isVList = true;
  }
  return ret
}

/*  */

/**
 * Runtime helper for rendering <slot>
 */
function renderSlot (
  name,
  fallback,
  props,
  bindObject
) {
  var scopedSlotFn = this.$scopedSlots[name];
  if (scopedSlotFn) { // scoped slot
    props = props || {};
    if (bindObject) {
      extend(props, bindObject);
    }
    return scopedSlotFn(props) || fallback
  } else {
    var slotNodes = this.$slots[name];
    // warn duplicate slot usage
    if (slotNodes && "development" !== 'production') {
      slotNodes._rendered && warn(
        "Duplicate presence of slot \"" + name + "\" found in the same render tree " +
        "- this will likely cause render errors.",
        this
      );
      slotNodes._rendered = true;
    }
    return slotNodes || fallback
  }
}

/*  */

/**
 * Runtime helper for resolving filters
 */
function resolveFilter (id) {
  return resolveAsset(this.$options, 'filters', id, true) || identity
}

/*  */

/**
 * Runtime helper for checking keyCodes from config.
 */
function checkKeyCodes (
  eventKeyCode,
  key,
  builtInAlias
) {
  var keyCodes = config.keyCodes[key] || builtInAlias;
  if (Array.isArray(keyCodes)) {
    return keyCodes.indexOf(eventKeyCode) === -1
  } else {
    return keyCodes !== eventKeyCode
  }
}

/*  */

/**
 * Runtime helper for merging v-bind="object" into a VNode's data.
 */
function bindObjectProps (
  data,
  tag,
  value,
  asProp
) {
  if (value) {
    if (!isObject(value)) {
      "development" !== 'production' && warn(
        'v-bind without argument expects an Object or Array value',
        this
      );
    } else {
      if (Array.isArray(value)) {
        value = toObject(value);
      }
      var hash;
      for (var key in value) {
        if (key === 'class' || key === 'style') {
          hash = data;
        } else {
          var type = data.attrs && data.attrs.type;
          hash = asProp || config.mustUseProp(tag, type, key)
            ? data.domProps || (data.domProps = {})
            : data.attrs || (data.attrs = {});
        }
        if (!(key in hash)) {
          hash[key] = value[key];
        }
      }
    }
  }
  return data
}

/*  */

/**
 * Runtime helper for rendering static trees.
 */
function renderStatic (
  index,
  isInFor
) {
  var tree = this._staticTrees[index];
  // if has already-rendered static tree and not inside v-for,
  // we can reuse the same tree by doing a shallow clone.
  if (tree && !isInFor) {
    return Array.isArray(tree)
      ? cloneVNodes(tree)
      : cloneVNode(tree)
  }
  // otherwise, render a fresh tree.
  tree = this._staticTrees[index] =
    this.$options.staticRenderFns[index].call(this._renderProxy);
  markStatic(tree, ("__static__" + index), false);
  return tree
}

/**
 * Runtime helper for v-once.
 * Effectively it means marking the node as static with a unique key.
 */
function markOnce (
  tree,
  index,
  key
) {
  markStatic(tree, ("__once__" + index + (key ? ("_" + key) : "")), true);
  return tree
}

function markStatic (
  tree,
  key,
  isOnce
) {
  if (Array.isArray(tree)) {
    for (var i = 0; i < tree.length; i++) {
      if (tree[i] && typeof tree[i] !== 'string') {
        markStaticNode(tree[i], (key + "_" + i), isOnce);
      }
    }
  } else {
    markStaticNode(tree, key, isOnce);
  }
}

function markStaticNode (node, key, isOnce) {
  node.isStatic = true;
  node.key = key;
  node.isOnce = isOnce;
}

/*  */

function initRender (vm) {
  vm._vnode = null; // the root of the child tree
  vm._staticTrees = null;
  var parentVnode = vm.$vnode = vm.$options._parentVnode; // the placeholder node in parent tree
  var renderContext = parentVnode && parentVnode.context;
  vm.$slots = resolveSlots(vm.$options._renderChildren, renderContext);
  vm.$scopedSlots = emptyObject;
  // bind the createElement fn to this instance
  // so that we get proper render context inside it.
  // args order: tag, data, children, normalizationType, alwaysNormalize
  // internal version is used by render functions compiled from templates
  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };
  // normalization is always applied for the public version, used in
  // user-written render functions.
  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };
}

function renderMixin (Vue) {
  Vue.prototype.$nextTick = function (fn) {
    return nextTick(fn, this)
  };

  Vue.prototype._render = function () {
    var vm = this;
    var ref = vm.$options;
    var render = ref.render;
    var staticRenderFns = ref.staticRenderFns;
    var _parentVnode = ref._parentVnode;

    if (vm._isMounted) {
      // clone slot nodes on re-renders
      for (var key in vm.$slots) {
        vm.$slots[key] = cloneVNodes(vm.$slots[key]);
      }
    }

    vm.$scopedSlots = (_parentVnode && _parentVnode.data.scopedSlots) || emptyObject;

    if (staticRenderFns && !vm._staticTrees) {
      vm._staticTrees = [];
    }
    // set parent vnode. this allows render functions to have access
    // to the data on the placeholder node.
    vm.$vnode = _parentVnode;
    // render self
    var vnode;
    try {
      vnode = render.call(vm._renderProxy, vm.$createElement);
    } catch (e) {
      handleError(e, vm, "render function");
      // return error render result,
      // or previous vnode to prevent render error causing blank component
      /* istanbul ignore else */
      if (true) {
        vnode = vm.$options.renderError
          ? vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e)
          : vm._vnode;
      } else {
        vnode = vm._vnode;
      }
    }
    // return empty vnode in case the render function errored out
    if (!(vnode instanceof VNode)) {
      if ("development" !== 'production' && Array.isArray(vnode)) {
        warn(
          'Multiple root nodes returned from render function. Render function ' +
          'should return a single root node.',
          vm
        );
      }
      vnode = createEmptyVNode();
    }
    // set parent
    vnode.parent = _parentVnode;
    return vnode
  };

  // internal render helpers.
  // these are exposed on the instance prototype to reduce generated render
  // code size.
  Vue.prototype._o = markOnce;
  Vue.prototype._n = toNumber;
  Vue.prototype._s = toString;
  Vue.prototype._l = renderList;
  Vue.prototype._t = renderSlot;
  Vue.prototype._q = looseEqual;
  Vue.prototype._i = looseIndexOf;
  Vue.prototype._m = renderStatic;
  Vue.prototype._f = resolveFilter;
  Vue.prototype._k = checkKeyCodes;
  Vue.prototype._b = bindObjectProps;
  Vue.prototype._v = createTextVNode;
  Vue.prototype._e = createEmptyVNode;
  Vue.prototype._u = resolveScopedSlots;
}

/*  */

var uid$1 = 0;

function initMixin (Vue) {
  Vue.prototype._init = function (options) {
    var vm = this;
    // a uid
    vm._uid = uid$1++;

    var startTag, endTag;
    /* istanbul ignore if */
    if ("development" !== 'production' && config.performance && mark) {
      startTag = "vue-perf-init:" + (vm._uid);
      endTag = "vue-perf-end:" + (vm._uid);
      mark(startTag);
    }

    // a flag to avoid this being observed
    vm._isVue = true;
    // merge options
    if (options && options._isComponent) {
      // optimize internal component instantiation
      // since dynamic options merging is pretty slow, and none of the
      // internal component options needs special treatment.
      initInternalComponent(vm, options);
    } else {
      vm.$options = mergeOptions(
        resolveConstructorOptions(vm.constructor),
        options || {},
        vm
      );
    }
    /* istanbul ignore else */
    if (true) {
      initProxy(vm);
    } else {
      vm._renderProxy = vm;
    }
    // expose real self
    vm._self = vm;
    initLifecycle(vm);
    initEvents(vm);
    initRender(vm);
    callHook(vm, 'beforeCreate');
    initInjections(vm); // resolve injections before data/props
    initState(vm);
    initProvide(vm); // resolve provide after data/props
    callHook(vm, 'created');

    /* istanbul ignore if */
    if ("development" !== 'production' && config.performance && mark) {
      vm._name = formatComponentName(vm, false);
      mark(endTag);
      measure(((vm._name) + " init"), startTag, endTag);
    }

    if (vm.$options.el) {
      vm.$mount(vm.$options.el);
    }
  };
}

function initInternalComponent (vm, options) {
  var opts = vm.$options = Object.create(vm.constructor.options);
  // doing this because it's faster than dynamic enumeration.
  opts.parent = options.parent;
  opts.propsData = options.propsData;
  opts._parentVnode = options._parentVnode;
  opts._parentListeners = options._parentListeners;
  opts._renderChildren = options._renderChildren;
  opts._componentTag = options._componentTag;
  opts._parentElm = options._parentElm;
  opts._refElm = options._refElm;
  if (options.render) {
    opts.render = options.render;
    opts.staticRenderFns = options.staticRenderFns;
  }
}

function resolveConstructorOptions (Ctor) {
  var options = Ctor.options;
  if (Ctor.super) {
    var superOptions = resolveConstructorOptions(Ctor.super);
    var cachedSuperOptions = Ctor.superOptions;
    if (superOptions !== cachedSuperOptions) {
      // super option changed,
      // need to resolve new options.
      Ctor.superOptions = superOptions;
      // check if there are any late-modified/attached options (#4976)
      var modifiedOptions = resolveModifiedOptions(Ctor);
      // update base extend options
      if (modifiedOptions) {
        extend(Ctor.extendOptions, modifiedOptions);
      }
      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);
      if (options.name) {
        options.components[options.name] = Ctor;
      }
    }
  }
  return options
}

function resolveModifiedOptions (Ctor) {
  var modified;
  var latest = Ctor.options;
  var extended = Ctor.extendOptions;
  var sealed = Ctor.sealedOptions;
  for (var key in latest) {
    if (latest[key] !== sealed[key]) {
      if (!modified) { modified = {}; }
      modified[key] = dedupe(latest[key], extended[key], sealed[key]);
    }
  }
  return modified
}

function dedupe (latest, extended, sealed) {
  // compare latest and sealed to ensure lifecycle hooks won't be duplicated
  // between merges
  if (Array.isArray(latest)) {
    var res = [];
    sealed = Array.isArray(sealed) ? sealed : [sealed];
    extended = Array.isArray(extended) ? extended : [extended];
    for (var i = 0; i < latest.length; i++) {
      // push original options and not sealed options to exclude duplicated options
      if (extended.indexOf(latest[i]) >= 0 || sealed.indexOf(latest[i]) < 0) {
        res.push(latest[i]);
      }
    }
    return res
  } else {
    return latest
  }
}

function Vue$3 (options) {
  if ("development" !== 'production' &&
    !(this instanceof Vue$3)
  ) {
    warn('Vue is a constructor and should be called with the `new` keyword');
  }
  this._init(options);
}

initMixin(Vue$3);
stateMixin(Vue$3);
eventsMixin(Vue$3);
lifecycleMixin(Vue$3);
renderMixin(Vue$3);

/*  */

function initUse (Vue) {
  Vue.use = function (plugin) {
    /* istanbul ignore if */
    if (plugin.installed) {
      return this
    }
    // additional parameters
    var args = toArray(arguments, 1);
    args.unshift(this);
    if (typeof plugin.install === 'function') {
      plugin.install.apply(plugin, args);
    } else if (typeof plugin === 'function') {
      plugin.apply(null, args);
    }
    plugin.installed = true;
    return this
  };
}

/*  */

function initMixin$1 (Vue) {
  Vue.mixin = function (mixin) {
    this.options = mergeOptions(this.options, mixin);
    return this
  };
}

/*  */

function initExtend (Vue) {
  /**
   * Each instance constructor, including Vue, has a unique
   * cid. This enables us to create wrapped "child
   * constructors" for prototypal inheritance and cache them.
   */
  Vue.cid = 0;
  var cid = 1;

  /**
   * Class inheritance
   */
  Vue.extend = function (extendOptions) {
    extendOptions = extendOptions || {};
    var Super = this;
    var SuperId = Super.cid;
    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});
    if (cachedCtors[SuperId]) {
      return cachedCtors[SuperId]
    }

    var name = extendOptions.name || Super.options.name;
    if (true) {
      if (!/^[a-zA-Z][\w-]*$/.test(name)) {
        warn(
          'Invalid component name: "' + name + '". Component names ' +
          'can only contain alphanumeric characters and the hyphen, ' +
          'and must start with a letter.'
        );
      }
    }

    var Sub = function VueComponent (options) {
      this._init(options);
    };
    Sub.prototype = Object.create(Super.prototype);
    Sub.prototype.constructor = Sub;
    Sub.cid = cid++;
    Sub.options = mergeOptions(
      Super.options,
      extendOptions
    );
    Sub['super'] = Super;

    // For props and computed properties, we define the proxy getters on
    // the Vue instances at extension time, on the extended prototype. This
    // avoids Object.defineProperty calls for each instance created.
    if (Sub.options.props) {
      initProps$1(Sub);
    }
    if (Sub.options.computed) {
      initComputed$1(Sub);
    }

    // allow further extension/mixin/plugin usage
    Sub.extend = Super.extend;
    Sub.mixin = Super.mixin;
    Sub.use = Super.use;

    // create asset registers, so extended classes
    // can have their private assets too.
    ASSET_TYPES.forEach(function (type) {
      Sub[type] = Super[type];
    });
    // enable recursive self-lookup
    if (name) {
      Sub.options.components[name] = Sub;
    }

    // keep a reference to the super options at extension time.
    // later at instantiation we can check if Super's options have
    // been updated.
    Sub.superOptions = Super.options;
    Sub.extendOptions = extendOptions;
    Sub.sealedOptions = extend({}, Sub.options);

    // cache constructor
    cachedCtors[SuperId] = Sub;
    return Sub
  };
}

function initProps$1 (Comp) {
  var props = Comp.options.props;
  for (var key in props) {
    proxy(Comp.prototype, "_props", key);
  }
}

function initComputed$1 (Comp) {
  var computed = Comp.options.computed;
  for (var key in computed) {
    defineComputed(Comp.prototype, key, computed[key]);
  }
}

/*  */

function initAssetRegisters (Vue) {
  /**
   * Create asset registration methods.
   */
  ASSET_TYPES.forEach(function (type) {
    Vue[type] = function (
      id,
      definition
    ) {
      if (!definition) {
        return this.options[type + 's'][id]
      } else {
        /* istanbul ignore if */
        if (true) {
          if (type === 'component' && config.isReservedTag(id)) {
            warn(
              'Do not use built-in or reserved HTML elements as component ' +
              'id: ' + id
            );
          }
        }
        if (type === 'component' && isPlainObject(definition)) {
          definition.name = definition.name || id;
          definition = this.options._base.extend(definition);
        }
        if (type === 'directive' && typeof definition === 'function') {
          definition = { bind: definition, update: definition };
        }
        this.options[type + 's'][id] = definition;
        return definition
      }
    };
  });
}

/*  */

var patternTypes = [String, RegExp];

function getComponentName (opts) {
  return opts && (opts.Ctor.options.name || opts.tag)
}

function matches (pattern, name) {
  if (typeof pattern === 'string') {
    return pattern.split(',').indexOf(name) > -1
  } else if (isRegExp(pattern)) {
    return pattern.test(name)
  }
  /* istanbul ignore next */
  return false
}

function pruneCache (cache, current, filter) {
  for (var key in cache) {
    var cachedNode = cache[key];
    if (cachedNode) {
      var name = getComponentName(cachedNode.componentOptions);
      if (name && !filter(name)) {
        if (cachedNode !== current) {
          pruneCacheEntry(cachedNode);
        }
        cache[key] = null;
      }
    }
  }
}

function pruneCacheEntry (vnode) {
  if (vnode) {
    vnode.componentInstance.$destroy();
  }
}

var KeepAlive = {
  name: 'keep-alive',
  abstract: true,

  props: {
    include: patternTypes,
    exclude: patternTypes
  },

  created: function created () {
    this.cache = Object.create(null);
  },

  destroyed: function destroyed () {
    var this$1 = this;

    for (var key in this$1.cache) {
      pruneCacheEntry(this$1.cache[key]);
    }
  },

  watch: {
    include: function include (val) {
      pruneCache(this.cache, this._vnode, function (name) { return matches(val, name); });
    },
    exclude: function exclude (val) {
      pruneCache(this.cache, this._vnode, function (name) { return !matches(val, name); });
    }
  },

  render: function render () {
    var vnode = getFirstComponentChild(this.$slots.default);
    var componentOptions = vnode && vnode.componentOptions;
    if (componentOptions) {
      // check pattern
      var name = getComponentName(componentOptions);
      if (name && (
        (this.include && !matches(this.include, name)) ||
        (this.exclude && matches(this.exclude, name))
      )) {
        return vnode
      }
      var key = vnode.key == null
        // same constructor may get registered as different local components
        // so cid alone is not enough (#3269)
        ? componentOptions.Ctor.cid + (componentOptions.tag ? ("::" + (componentOptions.tag)) : '')
        : vnode.key;
      if (this.cache[key]) {
        vnode.componentInstance = this.cache[key].componentInstance;
      } else {
        this.cache[key] = vnode;
      }
      vnode.data.keepAlive = true;
    }
    return vnode
  }
};

var builtInComponents = {
  KeepAlive: KeepAlive
};

/*  */

function initGlobalAPI (Vue) {
  // config
  var configDef = {};
  configDef.get = function () { return config; };
  if (true) {
    configDef.set = function () {
      warn(
        'Do not replace the Vue.config object, set individual fields instead.'
      );
    };
  }
  Object.defineProperty(Vue, 'config', configDef);

  // exposed util methods.
  // NOTE: these are not considered part of the public API - avoid relying on
  // them unless you are aware of the risk.
  Vue.util = {
    warn: warn,
    extend: extend,
    mergeOptions: mergeOptions,
    defineReactive: defineReactive$$1
  };

  Vue.set = set;
  Vue.delete = del;
  Vue.nextTick = nextTick;

  Vue.options = Object.create(null);
  ASSET_TYPES.forEach(function (type) {
    Vue.options[type + 's'] = Object.create(null);
  });

  // this is used to identify the "base" constructor to extend all plain-object
  // components with in Weex's multi-instance scenarios.
  Vue.options._base = Vue;

  extend(Vue.options.components, builtInComponents);

  initUse(Vue);
  initMixin$1(Vue);
  initExtend(Vue);
  initAssetRegisters(Vue);
}

initGlobalAPI(Vue$3);

Object.defineProperty(Vue$3.prototype, '$isServer', {
  get: isServerRendering
});

Object.defineProperty(Vue$3.prototype, '$ssrContext', {
  get: function get () {
    /* istanbul ignore next */
    return this.$vnode.ssrContext
  }
});

Vue$3.version = '2.3.4';

/*  */

// these are reserved for web because they are directly compiled away
// during template compilation
var isReservedAttr = makeMap('style,class');

// attributes that should be using props for binding
var acceptValue = makeMap('input,textarea,option,select');
var mustUseProp = function (tag, type, attr) {
  return (
    (attr === 'value' && acceptValue(tag)) && type !== 'button' ||
    (attr === 'selected' && tag === 'option') ||
    (attr === 'checked' && tag === 'input') ||
    (attr === 'muted' && tag === 'video')
  )
};

var isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');

var isBooleanAttr = makeMap(
  'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +
  'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +
  'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +
  'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +
  'required,reversed,scoped,seamless,selected,sortable,translate,' +
  'truespeed,typemustmatch,visible'
);

var xlinkNS = 'http://www.w3.org/1999/xlink';

var isXlink = function (name) {
  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'
};

var getXlinkProp = function (name) {
  return isXlink(name) ? name.slice(6, name.length) : ''
};

var isFalsyAttrValue = function (val) {
  return val == null || val === false
};

/*  */

function genClassForVnode (vnode) {
  var data = vnode.data;
  var parentNode = vnode;
  var childNode = vnode;
  while (isDef(childNode.componentInstance)) {
    childNode = childNode.componentInstance._vnode;
    if (childNode.data) {
      data = mergeClassData(childNode.data, data);
    }
  }
  while (isDef(parentNode = parentNode.parent)) {
    if (parentNode.data) {
      data = mergeClassData(data, parentNode.data);
    }
  }
  return genClassFromData(data)
}

function mergeClassData (child, parent) {
  return {
    staticClass: concat(child.staticClass, parent.staticClass),
    class: isDef(child.class)
      ? [child.class, parent.class]
      : parent.class
  }
}

function genClassFromData (data) {
  var dynamicClass = data.class;
  var staticClass = data.staticClass;
  if (isDef(staticClass) || isDef(dynamicClass)) {
    return concat(staticClass, stringifyClass(dynamicClass))
  }
  /* istanbul ignore next */
  return ''
}

function concat (a, b) {
  return a ? b ? (a + ' ' + b) : a : (b || '')
}

function stringifyClass (value) {
  if (isUndef(value)) {
    return ''
  }
  if (typeof value === 'string') {
    return value
  }
  var res = '';
  if (Array.isArray(value)) {
    var stringified;
    for (var i = 0, l = value.length; i < l; i++) {
      if (isDef(value[i])) {
        if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {
          res += stringified + ' ';
        }
      }
    }
    return res.slice(0, -1)
  }
  if (isObject(value)) {
    for (var key in value) {
      if (value[key]) { res += key + ' '; }
    }
    return res.slice(0, -1)
  }
  /* istanbul ignore next */
  return res
}

/*  */

var namespaceMap = {
  svg: 'http://www.w3.org/2000/svg',
  math: 'http://www.w3.org/1998/Math/MathML'
};

var isHTMLTag = makeMap(
  'html,body,base,head,link,meta,style,title,' +
  'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +
  'div,dd,dl,dt,figcaption,figure,hr,img,li,main,ol,p,pre,ul,' +
  'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +
  's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +
  'embed,object,param,source,canvas,script,noscript,del,ins,' +
  'caption,col,colgroup,table,thead,tbody,td,th,tr,' +
  'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +
  'output,progress,select,textarea,' +
  'details,dialog,menu,menuitem,summary,' +
  'content,element,shadow,template'
);

// this map is intentionally selective, only covering SVG elements that may
// contain child elements.
var isSVG = makeMap(
  'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +
  'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +
  'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',
  true
);

var isPreTag = function (tag) { return tag === 'pre'; };

var isReservedTag = function (tag) {
  return isHTMLTag(tag) || isSVG(tag)
};

function getTagNamespace (tag) {
  if (isSVG(tag)) {
    return 'svg'
  }
  // basic support for MathML
  // note it doesn't support other MathML elements being component roots
  if (tag === 'math') {
    return 'math'
  }
}

var unknownElementCache = Object.create(null);
function isUnknownElement (tag) {
  /* istanbul ignore if */
  if (!inBrowser) {
    return true
  }
  if (isReservedTag(tag)) {
    return false
  }
  tag = tag.toLowerCase();
  /* istanbul ignore if */
  if (unknownElementCache[tag] != null) {
    return unknownElementCache[tag]
  }
  var el = document.createElement(tag);
  if (tag.indexOf('-') > -1) {
    // http://stackoverflow.com/a/28210364/1070244
    return (unknownElementCache[tag] = (
      el.constructor === window.HTMLUnknownElement ||
      el.constructor === window.HTMLElement
    ))
  } else {
    return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))
  }
}

/*  */

/**
 * Query an element selector if it's not an element already.
 */
function query (el) {
  if (typeof el === 'string') {
    var selected = document.querySelector(el);
    if (!selected) {
      "development" !== 'production' && warn(
        'Cannot find element: ' + el
      );
      return document.createElement('div')
    }
    return selected
  } else {
    return el
  }
}

/*  */

function createElement$1 (tagName, vnode) {
  var elm = document.createElement(tagName);
  if (tagName !== 'select') {
    return elm
  }
  // false or null will remove the attribute but undefined will not
  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {
    elm.setAttribute('multiple', 'multiple');
  }
  return elm
}

function createElementNS (namespace, tagName) {
  return document.createElementNS(namespaceMap[namespace], tagName)
}

function createTextNode (text) {
  return document.createTextNode(text)
}

function createComment (text) {
  return document.createComment(text)
}

function insertBefore (parentNode, newNode, referenceNode) {
  parentNode.insertBefore(newNode, referenceNode);
}

function removeChild (node, child) {
  node.removeChild(child);
}

function appendChild (node, child) {
  node.appendChild(child);
}

function parentNode (node) {
  return node.parentNode
}

function nextSibling (node) {
  return node.nextSibling
}

function tagName (node) {
  return node.tagName
}

function setTextContent (node, text) {
  node.textContent = text;
}

function setAttribute (node, key, val) {
  node.setAttribute(key, val);
}


var nodeOps = Object.freeze({
	createElement: createElement$1,
	createElementNS: createElementNS,
	createTextNode: createTextNode,
	createComment: createComment,
	insertBefore: insertBefore,
	removeChild: removeChild,
	appendChild: appendChild,
	parentNode: parentNode,
	nextSibling: nextSibling,
	tagName: tagName,
	setTextContent: setTextContent,
	setAttribute: setAttribute
});

/*  */

var ref = {
  create: function create (_, vnode) {
    registerRef(vnode);
  },
  update: function update (oldVnode, vnode) {
    if (oldVnode.data.ref !== vnode.data.ref) {
      registerRef(oldVnode, true);
      registerRef(vnode);
    }
  },
  destroy: function destroy (vnode) {
    registerRef(vnode, true);
  }
};

function registerRef (vnode, isRemoval) {
  var key = vnode.data.ref;
  if (!key) { return }

  var vm = vnode.context;
  var ref = vnode.componentInstance || vnode.elm;
  var refs = vm.$refs;
  if (isRemoval) {
    if (Array.isArray(refs[key])) {
      remove(refs[key], ref);
    } else if (refs[key] === ref) {
      refs[key] = undefined;
    }
  } else {
    if (vnode.data.refInFor) {
      if (Array.isArray(refs[key]) && refs[key].indexOf(ref) < 0) {
        refs[key].push(ref);
      } else {
        refs[key] = [ref];
      }
    } else {
      refs[key] = ref;
    }
  }
}

/**
 * Virtual DOM patching algorithm based on Snabbdom by
 * Simon Friis Vindum (@paldepind)
 * Licensed under the MIT License
 * https://github.com/paldepind/snabbdom/blob/master/LICENSE
 *
 * modified by Evan You (@yyx990803)
 *

/*
 * Not type-checking this because this file is perf-critical and the cost
 * of making flow understand it is not worth it.
 */

var emptyNode = new VNode('', {}, []);

var hooks = ['create', 'activate', 'update', 'remove', 'destroy'];

function sameVnode (a, b) {
  return (
    a.key === b.key &&
    a.tag === b.tag &&
    a.isComment === b.isComment &&
    isDef(a.data) === isDef(b.data) &&
    sameInputType(a, b)
  )
}

// Some browsers do not support dynamically changing type for <input>
// so they need to be treated as different nodes
function sameInputType (a, b) {
  if (a.tag !== 'input') { return true }
  var i;
  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;
  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;
  return typeA === typeB
}

function createKeyToOldIdx (children, beginIdx, endIdx) {
  var i, key;
  var map = {};
  for (i = beginIdx; i <= endIdx; ++i) {
    key = children[i].key;
    if (isDef(key)) { map[key] = i; }
  }
  return map
}

function createPatchFunction (backend) {
  var i, j;
  var cbs = {};

  var modules = backend.modules;
  var nodeOps = backend.nodeOps;

  for (i = 0; i < hooks.length; ++i) {
    cbs[hooks[i]] = [];
    for (j = 0; j < modules.length; ++j) {
      if (isDef(modules[j][hooks[i]])) {
        cbs[hooks[i]].push(modules[j][hooks[i]]);
      }
    }
  }

  function emptyNodeAt (elm) {
    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)
  }

  function createRmCb (childElm, listeners) {
    function remove$$1 () {
      if (--remove$$1.listeners === 0) {
        removeNode(childElm);
      }
    }
    remove$$1.listeners = listeners;
    return remove$$1
  }

  function removeNode (el) {
    var parent = nodeOps.parentNode(el);
    // element may have already been removed due to v-html / v-text
    if (isDef(parent)) {
      nodeOps.removeChild(parent, el);
    }
  }

  var inPre = 0;
  function createElm (vnode, insertedVnodeQueue, parentElm, refElm, nested) {
    vnode.isRootInsert = !nested; // for transition enter check
    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {
      return
    }

    var data = vnode.data;
    var children = vnode.children;
    var tag = vnode.tag;
    if (isDef(tag)) {
      if (true) {
        if (data && data.pre) {
          inPre++;
        }
        if (
          !inPre &&
          !vnode.ns &&
          !(config.ignoredElements.length && config.ignoredElements.indexOf(tag) > -1) &&
          config.isUnknownElement(tag)
        ) {
          warn(
            'Unknown custom element: <' + tag + '> - did you ' +
            'register the component correctly? For recursive components, ' +
            'make sure to provide the "name" option.',
            vnode.context
          );
        }
      }
      vnode.elm = vnode.ns
        ? nodeOps.createElementNS(vnode.ns, tag)
        : nodeOps.createElement(tag, vnode);
      setScope(vnode);

      /* istanbul ignore if */
      {
        createChildren(vnode, children, insertedVnodeQueue);
        if (isDef(data)) {
          invokeCreateHooks(vnode, insertedVnodeQueue);
        }
        insert(parentElm, vnode.elm, refElm);
      }

      if ("development" !== 'production' && data && data.pre) {
        inPre--;
      }
    } else if (isTrue(vnode.isComment)) {
      vnode.elm = nodeOps.createComment(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    } else {
      vnode.elm = nodeOps.createTextNode(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    }
  }

  function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {
    var i = vnode.data;
    if (isDef(i)) {
      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;
      if (isDef(i = i.hook) && isDef(i = i.init)) {
        i(vnode, false /* hydrating */, parentElm, refElm);
      }
      // after calling the init hook, if the vnode is a child component
      // it should've created a child instance and mounted it. the child
      // component also has set the placeholder vnode's elm.
      // in that case we can just return the element and be done.
      if (isDef(vnode.componentInstance)) {
        initComponent(vnode, insertedVnodeQueue);
        if (isTrue(isReactivated)) {
          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
        }
        return true
      }
    }
  }

  function initComponent (vnode, insertedVnodeQueue) {
    if (isDef(vnode.data.pendingInsert)) {
      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
      vnode.data.pendingInsert = null;
    }
    vnode.elm = vnode.componentInstance.$el;
    if (isPatchable(vnode)) {
      invokeCreateHooks(vnode, insertedVnodeQueue);
      setScope(vnode);
    } else {
      // empty component root.
      // skip all element-related modules except for ref (#3455)
      registerRef(vnode);
      // make sure to invoke the insert hook
      insertedVnodeQueue.push(vnode);
    }
  }

  function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {
    var i;
    // hack for #4339: a reactivated component with inner transition
    // does not trigger because the inner node's created hooks are not called
    // again. It's not ideal to involve module-specific logic in here but
    // there doesn't seem to be a better way to do it.
    var innerNode = vnode;
    while (innerNode.componentInstance) {
      innerNode = innerNode.componentInstance._vnode;
      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {
        for (i = 0; i < cbs.activate.length; ++i) {
          cbs.activate[i](emptyNode, innerNode);
        }
        insertedVnodeQueue.push(innerNode);
        break
      }
    }
    // unlike a newly created component,
    // a reactivated keep-alive component doesn't insert itself
    insert(parentElm, vnode.elm, refElm);
  }

  function insert (parent, elm, ref) {
    if (isDef(parent)) {
      if (isDef(ref)) {
        if (ref.parentNode === parent) {
          nodeOps.insertBefore(parent, elm, ref);
        }
      } else {
        nodeOps.appendChild(parent, elm);
      }
    }
  }

  function createChildren (vnode, children, insertedVnodeQueue) {
    if (Array.isArray(children)) {
      for (var i = 0; i < children.length; ++i) {
        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true);
      }
    } else if (isPrimitive(vnode.text)) {
      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(vnode.text));
    }
  }

  function isPatchable (vnode) {
    while (vnode.componentInstance) {
      vnode = vnode.componentInstance._vnode;
    }
    return isDef(vnode.tag)
  }

  function invokeCreateHooks (vnode, insertedVnodeQueue) {
    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
      cbs.create[i$1](emptyNode, vnode);
    }
    i = vnode.data.hook; // Reuse variable
    if (isDef(i)) {
      if (isDef(i.create)) { i.create(emptyNode, vnode); }
      if (isDef(i.insert)) { insertedVnodeQueue.push(vnode); }
    }
  }

  // set scope id attribute for scoped CSS.
  // this is implemented as a special case to avoid the overhead
  // of going through the normal attribute patching process.
  function setScope (vnode) {
    var i;
    var ancestor = vnode;
    while (ancestor) {
      if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {
        nodeOps.setAttribute(vnode.elm, i, '');
      }
      ancestor = ancestor.parent;
    }
    // for slot content they should also get the scopeId from the host instance.
    if (isDef(i = activeInstance) &&
      i !== vnode.context &&
      isDef(i = i.$options._scopeId)
    ) {
      nodeOps.setAttribute(vnode.elm, i, '');
    }
  }

  function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
    for (; startIdx <= endIdx; ++startIdx) {
      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm);
    }
  }

  function invokeDestroyHook (vnode) {
    var i, j;
    var data = vnode.data;
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }
      for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }
    }
    if (isDef(i = vnode.children)) {
      for (j = 0; j < vnode.children.length; ++j) {
        invokeDestroyHook(vnode.children[j]);
      }
    }
  }

  function removeVnodes (parentElm, vnodes, startIdx, endIdx) {
    for (; startIdx <= endIdx; ++startIdx) {
      var ch = vnodes[startIdx];
      if (isDef(ch)) {
        if (isDef(ch.tag)) {
          removeAndInvokeRemoveHook(ch);
          invokeDestroyHook(ch);
        } else { // Text node
          removeNode(ch.elm);
        }
      }
    }
  }

  function removeAndInvokeRemoveHook (vnode, rm) {
    if (isDef(rm) || isDef(vnode.data)) {
      var i;
      var listeners = cbs.remove.length + 1;
      if (isDef(rm)) {
        // we have a recursively passed down rm callback
        // increase the listeners count
        rm.listeners += listeners;
      } else {
        // directly removing
        rm = createRmCb(vnode.elm, listeners);
      }
      // recursively invoke hooks on child component root node
      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {
        removeAndInvokeRemoveHook(i, rm);
      }
      for (i = 0; i < cbs.remove.length; ++i) {
        cbs.remove[i](vnode, rm);
      }
      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {
        i(vnode, rm);
      } else {
        rm();
      }
    } else {
      removeNode(vnode.elm);
    }
  }

  function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
    var oldStartIdx = 0;
    var newStartIdx = 0;
    var oldEndIdx = oldCh.length - 1;
    var oldStartVnode = oldCh[0];
    var oldEndVnode = oldCh[oldEndIdx];
    var newEndIdx = newCh.length - 1;
    var newStartVnode = newCh[0];
    var newEndVnode = newCh[newEndIdx];
    var oldKeyToIdx, idxInOld, elmToMove, refElm;

    // removeOnly is a special flag used only by <transition-group>
    // to ensure removed elements stay in correct relative positions
    // during leaving transitions
    var canMove = !removeOnly;

    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
      if (isUndef(oldStartVnode)) {
        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left
      } else if (isUndef(oldEndVnode)) {
        oldEndVnode = oldCh[--oldEndIdx];
      } else if (sameVnode(oldStartVnode, newStartVnode)) {
        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);
        oldStartVnode = oldCh[++oldStartIdx];
        newStartVnode = newCh[++newStartIdx];
      } else if (sameVnode(oldEndVnode, newEndVnode)) {
        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);
        oldEndVnode = oldCh[--oldEndIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right
        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);
        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));
        oldStartVnode = oldCh[++oldStartIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left
        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);
        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
        oldEndVnode = oldCh[--oldEndIdx];
        newStartVnode = newCh[++newStartIdx];
      } else {
        if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }
        idxInOld = isDef(newStartVnode.key) ? oldKeyToIdx[newStartVnode.key] : null;
        if (isUndef(idxInOld)) { // New element
          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);
          newStartVnode = newCh[++newStartIdx];
        } else {
          elmToMove = oldCh[idxInOld];
          /* istanbul ignore if */
          if ("development" !== 'production' && !elmToMove) {
            warn(
              'It seems there are duplicate keys that is causing an update error. ' +
              'Make sure each v-for item has a unique key.'
            );
          }
          if (sameVnode(elmToMove, newStartVnode)) {
            patchVnode(elmToMove, newStartVnode, insertedVnodeQueue);
            oldCh[idxInOld] = undefined;
            canMove && nodeOps.insertBefore(parentElm, newStartVnode.elm, oldStartVnode.elm);
            newStartVnode = newCh[++newStartIdx];
          } else {
            // same key but different element. treat as new element
            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);
            newStartVnode = newCh[++newStartIdx];
          }
        }
      }
    }
    if (oldStartIdx > oldEndIdx) {
      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
    } else if (newStartIdx > newEndIdx) {
      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);
    }
  }

  function patchVnode (oldVnode, vnode, insertedVnodeQueue, removeOnly) {
    if (oldVnode === vnode) {
      return
    }
    // reuse element for static trees.
    // note we only do this if the vnode is cloned -
    // if the new node is not cloned it means the render functions have been
    // reset by the hot-reload-api and we need to do a proper re-render.
    if (isTrue(vnode.isStatic) &&
      isTrue(oldVnode.isStatic) &&
      vnode.key === oldVnode.key &&
      (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))
    ) {
      vnode.elm = oldVnode.elm;
      vnode.componentInstance = oldVnode.componentInstance;
      return
    }
    var i;
    var data = vnode.data;
    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {
      i(oldVnode, vnode);
    }
    var elm = vnode.elm = oldVnode.elm;
    var oldCh = oldVnode.children;
    var ch = vnode.children;
    if (isDef(data) && isPatchable(vnode)) {
      for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }
      if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }
    }
    if (isUndef(vnode.text)) {
      if (isDef(oldCh) && isDef(ch)) {
        if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }
      } else if (isDef(ch)) {
        if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }
        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
      } else if (isDef(oldCh)) {
        removeVnodes(elm, oldCh, 0, oldCh.length - 1);
      } else if (isDef(oldVnode.text)) {
        nodeOps.setTextContent(elm, '');
      }
    } else if (oldVnode.text !== vnode.text) {
      nodeOps.setTextContent(elm, vnode.text);
    }
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }
    }
  }

  function invokeInsertHook (vnode, queue, initial) {
    // delay insert hooks for component root nodes, invoke them after the
    // element is really inserted
    if (isTrue(initial) && isDef(vnode.parent)) {
      vnode.parent.data.pendingInsert = queue;
    } else {
      for (var i = 0; i < queue.length; ++i) {
        queue[i].data.hook.insert(queue[i]);
      }
    }
  }

  var bailed = false;
  // list of modules that can skip create hook during hydration because they
  // are already rendered on the client or has no need for initialization
  var isRenderedModule = makeMap('attrs,style,class,staticClass,staticStyle,key');

  // Note: this is a browser-only function so we can assume elms are DOM nodes.
  function hydrate (elm, vnode, insertedVnodeQueue) {
    if (true) {
      if (!assertNodeMatch(elm, vnode)) {
        return false
      }
    }
    vnode.elm = elm;
    var tag = vnode.tag;
    var data = vnode.data;
    var children = vnode.children;
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }
      if (isDef(i = vnode.componentInstance)) {
        // child component. it should have hydrated its own tree.
        initComponent(vnode, insertedVnodeQueue);
        return true
      }
    }
    if (isDef(tag)) {
      if (isDef(children)) {
        // empty element, allow client to pick up and populate children
        if (!elm.hasChildNodes()) {
          createChildren(vnode, children, insertedVnodeQueue);
        } else {
          var childrenMatch = true;
          var childNode = elm.firstChild;
          for (var i$1 = 0; i$1 < children.length; i$1++) {
            if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue)) {
              childrenMatch = false;
              break
            }
            childNode = childNode.nextSibling;
          }
          // if childNode is not null, it means the actual childNodes list is
          // longer than the virtual children list.
          if (!childrenMatch || childNode) {
            if ("development" !== 'production' &&
              typeof console !== 'undefined' &&
              !bailed
            ) {
              bailed = true;
              console.warn('Parent: ', elm);
              console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);
            }
            return false
          }
        }
      }
      if (isDef(data)) {
        for (var key in data) {
          if (!isRenderedModule(key)) {
            invokeCreateHooks(vnode, insertedVnodeQueue);
            break
          }
        }
      }
    } else if (elm.data !== vnode.text) {
      elm.data = vnode.text;
    }
    return true
  }

  function assertNodeMatch (node, vnode) {
    if (isDef(vnode.tag)) {
      return (
        vnode.tag.indexOf('vue-component') === 0 ||
        vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())
      )
    } else {
      return node.nodeType === (vnode.isComment ? 8 : 3)
    }
  }

  return function patch (oldVnode, vnode, hydrating, removeOnly, parentElm, refElm) {
    if (isUndef(vnode)) {
      if (isDef(oldVnode)) { invokeDestroyHook(oldVnode); }
      return
    }

    var isInitialPatch = false;
    var insertedVnodeQueue = [];

    if (isUndef(oldVnode)) {
      // empty mount (likely as component), create new root element
      isInitialPatch = true;
      createElm(vnode, insertedVnodeQueue, parentElm, refElm);
    } else {
      var isRealElement = isDef(oldVnode.nodeType);
      if (!isRealElement && sameVnode(oldVnode, vnode)) {
        // patch existing root node
        patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly);
      } else {
        if (isRealElement) {
          // mounting to a real element
          // check if this is server-rendered content and if we can perform
          // a successful hydration.
          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {
            oldVnode.removeAttribute(SSR_ATTR);
            hydrating = true;
          }
          if (isTrue(hydrating)) {
            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
              invokeInsertHook(vnode, insertedVnodeQueue, true);
              return oldVnode
            } else if (true) {
              warn(
                'The client-side rendered virtual DOM tree is not matching ' +
                'server-rendered content. This is likely caused by incorrect ' +
                'HTML markup, for example nesting block-level elements inside ' +
                '<p>, or missing <tbody>. Bailing hydration and performing ' +
                'full client-side render.'
              );
            }
          }
          // either not server-rendered, or hydration failed.
          // create an empty node and replace it
          oldVnode = emptyNodeAt(oldVnode);
        }
        // replacing existing element
        var oldElm = oldVnode.elm;
        var parentElm$1 = nodeOps.parentNode(oldElm);
        createElm(
          vnode,
          insertedVnodeQueue,
          // extremely rare edge case: do not insert if old element is in a
          // leaving transition. Only happens when combining transition +
          // keep-alive + HOCs. (#4590)
          oldElm._leaveCb ? null : parentElm$1,
          nodeOps.nextSibling(oldElm)
        );

        if (isDef(vnode.parent)) {
          // component root element replaced.
          // update parent placeholder node element, recursively
          var ancestor = vnode.parent;
          while (ancestor) {
            ancestor.elm = vnode.elm;
            ancestor = ancestor.parent;
          }
          if (isPatchable(vnode)) {
            for (var i = 0; i < cbs.create.length; ++i) {
              cbs.create[i](emptyNode, vnode.parent);
            }
          }
        }

        if (isDef(parentElm$1)) {
          removeVnodes(parentElm$1, [oldVnode], 0, 0);
        } else if (isDef(oldVnode.tag)) {
          invokeDestroyHook(oldVnode);
        }
      }
    }

    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
    return vnode.elm
  }
}

/*  */

var directives = {
  create: updateDirectives,
  update: updateDirectives,
  destroy: function unbindDirectives (vnode) {
    updateDirectives(vnode, emptyNode);
  }
};

function updateDirectives (oldVnode, vnode) {
  if (oldVnode.data.directives || vnode.data.directives) {
    _update(oldVnode, vnode);
  }
}

function _update (oldVnode, vnode) {
  var isCreate = oldVnode === emptyNode;
  var isDestroy = vnode === emptyNode;
  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);
  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);

  var dirsWithInsert = [];
  var dirsWithPostpatch = [];

  var key, oldDir, dir;
  for (key in newDirs) {
    oldDir = oldDirs[key];
    dir = newDirs[key];
    if (!oldDir) {
      // new directive, bind
      callHook$1(dir, 'bind', vnode, oldVnode);
      if (dir.def && dir.def.inserted) {
        dirsWithInsert.push(dir);
      }
    } else {
      // existing directive, update
      dir.oldValue = oldDir.value;
      callHook$1(dir, 'update', vnode, oldVnode);
      if (dir.def && dir.def.componentUpdated) {
        dirsWithPostpatch.push(dir);
      }
    }
  }

  if (dirsWithInsert.length) {
    var callInsert = function () {
      for (var i = 0; i < dirsWithInsert.length; i++) {
        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);
      }
    };
    if (isCreate) {
      mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'insert', callInsert);
    } else {
      callInsert();
    }
  }

  if (dirsWithPostpatch.length) {
    mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'postpatch', function () {
      for (var i = 0; i < dirsWithPostpatch.length; i++) {
        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);
      }
    });
  }

  if (!isCreate) {
    for (key in oldDirs) {
      if (!newDirs[key]) {
        // no longer present, unbind
        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);
      }
    }
  }
}

var emptyModifiers = Object.create(null);

function normalizeDirectives$1 (
  dirs,
  vm
) {
  var res = Object.create(null);
  if (!dirs) {
    return res
  }
  var i, dir;
  for (i = 0; i < dirs.length; i++) {
    dir = dirs[i];
    if (!dir.modifiers) {
      dir.modifiers = emptyModifiers;
    }
    res[getRawDirName(dir)] = dir;
    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);
  }
  return res
}

function getRawDirName (dir) {
  return dir.rawName || ((dir.name) + "." + (Object.keys(dir.modifiers || {}).join('.')))
}

function callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {
  var fn = dir.def && dir.def[hook];
  if (fn) {
    try {
      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
    } catch (e) {
      handleError(e, vnode.context, ("directive " + (dir.name) + " " + hook + " hook"));
    }
  }
}

var baseModules = [
  ref,
  directives
];

/*  */

function updateAttrs (oldVnode, vnode) {
  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {
    return
  }
  var key, cur, old;
  var elm = vnode.elm;
  var oldAttrs = oldVnode.data.attrs || {};
  var attrs = vnode.data.attrs || {};
  // clone observed objects, as the user probably wants to mutate it
  if (isDef(attrs.__ob__)) {
    attrs = vnode.data.attrs = extend({}, attrs);
  }

  for (key in attrs) {
    cur = attrs[key];
    old = oldAttrs[key];
    if (old !== cur) {
      setAttr(elm, key, cur);
    }
  }
  // #4391: in IE9, setting type can reset value for input[type=radio]
  /* istanbul ignore if */
  if (isIE9 && attrs.value !== oldAttrs.value) {
    setAttr(elm, 'value', attrs.value);
  }
  for (key in oldAttrs) {
    if (isUndef(attrs[key])) {
      if (isXlink(key)) {
        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));
      } else if (!isEnumeratedAttr(key)) {
        elm.removeAttribute(key);
      }
    }
  }
}

function setAttr (el, key, value) {
  if (isBooleanAttr(key)) {
    // set attribute for blank value
    // e.g. <option disabled>Select one</option>
    if (isFalsyAttrValue(value)) {
      el.removeAttribute(key);
    } else {
      el.setAttribute(key, key);
    }
  } else if (isEnumeratedAttr(key)) {
    el.setAttribute(key, isFalsyAttrValue(value) || value === 'false' ? 'false' : 'true');
  } else if (isXlink(key)) {
    if (isFalsyAttrValue(value)) {
      el.removeAttributeNS(xlinkNS, getXlinkProp(key));
    } else {
      el.setAttributeNS(xlinkNS, key, value);
    }
  } else {
    if (isFalsyAttrValue(value)) {
      el.removeAttribute(key);
    } else {
      el.setAttribute(key, value);
    }
  }
}

var attrs = {
  create: updateAttrs,
  update: updateAttrs
};

/*  */

function updateClass (oldVnode, vnode) {
  var el = vnode.elm;
  var data = vnode.data;
  var oldData = oldVnode.data;
  if (
    isUndef(data.staticClass) &&
    isUndef(data.class) && (
      isUndef(oldData) || (
        isUndef(oldData.staticClass) &&
        isUndef(oldData.class)
      )
    )
  ) {
    return
  }

  var cls = genClassForVnode(vnode);

  // handle transition classes
  var transitionClass = el._transitionClasses;
  if (isDef(transitionClass)) {
    cls = concat(cls, stringifyClass(transitionClass));
  }

  // set the class
  if (cls !== el._prevClass) {
    el.setAttribute('class', cls);
    el._prevClass = cls;
  }
}

var klass = {
  create: updateClass,
  update: updateClass
};

/*  */

var validDivisionCharRE = /[\w).+\-_$\]]/;

function parseFilters (exp) {
  var inSingle = false;
  var inDouble = false;
  var inTemplateString = false;
  var inRegex = false;
  var curly = 0;
  var square = 0;
  var paren = 0;
  var lastFilterIndex = 0;
  var c, prev, i, expression, filters;

  for (i = 0; i < exp.length; i++) {
    prev = c;
    c = exp.charCodeAt(i);
    if (inSingle) {
      if (c === 0x27 && prev !== 0x5C) { inSingle = false; }
    } else if (inDouble) {
      if (c === 0x22 && prev !== 0x5C) { inDouble = false; }
    } else if (inTemplateString) {
      if (c === 0x60 && prev !== 0x5C) { inTemplateString = false; }
    } else if (inRegex) {
      if (c === 0x2f && prev !== 0x5C) { inRegex = false; }
    } else if (
      c === 0x7C && // pipe
      exp.charCodeAt(i + 1) !== 0x7C &&
      exp.charCodeAt(i - 1) !== 0x7C &&
      !curly && !square && !paren
    ) {
      if (expression === undefined) {
        // first filter, end of expression
        lastFilterIndex = i + 1;
        expression = exp.slice(0, i).trim();
      } else {
        pushFilter();
      }
    } else {
      switch (c) {
        case 0x22: inDouble = true; break         // "
        case 0x27: inSingle = true; break         // '
        case 0x60: inTemplateString = true; break // `
        case 0x28: paren++; break                 // (
        case 0x29: paren--; break                 // )
        case 0x5B: square++; break                // [
        case 0x5D: square--; break                // ]
        case 0x7B: curly++; break                 // {
        case 0x7D: curly--; break                 // }
      }
      if (c === 0x2f) { // /
        var j = i - 1;
        var p = (void 0);
        // find first non-whitespace prev char
        for (; j >= 0; j--) {
          p = exp.charAt(j);
          if (p !== ' ') { break }
        }
        if (!p || !validDivisionCharRE.test(p)) {
          inRegex = true;
        }
      }
    }
  }

  if (expression === undefined) {
    expression = exp.slice(0, i).trim();
  } else if (lastFilterIndex !== 0) {
    pushFilter();
  }

  function pushFilter () {
    (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());
    lastFilterIndex = i + 1;
  }

  if (filters) {
    for (i = 0; i < filters.length; i++) {
      expression = wrapFilter(expression, filters[i]);
    }
  }

  return expression
}

function wrapFilter (exp, filter) {
  var i = filter.indexOf('(');
  if (i < 0) {
    // _f: resolveFilter
    return ("_f(\"" + filter + "\")(" + exp + ")")
  } else {
    var name = filter.slice(0, i);
    var args = filter.slice(i + 1);
    return ("_f(\"" + name + "\")(" + exp + "," + args)
  }
}

/*  */

function baseWarn (msg) {
  console.error(("[Vue compiler]: " + msg));
}

function pluckModuleFunction (
  modules,
  key
) {
  return modules
    ? modules.map(function (m) { return m[key]; }).filter(function (_) { return _; })
    : []
}

function addProp (el, name, value) {
  (el.props || (el.props = [])).push({ name: name, value: value });
}

function addAttr (el, name, value) {
  (el.attrs || (el.attrs = [])).push({ name: name, value: value });
}

function addDirective (
  el,
  name,
  rawName,
  value,
  arg,
  modifiers
) {
  (el.directives || (el.directives = [])).push({ name: name, rawName: rawName, value: value, arg: arg, modifiers: modifiers });
}

function addHandler (
  el,
  name,
  value,
  modifiers,
  important,
  warn
) {
  // warn prevent and passive modifier
  /* istanbul ignore if */
  if (
    "development" !== 'production' && warn &&
    modifiers && modifiers.prevent && modifiers.passive
  ) {
    warn(
      'passive and prevent can\'t be used together. ' +
      'Passive handler can\'t prevent default event.'
    );
  }
  // check capture modifier
  if (modifiers && modifiers.capture) {
    delete modifiers.capture;
    name = '!' + name; // mark the event as captured
  }
  if (modifiers && modifiers.once) {
    delete modifiers.once;
    name = '~' + name; // mark the event as once
  }
  /* istanbul ignore if */
  if (modifiers && modifiers.passive) {
    delete modifiers.passive;
    name = '&' + name; // mark the event as passive
  }
  var events;
  if (modifiers && modifiers.native) {
    delete modifiers.native;
    events = el.nativeEvents || (el.nativeEvents = {});
  } else {
    events = el.events || (el.events = {});
  }
  var newHandler = { value: value, modifiers: modifiers };
  var handlers = events[name];
  /* istanbul ignore if */
  if (Array.isArray(handlers)) {
    important ? handlers.unshift(newHandler) : handlers.push(newHandler);
  } else if (handlers) {
    events[name] = important ? [newHandler, handlers] : [handlers, newHandler];
  } else {
    events[name] = newHandler;
  }
}

function getBindingAttr (
  el,
  name,
  getStatic
) {
  var dynamicValue =
    getAndRemoveAttr(el, ':' + name) ||
    getAndRemoveAttr(el, 'v-bind:' + name);
  if (dynamicValue != null) {
    return parseFilters(dynamicValue)
  } else if (getStatic !== false) {
    var staticValue = getAndRemoveAttr(el, name);
    if (staticValue != null) {
      return JSON.stringify(staticValue)
    }
  }
}

function getAndRemoveAttr (el, name) {
  var val;
  if ((val = el.attrsMap[name]) != null) {
    var list = el.attrsList;
    for (var i = 0, l = list.length; i < l; i++) {
      if (list[i].name === name) {
        list.splice(i, 1);
        break
      }
    }
  }
  return val
}

/*  */

/**
 * Cross-platform code generation for component v-model
 */
function genComponentModel (
  el,
  value,
  modifiers
) {
  var ref = modifiers || {};
  var number = ref.number;
  var trim = ref.trim;

  var baseValueExpression = '$$v';
  var valueExpression = baseValueExpression;
  if (trim) {
    valueExpression =
      "(typeof " + baseValueExpression + " === 'string'" +
        "? " + baseValueExpression + ".trim()" +
        ": " + baseValueExpression + ")";
  }
  if (number) {
    valueExpression = "_n(" + valueExpression + ")";
  }
  var assignment = genAssignmentCode(value, valueExpression);

  el.model = {
    value: ("(" + value + ")"),
    expression: ("\"" + value + "\""),
    callback: ("function (" + baseValueExpression + ") {" + assignment + "}")
  };
}

/**
 * Cross-platform codegen helper for generating v-model value assignment code.
 */
function genAssignmentCode (
  value,
  assignment
) {
  var modelRs = parseModel(value);
  if (modelRs.idx === null) {
    return (value + "=" + assignment)
  } else {
    return "var $$exp = " + (modelRs.exp) + ", $$idx = " + (modelRs.idx) + ";" +
      "if (!Array.isArray($$exp)){" +
        value + "=" + assignment + "}" +
      "else{$$exp.splice($$idx, 1, " + assignment + ")}"
  }
}

/**
 * parse directive model to do the array update transform. a[idx] = val => $$a.splice($$idx, 1, val)
 *
 * for loop possible cases:
 *
 * - test
 * - test[idx]
 * - test[test1[idx]]
 * - test["a"][idx]
 * - xxx.test[a[a].test1[idx]]
 * - test.xxx.a["asa"][test1[idx]]
 *
 */

var len;
var str;
var chr;
var index$1;
var expressionPos;
var expressionEndPos;

function parseModel (val) {
  str = val;
  len = str.length;
  index$1 = expressionPos = expressionEndPos = 0;

  if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {
    return {
      exp: val,
      idx: null
    }
  }

  while (!eof()) {
    chr = next();
    /* istanbul ignore if */
    if (isStringStart(chr)) {
      parseString(chr);
    } else if (chr === 0x5B) {
      parseBracket(chr);
    }
  }

  return {
    exp: val.substring(0, expressionPos),
    idx: val.substring(expressionPos + 1, expressionEndPos)
  }
}

function next () {
  return str.charCodeAt(++index$1)
}

function eof () {
  return index$1 >= len
}

function isStringStart (chr) {
  return chr === 0x22 || chr === 0x27
}

function parseBracket (chr) {
  var inBracket = 1;
  expressionPos = index$1;
  while (!eof()) {
    chr = next();
    if (isStringStart(chr)) {
      parseString(chr);
      continue
    }
    if (chr === 0x5B) { inBracket++; }
    if (chr === 0x5D) { inBracket--; }
    if (inBracket === 0) {
      expressionEndPos = index$1;
      break
    }
  }
}

function parseString (chr) {
  var stringQuote = chr;
  while (!eof()) {
    chr = next();
    if (chr === stringQuote) {
      break
    }
  }
}

/*  */

var warn$1;

// in some cases, the event used has to be determined at runtime
// so we used some reserved tokens during compile.
var RANGE_TOKEN = '__r';
var CHECKBOX_RADIO_TOKEN = '__c';

function model (
  el,
  dir,
  _warn
) {
  warn$1 = _warn;
  var value = dir.value;
  var modifiers = dir.modifiers;
  var tag = el.tag;
  var type = el.attrsMap.type;

  if (true) {
    var dynamicType = el.attrsMap['v-bind:type'] || el.attrsMap[':type'];
    if (tag === 'input' && dynamicType) {
      warn$1(
        "<input :type=\"" + dynamicType + "\" v-model=\"" + value + "\">:\n" +
        "v-model does not support dynamic input types. Use v-if branches instead."
      );
    }
    // inputs with type="file" are read only and setting the input's
    // value will throw an error.
    if (tag === 'input' && type === 'file') {
      warn$1(
        "<" + (el.tag) + " v-model=\"" + value + "\" type=\"file\">:\n" +
        "File inputs are read only. Use a v-on:change listener instead."
      );
    }
  }

  if (tag === 'select') {
    genSelect(el, value, modifiers);
  } else if (tag === 'input' && type === 'checkbox') {
    genCheckboxModel(el, value, modifiers);
  } else if (tag === 'input' && type === 'radio') {
    genRadioModel(el, value, modifiers);
  } else if (tag === 'input' || tag === 'textarea') {
    genDefaultModel(el, value, modifiers);
  } else if (!config.isReservedTag(tag)) {
    genComponentModel(el, value, modifiers);
    // component v-model doesn't need extra runtime
    return false
  } else if (true) {
    warn$1(
      "<" + (el.tag) + " v-model=\"" + value + "\">: " +
      "v-model is not supported on this element type. " +
      'If you are working with contenteditable, it\'s recommended to ' +
      'wrap a library dedicated for that purpose inside a custom component.'
    );
  }

  // ensure runtime directive metadata
  return true
}

function genCheckboxModel (
  el,
  value,
  modifiers
) {
  var number = modifiers && modifiers.number;
  var valueBinding = getBindingAttr(el, 'value') || 'null';
  var trueValueBinding = getBindingAttr(el, 'true-value') || 'true';
  var falseValueBinding = getBindingAttr(el, 'false-value') || 'false';
  addProp(el, 'checked',
    "Array.isArray(" + value + ")" +
      "?_i(" + value + "," + valueBinding + ")>-1" + (
        trueValueBinding === 'true'
          ? (":(" + value + ")")
          : (":_q(" + value + "," + trueValueBinding + ")")
      )
  );
  addHandler(el, CHECKBOX_RADIO_TOKEN,
    "var $$a=" + value + "," +
        '$$el=$event.target,' +
        "$$c=$$el.checked?(" + trueValueBinding + "):(" + falseValueBinding + ");" +
    'if(Array.isArray($$a)){' +
      "var $$v=" + (number ? '_n(' + valueBinding + ')' : valueBinding) + "," +
          '$$i=_i($$a,$$v);' +
      "if($$c){$$i<0&&(" + value + "=$$a.concat($$v))}" +
      "else{$$i>-1&&(" + value + "=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}" +
    "}else{" + (genAssignmentCode(value, '$$c')) + "}",
    null, true
  );
}

function genRadioModel (
    el,
    value,
    modifiers
) {
  var number = modifiers && modifiers.number;
  var valueBinding = getBindingAttr(el, 'value') || 'null';
  valueBinding = number ? ("_n(" + valueBinding + ")") : valueBinding;
  addProp(el, 'checked', ("_q(" + value + "," + valueBinding + ")"));
  addHandler(el, CHECKBOX_RADIO_TOKEN, genAssignmentCode(value, valueBinding), null, true);
}

function genSelect (
    el,
    value,
    modifiers
) {
  var number = modifiers && modifiers.number;
  var selectedVal = "Array.prototype.filter" +
    ".call($event.target.options,function(o){return o.selected})" +
    ".map(function(o){var val = \"_value\" in o ? o._value : o.value;" +
    "return " + (number ? '_n(val)' : 'val') + "})";

  var assignment = '$event.target.multiple ? $$selectedVal : $$selectedVal[0]';
  var code = "var $$selectedVal = " + selectedVal + ";";
  code = code + " " + (genAssignmentCode(value, assignment));
  addHandler(el, 'change', code, null, true);
}

function genDefaultModel (
  el,
  value,
  modifiers
) {
  var type = el.attrsMap.type;
  var ref = modifiers || {};
  var lazy = ref.lazy;
  var number = ref.number;
  var trim = ref.trim;
  var needCompositionGuard = !lazy && type !== 'range';
  var event = lazy
    ? 'change'
    : type === 'range'
      ? RANGE_TOKEN
      : 'input';

  var valueExpression = '$event.target.value';
  if (trim) {
    valueExpression = "$event.target.value.trim()";
  }
  if (number) {
    valueExpression = "_n(" + valueExpression + ")";
  }

  var code = genAssignmentCode(value, valueExpression);
  if (needCompositionGuard) {
    code = "if($event.target.composing)return;" + code;
  }

  addProp(el, 'value', ("(" + value + ")"));
  addHandler(el, event, code, null, true);
  if (trim || number || type === 'number') {
    addHandler(el, 'blur', '$forceUpdate()');
  }
}

/*  */

// normalize v-model event tokens that can only be determined at runtime.
// it's important to place the event as the first in the array because
// the whole point is ensuring the v-model callback gets called before
// user-attached handlers.
function normalizeEvents (on) {
  var event;
  /* istanbul ignore if */
  if (isDef(on[RANGE_TOKEN])) {
    // IE input[type=range] only supports `change` event
    event = isIE ? 'change' : 'input';
    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);
    delete on[RANGE_TOKEN];
  }
  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {
    // Chrome fires microtasks in between click/change, leads to #4521
    event = isChrome ? 'click' : 'change';
    on[event] = [].concat(on[CHECKBOX_RADIO_TOKEN], on[event] || []);
    delete on[CHECKBOX_RADIO_TOKEN];
  }
}

var target$1;

function add$1 (
  event,
  handler,
  once$$1,
  capture,
  passive
) {
  if (once$$1) {
    var oldHandler = handler;
    var _target = target$1; // save current target element in closure
    handler = function (ev) {
      var res = arguments.length === 1
        ? oldHandler(ev)
        : oldHandler.apply(null, arguments);
      if (res !== null) {
        remove$2(event, handler, capture, _target);
      }
    };
  }
  target$1.addEventListener(
    event,
    handler,
    supportsPassive
      ? { capture: capture, passive: passive }
      : capture
  );
}

function remove$2 (
  event,
  handler,
  capture,
  _target
) {
  (_target || target$1).removeEventListener(event, handler, capture);
}

function updateDOMListeners (oldVnode, vnode) {
  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {
    return
  }
  var on = vnode.data.on || {};
  var oldOn = oldVnode.data.on || {};
  target$1 = vnode.elm;
  normalizeEvents(on);
  updateListeners(on, oldOn, add$1, remove$2, vnode.context);
}

var events = {
  create: updateDOMListeners,
  update: updateDOMListeners
};

/*  */

function updateDOMProps (oldVnode, vnode) {
  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {
    return
  }
  var key, cur;
  var elm = vnode.elm;
  var oldProps = oldVnode.data.domProps || {};
  var props = vnode.data.domProps || {};
  // clone observed objects, as the user probably wants to mutate it
  if (isDef(props.__ob__)) {
    props = vnode.data.domProps = extend({}, props);
  }

  for (key in oldProps) {
    if (isUndef(props[key])) {
      elm[key] = '';
    }
  }
  for (key in props) {
    cur = props[key];
    // ignore children if the node has textContent or innerHTML,
    // as these will throw away existing DOM nodes and cause removal errors
    // on subsequent patches (#3360)
    if (key === 'textContent' || key === 'innerHTML') {
      if (vnode.children) { vnode.children.length = 0; }
      if (cur === oldProps[key]) { continue }
    }

    if (key === 'value') {
      // store value as _value as well since
      // non-string values will be stringified
      elm._value = cur;
      // avoid resetting cursor position when value is the same
      var strCur = isUndef(cur) ? '' : String(cur);
      if (shouldUpdateValue(elm, vnode, strCur)) {
        elm.value = strCur;
      }
    } else {
      elm[key] = cur;
    }
  }
}

// check platforms/web/util/attrs.js acceptValue


function shouldUpdateValue (
  elm,
  vnode,
  checkVal
) {
  return (!elm.composing && (
    vnode.tag === 'option' ||
    isDirty(elm, checkVal) ||
    isInputChanged(elm, checkVal)
  ))
}

function isDirty (elm, checkVal) {
  // return true when textbox (.number and .trim) loses focus and its value is not equal to the updated value
  return document.activeElement !== elm && elm.value !== checkVal
}

function isInputChanged (elm, newVal) {
  var value = elm.value;
  var modifiers = elm._vModifiers; // injected by v-model runtime
  if ((isDef(modifiers) && modifiers.number) || elm.type === 'number') {
    return toNumber(value) !== toNumber(newVal)
  }
  if (isDef(modifiers) && modifiers.trim) {
    return value.trim() !== newVal.trim()
  }
  return value !== newVal
}

var domProps = {
  create: updateDOMProps,
  update: updateDOMProps
};

/*  */

var parseStyleText = cached(function (cssText) {
  var res = {};
  var listDelimiter = /;(?![^(]*\))/g;
  var propertyDelimiter = /:(.+)/;
  cssText.split(listDelimiter).forEach(function (item) {
    if (item) {
      var tmp = item.split(propertyDelimiter);
      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return res
});

// merge static and dynamic style data on the same vnode
function normalizeStyleData (data) {
  var style = normalizeStyleBinding(data.style);
  // static style is pre-processed into an object during compilation
  // and is always a fresh object, so it's safe to merge into it
  return data.staticStyle
    ? extend(data.staticStyle, style)
    : style
}

// normalize possible array / string values into Object
function normalizeStyleBinding (bindingStyle) {
  if (Array.isArray(bindingStyle)) {
    return toObject(bindingStyle)
  }
  if (typeof bindingStyle === 'string') {
    return parseStyleText(bindingStyle)
  }
  return bindingStyle
}

/**
 * parent component style should be after child's
 * so that parent component's style could override it
 */
function getStyle (vnode, checkChild) {
  var res = {};
  var styleData;

  if (checkChild) {
    var childNode = vnode;
    while (childNode.componentInstance) {
      childNode = childNode.componentInstance._vnode;
      if (childNode.data && (styleData = normalizeStyleData(childNode.data))) {
        extend(res, styleData);
      }
    }
  }

  if ((styleData = normalizeStyleData(vnode.data))) {
    extend(res, styleData);
  }

  var parentNode = vnode;
  while ((parentNode = parentNode.parent)) {
    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {
      extend(res, styleData);
    }
  }
  return res
}

/*  */

var cssVarRE = /^--/;
var importantRE = /\s*!important$/;
var setProp = function (el, name, val) {
  /* istanbul ignore if */
  if (cssVarRE.test(name)) {
    el.style.setProperty(name, val);
  } else if (importantRE.test(val)) {
    el.style.setProperty(name, val.replace(importantRE, ''), 'important');
  } else {
    var normalizedName = normalize(name);
    if (Array.isArray(val)) {
      // Support values array created by autoprefixer, e.g.
      // {display: ["-webkit-box", "-ms-flexbox", "flex"]}
      // Set them one by one, and the browser will only set those it can recognize
      for (var i = 0, len = val.length; i < len; i++) {
        el.style[normalizedName] = val[i];
      }
    } else {
      el.style[normalizedName] = val;
    }
  }
};

var prefixes = ['Webkit', 'Moz', 'ms'];

var testEl;
var normalize = cached(function (prop) {
  testEl = testEl || document.createElement('div');
  prop = camelize(prop);
  if (prop !== 'filter' && (prop in testEl.style)) {
    return prop
  }
  var upper = prop.charAt(0).toUpperCase() + prop.slice(1);
  for (var i = 0; i < prefixes.length; i++) {
    var prefixed = prefixes[i] + upper;
    if (prefixed in testEl.style) {
      return prefixed
    }
  }
});

function updateStyle (oldVnode, vnode) {
  var data = vnode.data;
  var oldData = oldVnode.data;

  if (isUndef(data.staticStyle) && isUndef(data.style) &&
    isUndef(oldData.staticStyle) && isUndef(oldData.style)
  ) {
    return
  }

  var cur, name;
  var el = vnode.elm;
  var oldStaticStyle = oldData.staticStyle;
  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};

  // if static style exists, stylebinding already merged into it when doing normalizeStyleData
  var oldStyle = oldStaticStyle || oldStyleBinding;

  var style = normalizeStyleBinding(vnode.data.style) || {};

  // store normalized style under a different key for next diff
  // make sure to clone it if it's reactive, since the user likley wants
  // to mutate it.
  vnode.data.normalizedStyle = isDef(style.__ob__)
    ? extend({}, style)
    : style;

  var newStyle = getStyle(vnode, true);

  for (name in oldStyle) {
    if (isUndef(newStyle[name])) {
      setProp(el, name, '');
    }
  }
  for (name in newStyle) {
    cur = newStyle[name];
    if (cur !== oldStyle[name]) {
      // ie9 setting to null has no effect, must use empty string
      setProp(el, name, cur == null ? '' : cur);
    }
  }
}

var style = {
  create: updateStyle,
  update: updateStyle
};

/*  */

/**
 * Add class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */
function addClass (el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return
  }

  /* istanbul ignore else */
  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(/\s+/).forEach(function (c) { return el.classList.add(c); });
    } else {
      el.classList.add(cls);
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    if (cur.indexOf(' ' + cls + ' ') < 0) {
      el.setAttribute('class', (cur + cls).trim());
    }
  }
}

/**
 * Remove class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */
function removeClass (el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return
  }

  /* istanbul ignore else */
  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(/\s+/).forEach(function (c) { return el.classList.remove(c); });
    } else {
      el.classList.remove(cls);
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    var tar = ' ' + cls + ' ';
    while (cur.indexOf(tar) >= 0) {
      cur = cur.replace(tar, ' ');
    }
    el.setAttribute('class', cur.trim());
  }
}

/*  */

function resolveTransition (def$$1) {
  if (!def$$1) {
    return
  }
  /* istanbul ignore else */
  if (typeof def$$1 === 'object') {
    var res = {};
    if (def$$1.css !== false) {
      extend(res, autoCssTransition(def$$1.name || 'v'));
    }
    extend(res, def$$1);
    return res
  } else if (typeof def$$1 === 'string') {
    return autoCssTransition(def$$1)
  }
}

var autoCssTransition = cached(function (name) {
  return {
    enterClass: (name + "-enter"),
    enterToClass: (name + "-enter-to"),
    enterActiveClass: (name + "-enter-active"),
    leaveClass: (name + "-leave"),
    leaveToClass: (name + "-leave-to"),
    leaveActiveClass: (name + "-leave-active")
  }
});

var hasTransition = inBrowser && !isIE9;
var TRANSITION = 'transition';
var ANIMATION = 'animation';

// Transition property/event sniffing
var transitionProp = 'transition';
var transitionEndEvent = 'transitionend';
var animationProp = 'animation';
var animationEndEvent = 'animationend';
if (hasTransition) {
  /* istanbul ignore if */
  if (window.ontransitionend === undefined &&
    window.onwebkittransitionend !== undefined
  ) {
    transitionProp = 'WebkitTransition';
    transitionEndEvent = 'webkitTransitionEnd';
  }
  if (window.onanimationend === undefined &&
    window.onwebkitanimationend !== undefined
  ) {
    animationProp = 'WebkitAnimation';
    animationEndEvent = 'webkitAnimationEnd';
  }
}

// binding to window is necessary to make hot reload work in IE in strict mode
var raf = inBrowser && window.requestAnimationFrame
  ? window.requestAnimationFrame.bind(window)
  : setTimeout;

function nextFrame (fn) {
  raf(function () {
    raf(fn);
  });
}

function addTransitionClass (el, cls) {
  (el._transitionClasses || (el._transitionClasses = [])).push(cls);
  addClass(el, cls);
}

function removeTransitionClass (el, cls) {
  if (el._transitionClasses) {
    remove(el._transitionClasses, cls);
  }
  removeClass(el, cls);
}

function whenTransitionEnds (
  el,
  expectedType,
  cb
) {
  var ref = getTransitionInfo(el, expectedType);
  var type = ref.type;
  var timeout = ref.timeout;
  var propCount = ref.propCount;
  if (!type) { return cb() }
  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;
  var ended = 0;
  var end = function () {
    el.removeEventListener(event, onEnd);
    cb();
  };
  var onEnd = function (e) {
    if (e.target === el) {
      if (++ended >= propCount) {
        end();
      }
    }
  };
  setTimeout(function () {
    if (ended < propCount) {
      end();
    }
  }, timeout + 1);
  el.addEventListener(event, onEnd);
}

var transformRE = /\b(transform|all)(,|$)/;

function getTransitionInfo (el, expectedType) {
  var styles = window.getComputedStyle(el);
  var transitionDelays = styles[transitionProp + 'Delay'].split(', ');
  var transitionDurations = styles[transitionProp + 'Duration'].split(', ');
  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);
  var animationDelays = styles[animationProp + 'Delay'].split(', ');
  var animationDurations = styles[animationProp + 'Duration'].split(', ');
  var animationTimeout = getTimeout(animationDelays, animationDurations);

  var type;
  var timeout = 0;
  var propCount = 0;
  /* istanbul ignore if */
  if (expectedType === TRANSITION) {
    if (transitionTimeout > 0) {
      type = TRANSITION;
      timeout = transitionTimeout;
      propCount = transitionDurations.length;
    }
  } else if (expectedType === ANIMATION) {
    if (animationTimeout > 0) {
      type = ANIMATION;
      timeout = animationTimeout;
      propCount = animationDurations.length;
    }
  } else {
    timeout = Math.max(transitionTimeout, animationTimeout);
    type = timeout > 0
      ? transitionTimeout > animationTimeout
        ? TRANSITION
        : ANIMATION
      : null;
    propCount = type
      ? type === TRANSITION
        ? transitionDurations.length
        : animationDurations.length
      : 0;
  }
  var hasTransform =
    type === TRANSITION &&
    transformRE.test(styles[transitionProp + 'Property']);
  return {
    type: type,
    timeout: timeout,
    propCount: propCount,
    hasTransform: hasTransform
  }
}

function getTimeout (delays, durations) {
  /* istanbul ignore next */
  while (delays.length < durations.length) {
    delays = delays.concat(delays);
  }

  return Math.max.apply(null, durations.map(function (d, i) {
    return toMs(d) + toMs(delays[i])
  }))
}

function toMs (s) {
  return Number(s.slice(0, -1)) * 1000
}

/*  */

function enter (vnode, toggleDisplay) {
  var el = vnode.elm;

  // call leave callback now
  if (isDef(el._leaveCb)) {
    el._leaveCb.cancelled = true;
    el._leaveCb();
  }

  var data = resolveTransition(vnode.data.transition);
  if (isUndef(data)) {
    return
  }

  /* istanbul ignore if */
  if (isDef(el._enterCb) || el.nodeType !== 1) {
    return
  }

  var css = data.css;
  var type = data.type;
  var enterClass = data.enterClass;
  var enterToClass = data.enterToClass;
  var enterActiveClass = data.enterActiveClass;
  var appearClass = data.appearClass;
  var appearToClass = data.appearToClass;
  var appearActiveClass = data.appearActiveClass;
  var beforeEnter = data.beforeEnter;
  var enter = data.enter;
  var afterEnter = data.afterEnter;
  var enterCancelled = data.enterCancelled;
  var beforeAppear = data.beforeAppear;
  var appear = data.appear;
  var afterAppear = data.afterAppear;
  var appearCancelled = data.appearCancelled;
  var duration = data.duration;

  // activeInstance will always be the <transition> component managing this
  // transition. One edge case to check is when the <transition> is placed
  // as the root node of a child component. In that case we need to check
  // <transition>'s parent for appear check.
  var context = activeInstance;
  var transitionNode = activeInstance.$vnode;
  while (transitionNode && transitionNode.parent) {
    transitionNode = transitionNode.parent;
    context = transitionNode.context;
  }

  var isAppear = !context._isMounted || !vnode.isRootInsert;

  if (isAppear && !appear && appear !== '') {
    return
  }

  var startClass = isAppear && appearClass
    ? appearClass
    : enterClass;
  var activeClass = isAppear && appearActiveClass
    ? appearActiveClass
    : enterActiveClass;
  var toClass = isAppear && appearToClass
    ? appearToClass
    : enterToClass;

  var beforeEnterHook = isAppear
    ? (beforeAppear || beforeEnter)
    : beforeEnter;
  var enterHook = isAppear
    ? (typeof appear === 'function' ? appear : enter)
    : enter;
  var afterEnterHook = isAppear
    ? (afterAppear || afterEnter)
    : afterEnter;
  var enterCancelledHook = isAppear
    ? (appearCancelled || enterCancelled)
    : enterCancelled;

  var explicitEnterDuration = toNumber(
    isObject(duration)
      ? duration.enter
      : duration
  );

  if ("development" !== 'production' && explicitEnterDuration != null) {
    checkDuration(explicitEnterDuration, 'enter', vnode);
  }

  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(enterHook);

  var cb = el._enterCb = once(function () {
    if (expectsCSS) {
      removeTransitionClass(el, toClass);
      removeTransitionClass(el, activeClass);
    }
    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, startClass);
      }
      enterCancelledHook && enterCancelledHook(el);
    } else {
      afterEnterHook && afterEnterHook(el);
    }
    el._enterCb = null;
  });

  if (!vnode.data.show) {
    // remove pending leave element on enter by injecting an insert hook
    mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'insert', function () {
      var parent = el.parentNode;
      var pendingNode = parent && parent._pending && parent._pending[vnode.key];
      if (pendingNode &&
        pendingNode.tag === vnode.tag &&
        pendingNode.elm._leaveCb
      ) {
        pendingNode.elm._leaveCb();
      }
      enterHook && enterHook(el, cb);
    });
  }

  // start enter transition
  beforeEnterHook && beforeEnterHook(el);
  if (expectsCSS) {
    addTransitionClass(el, startClass);
    addTransitionClass(el, activeClass);
    nextFrame(function () {
      addTransitionClass(el, toClass);
      removeTransitionClass(el, startClass);
      if (!cb.cancelled && !userWantsControl) {
        if (isValidDuration(explicitEnterDuration)) {
          setTimeout(cb, explicitEnterDuration);
        } else {
          whenTransitionEnds(el, type, cb);
        }
      }
    });
  }

  if (vnode.data.show) {
    toggleDisplay && toggleDisplay();
    enterHook && enterHook(el, cb);
  }

  if (!expectsCSS && !userWantsControl) {
    cb();
  }
}

function leave (vnode, rm) {
  var el = vnode.elm;

  // call enter callback now
  if (isDef(el._enterCb)) {
    el._enterCb.cancelled = true;
    el._enterCb();
  }

  var data = resolveTransition(vnode.data.transition);
  if (isUndef(data)) {
    return rm()
  }

  /* istanbul ignore if */
  if (isDef(el._leaveCb) || el.nodeType !== 1) {
    return
  }

  var css = data.css;
  var type = data.type;
  var leaveClass = data.leaveClass;
  var leaveToClass = data.leaveToClass;
  var leaveActiveClass = data.leaveActiveClass;
  var beforeLeave = data.beforeLeave;
  var leave = data.leave;
  var afterLeave = data.afterLeave;
  var leaveCancelled = data.leaveCancelled;
  var delayLeave = data.delayLeave;
  var duration = data.duration;

  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(leave);

  var explicitLeaveDuration = toNumber(
    isObject(duration)
      ? duration.leave
      : duration
  );

  if ("development" !== 'production' && isDef(explicitLeaveDuration)) {
    checkDuration(explicitLeaveDuration, 'leave', vnode);
  }

  var cb = el._leaveCb = once(function () {
    if (el.parentNode && el.parentNode._pending) {
      el.parentNode._pending[vnode.key] = null;
    }
    if (expectsCSS) {
      removeTransitionClass(el, leaveToClass);
      removeTransitionClass(el, leaveActiveClass);
    }
    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, leaveClass);
      }
      leaveCancelled && leaveCancelled(el);
    } else {
      rm();
      afterLeave && afterLeave(el);
    }
    el._leaveCb = null;
  });

  if (delayLeave) {
    delayLeave(performLeave);
  } else {
    performLeave();
  }

  function performLeave () {
    // the delayed leave may have already been cancelled
    if (cb.cancelled) {
      return
    }
    // record leaving element
    if (!vnode.data.show) {
      (el.parentNode._pending || (el.parentNode._pending = {}))[(vnode.key)] = vnode;
    }
    beforeLeave && beforeLeave(el);
    if (expectsCSS) {
      addTransitionClass(el, leaveClass);
      addTransitionClass(el, leaveActiveClass);
      nextFrame(function () {
        addTransitionClass(el, leaveToClass);
        removeTransitionClass(el, leaveClass);
        if (!cb.cancelled && !userWantsControl) {
          if (isValidDuration(explicitLeaveDuration)) {
            setTimeout(cb, explicitLeaveDuration);
          } else {
            whenTransitionEnds(el, type, cb);
          }
        }
      });
    }
    leave && leave(el, cb);
    if (!expectsCSS && !userWantsControl) {
      cb();
    }
  }
}

// only used in dev mode
function checkDuration (val, name, vnode) {
  if (typeof val !== 'number') {
    warn(
      "<transition> explicit " + name + " duration is not a valid number - " +
      "got " + (JSON.stringify(val)) + ".",
      vnode.context
    );
  } else if (isNaN(val)) {
    warn(
      "<transition> explicit " + name + " duration is NaN - " +
      'the duration expression might be incorrect.',
      vnode.context
    );
  }
}

function isValidDuration (val) {
  return typeof val === 'number' && !isNaN(val)
}

/**
 * Normalize a transition hook's argument length. The hook may be:
 * - a merged hook (invoker) with the original in .fns
 * - a wrapped component method (check ._length)
 * - a plain function (.length)
 */
function getHookArgumentsLength (fn) {
  if (isUndef(fn)) {
    return false
  }
  var invokerFns = fn.fns;
  if (isDef(invokerFns)) {
    // invoker
    return getHookArgumentsLength(
      Array.isArray(invokerFns)
        ? invokerFns[0]
        : invokerFns
    )
  } else {
    return (fn._length || fn.length) > 1
  }
}

function _enter (_, vnode) {
  if (vnode.data.show !== true) {
    enter(vnode);
  }
}

var transition = inBrowser ? {
  create: _enter,
  activate: _enter,
  remove: function remove$$1 (vnode, rm) {
    /* istanbul ignore else */
    if (vnode.data.show !== true) {
      leave(vnode, rm);
    } else {
      rm();
    }
  }
} : {};

var platformModules = [
  attrs,
  klass,
  events,
  domProps,
  style,
  transition
];

/*  */

// the directive module should be applied last, after all
// built-in modules have been applied.
var modules = platformModules.concat(baseModules);

var patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });

/**
 * Not type checking this file because flow doesn't like attaching
 * properties to Elements.
 */

/* istanbul ignore if */
if (isIE9) {
  // http://www.matts411.com/post/internet-explorer-9-oninput/
  document.addEventListener('selectionchange', function () {
    var el = document.activeElement;
    if (el && el.vmodel) {
      trigger(el, 'input');
    }
  });
}

var model$1 = {
  inserted: function inserted (el, binding, vnode) {
    if (vnode.tag === 'select') {
      var cb = function () {
        setSelected(el, binding, vnode.context);
      };
      cb();
      /* istanbul ignore if */
      if (isIE || isEdge) {
        setTimeout(cb, 0);
      }
    } else if (vnode.tag === 'textarea' || el.type === 'text' || el.type === 'password') {
      el._vModifiers = binding.modifiers;
      if (!binding.modifiers.lazy) {
        // Safari < 10.2 & UIWebView doesn't fire compositionend when
        // switching focus before confirming composition choice
        // this also fixes the issue where some browsers e.g. iOS Chrome
        // fires "change" instead of "input" on autocomplete.
        el.addEventListener('change', onCompositionEnd);
        if (!isAndroid) {
          el.addEventListener('compositionstart', onCompositionStart);
          el.addEventListener('compositionend', onCompositionEnd);
        }
        /* istanbul ignore if */
        if (isIE9) {
          el.vmodel = true;
        }
      }
    }
  },
  componentUpdated: function componentUpdated (el, binding, vnode) {
    if (vnode.tag === 'select') {
      setSelected(el, binding, vnode.context);
      // in case the options rendered by v-for have changed,
      // it's possible that the value is out-of-sync with the rendered options.
      // detect such cases and filter out values that no longer has a matching
      // option in the DOM.
      var needReset = el.multiple
        ? binding.value.some(function (v) { return hasNoMatchingOption(v, el.options); })
        : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, el.options);
      if (needReset) {
        trigger(el, 'change');
      }
    }
  }
};

function setSelected (el, binding, vm) {
  var value = binding.value;
  var isMultiple = el.multiple;
  if (isMultiple && !Array.isArray(value)) {
    "development" !== 'production' && warn(
      "<select multiple v-model=\"" + (binding.expression) + "\"> " +
      "expects an Array value for its binding, but got " + (Object.prototype.toString.call(value).slice(8, -1)),
      vm
    );
    return
  }
  var selected, option;
  for (var i = 0, l = el.options.length; i < l; i++) {
    option = el.options[i];
    if (isMultiple) {
      selected = looseIndexOf(value, getValue(option)) > -1;
      if (option.selected !== selected) {
        option.selected = selected;
      }
    } else {
      if (looseEqual(getValue(option), value)) {
        if (el.selectedIndex !== i) {
          el.selectedIndex = i;
        }
        return
      }
    }
  }
  if (!isMultiple) {
    el.selectedIndex = -1;
  }
}

function hasNoMatchingOption (value, options) {
  for (var i = 0, l = options.length; i < l; i++) {
    if (looseEqual(getValue(options[i]), value)) {
      return false
    }
  }
  return true
}

function getValue (option) {
  return '_value' in option
    ? option._value
    : option.value
}

function onCompositionStart (e) {
  e.target.composing = true;
}

function onCompositionEnd (e) {
  // prevent triggering an input event for no reason
  if (!e.target.composing) { return }
  e.target.composing = false;
  trigger(e.target, 'input');
}

function trigger (el, type) {
  var e = document.createEvent('HTMLEvents');
  e.initEvent(type, true, true);
  el.dispatchEvent(e);
}

/*  */

// recursively search for possible transition defined inside the component root
function locateNode (vnode) {
  return vnode.componentInstance && (!vnode.data || !vnode.data.transition)
    ? locateNode(vnode.componentInstance._vnode)
    : vnode
}

var show = {
  bind: function bind (el, ref, vnode) {
    var value = ref.value;

    vnode = locateNode(vnode);
    var transition = vnode.data && vnode.data.transition;
    var originalDisplay = el.__vOriginalDisplay =
      el.style.display === 'none' ? '' : el.style.display;
    if (value && transition && !isIE9) {
      vnode.data.show = true;
      enter(vnode, function () {
        el.style.display = originalDisplay;
      });
    } else {
      el.style.display = value ? originalDisplay : 'none';
    }
  },

  update: function update (el, ref, vnode) {
    var value = ref.value;
    var oldValue = ref.oldValue;

    /* istanbul ignore if */
    if (value === oldValue) { return }
    vnode = locateNode(vnode);
    var transition = vnode.data && vnode.data.transition;
    if (transition && !isIE9) {
      vnode.data.show = true;
      if (value) {
        enter(vnode, function () {
          el.style.display = el.__vOriginalDisplay;
        });
      } else {
        leave(vnode, function () {
          el.style.display = 'none';
        });
      }
    } else {
      el.style.display = value ? el.__vOriginalDisplay : 'none';
    }
  },

  unbind: function unbind (
    el,
    binding,
    vnode,
    oldVnode,
    isDestroy
  ) {
    if (!isDestroy) {
      el.style.display = el.__vOriginalDisplay;
    }
  }
};

var platformDirectives = {
  model: model$1,
  show: show
};

/*  */

// Provides transition support for a single element/component.
// supports transition mode (out-in / in-out)

var transitionProps = {
  name: String,
  appear: Boolean,
  css: Boolean,
  mode: String,
  type: String,
  enterClass: String,
  leaveClass: String,
  enterToClass: String,
  leaveToClass: String,
  enterActiveClass: String,
  leaveActiveClass: String,
  appearClass: String,
  appearActiveClass: String,
  appearToClass: String,
  duration: [Number, String, Object]
};

// in case the child is also an abstract component, e.g. <keep-alive>
// we want to recursively retrieve the real component to be rendered
function getRealChild (vnode) {
  var compOptions = vnode && vnode.componentOptions;
  if (compOptions && compOptions.Ctor.options.abstract) {
    return getRealChild(getFirstComponentChild(compOptions.children))
  } else {
    return vnode
  }
}

function extractTransitionData (comp) {
  var data = {};
  var options = comp.$options;
  // props
  for (var key in options.propsData) {
    data[key] = comp[key];
  }
  // events.
  // extract listeners and pass them directly to the transition methods
  var listeners = options._parentListeners;
  for (var key$1 in listeners) {
    data[camelize(key$1)] = listeners[key$1];
  }
  return data
}

function placeholder (h, rawChild) {
  if (/\d-keep-alive$/.test(rawChild.tag)) {
    return h('keep-alive', {
      props: rawChild.componentOptions.propsData
    })
  }
}

function hasParentTransition (vnode) {
  while ((vnode = vnode.parent)) {
    if (vnode.data.transition) {
      return true
    }
  }
}

function isSameChild (child, oldChild) {
  return oldChild.key === child.key && oldChild.tag === child.tag
}

var Transition = {
  name: 'transition',
  props: transitionProps,
  abstract: true,

  render: function render (h) {
    var this$1 = this;

    var children = this.$slots.default;
    if (!children) {
      return
    }

    // filter out text nodes (possible whitespaces)
    children = children.filter(function (c) { return c.tag; });
    /* istanbul ignore if */
    if (!children.length) {
      return
    }

    // warn multiple elements
    if ("development" !== 'production' && children.length > 1) {
      warn(
        '<transition> can only be used on a single element. Use ' +
        '<transition-group> for lists.',
        this.$parent
      );
    }

    var mode = this.mode;

    // warn invalid mode
    if ("development" !== 'production' &&
      mode && mode !== 'in-out' && mode !== 'out-in'
    ) {
      warn(
        'invalid <transition> mode: ' + mode,
        this.$parent
      );
    }

    var rawChild = children[0];

    // if this is a component root node and the component's
    // parent container node also has transition, skip.
    if (hasParentTransition(this.$vnode)) {
      return rawChild
    }

    // apply transition data to child
    // use getRealChild() to ignore abstract components e.g. keep-alive
    var child = getRealChild(rawChild);
    /* istanbul ignore if */
    if (!child) {
      return rawChild
    }

    if (this._leaving) {
      return placeholder(h, rawChild)
    }

    // ensure a key that is unique to the vnode type and to this transition
    // component instance. This key will be used to remove pending leaving nodes
    // during entering.
    var id = "__transition-" + (this._uid) + "-";
    child.key = child.key == null
      ? id + child.tag
      : isPrimitive(child.key)
        ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)
        : child.key;

    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);
    var oldRawChild = this._vnode;
    var oldChild = getRealChild(oldRawChild);

    // mark v-show
    // so that the transition module can hand over the control to the directive
    if (child.data.directives && child.data.directives.some(function (d) { return d.name === 'show'; })) {
      child.data.show = true;
    }

    if (oldChild && oldChild.data && !isSameChild(child, oldChild)) {
      // replace old child transition data with fresh one
      // important for dynamic transitions!
      var oldData = oldChild && (oldChild.data.transition = extend({}, data));
      // handle transition mode
      if (mode === 'out-in') {
        // return placeholder node and queue update when leave finishes
        this._leaving = true;
        mergeVNodeHook(oldData, 'afterLeave', function () {
          this$1._leaving = false;
          this$1.$forceUpdate();
        });
        return placeholder(h, rawChild)
      } else if (mode === 'in-out') {
        var delayedLeave;
        var performLeave = function () { delayedLeave(); };
        mergeVNodeHook(data, 'afterEnter', performLeave);
        mergeVNodeHook(data, 'enterCancelled', performLeave);
        mergeVNodeHook(oldData, 'delayLeave', function (leave) { delayedLeave = leave; });
      }
    }

    return rawChild
  }
};

/*  */

// Provides transition support for list items.
// supports move transitions using the FLIP technique.

// Because the vdom's children update algorithm is "unstable" - i.e.
// it doesn't guarantee the relative positioning of removed elements,
// we force transition-group to update its children into two passes:
// in the first pass, we remove all nodes that need to be removed,
// triggering their leaving transition; in the second pass, we insert/move
// into the final desired state. This way in the second pass removed
// nodes will remain where they should be.

var props = extend({
  tag: String,
  moveClass: String
}, transitionProps);

delete props.mode;

var TransitionGroup = {
  props: props,

  render: function render (h) {
    var tag = this.tag || this.$vnode.data.tag || 'span';
    var map = Object.create(null);
    var prevChildren = this.prevChildren = this.children;
    var rawChildren = this.$slots.default || [];
    var children = this.children = [];
    var transitionData = extractTransitionData(this);

    for (var i = 0; i < rawChildren.length; i++) {
      var c = rawChildren[i];
      if (c.tag) {
        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {
          children.push(c);
          map[c.key] = c
          ;(c.data || (c.data = {})).transition = transitionData;
        } else if (true) {
          var opts = c.componentOptions;
          var name = opts ? (opts.Ctor.options.name || opts.tag || '') : c.tag;
          warn(("<transition-group> children must be keyed: <" + name + ">"));
        }
      }
    }

    if (prevChildren) {
      var kept = [];
      var removed = [];
      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {
        var c$1 = prevChildren[i$1];
        c$1.data.transition = transitionData;
        c$1.data.pos = c$1.elm.getBoundingClientRect();
        if (map[c$1.key]) {
          kept.push(c$1);
        } else {
          removed.push(c$1);
        }
      }
      this.kept = h(tag, null, kept);
      this.removed = removed;
    }

    return h(tag, null, children)
  },

  beforeUpdate: function beforeUpdate () {
    // force removing pass
    this.__patch__(
      this._vnode,
      this.kept,
      false, // hydrating
      true // removeOnly (!important, avoids unnecessary moves)
    );
    this._vnode = this.kept;
  },

  updated: function updated () {
    var children = this.prevChildren;
    var moveClass = this.moveClass || ((this.name || 'v') + '-move');
    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {
      return
    }

    // we divide the work into three loops to avoid mixing DOM reads and writes
    // in each iteration - which helps prevent layout thrashing.
    children.forEach(callPendingCbs);
    children.forEach(recordPosition);
    children.forEach(applyTranslation);

    // force reflow to put everything in position
    var body = document.body;
    var f = body.offsetHeight; // eslint-disable-line

    children.forEach(function (c) {
      if (c.data.moved) {
        var el = c.elm;
        var s = el.style;
        addTransitionClass(el, moveClass);
        s.transform = s.WebkitTransform = s.transitionDuration = '';
        el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {
          if (!e || /transform$/.test(e.propertyName)) {
            el.removeEventListener(transitionEndEvent, cb);
            el._moveCb = null;
            removeTransitionClass(el, moveClass);
          }
        });
      }
    });
  },

  methods: {
    hasMove: function hasMove (el, moveClass) {
      /* istanbul ignore if */
      if (!hasTransition) {
        return false
      }
      if (this._hasMove != null) {
        return this._hasMove
      }
      // Detect whether an element with the move class applied has
      // CSS transitions. Since the element may be inside an entering
      // transition at this very moment, we make a clone of it and remove
      // all other transition classes applied to ensure only the move class
      // is applied.
      var clone = el.cloneNode();
      if (el._transitionClasses) {
        el._transitionClasses.forEach(function (cls) { removeClass(clone, cls); });
      }
      addClass(clone, moveClass);
      clone.style.display = 'none';
      this.$el.appendChild(clone);
      var info = getTransitionInfo(clone);
      this.$el.removeChild(clone);
      return (this._hasMove = info.hasTransform)
    }
  }
};

function callPendingCbs (c) {
  /* istanbul ignore if */
  if (c.elm._moveCb) {
    c.elm._moveCb();
  }
  /* istanbul ignore if */
  if (c.elm._enterCb) {
    c.elm._enterCb();
  }
}

function recordPosition (c) {
  c.data.newPos = c.elm.getBoundingClientRect();
}

function applyTranslation (c) {
  var oldPos = c.data.pos;
  var newPos = c.data.newPos;
  var dx = oldPos.left - newPos.left;
  var dy = oldPos.top - newPos.top;
  if (dx || dy) {
    c.data.moved = true;
    var s = c.elm.style;
    s.transform = s.WebkitTransform = "translate(" + dx + "px," + dy + "px)";
    s.transitionDuration = '0s';
  }
}

var platformComponents = {
  Transition: Transition,
  TransitionGroup: TransitionGroup
};

/*  */

// install platform specific utils
Vue$3.config.mustUseProp = mustUseProp;
Vue$3.config.isReservedTag = isReservedTag;
Vue$3.config.isReservedAttr = isReservedAttr;
Vue$3.config.getTagNamespace = getTagNamespace;
Vue$3.config.isUnknownElement = isUnknownElement;

// install platform runtime directives & components
extend(Vue$3.options.directives, platformDirectives);
extend(Vue$3.options.components, platformComponents);

// install platform patch function
Vue$3.prototype.__patch__ = inBrowser ? patch : noop;

// public mount method
Vue$3.prototype.$mount = function (
  el,
  hydrating
) {
  el = el && inBrowser ? query(el) : undefined;
  return mountComponent(this, el, hydrating)
};

// devtools global hook
/* istanbul ignore next */
setTimeout(function () {
  if (config.devtools) {
    if (devtools) {
      devtools.emit('init', Vue$3);
    } else if ("development" !== 'production' && isChrome) {
      console[console.info ? 'info' : 'log'](
        'Download the Vue Devtools extension for a better development experience:\n' +
        'https://github.com/vuejs/vue-devtools'
      );
    }
  }
  if ("development" !== 'production' &&
    config.productionTip !== false &&
    inBrowser && typeof console !== 'undefined'
  ) {
    console[console.info ? 'info' : 'log'](
      "You are running Vue in development mode.\n" +
      "Make sure to turn on production mode when deploying for production.\n" +
      "See more tips at https://vuejs.org/guide/deployment.html"
    );
  }
}, 0);

/*  */

// check whether current browser encodes a char inside attribute values
function shouldDecode (content, encoded) {
  var div = document.createElement('div');
  div.innerHTML = "<div a=\"" + content + "\">";
  return div.innerHTML.indexOf(encoded) > 0
}

// #3663
// IE encodes newlines inside attribute values while other browsers don't
var shouldDecodeNewlines = inBrowser ? shouldDecode('\n', '&#10;') : false;

/*  */

var isUnaryTag = makeMap(
  'area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' +
  'link,meta,param,source,track,wbr'
);

// Elements that you can, intentionally, leave open
// (and which close themselves)
var canBeLeftOpenTag = makeMap(
  'colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source'
);

// HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3
// Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content
var isNonPhrasingTag = makeMap(
  'address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' +
  'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' +
  'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' +
  'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' +
  'title,tr,track'
);

/*  */

var decoder;

function decode (html) {
  decoder = decoder || document.createElement('div');
  decoder.innerHTML = html;
  return decoder.textContent
}

/**
 * Not type-checking this file because it's mostly vendor code.
 */

/*!
 * HTML Parser By John Resig (ejohn.org)
 * Modified by Juriy "kangax" Zaytsev
 * Original code by Erik Arvidsson, Mozilla Public License
 * http://erik.eae.net/simplehtmlparser/simplehtmlparser.js
 */

// Regular Expressions for parsing tags and attributes
var singleAttrIdentifier = /([^\s"'<>/=]+)/;
var singleAttrAssign = /(?:=)/;
var singleAttrValues = [
  // attr value double quotes
  /"([^"]*)"+/.source,
  // attr value, single quotes
  /'([^']*)'+/.source,
  // attr value, no quotes
  /([^\s"'=<>`]+)/.source
];
var attribute = new RegExp(
  '^\\s*' + singleAttrIdentifier.source +
  '(?:\\s*(' + singleAttrAssign.source + ')' +
  '\\s*(?:' + singleAttrValues.join('|') + '))?'
);

// could use https://www.w3.org/TR/1999/REC-xml-names-19990114/#NT-QName
// but for Vue templates we can enforce a simple charset
var ncname = '[a-zA-Z_][\\w\\-\\.]*';
var qnameCapture = '((?:' + ncname + '\\:)?' + ncname + ')';
var startTagOpen = new RegExp('^<' + qnameCapture);
var startTagClose = /^\s*(\/?)>/;
var endTag = new RegExp('^<\\/' + qnameCapture + '[^>]*>');
var doctype = /^<!DOCTYPE [^>]+>/i;
var comment = /^<!--/;
var conditionalComment = /^<!\[/;

var IS_REGEX_CAPTURING_BROKEN = false;
'x'.replace(/x(.)?/g, function (m, g) {
  IS_REGEX_CAPTURING_BROKEN = g === '';
});

// Special Elements (can contain anything)
var isPlainTextElement = makeMap('script,style,textarea', true);
var reCache = {};

var decodingMap = {
  '&lt;': '<',
  '&gt;': '>',
  '&quot;': '"',
  '&amp;': '&',
  '&#10;': '\n'
};
var encodedAttr = /&(?:lt|gt|quot|amp);/g;
var encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#10);/g;

function decodeAttr (value, shouldDecodeNewlines) {
  var re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr;
  return value.replace(re, function (match) { return decodingMap[match]; })
}

function parseHTML (html, options) {
  var stack = [];
  var expectHTML = options.expectHTML;
  var isUnaryTag$$1 = options.isUnaryTag || no;
  var canBeLeftOpenTag$$1 = options.canBeLeftOpenTag || no;
  var index = 0;
  var last, lastTag;
  while (html) {
    last = html;
    // Make sure we're not in a plaintext content element like script/style
    if (!lastTag || !isPlainTextElement(lastTag)) {
      var textEnd = html.indexOf('<');
      if (textEnd === 0) {
        // Comment:
        if (comment.test(html)) {
          var commentEnd = html.indexOf('-->');

          if (commentEnd >= 0) {
            advance(commentEnd + 3);
            continue
          }
        }

        // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment
        if (conditionalComment.test(html)) {
          var conditionalEnd = html.indexOf(']>');

          if (conditionalEnd >= 0) {
            advance(conditionalEnd + 2);
            continue
          }
        }

        // Doctype:
        var doctypeMatch = html.match(doctype);
        if (doctypeMatch) {
          advance(doctypeMatch[0].length);
          continue
        }

        // End tag:
        var endTagMatch = html.match(endTag);
        if (endTagMatch) {
          var curIndex = index;
          advance(endTagMatch[0].length);
          parseEndTag(endTagMatch[1], curIndex, index);
          continue
        }

        // Start tag:
        var startTagMatch = parseStartTag();
        if (startTagMatch) {
          handleStartTag(startTagMatch);
          continue
        }
      }

      var text = (void 0), rest$1 = (void 0), next = (void 0);
      if (textEnd >= 0) {
        rest$1 = html.slice(textEnd);
        while (
          !endTag.test(rest$1) &&
          !startTagOpen.test(rest$1) &&
          !comment.test(rest$1) &&
          !conditionalComment.test(rest$1)
        ) {
          // < in plain text, be forgiving and treat it as text
          next = rest$1.indexOf('<', 1);
          if (next < 0) { break }
          textEnd += next;
          rest$1 = html.slice(textEnd);
        }
        text = html.substring(0, textEnd);
        advance(textEnd);
      }

      if (textEnd < 0) {
        text = html;
        html = '';
      }

      if (options.chars && text) {
        options.chars(text);
      }
    } else {
      var stackedTag = lastTag.toLowerCase();
      var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\s\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));
      var endTagLength = 0;
      var rest = html.replace(reStackedTag, function (all, text, endTag) {
        endTagLength = endTag.length;
        if (!isPlainTextElement(stackedTag) && stackedTag !== 'noscript') {
          text = text
            .replace(/<!--([\s\S]*?)-->/g, '$1')
            .replace(/<!\[CDATA\[([\s\S]*?)]]>/g, '$1');
        }
        if (options.chars) {
          options.chars(text);
        }
        return ''
      });
      index += html.length - rest.length;
      html = rest;
      parseEndTag(stackedTag, index - endTagLength, index);
    }

    if (html === last) {
      options.chars && options.chars(html);
      if ("development" !== 'production' && !stack.length && options.warn) {
        options.warn(("Mal-formatted tag at end of template: \"" + html + "\""));
      }
      break
    }
  }

  // Clean up any remaining tags
  parseEndTag();

  function advance (n) {
    index += n;
    html = html.substring(n);
  }

  function parseStartTag () {
    var start = html.match(startTagOpen);
    if (start) {
      var match = {
        tagName: start[1],
        attrs: [],
        start: index
      };
      advance(start[0].length);
      var end, attr;
      while (!(end = html.match(startTagClose)) && (attr = html.match(attribute))) {
        advance(attr[0].length);
        match.attrs.push(attr);
      }
      if (end) {
        match.unarySlash = end[1];
        advance(end[0].length);
        match.end = index;
        return match
      }
    }
  }

  function handleStartTag (match) {
    var tagName = match.tagName;
    var unarySlash = match.unarySlash;

    if (expectHTML) {
      if (lastTag === 'p' && isNonPhrasingTag(tagName)) {
        parseEndTag(lastTag);
      }
      if (canBeLeftOpenTag$$1(tagName) && lastTag === tagName) {
        parseEndTag(tagName);
      }
    }

    var unary = isUnaryTag$$1(tagName) || tagName === 'html' && lastTag === 'head' || !!unarySlash;

    var l = match.attrs.length;
    var attrs = new Array(l);
    for (var i = 0; i < l; i++) {
      var args = match.attrs[i];
      // hackish work around FF bug https://bugzilla.mozilla.org/show_bug.cgi?id=369778
      if (IS_REGEX_CAPTURING_BROKEN && args[0].indexOf('""') === -1) {
        if (args[3] === '') { delete args[3]; }
        if (args[4] === '') { delete args[4]; }
        if (args[5] === '') { delete args[5]; }
      }
      var value = args[3] || args[4] || args[5] || '';
      attrs[i] = {
        name: args[1],
        value: decodeAttr(
          value,
          options.shouldDecodeNewlines
        )
      };
    }

    if (!unary) {
      stack.push({ tag: tagName, lowerCasedTag: tagName.toLowerCase(), attrs: attrs });
      lastTag = tagName;
    }

    if (options.start) {
      options.start(tagName, attrs, unary, match.start, match.end);
    }
  }

  function parseEndTag (tagName, start, end) {
    var pos, lowerCasedTagName;
    if (start == null) { start = index; }
    if (end == null) { end = index; }

    if (tagName) {
      lowerCasedTagName = tagName.toLowerCase();
    }

    // Find the closest opened tag of the same type
    if (tagName) {
      for (pos = stack.length - 1; pos >= 0; pos--) {
        if (stack[pos].lowerCasedTag === lowerCasedTagName) {
          break
        }
      }
    } else {
      // If no tag name is provided, clean shop
      pos = 0;
    }

    if (pos >= 0) {
      // Close all the open elements, up the stack
      for (var i = stack.length - 1; i >= pos; i--) {
        if ("development" !== 'production' &&
          (i > pos || !tagName) &&
          options.warn
        ) {
          options.warn(
            ("tag <" + (stack[i].tag) + "> has no matching end tag.")
          );
        }
        if (options.end) {
          options.end(stack[i].tag, start, end);
        }
      }

      // Remove the open elements from the stack
      stack.length = pos;
      lastTag = pos && stack[pos - 1].tag;
    } else if (lowerCasedTagName === 'br') {
      if (options.start) {
        options.start(tagName, [], true, start, end);
      }
    } else if (lowerCasedTagName === 'p') {
      if (options.start) {
        options.start(tagName, [], false, start, end);
      }
      if (options.end) {
        options.end(tagName, start, end);
      }
    }
  }
}

/*  */

var defaultTagRE = /\{\{((?:.|\n)+?)\}\}/g;
var regexEscapeRE = /[-.*+?^${}()|[\]\/\\]/g;

var buildRegex = cached(function (delimiters) {
  var open = delimiters[0].replace(regexEscapeRE, '\\$&');
  var close = delimiters[1].replace(regexEscapeRE, '\\$&');
  return new RegExp(open + '((?:.|\\n)+?)' + close, 'g')
});

function parseText (
  text,
  delimiters
) {
  var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;
  if (!tagRE.test(text)) {
    return
  }
  var tokens = [];
  var lastIndex = tagRE.lastIndex = 0;
  var match, index;
  while ((match = tagRE.exec(text))) {
    index = match.index;
    // push text token
    if (index > lastIndex) {
      tokens.push(JSON.stringify(text.slice(lastIndex, index)));
    }
    // tag token
    var exp = parseFilters(match[1].trim());
    tokens.push(("_s(" + exp + ")"));
    lastIndex = index + match[0].length;
  }
  if (lastIndex < text.length) {
    tokens.push(JSON.stringify(text.slice(lastIndex)));
  }
  return tokens.join('+')
}

/*  */

var onRE = /^@|^v-on:/;
var dirRE = /^v-|^@|^:/;
var forAliasRE = /(.*?)\s+(?:in|of)\s+(.*)/;
var forIteratorRE = /\((\{[^}]*\}|[^,]*),([^,]*)(?:,([^,]*))?\)/;

var argRE = /:(.*)$/;
var bindRE = /^:|^v-bind:/;
var modifierRE = /\.[^.]+/g;

var decodeHTMLCached = cached(decode);

// configurable state
var warn$2;
var delimiters;
var transforms;
var preTransforms;
var postTransforms;
var platformIsPreTag;
var platformMustUseProp;
var platformGetTagNamespace;

/**
 * Convert HTML string to AST.
 */
function parse (
  template,
  options
) {
  warn$2 = options.warn || baseWarn;
  platformGetTagNamespace = options.getTagNamespace || no;
  platformMustUseProp = options.mustUseProp || no;
  platformIsPreTag = options.isPreTag || no;
  preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');
  transforms = pluckModuleFunction(options.modules, 'transformNode');
  postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');
  delimiters = options.delimiters;

  var stack = [];
  var preserveWhitespace = options.preserveWhitespace !== false;
  var root;
  var currentParent;
  var inVPre = false;
  var inPre = false;
  var warned = false;

  function warnOnce (msg) {
    if (!warned) {
      warned = true;
      warn$2(msg);
    }
  }

  function endPre (element) {
    // check pre state
    if (element.pre) {
      inVPre = false;
    }
    if (platformIsPreTag(element.tag)) {
      inPre = false;
    }
  }

  parseHTML(template, {
    warn: warn$2,
    expectHTML: options.expectHTML,
    isUnaryTag: options.isUnaryTag,
    canBeLeftOpenTag: options.canBeLeftOpenTag,
    shouldDecodeNewlines: options.shouldDecodeNewlines,
    start: function start (tag, attrs, unary) {
      // check namespace.
      // inherit parent ns if there is one
      var ns = (currentParent && currentParent.ns) || platformGetTagNamespace(tag);

      // handle IE svg bug
      /* istanbul ignore if */
      if (isIE && ns === 'svg') {
        attrs = guardIESVGBug(attrs);
      }

      var element = {
        type: 1,
        tag: tag,
        attrsList: attrs,
        attrsMap: makeAttrsMap(attrs),
        parent: currentParent,
        children: []
      };
      if (ns) {
        element.ns = ns;
      }

      if (isForbiddenTag(element) && !isServerRendering()) {
        element.forbidden = true;
        "development" !== 'production' && warn$2(
          'Templates should only be responsible for mapping the state to the ' +
          'UI. Avoid placing tags with side-effects in your templates, such as ' +
          "<" + tag + ">" + ', as they will not be parsed.'
        );
      }

      // apply pre-transforms
      for (var i = 0; i < preTransforms.length; i++) {
        preTransforms[i](element, options);
      }

      if (!inVPre) {
        processPre(element);
        if (element.pre) {
          inVPre = true;
        }
      }
      if (platformIsPreTag(element.tag)) {
        inPre = true;
      }
      if (inVPre) {
        processRawAttrs(element);
      } else {
        processFor(element);
        processIf(element);
        processOnce(element);
        processKey(element);

        // determine whether this is a plain element after
        // removing structural attributes
        element.plain = !element.key && !attrs.length;

        processRef(element);
        processSlot(element);
        processComponent(element);
        for (var i$1 = 0; i$1 < transforms.length; i$1++) {
          transforms[i$1](element, options);
        }
        processAttrs(element);
      }

      function checkRootConstraints (el) {
        if (true) {
          if (el.tag === 'slot' || el.tag === 'template') {
            warnOnce(
              "Cannot use <" + (el.tag) + "> as component root element because it may " +
              'contain multiple nodes.'
            );
          }
          if (el.attrsMap.hasOwnProperty('v-for')) {
            warnOnce(
              'Cannot use v-for on stateful component root element because ' +
              'it renders multiple elements.'
            );
          }
        }
      }

      // tree management
      if (!root) {
        root = element;
        checkRootConstraints(root);
      } else if (!stack.length) {
        // allow root elements with v-if, v-else-if and v-else
        if (root.if && (element.elseif || element.else)) {
          checkRootConstraints(element);
          addIfCondition(root, {
            exp: element.elseif,
            block: element
          });
        } else if (true) {
          warnOnce(
            "Component template should contain exactly one root element. " +
            "If you are using v-if on multiple elements, " +
            "use v-else-if to chain them instead."
          );
        }
      }
      if (currentParent && !element.forbidden) {
        if (element.elseif || element.else) {
          processIfConditions(element, currentParent);
        } else if (element.slotScope) { // scoped slot
          currentParent.plain = false;
          var name = element.slotTarget || '"default"';(currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;
        } else {
          currentParent.children.push(element);
          element.parent = currentParent;
        }
      }
      if (!unary) {
        currentParent = element;
        stack.push(element);
      } else {
        endPre(element);
      }
      // apply post-transforms
      for (var i$2 = 0; i$2 < postTransforms.length; i$2++) {
        postTransforms[i$2](element, options);
      }
    },

    end: function end () {
      // remove trailing whitespace
      var element = stack[stack.length - 1];
      var lastNode = element.children[element.children.length - 1];
      if (lastNode && lastNode.type === 3 && lastNode.text === ' ' && !inPre) {
        element.children.pop();
      }
      // pop stack
      stack.length -= 1;
      currentParent = stack[stack.length - 1];
      endPre(element);
    },

    chars: function chars (text) {
      if (!currentParent) {
        if (true) {
          if (text === template) {
            warnOnce(
              'Component template requires a root element, rather than just text.'
            );
          } else if ((text = text.trim())) {
            warnOnce(
              ("text \"" + text + "\" outside root element will be ignored.")
            );
          }
        }
        return
      }
      // IE textarea placeholder bug
      /* istanbul ignore if */
      if (isIE &&
        currentParent.tag === 'textarea' &&
        currentParent.attrsMap.placeholder === text
      ) {
        return
      }
      var children = currentParent.children;
      text = inPre || text.trim()
        ? isTextTag(currentParent) ? text : decodeHTMLCached(text)
        // only preserve whitespace if its not right after a starting tag
        : preserveWhitespace && children.length ? ' ' : '';
      if (text) {
        var expression;
        if (!inVPre && text !== ' ' && (expression = parseText(text, delimiters))) {
          children.push({
            type: 2,
            expression: expression,
            text: text
          });
        } else if (text !== ' ' || !children.length || children[children.length - 1].text !== ' ') {
          children.push({
            type: 3,
            text: text
          });
        }
      }
    }
  });
  return root
}

function processPre (el) {
  if (getAndRemoveAttr(el, 'v-pre') != null) {
    el.pre = true;
  }
}

function processRawAttrs (el) {
  var l = el.attrsList.length;
  if (l) {
    var attrs = el.attrs = new Array(l);
    for (var i = 0; i < l; i++) {
      attrs[i] = {
        name: el.attrsList[i].name,
        value: JSON.stringify(el.attrsList[i].value)
      };
    }
  } else if (!el.pre) {
    // non root node in pre blocks with no attributes
    el.plain = true;
  }
}

function processKey (el) {
  var exp = getBindingAttr(el, 'key');
  if (exp) {
    if ("development" !== 'production' && el.tag === 'template') {
      warn$2("<template> cannot be keyed. Place the key on real elements instead.");
    }
    el.key = exp;
  }
}

function processRef (el) {
  var ref = getBindingAttr(el, 'ref');
  if (ref) {
    el.ref = ref;
    el.refInFor = checkInFor(el);
  }
}

function processFor (el) {
  var exp;
  if ((exp = getAndRemoveAttr(el, 'v-for'))) {
    var inMatch = exp.match(forAliasRE);
    if (!inMatch) {
      "development" !== 'production' && warn$2(
        ("Invalid v-for expression: " + exp)
      );
      return
    }
    el.for = inMatch[2].trim();
    var alias = inMatch[1].trim();
    var iteratorMatch = alias.match(forIteratorRE);
    if (iteratorMatch) {
      el.alias = iteratorMatch[1].trim();
      el.iterator1 = iteratorMatch[2].trim();
      if (iteratorMatch[3]) {
        el.iterator2 = iteratorMatch[3].trim();
      }
    } else {
      el.alias = alias;
    }
  }
}

function processIf (el) {
  var exp = getAndRemoveAttr(el, 'v-if');
  if (exp) {
    el.if = exp;
    addIfCondition(el, {
      exp: exp,
      block: el
    });
  } else {
    if (getAndRemoveAttr(el, 'v-else') != null) {
      el.else = true;
    }
    var elseif = getAndRemoveAttr(el, 'v-else-if');
    if (elseif) {
      el.elseif = elseif;
    }
  }
}

function processIfConditions (el, parent) {
  var prev = findPrevElement(parent.children);
  if (prev && prev.if) {
    addIfCondition(prev, {
      exp: el.elseif,
      block: el
    });
  } else if (true) {
    warn$2(
      "v-" + (el.elseif ? ('else-if="' + el.elseif + '"') : 'else') + " " +
      "used on element <" + (el.tag) + "> without corresponding v-if."
    );
  }
}

function findPrevElement (children) {
  var i = children.length;
  while (i--) {
    if (children[i].type === 1) {
      return children[i]
    } else {
      if ("development" !== 'production' && children[i].text !== ' ') {
        warn$2(
          "text \"" + (children[i].text.trim()) + "\" between v-if and v-else(-if) " +
          "will be ignored."
        );
      }
      children.pop();
    }
  }
}

function addIfCondition (el, condition) {
  if (!el.ifConditions) {
    el.ifConditions = [];
  }
  el.ifConditions.push(condition);
}

function processOnce (el) {
  var once$$1 = getAndRemoveAttr(el, 'v-once');
  if (once$$1 != null) {
    el.once = true;
  }
}

function processSlot (el) {
  if (el.tag === 'slot') {
    el.slotName = getBindingAttr(el, 'name');
    if ("development" !== 'production' && el.key) {
      warn$2(
        "`key` does not work on <slot> because slots are abstract outlets " +
        "and can possibly expand into multiple elements. " +
        "Use the key on a wrapping element instead."
      );
    }
  } else {
    var slotTarget = getBindingAttr(el, 'slot');
    if (slotTarget) {
      el.slotTarget = slotTarget === '""' ? '"default"' : slotTarget;
    }
    if (el.tag === 'template') {
      el.slotScope = getAndRemoveAttr(el, 'scope');
    }
  }
}

function processComponent (el) {
  var binding;
  if ((binding = getBindingAttr(el, 'is'))) {
    el.component = binding;
  }
  if (getAndRemoveAttr(el, 'inline-template') != null) {
    el.inlineTemplate = true;
  }
}

function processAttrs (el) {
  var list = el.attrsList;
  var i, l, name, rawName, value, modifiers, isProp;
  for (i = 0, l = list.length; i < l; i++) {
    name = rawName = list[i].name;
    value = list[i].value;
    if (dirRE.test(name)) {
      // mark element as dynamic
      el.hasBindings = true;
      // modifiers
      modifiers = parseModifiers(name);
      if (modifiers) {
        name = name.replace(modifierRE, '');
      }
      if (bindRE.test(name)) { // v-bind
        name = name.replace(bindRE, '');
        value = parseFilters(value);
        isProp = false;
        if (modifiers) {
          if (modifiers.prop) {
            isProp = true;
            name = camelize(name);
            if (name === 'innerHtml') { name = 'innerHTML'; }
          }
          if (modifiers.camel) {
            name = camelize(name);
          }
          if (modifiers.sync) {
            addHandler(
              el,
              ("update:" + (camelize(name))),
              genAssignmentCode(value, "$event")
            );
          }
        }
        if (isProp || platformMustUseProp(el.tag, el.attrsMap.type, name)) {
          addProp(el, name, value);
        } else {
          addAttr(el, name, value);
        }
      } else if (onRE.test(name)) { // v-on
        name = name.replace(onRE, '');
        addHandler(el, name, value, modifiers, false, warn$2);
      } else { // normal directives
        name = name.replace(dirRE, '');
        // parse arg
        var argMatch = name.match(argRE);
        var arg = argMatch && argMatch[1];
        if (arg) {
          name = name.slice(0, -(arg.length + 1));
        }
        addDirective(el, name, rawName, value, arg, modifiers);
        if ("development" !== 'production' && name === 'model') {
          checkForAliasModel(el, value);
        }
      }
    } else {
      // literal attribute
      if (true) {
        var expression = parseText(value, delimiters);
        if (expression) {
          warn$2(
            name + "=\"" + value + "\": " +
            'Interpolation inside attributes has been removed. ' +
            'Use v-bind or the colon shorthand instead. For example, ' +
            'instead of <div id="{{ val }}">, use <div :id="val">.'
          );
        }
      }
      addAttr(el, name, JSON.stringify(value));
    }
  }
}

function checkInFor (el) {
  var parent = el;
  while (parent) {
    if (parent.for !== undefined) {
      return true
    }
    parent = parent.parent;
  }
  return false
}

function parseModifiers (name) {
  var match = name.match(modifierRE);
  if (match) {
    var ret = {};
    match.forEach(function (m) { ret[m.slice(1)] = true; });
    return ret
  }
}

function makeAttrsMap (attrs) {
  var map = {};
  for (var i = 0, l = attrs.length; i < l; i++) {
    if (
      "development" !== 'production' &&
      map[attrs[i].name] && !isIE && !isEdge
    ) {
      warn$2('duplicate attribute: ' + attrs[i].name);
    }
    map[attrs[i].name] = attrs[i].value;
  }
  return map
}

// for script (e.g. type="x/template") or style, do not decode content
function isTextTag (el) {
  return el.tag === 'script' || el.tag === 'style'
}

function isForbiddenTag (el) {
  return (
    el.tag === 'style' ||
    (el.tag === 'script' && (
      !el.attrsMap.type ||
      el.attrsMap.type === 'text/javascript'
    ))
  )
}

var ieNSBug = /^xmlns:NS\d+/;
var ieNSPrefix = /^NS\d+:/;

/* istanbul ignore next */
function guardIESVGBug (attrs) {
  var res = [];
  for (var i = 0; i < attrs.length; i++) {
    var attr = attrs[i];
    if (!ieNSBug.test(attr.name)) {
      attr.name = attr.name.replace(ieNSPrefix, '');
      res.push(attr);
    }
  }
  return res
}

function checkForAliasModel (el, value) {
  var _el = el;
  while (_el) {
    if (_el.for && _el.alias === value) {
      warn$2(
        "<" + (el.tag) + " v-model=\"" + value + "\">: " +
        "You are binding v-model directly to a v-for iteration alias. " +
        "This will not be able to modify the v-for source array because " +
        "writing to the alias is like modifying a function local variable. " +
        "Consider using an array of objects and use v-model on an object property instead."
      );
    }
    _el = _el.parent;
  }
}

/*  */

var isStaticKey;
var isPlatformReservedTag;

var genStaticKeysCached = cached(genStaticKeys$1);

/**
 * Goal of the optimizer: walk the generated template AST tree
 * and detect sub-trees that are purely static, i.e. parts of
 * the DOM that never needs to change.
 *
 * Once we detect these sub-trees, we can:
 *
 * 1. Hoist them into constants, so that we no longer need to
 *    create fresh nodes for them on each re-render;
 * 2. Completely skip them in the patching process.
 */
function optimize (root, options) {
  if (!root) { return }
  isStaticKey = genStaticKeysCached(options.staticKeys || '');
  isPlatformReservedTag = options.isReservedTag || no;
  // first pass: mark all non-static nodes.
  markStatic$1(root);
  // second pass: mark static roots.
  markStaticRoots(root, false);
}

function genStaticKeys$1 (keys) {
  return makeMap(
    'type,tag,attrsList,attrsMap,plain,parent,children,attrs' +
    (keys ? ',' + keys : '')
  )
}

function markStatic$1 (node) {
  node.static = isStatic(node);
  if (node.type === 1) {
    // do not make component slot content static. this avoids
    // 1. components not able to mutate slot nodes
    // 2. static slot content fails for hot-reloading
    if (
      !isPlatformReservedTag(node.tag) &&
      node.tag !== 'slot' &&
      node.attrsMap['inline-template'] == null
    ) {
      return
    }
    for (var i = 0, l = node.children.length; i < l; i++) {
      var child = node.children[i];
      markStatic$1(child);
      if (!child.static) {
        node.static = false;
      }
    }
  }
}

function markStaticRoots (node, isInFor) {
  if (node.type === 1) {
    if (node.static || node.once) {
      node.staticInFor = isInFor;
    }
    // For a node to qualify as a static root, it should have children that
    // are not just static text. Otherwise the cost of hoisting out will
    // outweigh the benefits and it's better off to just always render it fresh.
    if (node.static && node.children.length && !(
      node.children.length === 1 &&
      node.children[0].type === 3
    )) {
      node.staticRoot = true;
      return
    } else {
      node.staticRoot = false;
    }
    if (node.children) {
      for (var i = 0, l = node.children.length; i < l; i++) {
        markStaticRoots(node.children[i], isInFor || !!node.for);
      }
    }
    if (node.ifConditions) {
      walkThroughConditionsBlocks(node.ifConditions, isInFor);
    }
  }
}

function walkThroughConditionsBlocks (conditionBlocks, isInFor) {
  for (var i = 1, len = conditionBlocks.length; i < len; i++) {
    markStaticRoots(conditionBlocks[i].block, isInFor);
  }
}

function isStatic (node) {
  if (node.type === 2) { // expression
    return false
  }
  if (node.type === 3) { // text
    return true
  }
  return !!(node.pre || (
    !node.hasBindings && // no dynamic bindings
    !node.if && !node.for && // not v-if or v-for or v-else
    !isBuiltInTag(node.tag) && // not a built-in
    isPlatformReservedTag(node.tag) && // not a component
    !isDirectChildOfTemplateFor(node) &&
    Object.keys(node).every(isStaticKey)
  ))
}

function isDirectChildOfTemplateFor (node) {
  while (node.parent) {
    node = node.parent;
    if (node.tag !== 'template') {
      return false
    }
    if (node.for) {
      return true
    }
  }
  return false
}

/*  */

var fnExpRE = /^\s*([\w$_]+|\([^)]*?\))\s*=>|^function\s*\(/;
var simplePathRE = /^\s*[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['.*?']|\[".*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*\s*$/;

// keyCode aliases
var keyCodes = {
  esc: 27,
  tab: 9,
  enter: 13,
  space: 32,
  up: 38,
  left: 37,
  right: 39,
  down: 40,
  'delete': [8, 46]
};

// #4868: modifiers that prevent the execution of the listener
// need to explicitly return null so that we can determine whether to remove
// the listener for .once
var genGuard = function (condition) { return ("if(" + condition + ")return null;"); };

var modifierCode = {
  stop: '$event.stopPropagation();',
  prevent: '$event.preventDefault();',
  self: genGuard("$event.target !== $event.currentTarget"),
  ctrl: genGuard("!$event.ctrlKey"),
  shift: genGuard("!$event.shiftKey"),
  alt: genGuard("!$event.altKey"),
  meta: genGuard("!$event.metaKey"),
  left: genGuard("'button' in $event && $event.button !== 0"),
  middle: genGuard("'button' in $event && $event.button !== 1"),
  right: genGuard("'button' in $event && $event.button !== 2")
};

function genHandlers (
  events,
  isNative,
  warn
) {
  var res = isNative ? 'nativeOn:{' : 'on:{';
  for (var name in events) {
    var handler = events[name];
    // #5330: warn click.right, since right clicks do not actually fire click events.
    if ("development" !== 'production' &&
      name === 'click' &&
      handler && handler.modifiers && handler.modifiers.right
    ) {
      warn(
        "Use \"contextmenu\" instead of \"click.right\" since right clicks " +
        "do not actually fire \"click\" events."
      );
    }
    res += "\"" + name + "\":" + (genHandler(name, handler)) + ",";
  }
  return res.slice(0, -1) + '}'
}

function genHandler (
  name,
  handler
) {
  if (!handler) {
    return 'function(){}'
  }

  if (Array.isArray(handler)) {
    return ("[" + (handler.map(function (handler) { return genHandler(name, handler); }).join(',')) + "]")
  }

  var isMethodPath = simplePathRE.test(handler.value);
  var isFunctionExpression = fnExpRE.test(handler.value);

  if (!handler.modifiers) {
    return isMethodPath || isFunctionExpression
      ? handler.value
      : ("function($event){" + (handler.value) + "}") // inline statement
  } else {
    var code = '';
    var genModifierCode = '';
    var keys = [];
    for (var key in handler.modifiers) {
      if (modifierCode[key]) {
        genModifierCode += modifierCode[key];
        // left/right
        if (keyCodes[key]) {
          keys.push(key);
        }
      } else {
        keys.push(key);
      }
    }
    if (keys.length) {
      code += genKeyFilter(keys);
    }
    // Make sure modifiers like prevent and stop get executed after key filtering
    if (genModifierCode) {
      code += genModifierCode;
    }
    var handlerCode = isMethodPath
      ? handler.value + '($event)'
      : isFunctionExpression
        ? ("(" + (handler.value) + ")($event)")
        : handler.value;
    return ("function($event){" + code + handlerCode + "}")
  }
}

function genKeyFilter (keys) {
  return ("if(!('button' in $event)&&" + (keys.map(genFilterCode).join('&&')) + ")return null;")
}

function genFilterCode (key) {
  var keyVal = parseInt(key, 10);
  if (keyVal) {
    return ("$event.keyCode!==" + keyVal)
  }
  var alias = keyCodes[key];
  return ("_k($event.keyCode," + (JSON.stringify(key)) + (alias ? ',' + JSON.stringify(alias) : '') + ")")
}

/*  */

function bind$1 (el, dir) {
  el.wrapData = function (code) {
    return ("_b(" + code + ",'" + (el.tag) + "'," + (dir.value) + (dir.modifiers && dir.modifiers.prop ? ',true' : '') + ")")
  };
}

/*  */

var baseDirectives = {
  bind: bind$1,
  cloak: noop
};

/*  */

// configurable state
var warn$3;
var transforms$1;
var dataGenFns;
var platformDirectives$1;
var isPlatformReservedTag$1;
var staticRenderFns;
var onceCount;
var currentOptions;

function generate (
  ast,
  options
) {
  // save previous staticRenderFns so generate calls can be nested
  var prevStaticRenderFns = staticRenderFns;
  var currentStaticRenderFns = staticRenderFns = [];
  var prevOnceCount = onceCount;
  onceCount = 0;
  currentOptions = options;
  warn$3 = options.warn || baseWarn;
  transforms$1 = pluckModuleFunction(options.modules, 'transformCode');
  dataGenFns = pluckModuleFunction(options.modules, 'genData');
  platformDirectives$1 = options.directives || {};
  isPlatformReservedTag$1 = options.isReservedTag || no;
  var code = ast ? genElement(ast) : '_c("div")';
  staticRenderFns = prevStaticRenderFns;
  onceCount = prevOnceCount;
  return {
    render: ("with(this){return " + code + "}"),
    staticRenderFns: currentStaticRenderFns
  }
}

function genElement (el) {
  if (el.staticRoot && !el.staticProcessed) {
    return genStatic(el)
  } else if (el.once && !el.onceProcessed) {
    return genOnce(el)
  } else if (el.for && !el.forProcessed) {
    return genFor(el)
  } else if (el.if && !el.ifProcessed) {
    return genIf(el)
  } else if (el.tag === 'template' && !el.slotTarget) {
    return genChildren(el) || 'void 0'
  } else if (el.tag === 'slot') {
    return genSlot(el)
  } else {
    // component or element
    var code;
    if (el.component) {
      code = genComponent(el.component, el);
    } else {
      var data = el.plain ? undefined : genData(el);

      var children = el.inlineTemplate ? null : genChildren(el, true);
      code = "_c('" + (el.tag) + "'" + (data ? ("," + data) : '') + (children ? ("," + children) : '') + ")";
    }
    // module transforms
    for (var i = 0; i < transforms$1.length; i++) {
      code = transforms$1[i](el, code);
    }
    return code
  }
}

// hoist static sub-trees out
function genStatic (el) {
  el.staticProcessed = true;
  staticRenderFns.push(("with(this){return " + (genElement(el)) + "}"));
  return ("_m(" + (staticRenderFns.length - 1) + (el.staticInFor ? ',true' : '') + ")")
}

// v-once
function genOnce (el) {
  el.onceProcessed = true;
  if (el.if && !el.ifProcessed) {
    return genIf(el)
  } else if (el.staticInFor) {
    var key = '';
    var parent = el.parent;
    while (parent) {
      if (parent.for) {
        key = parent.key;
        break
      }
      parent = parent.parent;
    }
    if (!key) {
      "development" !== 'production' && warn$3(
        "v-once can only be used inside v-for that is keyed. "
      );
      return genElement(el)
    }
    return ("_o(" + (genElement(el)) + "," + (onceCount++) + (key ? ("," + key) : "") + ")")
  } else {
    return genStatic(el)
  }
}

function genIf (el) {
  el.ifProcessed = true; // avoid recursion
  return genIfConditions(el.ifConditions.slice())
}

function genIfConditions (conditions) {
  if (!conditions.length) {
    return '_e()'
  }

  var condition = conditions.shift();
  if (condition.exp) {
    return ("(" + (condition.exp) + ")?" + (genTernaryExp(condition.block)) + ":" + (genIfConditions(conditions)))
  } else {
    return ("" + (genTernaryExp(condition.block)))
  }

  // v-if with v-once should generate code like (a)?_m(0):_m(1)
  function genTernaryExp (el) {
    return el.once ? genOnce(el) : genElement(el)
  }
}

function genFor (el) {
  var exp = el.for;
  var alias = el.alias;
  var iterator1 = el.iterator1 ? ("," + (el.iterator1)) : '';
  var iterator2 = el.iterator2 ? ("," + (el.iterator2)) : '';

  if (
    "development" !== 'production' &&
    maybeComponent(el) && el.tag !== 'slot' && el.tag !== 'template' && !el.key
  ) {
    warn$3(
      "<" + (el.tag) + " v-for=\"" + alias + " in " + exp + "\">: component lists rendered with " +
      "v-for should have explicit keys. " +
      "See https://vuejs.org/guide/list.html#key for more info.",
      true /* tip */
    );
  }

  el.forProcessed = true; // avoid recursion
  return "_l((" + exp + ")," +
    "function(" + alias + iterator1 + iterator2 + "){" +
      "return " + (genElement(el)) +
    '})'
}

function genData (el) {
  var data = '{';

  // directives first.
  // directives may mutate the el's other properties before they are generated.
  var dirs = genDirectives(el);
  if (dirs) { data += dirs + ','; }

  // key
  if (el.key) {
    data += "key:" + (el.key) + ",";
  }
  // ref
  if (el.ref) {
    data += "ref:" + (el.ref) + ",";
  }
  if (el.refInFor) {
    data += "refInFor:true,";
  }
  // pre
  if (el.pre) {
    data += "pre:true,";
  }
  // record original tag name for components using "is" attribute
  if (el.component) {
    data += "tag:\"" + (el.tag) + "\",";
  }
  // module data generation functions
  for (var i = 0; i < dataGenFns.length; i++) {
    data += dataGenFns[i](el);
  }
  // attributes
  if (el.attrs) {
    data += "attrs:{" + (genProps(el.attrs)) + "},";
  }
  // DOM props
  if (el.props) {
    data += "domProps:{" + (genProps(el.props)) + "},";
  }
  // event handlers
  if (el.events) {
    data += (genHandlers(el.events, false, warn$3)) + ",";
  }
  if (el.nativeEvents) {
    data += (genHandlers(el.nativeEvents, true, warn$3)) + ",";
  }
  // slot target
  if (el.slotTarget) {
    data += "slot:" + (el.slotTarget) + ",";
  }
  // scoped slots
  if (el.scopedSlots) {
    data += (genScopedSlots(el.scopedSlots)) + ",";
  }
  // component v-model
  if (el.model) {
    data += "model:{value:" + (el.model.value) + ",callback:" + (el.model.callback) + ",expression:" + (el.model.expression) + "},";
  }
  // inline-template
  if (el.inlineTemplate) {
    var inlineTemplate = genInlineTemplate(el);
    if (inlineTemplate) {
      data += inlineTemplate + ",";
    }
  }
  data = data.replace(/,$/, '') + '}';
  // v-bind data wrap
  if (el.wrapData) {
    data = el.wrapData(data);
  }
  return data
}

function genDirectives (el) {
  var dirs = el.directives;
  if (!dirs) { return }
  var res = 'directives:[';
  var hasRuntime = false;
  var i, l, dir, needRuntime;
  for (i = 0, l = dirs.length; i < l; i++) {
    dir = dirs[i];
    needRuntime = true;
    var gen = platformDirectives$1[dir.name] || baseDirectives[dir.name];
    if (gen) {
      // compile-time directive that manipulates AST.
      // returns true if it also needs a runtime counterpart.
      needRuntime = !!gen(el, dir, warn$3);
    }
    if (needRuntime) {
      hasRuntime = true;
      res += "{name:\"" + (dir.name) + "\",rawName:\"" + (dir.rawName) + "\"" + (dir.value ? (",value:(" + (dir.value) + "),expression:" + (JSON.stringify(dir.value))) : '') + (dir.arg ? (",arg:\"" + (dir.arg) + "\"") : '') + (dir.modifiers ? (",modifiers:" + (JSON.stringify(dir.modifiers))) : '') + "},";
    }
  }
  if (hasRuntime) {
    return res.slice(0, -1) + ']'
  }
}

function genInlineTemplate (el) {
  var ast = el.children[0];
  if ("development" !== 'production' && (
    el.children.length > 1 || ast.type !== 1
  )) {
    warn$3('Inline-template components must have exactly one child element.');
  }
  if (ast.type === 1) {
    var inlineRenderFns = generate(ast, currentOptions);
    return ("inlineTemplate:{render:function(){" + (inlineRenderFns.render) + "},staticRenderFns:[" + (inlineRenderFns.staticRenderFns.map(function (code) { return ("function(){" + code + "}"); }).join(',')) + "]}")
  }
}

function genScopedSlots (slots) {
  return ("scopedSlots:_u([" + (Object.keys(slots).map(function (key) { return genScopedSlot(key, slots[key]); }).join(',')) + "])")
}

function genScopedSlot (key, el) {
  if (el.for && !el.forProcessed) {
    return genForScopedSlot(key, el)
  }
  return "{key:" + key + ",fn:function(" + (String(el.attrsMap.scope)) + "){" +
    "return " + (el.tag === 'template'
      ? genChildren(el) || 'void 0'
      : genElement(el)) + "}}"
}

function genForScopedSlot (key, el) {
  var exp = el.for;
  var alias = el.alias;
  var iterator1 = el.iterator1 ? ("," + (el.iterator1)) : '';
  var iterator2 = el.iterator2 ? ("," + (el.iterator2)) : '';
  el.forProcessed = true; // avoid recursion
  return "_l((" + exp + ")," +
    "function(" + alias + iterator1 + iterator2 + "){" +
      "return " + (genScopedSlot(key, el)) +
    '})'
}

function genChildren (el, checkSkip) {
  var children = el.children;
  if (children.length) {
    var el$1 = children[0];
    // optimize single v-for
    if (children.length === 1 &&
      el$1.for &&
      el$1.tag !== 'template' &&
      el$1.tag !== 'slot'
    ) {
      return genElement(el$1)
    }
    var normalizationType = checkSkip ? getNormalizationType(children) : 0;
    return ("[" + (children.map(genNode).join(',')) + "]" + (normalizationType ? ("," + normalizationType) : ''))
  }
}

// determine the normalization needed for the children array.
// 0: no normalization needed
// 1: simple normalization needed (possible 1-level deep nested array)
// 2: full normalization needed
function getNormalizationType (children) {
  var res = 0;
  for (var i = 0; i < children.length; i++) {
    var el = children[i];
    if (el.type !== 1) {
      continue
    }
    if (needsNormalization(el) ||
        (el.ifConditions && el.ifConditions.some(function (c) { return needsNormalization(c.block); }))) {
      res = 2;
      break
    }
    if (maybeComponent(el) ||
        (el.ifConditions && el.ifConditions.some(function (c) { return maybeComponent(c.block); }))) {
      res = 1;
    }
  }
  return res
}

function needsNormalization (el) {
  return el.for !== undefined || el.tag === 'template' || el.tag === 'slot'
}

function maybeComponent (el) {
  return !isPlatformReservedTag$1(el.tag)
}

function genNode (node) {
  if (node.type === 1) {
    return genElement(node)
  } else {
    return genText(node)
  }
}

function genText (text) {
  return ("_v(" + (text.type === 2
    ? text.expression // no need for () because already wrapped in _s()
    : transformSpecialNewlines(JSON.stringify(text.text))) + ")")
}

function genSlot (el) {
  var slotName = el.slotName || '"default"';
  var children = genChildren(el);
  var res = "_t(" + slotName + (children ? ("," + children) : '');
  var attrs = el.attrs && ("{" + (el.attrs.map(function (a) { return ((camelize(a.name)) + ":" + (a.value)); }).join(',')) + "}");
  var bind$$1 = el.attrsMap['v-bind'];
  if ((attrs || bind$$1) && !children) {
    res += ",null";
  }
  if (attrs) {
    res += "," + attrs;
  }
  if (bind$$1) {
    res += (attrs ? '' : ',null') + "," + bind$$1;
  }
  return res + ')'
}

// componentName is el.component, take it as argument to shun flow's pessimistic refinement
function genComponent (componentName, el) {
  var children = el.inlineTemplate ? null : genChildren(el, true);
  return ("_c(" + componentName + "," + (genData(el)) + (children ? ("," + children) : '') + ")")
}

function genProps (props) {
  var res = '';
  for (var i = 0; i < props.length; i++) {
    var prop = props[i];
    res += "\"" + (prop.name) + "\":" + (transformSpecialNewlines(prop.value)) + ",";
  }
  return res.slice(0, -1)
}

// #3895, #4268
function transformSpecialNewlines (text) {
  return text
    .replace(/\u2028/g, '\\u2028')
    .replace(/\u2029/g, '\\u2029')
}

/*  */

// these keywords should not appear inside expressions, but operators like
// typeof, instanceof and in are allowed
var prohibitedKeywordRE = new RegExp('\\b' + (
  'do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' +
  'super,throw,while,yield,delete,export,import,return,switch,default,' +
  'extends,finally,continue,debugger,function,arguments'
).split(',').join('\\b|\\b') + '\\b');

// these unary operators should not be used as property/method names
var unaryOperatorsRE = new RegExp('\\b' + (
  'delete,typeof,void'
).split(',').join('\\s*\\([^\\)]*\\)|\\b') + '\\s*\\([^\\)]*\\)');

// check valid identifier for v-for
var identRE = /[A-Za-z_$][\w$]*/;

// strip strings in expressions
var stripStringRE = /'(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`/g;

// detect problematic expressions in a template
function detectErrors (ast) {
  var errors = [];
  if (ast) {
    checkNode(ast, errors);
  }
  return errors
}

function checkNode (node, errors) {
  if (node.type === 1) {
    for (var name in node.attrsMap) {
      if (dirRE.test(name)) {
        var value = node.attrsMap[name];
        if (value) {
          if (name === 'v-for') {
            checkFor(node, ("v-for=\"" + value + "\""), errors);
          } else if (onRE.test(name)) {
            checkEvent(value, (name + "=\"" + value + "\""), errors);
          } else {
            checkExpression(value, (name + "=\"" + value + "\""), errors);
          }
        }
      }
    }
    if (node.children) {
      for (var i = 0; i < node.children.length; i++) {
        checkNode(node.children[i], errors);
      }
    }
  } else if (node.type === 2) {
    checkExpression(node.expression, node.text, errors);
  }
}

function checkEvent (exp, text, errors) {
  var stipped = exp.replace(stripStringRE, '');
  var keywordMatch = stipped.match(unaryOperatorsRE);
  if (keywordMatch && stipped.charAt(keywordMatch.index - 1) !== '$') {
    errors.push(
      "avoid using JavaScript unary operator as property name: " +
      "\"" + (keywordMatch[0]) + "\" in expression " + (text.trim())
    );
  }
  checkExpression(exp, text, errors);
}

function checkFor (node, text, errors) {
  checkExpression(node.for || '', text, errors);
  checkIdentifier(node.alias, 'v-for alias', text, errors);
  checkIdentifier(node.iterator1, 'v-for iterator', text, errors);
  checkIdentifier(node.iterator2, 'v-for iterator', text, errors);
}

function checkIdentifier (ident, type, text, errors) {
  if (typeof ident === 'string' && !identRE.test(ident)) {
    errors.push(("invalid " + type + " \"" + ident + "\" in expression: " + (text.trim())));
  }
}

function checkExpression (exp, text, errors) {
  try {
    new Function(("return " + exp));
  } catch (e) {
    var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);
    if (keywordMatch) {
      errors.push(
        "avoid using JavaScript keyword as property name: " +
        "\"" + (keywordMatch[0]) + "\" in expression " + (text.trim())
      );
    } else {
      errors.push(("invalid expression: " + (text.trim())));
    }
  }
}

/*  */

function baseCompile (
  template,
  options
) {
  var ast = parse(template.trim(), options);
  optimize(ast, options);
  var code = generate(ast, options);
  return {
    ast: ast,
    render: code.render,
    staticRenderFns: code.staticRenderFns
  }
}

function makeFunction (code, errors) {
  try {
    return new Function(code)
  } catch (err) {
    errors.push({ err: err, code: code });
    return noop
  }
}

function createCompiler (baseOptions) {
  var functionCompileCache = Object.create(null);

  function compile (
    template,
    options
  ) {
    var finalOptions = Object.create(baseOptions);
    var errors = [];
    var tips = [];
    finalOptions.warn = function (msg, tip$$1) {
      (tip$$1 ? tips : errors).push(msg);
    };

    if (options) {
      // merge custom modules
      if (options.modules) {
        finalOptions.modules = (baseOptions.modules || []).concat(options.modules);
      }
      // merge custom directives
      if (options.directives) {
        finalOptions.directives = extend(
          Object.create(baseOptions.directives),
          options.directives
        );
      }
      // copy other options
      for (var key in options) {
        if (key !== 'modules' && key !== 'directives') {
          finalOptions[key] = options[key];
        }
      }
    }

    var compiled = baseCompile(template, finalOptions);
    if (true) {
      errors.push.apply(errors, detectErrors(compiled.ast));
    }
    compiled.errors = errors;
    compiled.tips = tips;
    return compiled
  }

  function compileToFunctions (
    template,
    options,
    vm
  ) {
    options = options || {};

    /* istanbul ignore if */
    if (true) {
      // detect possible CSP restriction
      try {
        new Function('return 1');
      } catch (e) {
        if (e.toString().match(/unsafe-eval|CSP/)) {
          warn(
            'It seems you are using the standalone build of Vue.js in an ' +
            'environment with Content Security Policy that prohibits unsafe-eval. ' +
            'The template compiler cannot work in this environment. Consider ' +
            'relaxing the policy to allow unsafe-eval or pre-compiling your ' +
            'templates into render functions.'
          );
        }
      }
    }

    // check cache
    var key = options.delimiters
      ? String(options.delimiters) + template
      : template;
    if (functionCompileCache[key]) {
      return functionCompileCache[key]
    }

    // compile
    var compiled = compile(template, options);

    // check compilation errors/tips
    if (true) {
      if (compiled.errors && compiled.errors.length) {
        warn(
          "Error compiling template:\n\n" + template + "\n\n" +
          compiled.errors.map(function (e) { return ("- " + e); }).join('\n') + '\n',
          vm
        );
      }
      if (compiled.tips && compiled.tips.length) {
        compiled.tips.forEach(function (msg) { return tip(msg, vm); });
      }
    }

    // turn code into functions
    var res = {};
    var fnGenErrors = [];
    res.render = makeFunction(compiled.render, fnGenErrors);
    var l = compiled.staticRenderFns.length;
    res.staticRenderFns = new Array(l);
    for (var i = 0; i < l; i++) {
      res.staticRenderFns[i] = makeFunction(compiled.staticRenderFns[i], fnGenErrors);
    }

    // check function generation errors.
    // this should only happen if there is a bug in the compiler itself.
    // mostly for codegen development use
    /* istanbul ignore if */
    if (true) {
      if ((!compiled.errors || !compiled.errors.length) && fnGenErrors.length) {
        warn(
          "Failed to generate render function:\n\n" +
          fnGenErrors.map(function (ref) {
            var err = ref.err;
            var code = ref.code;

            return ((err.toString()) + " in\n\n" + code + "\n");
        }).join('\n'),
          vm
        );
      }
    }

    return (functionCompileCache[key] = res)
  }

  return {
    compile: compile,
    compileToFunctions: compileToFunctions
  }
}

/*  */

function transformNode (el, options) {
  var warn = options.warn || baseWarn;
  var staticClass = getAndRemoveAttr(el, 'class');
  if ("development" !== 'production' && staticClass) {
    var expression = parseText(staticClass, options.delimiters);
    if (expression) {
      warn(
        "class=\"" + staticClass + "\": " +
        'Interpolation inside attributes has been removed. ' +
        'Use v-bind or the colon shorthand instead. For example, ' +
        'instead of <div class="{{ val }}">, use <div :class="val">.'
      );
    }
  }
  if (staticClass) {
    el.staticClass = JSON.stringify(staticClass);
  }
  var classBinding = getBindingAttr(el, 'class', false /* getStatic */);
  if (classBinding) {
    el.classBinding = classBinding;
  }
}

function genData$1 (el) {
  var data = '';
  if (el.staticClass) {
    data += "staticClass:" + (el.staticClass) + ",";
  }
  if (el.classBinding) {
    data += "class:" + (el.classBinding) + ",";
  }
  return data
}

var klass$1 = {
  staticKeys: ['staticClass'],
  transformNode: transformNode,
  genData: genData$1
};

/*  */

function transformNode$1 (el, options) {
  var warn = options.warn || baseWarn;
  var staticStyle = getAndRemoveAttr(el, 'style');
  if (staticStyle) {
    /* istanbul ignore if */
    if (true) {
      var expression = parseText(staticStyle, options.delimiters);
      if (expression) {
        warn(
          "style=\"" + staticStyle + "\": " +
          'Interpolation inside attributes has been removed. ' +
          'Use v-bind or the colon shorthand instead. For example, ' +
          'instead of <div style="{{ val }}">, use <div :style="val">.'
        );
      }
    }
    el.staticStyle = JSON.stringify(parseStyleText(staticStyle));
  }

  var styleBinding = getBindingAttr(el, 'style', false /* getStatic */);
  if (styleBinding) {
    el.styleBinding = styleBinding;
  }
}

function genData$2 (el) {
  var data = '';
  if (el.staticStyle) {
    data += "staticStyle:" + (el.staticStyle) + ",";
  }
  if (el.styleBinding) {
    data += "style:(" + (el.styleBinding) + "),";
  }
  return data
}

var style$1 = {
  staticKeys: ['staticStyle'],
  transformNode: transformNode$1,
  genData: genData$2
};

var modules$1 = [
  klass$1,
  style$1
];

/*  */

function text (el, dir) {
  if (dir.value) {
    addProp(el, 'textContent', ("_s(" + (dir.value) + ")"));
  }
}

/*  */

function html (el, dir) {
  if (dir.value) {
    addProp(el, 'innerHTML', ("_s(" + (dir.value) + ")"));
  }
}

var directives$1 = {
  model: model,
  text: text,
  html: html
};

/*  */

var baseOptions = {
  expectHTML: true,
  modules: modules$1,
  directives: directives$1,
  isPreTag: isPreTag,
  isUnaryTag: isUnaryTag,
  mustUseProp: mustUseProp,
  canBeLeftOpenTag: canBeLeftOpenTag,
  isReservedTag: isReservedTag,
  getTagNamespace: getTagNamespace,
  staticKeys: genStaticKeys(modules$1)
};

var ref$1 = createCompiler(baseOptions);
var compileToFunctions = ref$1.compileToFunctions;

/*  */

var idToTemplate = cached(function (id) {
  var el = query(id);
  return el && el.innerHTML
});

var mount = Vue$3.prototype.$mount;
Vue$3.prototype.$mount = function (
  el,
  hydrating
) {
  el = el && query(el);

  /* istanbul ignore if */
  if (el === document.body || el === document.documentElement) {
    "development" !== 'production' && warn(
      "Do not mount Vue to <html> or <body> - mount to normal elements instead."
    );
    return this
  }

  var options = this.$options;
  // resolve template/el and convert to render function
  if (!options.render) {
    var template = options.template;
    if (template) {
      if (typeof template === 'string') {
        if (template.charAt(0) === '#') {
          template = idToTemplate(template);
          /* istanbul ignore if */
          if ("development" !== 'production' && !template) {
            warn(
              ("Template element not found or is empty: " + (options.template)),
              this
            );
          }
        }
      } else if (template.nodeType) {
        template = template.innerHTML;
      } else {
        if (true) {
          warn('invalid template option:' + template, this);
        }
        return this
      }
    } else if (el) {
      template = getOuterHTML(el);
    }
    if (template) {
      /* istanbul ignore if */
      if ("development" !== 'production' && config.performance && mark) {
        mark('compile');
      }

      var ref = compileToFunctions(template, {
        shouldDecodeNewlines: shouldDecodeNewlines,
        delimiters: options.delimiters
      }, this);
      var render = ref.render;
      var staticRenderFns = ref.staticRenderFns;
      options.render = render;
      options.staticRenderFns = staticRenderFns;

      /* istanbul ignore if */
      if ("development" !== 'production' && config.performance && mark) {
        mark('compile end');
        measure(((this._name) + " compile"), 'compile', 'compile end');
      }
    }
  }
  return mount.call(this, el, hydrating)
};

/**
 * Get outerHTML of elements, taking care
 * of SVG elements in IE as well.
 */
function getOuterHTML (el) {
  if (el.outerHTML) {
    return el.outerHTML
  } else {
    var container = document.createElement('div');
    container.appendChild(el.cloneNode(true));
    return container.innerHTML
  }
}

Vue$3.compile = compileToFunctions;

module.exports = Vue$3;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(39)))

/***/ }),
/* 116 */
/***/ (function(module, exports) {

module.exports = function(module) {
	if(!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if(!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(40);
module.exports = __webpack_require__(41);


/***/ })
/******/ ]);